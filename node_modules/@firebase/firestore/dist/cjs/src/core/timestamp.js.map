{"version":3,"sources":["../src/core/timestamp.ts"],"names":[],"mappings":"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","file":"timestamp.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '../util/assert';\nimport { primitiveComparator } from '../util/misc';\n\n// A RegExp matching ISO 8601 UTC timestamps with optional fraction.\nconst isoRegExp = new RegExp(/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/);\n\nexport class Timestamp {\n  static now(): Timestamp {\n    return Timestamp.fromEpochMilliseconds(Date.now());\n  }\n\n  static fromDate(date: Date): Timestamp {\n    return Timestamp.fromEpochMilliseconds(date.getTime());\n  }\n\n  static fromEpochMilliseconds(milliseconds: number): Timestamp {\n    const seconds = Math.floor(milliseconds / 1000);\n    const nanos = (milliseconds - seconds * 1000) * 1e6;\n    return new Timestamp(seconds, nanos);\n  }\n\n  static fromISOString(utc: string): Timestamp {\n    // The date string can have higher precision (nanos) than the Date class\n    // (millis), so we do some custom parsing here.\n\n    // Parse the nanos right out of the string.\n    let nanos = 0;\n    const fraction = isoRegExp.exec(utc);\n    assert(!!fraction, 'invalid timestamp: ' + utc);\n    if (fraction![1]) {\n      // Pad the fraction out to 9 digits (nanos).\n      let nanoStr = fraction![1];\n      nanoStr = (nanoStr + '000000000').substr(0, 9);\n      nanos = parseInt(nanoStr, 10);\n    }\n\n    // Parse the date to get the seconds.\n    const date = new Date(utc);\n    const seconds = Math.floor(date.getTime() / 1000);\n\n    return new Timestamp(seconds, nanos);\n  }\n\n  constructor(readonly seconds: number, readonly nanos: number) {\n    assert(nanos >= 0, 'timestamp nanoseconds out of range: ' + nanos);\n    assert(nanos < 1e9, 'timestamp nanoseconds out of range' + nanos);\n    // Midnight at the beginning of 1/1/1 is the earliest Firestore supports.\n    assert(\n      seconds >= -62135596800,\n      'timestamp seconds out of range: ' + seconds\n    );\n    // This will break in the year 10,000.\n    assert(seconds < 253402300800, 'timestamp seconds out of range' + seconds);\n  }\n\n  toDate(): Date {\n    return new Date(this.toEpochMilliseconds());\n  }\n\n  toEpochMilliseconds(): number {\n    return this.seconds * 1000 + this.nanos / 1e6;\n  }\n\n  compareTo(other: Timestamp): number {\n    if (this.seconds === other.seconds) {\n      return primitiveComparator(this.nanos, other.nanos);\n    }\n    return primitiveComparator(this.seconds, other.seconds);\n  }\n\n  equals(other: Timestamp): boolean {\n    return other.seconds === this.seconds && other.nanos === this.nanos;\n  }\n\n  toString(): string {\n    return 'Timestamp(seconds=' + this.seconds + ', nanos=' + this.nanos + ')';\n  }\n}\n"]}