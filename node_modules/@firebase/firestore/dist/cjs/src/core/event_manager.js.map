{"version":3,"sources":["../src/core/event_manager.ts"],"names":[],"mappings":"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","file":"event_manager.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from './query';\nimport { SyncEngine } from './sync_engine';\nimport { OnlineState, TargetId } from './types';\nimport { DocumentViewChange } from './view_snapshot';\nimport { ChangeType, ViewSnapshot } from './view_snapshot';\nimport { DocumentSet } from '../model/document_set';\nimport { assert } from '../util/assert';\nimport { EventHandler } from '../util/misc';\nimport * as obj from '../util/obj';\nimport { ObjectMap } from '../util/obj_map';\n\n/**\n * Holds the listeners and the last received ViewSnapshot for a query being\n * tracked by EventManager.\n */\nclass QueryListenersInfo {\n  public viewSnap: ViewSnapshot | null;\n  public targetId: TargetId;\n  public listeners: QueryListener[] = [];\n}\n\n/**\n * Interface for handling events from the EventManager.\n */\nexport interface Observer<T> {\n  next: EventHandler<T>;\n  error: EventHandler<Error>;\n}\n\n/**\n * EventManager is responsible for mapping queries to query event emitters.\n * It handles \"fan-out\". -- Identical queries will re-use the same watch on the\n * backend.\n */\nexport class EventManager {\n  private queries = new ObjectMap<Query, QueryListenersInfo>(q =>\n    q.canonicalId()\n  );\n\n  private onlineState: OnlineState = OnlineState.Unknown;\n\n  constructor(private syncEngine: SyncEngine) {\n    this.syncEngine.subscribe(\n      this.onChange.bind(this),\n      this.onError.bind(this)\n    );\n  }\n\n  listen(listener: QueryListener): Promise<TargetId> {\n    const query = listener.query;\n    let firstListen = false;\n\n    let queryInfo = this.queries.get(query);\n    if (!queryInfo) {\n      firstListen = true;\n      queryInfo = new QueryListenersInfo();\n      this.queries.set(query, queryInfo);\n    }\n    queryInfo.listeners.push(listener);\n\n    listener.onOnlineStateChanged(this.onlineState);\n\n    if (queryInfo.viewSnap) listener.onViewSnapshot(queryInfo.viewSnap);\n\n    if (firstListen) {\n      return this.syncEngine.listen(query).then(targetId => {\n        queryInfo!.targetId = targetId;\n        return targetId;\n      });\n    } else {\n      return Promise.resolve(queryInfo.targetId);\n    }\n  }\n\n  unlisten(listener: QueryListener): Promise<void> {\n    const query = listener.query;\n    let lastListen = false;\n\n    const queryInfo = this.queries.get(query);\n    if (queryInfo) {\n      const i = queryInfo.listeners.indexOf(listener);\n      if (i >= 0) {\n        queryInfo.listeners.splice(i, 1);\n        lastListen = queryInfo.listeners.length === 0;\n      }\n    }\n\n    if (lastListen) {\n      this.queries.delete(query);\n      return this.syncEngine.unlisten(query);\n    } else {\n      return Promise.resolve();\n    }\n  }\n\n  onChange(viewSnaps: ViewSnapshot[]): void {\n    for (const viewSnap of viewSnaps) {\n      const query = viewSnap.query;\n      const queryInfo = this.queries.get(query);\n      if (queryInfo) {\n        for (const listener of queryInfo.listeners) {\n          listener.onViewSnapshot(viewSnap);\n        }\n        queryInfo.viewSnap = viewSnap;\n      }\n    }\n  }\n\n  onError(query: Query, error: Error): void {\n    const queryInfo = this.queries.get(query);\n    if (queryInfo) {\n      for (const listener of queryInfo.listeners) {\n        listener.onError(error);\n      }\n    }\n\n    // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()\n    // after an error.\n    this.queries.delete(query);\n  }\n\n  onOnlineStateChanged(onlineState: OnlineState): void {\n    this.onlineState = onlineState;\n    this.queries.forEach((_, queryInfo) => {\n      for (const listener of queryInfo.listeners) {\n        listener.onOnlineStateChanged(onlineState);\n      }\n    });\n  }\n}\n\nexport interface ListenOptions {\n  /** Raise events when only metadata of documents changes */\n  readonly includeDocumentMetadataChanges?: boolean;\n\n  /** Raise events when only metadata of the query changes */\n  readonly includeQueryMetadataChanges?: boolean;\n\n  /**\n   * Wait for a sync with the server when online, but still raise events while\n   * offline.\n   */\n  readonly waitForSyncWhenOnline?: boolean;\n}\n\n/**\n * QueryListener takes a series of internal view snapshots and determines\n * when to raise the event.\n *\n * It uses an Observer to dispatch events.\n */\nexport class QueryListener {\n  /**\n   * Initial snapshots (e.g. from cache) may not be propagated to the wrapped\n   * observer. This flag is set to true once we've actually raised an event.\n   */\n  private raisedInitialEvent = false;\n\n  private options: ListenOptions;\n\n  private snap: ViewSnapshot;\n\n  private onlineState: OnlineState = OnlineState.Unknown;\n\n  constructor(\n    readonly query: Query,\n    private queryObserver: Observer<ViewSnapshot>,\n    options?: ListenOptions\n  ) {\n    this.options = options || {};\n  }\n\n  onViewSnapshot(snap: ViewSnapshot): void {\n    assert(\n      snap.docChanges.length > 0 || snap.syncStateChanged,\n      'We got a new snapshot with no changes?'\n    );\n\n    if (!this.options.includeDocumentMetadataChanges) {\n      // Remove the metadata only changes.\n      const docChanges: DocumentViewChange[] = [];\n      for (const docChange of snap.docChanges) {\n        if (docChange.type !== ChangeType.Metadata) {\n          docChanges.push(docChange);\n        }\n      }\n      snap = {\n        query: snap.query,\n        docs: snap.docs,\n        oldDocs: snap.oldDocs,\n        docChanges,\n        fromCache: snap.fromCache,\n        hasPendingWrites: snap.hasPendingWrites,\n        syncStateChanged: snap.syncStateChanged\n      };\n    }\n\n    if (!this.raisedInitialEvent) {\n      if (this.shouldRaiseInitialEvent(snap, this.onlineState)) {\n        this.raiseInitialEvent(snap);\n      }\n    } else if (this.shouldRaiseEvent(snap)) {\n      this.queryObserver.next(snap);\n    }\n\n    this.snap = snap;\n  }\n\n  onError(error: Error): void {\n    this.queryObserver.error(error);\n  }\n\n  onOnlineStateChanged(onlineState: OnlineState): void {\n    this.onlineState = onlineState;\n    if (\n      this.snap &&\n      !this.raisedInitialEvent &&\n      this.shouldRaiseInitialEvent(this.snap, onlineState)\n    ) {\n      this.raiseInitialEvent(this.snap);\n    }\n  }\n\n  private shouldRaiseInitialEvent(\n    snap: ViewSnapshot,\n    onlineState: OnlineState\n  ): boolean {\n    assert(\n      !this.raisedInitialEvent,\n      'Determining whether to raise first event but already had first event'\n    );\n\n    // Always raise the first event when we're synced\n    if (!snap.fromCache) {\n      return true;\n    }\n\n    // NOTE: We consider OnlineState.Unknown as online (it should become Failed\n    // or Online if we wait long enough).\n    const maybeOnline = onlineState !== OnlineState.Failed;\n    // Don't raise the event if we're online, aren't synced yet (checked\n    // above) and are waiting for a sync.\n    if (this.options.waitForSyncWhenOnline && maybeOnline) {\n      assert(\n        snap.fromCache,\n        'Waiting for sync, but snapshot is not from cache'\n      );\n      return false;\n    }\n\n    // Raise data from cache if we have any documents or we are offline\n    return !snap.docs.isEmpty() || onlineState === OnlineState.Failed;\n  }\n\n  private shouldRaiseEvent(snap: ViewSnapshot): boolean {\n    // We don't need to handle includeDocumentMetadataChanges here because\n    // the Metadata only changes have already been stripped out if needed.\n    // At this point the only changes we will see are the ones we should\n    // propagate.\n    if (snap.docChanges.length > 0) {\n      return true;\n    }\n\n    const hasPendingWritesChanged =\n      this.snap && this.snap.hasPendingWrites !== snap.hasPendingWrites;\n    if (snap.syncStateChanged || hasPendingWritesChanged) {\n      return this.options.includeQueryMetadataChanges === true;\n    }\n\n    // Generally we should have hit one of the cases above, but it's possible\n    // to get here if there were only metadata docChanges and they got\n    // stripped out.\n    return false;\n  }\n\n  private raiseInitialEvent(snap: ViewSnapshot): void {\n    assert(\n      !this.raisedInitialEvent,\n      'Trying to raise initial events for second time'\n    );\n    snap = {\n      query: snap.query,\n      docs: snap.docs,\n      oldDocs: DocumentSet.emptySet(snap.docs),\n      docChanges: QueryListener.getInitialViewChanges(snap),\n      fromCache: snap.fromCache,\n      hasPendingWrites: snap.hasPendingWrites,\n      syncStateChanged: true\n    };\n    this.raisedInitialEvent = true;\n    this.queryObserver.next(snap);\n  }\n\n  /** Returns changes as if all documents in the snap were added. */\n  private static getInitialViewChanges(\n    snap: ViewSnapshot\n  ): DocumentViewChange[] {\n    const result: DocumentViewChange[] = [];\n    snap.docs.forEach(doc => {\n      result.push({ type: ChangeType.Added, doc });\n    });\n    return result;\n  }\n}\n"]}