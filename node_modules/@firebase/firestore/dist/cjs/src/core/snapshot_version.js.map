{"version":3,"sources":["../src/core/snapshot_version.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,yCAAwC;AAExC;;;GAGG;AACH;IAmBE,yBAA4B,SAAoB;QAApB,cAAS,GAAT,SAAS,CAAW;IAAG,CAAC;IAhBpD,wEAAwE;IACxE,yEAAyE;IAClE,gCAAgB,GAAvB,UAAwB,KAAa;QACnC,IAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC;QACxC,IAAM,KAAK,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;QAClC,MAAM,CAAC,IAAI,eAAe,CAAC,IAAI,qBAAS,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;IAC5D,CAAC;IAEM,6BAAa,GAApB,UAAqB,KAAgB;QACnC,MAAM,CAAC,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IAEM,6BAAa,GAApB;QACE,MAAM,CAAC,eAAe,CAAC,GAAG,CAAC;IAC7B,CAAC;IAID,mCAAS,GAAT,UAAU,KAAsB;QAC9B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IACnD,CAAC;IAED,gCAAM,GAAN,UAAO,KAAsB;QAC3B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IAChD,CAAC;IAED,4EAA4E;IAC5E,wCAAc,GAAd;QACE,2BAA2B;QAC3B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,GAAG,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,GAAG,IAAI,CAAC;IACpE,CAAC;IAED,kCAAQ,GAAR;QACE,MAAM,CAAC,kBAAkB,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,GAAG,GAAG,CAAC;IAC9D,CAAC;IAED,qCAAW,GAAX;QACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAxCe,mBAAG,GAAG,IAAI,eAAe,CAAC,IAAI,qBAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAyCjE,sBAAC;CA1CD,AA0CC,IAAA;AA1CY,0CAAe","file":"snapshot_version.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from './timestamp';\n\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */\nexport class SnapshotVersion {\n  static readonly MIN = new SnapshotVersion(new Timestamp(0, 0));\n\n  // TODO(b/34176344): Once we no longer need to use the old alpha protos,\n  // delete this constructor and use a timestamp-backed version everywhere.\n  static fromMicroseconds(value: number): SnapshotVersion {\n    const seconds = Math.floor(value / 1e6);\n    const nanos = (value % 1e6) * 1e3;\n    return new SnapshotVersion(new Timestamp(seconds, nanos));\n  }\n\n  static fromTimestamp(value: Timestamp): SnapshotVersion {\n    return new SnapshotVersion(value);\n  }\n\n  static forDeletedDoc(): SnapshotVersion {\n    return SnapshotVersion.MIN;\n  }\n\n  private constructor(private timestamp: Timestamp) {}\n\n  compareTo(other: SnapshotVersion): number {\n    return this.timestamp.compareTo(other.timestamp);\n  }\n\n  equals(other: SnapshotVersion): boolean {\n    return this.timestamp.equals(other.timestamp);\n  }\n\n  /** Returns a number representation of the version for use in spec tests. */\n  toMicroseconds(): number {\n    // Convert to microseconds.\n    return this.timestamp.seconds * 1e6 + this.timestamp.nanos / 1000;\n  }\n\n  toString(): string {\n    return 'SnapshotVersion(' + this.timestamp.toString() + ')';\n  }\n\n  toTimestamp(): Timestamp {\n    return this.timestamp;\n  }\n}\n"]}