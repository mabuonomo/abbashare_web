{"version":3,"sources":["../src/core/query.ts"],"names":[],"mappings":"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","file":"query.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport {\n  DoubleValue,\n  FieldValue,\n  NullValue,\n  RefValue\n} from '../model/field_value';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { isNullOrUndefined } from '../util/types';\n\nexport class Query {\n  static atPath(path: ResourcePath): Query {\n    return new Query(path);\n  }\n\n  private memoizedCanonicalId: string | null = null;\n  private memoizedOrderBy: OrderBy[] | null = null;\n\n  constructor(\n    readonly path: ResourcePath,\n    readonly explicitOrderBy: OrderBy[] = [],\n    readonly filters: Filter[] = [],\n    readonly limit: number | null = null,\n    readonly startAt: Bound | null = null,\n    readonly endAt: Bound | null = null\n  ) {\n    if (this.startAt) {\n      this.assertValidBound(this.startAt);\n    }\n    if (this.endAt) {\n      this.assertValidBound(this.endAt);\n    }\n  }\n\n  get orderBy(): OrderBy[] {\n    if (this.memoizedOrderBy === null) {\n      const inequalityField = this.getInequalityFilterField();\n      const firstOrderByField = this.getFirstOrderByField();\n      if (inequalityField !== null && firstOrderByField === null) {\n        // In order to implicitly add key ordering, we must also add the\n        // inequality filter field for it to be a valid query.\n        // Note that the default inequality field and key ordering is ascending.\n        if (inequalityField.isKeyField()) {\n          this.memoizedOrderBy = [KEY_ORDERING_ASC];\n        } else {\n          this.memoizedOrderBy = [\n            new OrderBy(inequalityField),\n            KEY_ORDERING_ASC\n          ];\n        }\n      } else {\n        assert(\n          inequalityField === null ||\n            (firstOrderByField !== null &&\n              inequalityField.equals(firstOrderByField)),\n          'First orderBy should match inequality field.'\n        );\n        this.memoizedOrderBy = [];\n        let foundKeyOrdering = false;\n        for (const orderBy of this.explicitOrderBy) {\n          this.memoizedOrderBy.push(orderBy);\n          if (orderBy.field.isKeyField()) {\n            foundKeyOrdering = true;\n          }\n        }\n        if (!foundKeyOrdering) {\n          // The order of the implicit key ordering always matches the last\n          // explicit order by\n          const lastDirection =\n            this.explicitOrderBy.length > 0\n              ? this.explicitOrderBy[this.explicitOrderBy.length - 1].dir\n              : Direction.ASCENDING;\n          this.memoizedOrderBy.push(\n            lastDirection === Direction.ASCENDING\n              ? KEY_ORDERING_ASC\n              : KEY_ORDERING_DESC\n          );\n        }\n      }\n    }\n    return this.memoizedOrderBy;\n  }\n\n  addFilter(filter: Filter): Query {\n    assert(\n      this.getInequalityFilterField() == null ||\n        !(filter instanceof RelationFilter) ||\n        !filter.isInequality() ||\n        filter.field.equals(this.getInequalityFilterField()!),\n      'Query must only have one inequality field.'\n    );\n\n    assert(\n      !DocumentKey.isDocumentKey(this.path),\n      'No filtering allowed for document query'\n    );\n    const newFilters = this.filters.concat([filter]);\n    return new Query(\n      this.path,\n      this.explicitOrderBy.slice(),\n      newFilters,\n      this.limit,\n      this.startAt,\n      this.endAt\n    );\n  }\n\n  addOrderBy(orderBy: OrderBy): Query {\n    assert(\n      !DocumentKey.isDocumentKey(this.path),\n      'No ordering allowed for document query'\n    );\n    assert(!this.startAt && !this.endAt, 'Bounds must be set after orderBy');\n    // TODO(dimond): validate that orderBy does not list the same key twice.\n    const newOrderBy = this.explicitOrderBy.concat([orderBy]);\n    return new Query(\n      this.path,\n      newOrderBy,\n      this.filters.slice(),\n      this.limit,\n      this.startAt,\n      this.endAt\n    );\n  }\n\n  withLimit(limit: number | null): Query {\n    return new Query(\n      this.path,\n      this.explicitOrderBy.slice(),\n      this.filters.slice(),\n      limit,\n      this.startAt,\n      this.endAt\n    );\n  }\n\n  withStartAt(bound: Bound): Query {\n    return new Query(\n      this.path,\n      this.explicitOrderBy.slice(),\n      this.filters.slice(),\n      this.limit,\n      bound,\n      this.endAt\n    );\n  }\n\n  withEndAt(bound: Bound): Query {\n    return new Query(\n      this.path,\n      this.explicitOrderBy.slice(),\n      this.filters.slice(),\n      this.limit,\n      this.startAt,\n      bound\n    );\n  }\n\n  // TODO(b/29183165): This is used to get a unique string from a query to, for\n  // example, use as a dictionary key, but the implementation is subject to\n  // collisions. Make it collision-free.\n  canonicalId(): string {\n    if (this.memoizedCanonicalId === null) {\n      let canonicalId = this.path.canonicalString();\n      canonicalId += '|f:';\n      for (const filter of this.filters) {\n        canonicalId += filter.canonicalId();\n        canonicalId += ',';\n      }\n      canonicalId += '|ob:';\n      // TODO(dimond): make this collision resistant\n      for (const orderBy of this.orderBy) {\n        canonicalId += orderBy.canonicalId();\n        canonicalId += ',';\n      }\n      if (!isNullOrUndefined(this.limit)) {\n        canonicalId += '|l:';\n        canonicalId += this.limit!;\n      }\n      if (this.startAt) {\n        canonicalId += '|lb:';\n        canonicalId += this.startAt.canonicalId();\n      }\n      if (this.endAt) {\n        canonicalId += '|ub:';\n        canonicalId += this.endAt.canonicalId();\n      }\n      this.memoizedCanonicalId = canonicalId;\n    }\n    return this.memoizedCanonicalId;\n  }\n\n  toString(): string {\n    let str = 'Query(' + this.path.canonicalString();\n    if (this.filters.length > 0) {\n      str += `, filters: [${this.filters.join(', ')}]`;\n    }\n    if (!isNullOrUndefined(this.limit)) {\n      str += ', limit: ' + this.limit;\n    }\n    if (this.explicitOrderBy.length > 0) {\n      str += `, orderBy: [${this.explicitOrderBy.join(', ')}]`;\n    }\n    if (this.startAt) {\n      str += ', startAt: ' + this.startAt.canonicalId();\n    }\n    if (this.endAt) {\n      str += ', endAt: ' + this.endAt.canonicalId();\n    }\n\n    return str + ')';\n  }\n\n  equals(other: Query): boolean {\n    if (this.limit !== other.limit) {\n      return false;\n    }\n\n    if (this.orderBy.length !== other.orderBy.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.orderBy.length; i++) {\n      if (!this.orderBy[i].equals(other.orderBy[i])) {\n        return false;\n      }\n    }\n\n    if (this.filters.length !== other.filters.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.filters.length; i++) {\n      if (!this.filters[i].equals(other.filters[i])) {\n        return false;\n      }\n    }\n\n    if (!this.path.equals(other.path)) {\n      return false;\n    }\n\n    if (\n      this.startAt !== null\n        ? !this.startAt.equals(other.startAt)\n        : other.startAt !== null\n    ) {\n      return false;\n    }\n\n    return this.endAt !== null\n      ? this.endAt.equals(other.endAt)\n      : other.endAt === null;\n  }\n\n  docComparator(d1: Document, d2: Document): number {\n    let comparedOnKeyField = false;\n    for (const orderBy of this.orderBy) {\n      const comp = orderBy.compare(d1, d2);\n      if (comp !== 0) return comp;\n      comparedOnKeyField = comparedOnKeyField || orderBy.field.isKeyField();\n    }\n    // Assert that we actually compared by key\n    assert(\n      comparedOnKeyField,\n      \"orderBy used that doesn't compare on key field\"\n    );\n    return 0;\n  }\n\n  matches(doc: Document): boolean {\n    return (\n      this.matchesAncestor(doc) &&\n      this.matchesOrderBy(doc) &&\n      this.matchesFilters(doc) &&\n      this.matchesBounds(doc)\n    );\n  }\n\n  hasLimit(): boolean {\n    return !isNullOrUndefined(this.limit);\n  }\n\n  getFirstOrderByField(): FieldPath | null {\n    return this.explicitOrderBy.length > 0\n      ? this.explicitOrderBy[0].field\n      : null;\n  }\n\n  getInequalityFilterField(): FieldPath | null {\n    for (const filter of this.filters) {\n      if (filter instanceof RelationFilter && filter.isInequality()) {\n        return filter.field;\n      }\n    }\n    return null;\n  }\n\n  isDocumentQuery(): boolean {\n    return DocumentKey.isDocumentKey(this.path) && this.filters.length === 0;\n  }\n\n  private matchesAncestor(doc: Document): boolean {\n    const docPath = doc.key.path;\n    if (DocumentKey.isDocumentKey(this.path)) {\n      // exact match for document queries\n      return this.path.equals(docPath);\n    } else {\n      // shallow ancestor queries by default\n      return (\n        this.path.isPrefixOf(docPath) && this.path.length === docPath.length - 1\n      );\n    }\n  }\n\n  /**\n   * A document must have a value for every ordering clause in order to show up\n   * in the results.\n   */\n  private matchesOrderBy(doc: Document): boolean {\n    for (const orderBy of this.explicitOrderBy) {\n      // order by key always matches\n      if (\n        !orderBy.field.isKeyField() &&\n        doc.field(orderBy.field) === undefined\n      ) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private matchesFilters(doc: Document): boolean {\n    for (const filter of this.filters) {\n      if (!filter.matches(doc)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Makes sure a document is within the bounds, if provided.\n   */\n  private matchesBounds(doc: Document): boolean {\n    if (this.startAt && !this.startAt.sortsBeforeDocument(this.orderBy, doc)) {\n      return false;\n    }\n    if (this.endAt && this.endAt.sortsBeforeDocument(this.orderBy, doc)) {\n      return false;\n    }\n    return true;\n  }\n\n  private assertValidBound(bound: Bound): void {\n    assert(\n      bound.position.length <= this.orderBy.length,\n      'Bound is longer than orderBy'\n    );\n  }\n}\n\nexport interface Filter {\n  matches(doc: Document): boolean;\n  canonicalId(): string;\n  equals(filter: Filter): boolean;\n}\n\nexport class RelationOp {\n  static LESS_THAN = new RelationOp('<');\n  static LESS_THAN_OR_EQUAL = new RelationOp('<=');\n  static EQUAL = new RelationOp('==');\n  static GREATER_THAN = new RelationOp('>');\n  static GREATER_THAN_OR_EQUAL = new RelationOp('>=');\n\n  static fromString(op: string): RelationOp {\n    switch (op) {\n      case '<':\n        return RelationOp.LESS_THAN;\n      case '<=':\n        return RelationOp.LESS_THAN_OR_EQUAL;\n      case '==':\n        return RelationOp.EQUAL;\n      case '>=':\n        return RelationOp.GREATER_THAN_OR_EQUAL;\n      case '>':\n        return RelationOp.GREATER_THAN;\n      default:\n        return fail('Unknown relation: ' + op);\n    }\n  }\n\n  constructor(public name: string) {}\n\n  toString(): string {\n    return this.name;\n  }\n\n  equals(other: RelationOp): boolean {\n    return this.name === other.name;\n  }\n}\n\nexport class RelationFilter implements Filter {\n  constructor(\n    public field: FieldPath,\n    public op: RelationOp,\n    public value: FieldValue\n  ) {}\n\n  matches(doc: Document): boolean {\n    if (this.field.isKeyField()) {\n      assert(\n        this.value instanceof RefValue,\n        'Comparing on key, but filter value not a RefValue'\n      );\n      const refValue = this.value as RefValue;\n      const comparison = DocumentKey.comparator(doc.key, refValue.key);\n      return this.matchesComparison(comparison);\n    } else {\n      const val = doc.field(this.field);\n      return val !== undefined && this.matchesValue(val);\n    }\n  }\n\n  private matchesValue(value: FieldValue): boolean {\n    // Only compare types with matching backend order (such as double and int).\n    if (this.value.typeOrder !== value.typeOrder) {\n      return false;\n    }\n    return this.matchesComparison(value.compareTo(this.value));\n  }\n\n  private matchesComparison(comparison: number) {\n    switch (this.op) {\n      case RelationOp.LESS_THAN:\n        return comparison < 0;\n      case RelationOp.LESS_THAN_OR_EQUAL:\n        return comparison <= 0;\n      case RelationOp.EQUAL:\n        return comparison === 0;\n      case RelationOp.GREATER_THAN:\n        return comparison > 0;\n      case RelationOp.GREATER_THAN_OR_EQUAL:\n        return comparison >= 0;\n      default:\n        return fail('Unknown relation op' + this.op);\n    }\n  }\n\n  isInequality(): boolean {\n    return this.op !== RelationOp.EQUAL;\n  }\n\n  canonicalId(): string {\n    // TODO(b/29183165): Technically, this won't be unique if two values have\n    // the same description, such as the int 3 and the string \"3\". So we should\n    // add the types in here somehow, too.\n    return (\n      this.field.canonicalString() + this.op.toString() + this.value.toString()\n    );\n  }\n\n  equals(other: Filter): boolean {\n    if (other instanceof RelationFilter) {\n      return (\n        this.op.equals(other.op) &&\n        this.field.equals(other.field) &&\n        this.value.equals(other.value)\n      );\n    } else {\n      return false;\n    }\n  }\n\n  toString(): string {\n    return `${this.field.canonicalString()} ${this.op} ${this.value.value()}`;\n  }\n}\n\n/**\n * Filter that matches 'null' values.\n */\nexport class NullFilter implements Filter {\n  constructor(public field: FieldPath) {}\n\n  matches(doc: Document): boolean {\n    const val = doc.field(this.field);\n    return val !== undefined && val.value() === null;\n  }\n\n  canonicalId(): string {\n    return this.field.canonicalString() + ' IS null';\n  }\n\n  toString(): string {\n    return `${this.field.canonicalString()} IS null`;\n  }\n\n  equals(other: Filter): boolean {\n    if (other instanceof NullFilter) {\n      return this.field.equals(other.field);\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * Filter that matches 'NaN' values.\n */\nexport class NanFilter implements Filter {\n  constructor(public field: FieldPath) {}\n\n  matches(doc: Document): boolean {\n    const val = doc.field(this.field).value();\n    return typeof val === 'number' && isNaN(val);\n  }\n\n  canonicalId(): string {\n    return this.field.canonicalString() + ' IS NaN';\n  }\n\n  toString(): string {\n    return `${this.field.canonicalString()} IS NaN`;\n  }\n\n  equals(other: Filter): boolean {\n    if (other instanceof NanFilter) {\n      return this.field.equals(other.field);\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * Creates a filter based on the provided arguments.\n */\nexport function fieldFilter(\n  field: FieldPath,\n  op: RelationOp,\n  value: FieldValue\n) {\n  if (value.equals(NullValue.INSTANCE)) {\n    if (op !== RelationOp.EQUAL) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid query. You can only perform equals ' + 'comparisons on null.'\n      );\n    }\n    return new NullFilter(field);\n  } else if (value.equals(DoubleValue.NAN)) {\n    if (op !== RelationOp.EQUAL) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid query. You can only perform equals ' + 'comparisons on NaN.'\n      );\n    }\n    return new NanFilter(field);\n  } else {\n    return new RelationFilter(field, op, value);\n  }\n}\n\n/**\n * The direction of sorting in an order by.\n */\nexport class Direction {\n  static ASCENDING = new Direction('asc');\n  static DESCENDING = new Direction('desc');\n\n  private constructor(public name: string) {}\n\n  toString(): string {\n    return this.name;\n  }\n}\n\n/**\n * Represents a bound of a query.\n *\n * The bound is specified with the given components representing a position and\n * whether it's just before or just after the position (relative to whatever the\n * query order is).\n *\n * The position represents a logical index position for a query. It's a prefix\n * of values for the (potentially implicit) order by clauses of a query.\n *\n * Bound provides a function to determine whether a document comes before or\n * after a bound. This is influenced by whether the position is just before or\n * just after the provided values.\n */\nexport class Bound {\n  constructor(readonly position: FieldValue[], readonly before: boolean) {}\n\n  canonicalId(): string {\n    // TODO(b/29183165): Make this collision robust.\n    let canonicalId = this.before ? 'b:' : 'a:';\n    for (const component of this.position) {\n      canonicalId += component.toString();\n    }\n    return canonicalId;\n  }\n\n  /**\n   * Returns true if a document sorts before a bound using the provided sort\n   * order.\n   */\n  sortsBeforeDocument(orderBy: OrderBy[], doc: Document): boolean {\n    assert(\n      this.position.length <= orderBy.length,\n      \"Bound has more components than query's orderBy\"\n    );\n    let comparison = 0;\n    for (let i = 0; i < this.position.length; i++) {\n      const orderByComponent = orderBy[i];\n      const component = this.position[i];\n      if (orderByComponent.field.isKeyField()) {\n        assert(\n          component instanceof RefValue,\n          'Bound has a non-key value where the key path is being used.'\n        );\n        comparison = DocumentKey.comparator(\n          (component as RefValue).key,\n          doc.key\n        );\n      } else {\n        const docValue = doc.field(orderByComponent.field);\n        assert(\n          docValue !== undefined,\n          'Field should exist since document matched the orderBy already.'\n        );\n        comparison = component.compareTo(docValue);\n      }\n      if (orderByComponent.dir === Direction.DESCENDING) {\n        comparison = comparison * -1;\n      }\n      if (comparison !== 0) {\n        break;\n      }\n    }\n    return this.before ? comparison <= 0 : comparison < 0;\n  }\n\n  equals(other: Bound | null): boolean {\n    if (other === null) {\n      return false;\n    }\n    if (\n      this.before !== other.before ||\n      this.position.length !== other.position.length\n    ) {\n      return false;\n    }\n    for (let i = 0; i < this.position.length; i++) {\n      const thisPosition = this.position[i];\n      const otherPosition = other.position[i];\n      return thisPosition.equals(otherPosition);\n    }\n    return true;\n  }\n}\n\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */\nexport class OrderBy {\n  readonly dir: Direction;\n  private readonly isKeyOrderBy: boolean;\n\n  constructor(public readonly field: FieldPath, dir?: Direction) {\n    if (dir === undefined) {\n      dir = Direction.ASCENDING;\n    }\n    this.dir = dir;\n    this.isKeyOrderBy = field.isKeyField();\n  }\n\n  compare(d1: Document, d2: Document): number {\n    const comparison = this.isKeyOrderBy\n      ? Document.compareByKey(d1, d2)\n      : Document.compareByField(this.field, d1, d2);\n    switch (this.dir) {\n      case Direction.ASCENDING:\n        return comparison;\n      case Direction.DESCENDING:\n        return -1 * comparison;\n      default:\n        return fail('Unknown direction: ' + this.dir);\n    }\n  }\n\n  canonicalId(): string {\n    // TODO(b/29183165): Make this collision robust.\n    return this.field.canonicalString() + this.dir.toString();\n  }\n\n  toString(): string {\n    return `${this.field.canonicalString()} (${this.dir})`;\n  }\n\n  equals(other: OrderBy): boolean {\n    return this.dir === other.dir && this.field.equals(other.field);\n  }\n}\n\nconst KEY_ORDERING_ASC = new OrderBy(FieldPath.keyField(), Direction.ASCENDING);\nconst KEY_ORDERING_DESC = new OrderBy(\n  FieldPath.keyField(),\n  Direction.DESCENDING\n);\n"]}