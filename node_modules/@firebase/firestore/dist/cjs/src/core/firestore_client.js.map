{"version":3,"sources":["../src/core/firestore_client.ts"],"names":[],"mappings":"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","file":"firestore_client.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CredentialsProvider } from '../api/credentials';\nimport { User } from '../auth/user';\nimport {\n  EventManager,\n  ListenOptions,\n  Observer,\n  QueryListener\n} from './event_manager';\nimport { SyncEngine } from './sync_engine';\nimport { EagerGarbageCollector } from '../local/eager_garbage_collector';\nimport { GarbageCollector } from '../local/garbage_collector';\nimport { IndexedDbPersistence } from '../local/indexeddb_persistence';\nimport { LocalStore } from '../local/local_store';\nimport { MemoryPersistence } from '../local/memory_persistence';\nimport { NoOpGarbageCollector } from '../local/no_op_garbage_collector';\nimport { Persistence } from '../local/persistence';\nimport { Mutation } from '../model/mutation';\nimport { Platform } from '../platform/platform';\nimport { Datastore } from '../remote/datastore';\nimport { RemoteStore } from '../remote/remote_store';\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport { AsyncQueue } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport { debug } from '../util/log';\nimport { Deferred } from '../util/promise';\n\nimport { DatabaseId, DatabaseInfo } from './database_info';\nimport { Query } from './query';\nimport { Transaction } from './transaction';\nimport { OnlineState } from './types';\nimport { ViewSnapshot } from './view_snapshot';\n\nconst LOG_TAG = 'FirestoreClient';\n\n/**\n * FirestoreClient is a top-level class that constructs and owns all of the\n * pieces of the client SDK architecture. It is responsible for creating the\n * async queue that is shared by all of the other components in the system.\n */\nexport class FirestoreClient {\n  // NOTE: These should technically have '|undefined' in the types, since\n  // they're initialized asynchronously rather than in the constructor, but\n  // given that all work is done on the async queue and we assert that\n  // initialization completes before any other work is queued, we're cheating\n  // with the types rather than littering the code with '!' or unnecessary\n  // undefined checks.\n  private eventMgr: EventManager;\n  private garbageCollector: GarbageCollector;\n  private persistence: Persistence;\n  private localStore: LocalStore;\n  private remoteStore: RemoteStore;\n  private syncEngine: SyncEngine;\n\n  constructor(\n    private platform: Platform,\n    private databaseInfo: DatabaseInfo,\n    private credentials: CredentialsProvider,\n    /**\n       * Asynchronous queue responsible for all of our internal processing. When\n       * we get incoming work from the user (via public API) or the network\n       * (incoming GRPC messages), we should always schedule onto this queue.\n       * This ensures all of our work is properly serialized (e.g. we don't\n       * start processing a new operation while the previous one is waiting for\n       * an async I/O to complete).\n       */\n    private asyncQueue: AsyncQueue\n  ) {}\n\n  /**\n   * Starts up the FirestoreClient, returning only whether or not enabling\n   * persistence succeeded.\n   *\n   * The intent here is to \"do the right thing\" as far as users are concerned.\n   * Namely, in cases where offline persistence is requested and possible,\n   * enable it, but otherwise fall back to persistence disabled. For the most\n   * part we expect this to succeed one way or the other so we don't expect our\n   * users to actually wait on the firestore.enablePersistence Promise since\n   * they generally won't care.\n   *\n   * Of course some users actually do care about whether or not persistence\n   * was successfully enabled, so the Promise returned from this method\n   * indicates this outcome.\n   *\n   * This presents a problem though: even before enablePersistence resolves or\n   * rejects, users may have made calls to e.g. firestore.collection() which\n   * means that the FirestoreClient in there will be available and will be\n   * enqueuing actions on the async queue.\n   *\n   * Meanwhile any failure of an operation on the async queue causes it to\n   * panic and reject any further work, on the premise that unhandled errors\n   * are fatal.\n   *\n   * Consequently the fallback is handled internally here in start, and if the\n   * fallback succeeds we signal success to the async queue even though the\n   * start() itself signals failure.\n   *\n   * @param usePersistence Whether or not to attempt to enable persistence.\n   * @returns A deferred result indicating the user-visible result of enabling\n   *     offline persistence. This method will reject this if IndexedDB fails to\n   *     start for any reason. If usePersistence is false this is\n   *     unconditionally resolved.\n   */\n  public start(usePersistence: boolean): Promise<void> {\n    // We defer our initialization until we get the current user from\n    // setUserChangeListener(). We block the async queue until we got the\n    // initial user and the initialization is completed. This will prevent\n    // any scheduled work from happening before initialization is completed.\n    //\n    // If initializationDone resolved then the FirestoreClient is in a usable\n    // state.\n    const initializationDone = new Deferred<void>();\n\n    // If usePersistence is true, certain classes of errors while starting are\n    // recoverable but only by falling back to persistence disabled.\n    //\n    // If there's an error in the first case but not in recovery we cannot\n    // reject the promise blocking the async queue because this will cause the\n    // async queue to panic.\n    const persistenceResult = new Deferred<void>();\n\n    let initialized = false;\n    this.credentials.setUserChangeListener(user => {\n      if (!initialized) {\n        initialized = true;\n\n        this.initializePersistence(usePersistence, persistenceResult)\n          .then(() => this.initializeRest(user))\n          .then(initializationDone.resolve, initializationDone.reject);\n      } else {\n        this.asyncQueue.schedule(() => {\n          return this.handleUserChange(user);\n        });\n      }\n    });\n\n    // Block the async queue until initialization is done\n    this.asyncQueue.schedule(() => {\n      return initializationDone.promise;\n    });\n\n    // Return only the result of enabling persistence. Note that this does not\n    // need to await the completion of initializationDone because the result of\n    // this method should not reflect any other kind of failure to start.\n    return persistenceResult.promise;\n  }\n\n  /** Enables the network connection and requeues all pending operations. */\n  public enableNetwork(): Promise<void> {\n    return this.asyncQueue.schedule(() => {\n      return this.remoteStore.enableNetwork();\n    });\n  }\n\n  /**\n   * Initializes persistent storage, attempting to use IndexedDB if\n   * usePersistence is true or memory-only if false.\n   *\n   * If IndexedDB fails because it's already open in another tab or because the\n   * platform can't possibly support our implementation then this method rejects\n   * the persistenceResult and falls back on memory-only persistence.\n   *\n   * @param usePersistence indicates whether or not to use offline persistence\n   * @param persistenceResult A deferred result indicating the user-visible\n   *     result of enabling offline persistence. This method will reject this if\n   *     IndexedDB fails to start for any reason. If usePersistence is false\n   *     this is unconditionally resolved.\n   * @returns a Promise indicating whether or not initialization should\n   *     continue, i.e. that one of the persistence implementations actually\n   *     succeeded.\n   */\n  private initializePersistence(\n    usePersistence: boolean,\n    persistenceResult: Deferred<void>\n  ): Promise<void> {\n    if (usePersistence) {\n      return this.startIndexedDbPersistence()\n        .then(persistenceResult.resolve)\n        .catch((error: FirestoreError) => {\n          // Regardless of whether or not the retry succeeds, from an user\n          // perspective, offline persistence has failed.\n          persistenceResult.reject(error);\n\n          // An unknown failure on the first stage shuts everything down.\n          if (!this.canFallback(error)) {\n            return Promise.reject(error);\n          }\n\n          console.warn(\n            'Error enabling offline storage. Falling back to' +\n              ' storage disabled: ' +\n              error\n          );\n          return this.startMemoryPersistence();\n        });\n    } else {\n      // When usePersistence == false, enabling offline persistence is defined\n      // to unconditionally succeed. This allows start() to have the same\n      // signature for both cases, despite the fact that the returned promise\n      // is only used in the enablePersistence call.\n      persistenceResult.resolve();\n      return this.startMemoryPersistence();\n    }\n  }\n\n  private canFallback(error: FirestoreError): boolean {\n    return (\n      error.code === Code.FAILED_PRECONDITION ||\n      error.code === Code.UNIMPLEMENTED\n    );\n  }\n\n  /**\n   * Starts IndexedDB-based persistence.\n   *\n   * @returns A promise indicating success or failure.\n   */\n  private startIndexedDbPersistence(): Promise<void> {\n    // TODO(http://b/33384523): For now we just disable garbage collection\n    // when persistence is enabled.\n    this.garbageCollector = new NoOpGarbageCollector();\n    const storagePrefix = IndexedDbPersistence.buildStoragePrefix(\n      this.databaseInfo\n    );\n    // Opt to use proto3 JSON in case the platform doesn't support Uint8Array.\n    const serializer = new JsonProtoSerializer(this.databaseInfo.databaseId, {\n      useProto3Json: true\n    });\n    this.persistence = new IndexedDbPersistence(storagePrefix, serializer);\n    return this.persistence.start();\n  }\n\n  /**\n   * Starts Memory-backed persistence. In practice this cannot fail.\n   *\n   * @returns A promise that will successfully resolve.\n   */\n  private startMemoryPersistence(): Promise<void> {\n    this.garbageCollector = new EagerGarbageCollector();\n    this.persistence = new MemoryPersistence();\n    return this.persistence.start();\n  }\n\n  /**\n   * Initializes the rest of the FirestoreClient, assuming the initial user\n   * has been obtained from the credential provider and some persistence\n   * implementation is available in this.persistence.\n   */\n  private initializeRest(user: User): Promise<void> {\n    return this.platform\n      .loadConnection(this.databaseInfo)\n      .then(connection => {\n        this.localStore = new LocalStore(\n          this.persistence,\n          user,\n          this.garbageCollector\n        );\n        const serializer = this.platform.newSerializer(\n          this.databaseInfo.databaseId\n        );\n        const datastore = new Datastore(\n          this.databaseInfo,\n          this.asyncQueue,\n          connection,\n          this.credentials,\n          serializer\n        );\n\n        const onlineStateChangedHandler = (onlineState: OnlineState) => {\n          this.eventMgr.onOnlineStateChanged(onlineState);\n        };\n\n        this.remoteStore = new RemoteStore(\n          this.databaseInfo,\n          this.asyncQueue,\n          this.localStore,\n          datastore,\n          onlineStateChangedHandler\n        );\n\n        this.syncEngine = new SyncEngine(\n          this.localStore,\n          this.remoteStore,\n          user\n        );\n\n        // Setup wiring between sync engine and remote store\n        this.remoteStore.syncEngine = this.syncEngine;\n\n        this.eventMgr = new EventManager(this.syncEngine);\n\n        // NOTE: RemoteStore depends on LocalStore (for persisting stream\n        // tokens, refilling mutation queue, etc.) so must be started after\n        // LocalStore.\n        return this.localStore.start();\n      })\n      .then(() => {\n        return this.remoteStore.start();\n      });\n  }\n\n  private handleUserChange(user: User): Promise<void> {\n    this.asyncQueue.verifyOperationInProgress();\n\n    debug(LOG_TAG, 'User Changed: ' + user.uid);\n    return this.syncEngine.handleUserChange(user);\n  }\n\n  /** Disables the network connection. Pending operations will not complete. */\n  public disableNetwork(): Promise<void> {\n    return this.asyncQueue.schedule(() => {\n      return this.remoteStore.disableNetwork();\n    });\n  }\n\n  shutdown(): Promise<void> {\n    return this.asyncQueue\n      .schedule(() => {\n        this.credentials.removeUserChangeListener();\n        return this.remoteStore.shutdown();\n      })\n      .then(() => {\n        // PORTING NOTE: LocalStore does not need an explicit shutdown on web.\n        return this.persistence.shutdown();\n      });\n  }\n\n  listen(\n    query: Query,\n    observer: Observer<ViewSnapshot>,\n    options: ListenOptions\n  ): QueryListener {\n    const listener = new QueryListener(query, observer, options);\n    this.asyncQueue.schedule(() => {\n      return this.eventMgr.listen(listener);\n    });\n    return listener;\n  }\n\n  unlisten(listener: QueryListener): void {\n    this.asyncQueue.schedule(() => {\n      return this.eventMgr.unlisten(listener);\n    });\n  }\n\n  write(mutations: Mutation[]): Promise<void> {\n    const deferred = new Deferred<void>();\n    this.asyncQueue.schedule(() => this.syncEngine.write(mutations, deferred));\n    return deferred.promise;\n  }\n\n  databaseId(): DatabaseId {\n    return this.databaseInfo.databaseId;\n  }\n\n  transaction<T>(\n    updateFunction: (transaction: Transaction) => Promise<T>\n  ): Promise<T> {\n    // We have to wait for the async queue to be sure syncEngine is initialized.\n    return this.asyncQueue\n      .schedule(() => {\n        return Promise.resolve();\n      })\n      .then(() => {\n        return this.syncEngine.runTransaction(updateFunction);\n      });\n  }\n}\n"]}