{"version":3,"sources":["../src/model/document_key.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,yCAAwC;AAExC,+BAAsC;AAEtC;IACE,qBAAqB,IAAkB;QAAlB,SAAI,GAAJ,IAAI,CAAc;QACrC,eAAM,CACJ,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,EAC/B,sDAAsD;YACpD,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAC3B,CAAC;IACJ,CAAC;IAED,4BAAM,GAAN,UAAO,KAAyB;QAC9B,MAAM,CAAC,CACL,KAAK,KAAK,IAAI,IAAI,mBAAY,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CACvE,CAAC;IACJ,CAAC;IAED,8BAAQ,GAAR;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;IAC9B,CAAC;IAIM,sBAAU,GAAjB,UAAkB,EAAe,EAAE,EAAe;QAChD,MAAM,CAAC,mBAAY,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;IACnD,CAAC;IAEM,yBAAa,GAApB,UAAqB,IAAkB;QACrC,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC;IAED;;;;;OAKG;IACI,wBAAY,GAAnB,UAAoB,QAAkB;QACpC,MAAM,CAAC,IAAI,WAAW,CAAC,IAAI,mBAAY,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAC7D,CAAC;IAED;;;;;;OAMG;IACI,0BAAc,GAArB,UAAsB,IAAY;QAChC,MAAM,CAAC,IAAI,WAAW,CAAC,mBAAY,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;IACxD,CAAC;IA7BM,iBAAK,GAAG,IAAI,WAAW,CAAC,IAAI,mBAAY,CAAC,EAAE,CAAC,CAAC,CAAC;IA8BvD,kBAAC;CAjDD,AAiDC,IAAA;AAjDY,kCAAW","file":"document_key.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '../util/assert';\n\nimport { ResourcePath } from './path';\n\nexport class DocumentKey {\n  constructor(readonly path: ResourcePath) {\n    assert(\n      DocumentKey.isDocumentKey(path),\n      'Invalid DocumentKey with an odd number of segments: ' +\n        path.toArray().join('/')\n    );\n  }\n\n  equals(other: DocumentKey | null): boolean {\n    return (\n      other !== null && ResourcePath.comparator(this.path, other.path) === 0\n    );\n  }\n\n  toString(): string {\n    return this.path.toString();\n  }\n\n  static EMPTY = new DocumentKey(new ResourcePath([]));\n\n  static comparator(k1: DocumentKey, k2: DocumentKey): number {\n    return ResourcePath.comparator(k1.path, k2.path);\n  }\n\n  static isDocumentKey(path: ResourcePath): boolean {\n    return path.length % 2 === 0;\n  }\n\n  /**\n   * Creates and returns a new document key with the given segments.\n   *\n   * @param path The segments of the path to the document\n   * @return A new instance of DocumentKey\n   */\n  static fromSegments(segments: string[]): DocumentKey {\n    return new DocumentKey(new ResourcePath(segments.slice()));\n  }\n\n  /**\n   * Creates and returns a new document key using '/' to split the string into\n   * segments.\n   *\n   * @param path The slash-separated path string to the document\n   * @return A new instance of DocumentKey\n   */\n  static fromPathString(path: string): DocumentKey {\n    return new DocumentKey(ResourcePath.fromString(path));\n  }\n}\n"]}