{"version":3,"sources":["../src/model/field_value.ts"],"names":[],"mappings":"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","file":"field_value.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Blob } from '../api/blob';\nimport { GeoPoint } from '../api/geo_point';\nimport { DatabaseId } from '../core/database_info';\nimport { Timestamp } from '../core/timestamp';\nimport { assert, fail } from '../util/assert';\nimport { AnyJs, primitiveComparator } from '../util/misc';\nimport * as objUtils from '../util/obj';\nimport { SortedMap } from '../util/sorted_map';\nimport * as typeUtils from '../util/types';\n\nimport { DocumentKey } from './document_key';\nimport { FieldPath } from './path';\n\n/**\n * Supported data value types:\n *  - Null\n *  - Boolean\n *  - Long\n *  - Double\n *  - String\n *  - Object\n *  - Array\n *  - Binary\n *  - Timestamp\n *  - ServerTimestamp (a sentinel used in uncommitted writes)\n *  - GeoPoint\n *  - (Document) References\n */\n\nexport interface JsonObject<T> {\n  [name: string]: T;\n}\n\nexport enum TypeOrder {\n  // This order is defined by the backend.\n  NullValue = 0,\n  BooleanValue = 1,\n  NumberValue = 2,\n  TimestampValue = 3,\n  StringValue = 4,\n  BlobValue = 5,\n  RefValue = 6,\n  GeoPointValue = 7,\n  ArrayValue = 8,\n  ObjectValue = 9\n}\n\n/**\n * Potential types returned by FieldValue.value(). This could be stricter\n * (instead of using {}), but there's little benefit.\n *\n * Note that currently we use AnyJs (which is identical except includes\n * undefined) for incoming user data as a convenience to the calling code (but\n * we'll throw if the data contains undefined). This should probably be changed\n * to use FieldType, but all consuming code will have to be updated to\n * explicitly handle undefined and then cast to FieldType or similar. Perhaps\n * we should tackle this when adding robust argument validation to the API.\n */\nexport type FieldType = null | boolean | number | string | {};\n\n/**\n * A field value represents a datatype as stored by Firestore.\n */\nexport abstract class FieldValue {\n  readonly typeOrder: TypeOrder;\n\n  abstract value(): FieldType;\n  abstract equals(other: FieldValue): boolean;\n  abstract compareTo(other: FieldValue): number;\n\n  toString(): string {\n    const val = this.value();\n    return val === null ? 'null' : val.toString();\n  }\n\n  defaultCompareTo(other: FieldValue): number {\n    assert(\n      this.typeOrder !== other.typeOrder,\n      'Default compareTo should not be used for values of same type.'\n    );\n    const cmp = primitiveComparator(this.typeOrder, other.typeOrder);\n    return cmp;\n  }\n}\n\nexport class NullValue extends FieldValue {\n  typeOrder = TypeOrder.NullValue;\n\n  // internalValue is unused but we add it to work around\n  // https://github.com/Microsoft/TypeScript/issues/15585\n  readonly internalValue = null;\n\n  private constructor() {\n    super();\n  }\n\n  value(): FieldType {\n    return null;\n  }\n\n  equals(other: FieldValue): boolean {\n    return other instanceof NullValue;\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof NullValue) {\n      return 0;\n    }\n    return this.defaultCompareTo(other);\n  }\n\n  static INSTANCE = new NullValue();\n}\n\nexport class BooleanValue extends FieldValue {\n  typeOrder = TypeOrder.BooleanValue;\n\n  private constructor(readonly internalValue: boolean) {\n    super();\n  }\n\n  value(): boolean {\n    return this.internalValue;\n  }\n\n  equals(other: FieldValue): boolean {\n    return (\n      other instanceof BooleanValue &&\n      this.internalValue === other.internalValue\n    );\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof BooleanValue) {\n      return primitiveComparator(this, other);\n    }\n    return this.defaultCompareTo(other);\n  }\n\n  static of(value: boolean): BooleanValue {\n    return value ? BooleanValue.TRUE : BooleanValue.FALSE;\n  }\n\n  static TRUE = new BooleanValue(true);\n  static FALSE = new BooleanValue(false);\n}\n\n/** Base class for IntegerValue and DoubleValue. */\nexport abstract class NumberValue extends FieldValue {\n  typeOrder = TypeOrder.NumberValue;\n\n  constructor(readonly internalValue: number) {\n    super();\n  }\n\n  value(): number {\n    return this.internalValue;\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof NumberValue) {\n      return numericComparator(this.internalValue, other.internalValue);\n    }\n    return this.defaultCompareTo(other);\n  }\n}\n\n/** Utility function to compare doubles (using Firestore semantics for NaN). */\nfunction numericComparator(left: number, right: number): number {\n  if (left < right) {\n    return -1;\n  } else if (left > right) {\n    return 1;\n  } else if (left === right) {\n    return 0;\n  } else {\n    // one or both are NaN.\n    if (isNaN(left)) {\n      return isNaN(right) ? 0 : -1;\n    } else {\n      return 1;\n    }\n  }\n}\n\n/**\n * Utility function to check numbers for equality using Firestore semantics\n * (NaN === NaN, -0.0 !== 0.0).\n */\nfunction numericEquals(left: number, right: number): boolean {\n  // Implemented based on Object.is() polyfill from\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n  if (left === right) {\n    // +0 != -0\n    return left !== 0 || 1 / left === 1 / right;\n  } else {\n    // NaN == NaN\n    return left !== left && right !== right;\n  }\n}\n\nexport class IntegerValue extends NumberValue {\n  constructor(internalValue: number) {\n    super(internalValue);\n  }\n\n  equals(other: FieldValue): boolean {\n    // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,\n    // but that doesn't make them equal via equals().\n    if (other instanceof IntegerValue) {\n      return numericEquals(this.internalValue, other.internalValue);\n    } else {\n      return false;\n    }\n  }\n\n  // NOTE: compareTo() is implemented in NumberValue.\n}\n\nexport class DoubleValue extends NumberValue {\n  constructor(readonly internalValue: number) {\n    super(internalValue);\n  }\n\n  static NAN = new DoubleValue(NaN);\n  static POSITIVE_INFINITY = new DoubleValue(Infinity);\n  static NEGATIVE_INFINITY = new DoubleValue(-Infinity);\n\n  equals(other: FieldValue): boolean {\n    // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,\n    // but that doesn't make them equal via equals().\n    if (other instanceof DoubleValue) {\n      return numericEquals(this.internalValue, other.internalValue);\n    } else {\n      return false;\n    }\n  }\n\n  // NOTE: compareTo() is implemented in NumberValue.\n}\n\n// TODO(b/37267885): Add truncation support\nexport class StringValue extends FieldValue {\n  typeOrder = TypeOrder.StringValue;\n\n  constructor(readonly internalValue: string) {\n    super();\n  }\n\n  value(): string {\n    return this.internalValue;\n  }\n\n  equals(other: FieldValue): boolean {\n    return (\n      other instanceof StringValue && this.internalValue === other.internalValue\n    );\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof StringValue) {\n      return primitiveComparator(this.internalValue, other.internalValue);\n    }\n    return this.defaultCompareTo(other);\n  }\n}\n\nexport class TimestampValue extends FieldValue {\n  typeOrder = TypeOrder.TimestampValue;\n\n  constructor(readonly internalValue: Timestamp) {\n    super();\n  }\n\n  value(): Date {\n    return this.internalValue.toDate();\n  }\n\n  equals(other: FieldValue): boolean {\n    return (\n      other instanceof TimestampValue &&\n      this.internalValue.equals(other.internalValue)\n    );\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof TimestampValue) {\n      return this.internalValue.compareTo(other.internalValue);\n    } else if (other instanceof ServerTimestampValue) {\n      // Concrete timestamps come before server timestamps.\n      return -1;\n    } else {\n      return this.defaultCompareTo(other);\n    }\n  }\n}\n\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   TransformMutation (see TransformMutation.applyTo()). They can only exist in\n *   the local view of a document. Therefore they do not need to be parsed or\n *   serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they evaluate to null.\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */\nexport class ServerTimestampValue extends FieldValue {\n  typeOrder = TypeOrder.TimestampValue;\n\n  constructor(readonly localWriteTime: Timestamp) {\n    super();\n  }\n\n  value(): null {\n    return null;\n  }\n\n  equals(other: FieldValue): boolean {\n    return (\n      other instanceof ServerTimestampValue &&\n      this.localWriteTime.equals(other.localWriteTime)\n    );\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof ServerTimestampValue) {\n      return this.localWriteTime.compareTo(other.localWriteTime);\n    } else if (other instanceof TimestampValue) {\n      // Server timestamps come after all concrete timestamps.\n      return 1;\n    } else {\n      return this.defaultCompareTo(other);\n    }\n  }\n\n  toString(): string {\n    return '<ServerTimestamp localTime=' + this.localWriteTime.toString() + '>';\n  }\n}\n\nexport class BlobValue extends FieldValue {\n  typeOrder = TypeOrder.BlobValue;\n\n  constructor(readonly internalValue: Blob) {\n    super();\n  }\n\n  value(): Blob {\n    return this.internalValue;\n  }\n\n  equals(other: FieldValue): boolean {\n    return (\n      other instanceof BlobValue &&\n      this.internalValue._equals(other.internalValue)\n    );\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof BlobValue) {\n      return this.internalValue._compareTo(other.internalValue);\n    }\n    return this.defaultCompareTo(other);\n  }\n}\n\nexport class RefValue extends FieldValue {\n  typeOrder = TypeOrder.RefValue;\n\n  constructor(readonly databaseId: DatabaseId, readonly key: DocumentKey) {\n    super();\n  }\n\n  value(): DocumentKey {\n    return this.key;\n  }\n\n  equals(other: FieldValue): boolean {\n    if (other instanceof RefValue) {\n      return (\n        this.key.equals(other.key) && this.databaseId.equals(other.databaseId)\n      );\n    } else {\n      return false;\n    }\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof RefValue) {\n      const cmp = this.databaseId.compareTo(other.databaseId);\n      return cmp !== 0 ? cmp : DocumentKey.comparator(this.key, other.key);\n    }\n    return this.defaultCompareTo(other);\n  }\n}\n\nexport class GeoPointValue extends FieldValue {\n  typeOrder = TypeOrder.GeoPointValue;\n\n  constructor(readonly internalValue: GeoPoint) {\n    super();\n  }\n\n  value(): GeoPoint {\n    return this.internalValue;\n  }\n\n  equals(other: FieldValue): boolean {\n    return (\n      other instanceof GeoPointValue &&\n      this.internalValue._equals(other.internalValue)\n    );\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof GeoPointValue) {\n      return this.internalValue._compareTo(other.internalValue);\n    }\n    return this.defaultCompareTo(other);\n  }\n}\n\nexport class ObjectValue extends FieldValue {\n  typeOrder = TypeOrder.ObjectValue;\n\n  constructor(readonly internalValue: SortedMap<string, FieldValue>) {\n    super();\n  }\n\n  value(): JsonObject<FieldType> {\n    const result: JsonObject<FieldType> = {};\n    this.internalValue.inorderTraversal((key, val) => {\n      result[key] = val.value();\n    });\n    return result;\n  }\n\n  forEach(action: (key: string, value: FieldValue) => void): void {\n    this.internalValue.inorderTraversal(action);\n  }\n\n  equals(other: FieldValue): boolean {\n    if (other instanceof ObjectValue) {\n      const it1 = this.internalValue.getIterator();\n      const it2 = other.internalValue.getIterator();\n      while (it1.hasNext() && it2.hasNext()) {\n        const next1: { key: string; value: FieldValue } = it1.getNext();\n        const next2: { key: string; value: FieldValue } = it2.getNext();\n        if (next1.key !== next2.key || !next1.value.equals(next2.value)) {\n          return false;\n        }\n      }\n\n      return !it1.hasNext() && !it2.hasNext();\n    }\n\n    return false;\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof ObjectValue) {\n      const it1 = this.internalValue.getIterator();\n      const it2 = other.internalValue.getIterator();\n      while (it1.hasNext() && it2.hasNext()) {\n        const next1: { key: string; value: FieldValue } = it1.getNext();\n        const next2: { key: string; value: FieldValue } = it2.getNext();\n        const cmp =\n          primitiveComparator(next1.key, next2.key) ||\n          next1.value.compareTo(next2.value);\n        if (cmp) {\n          return cmp;\n        }\n      }\n\n      // Only equal if both iterators are exhausted\n      return primitiveComparator(it1.hasNext(), it2.hasNext());\n    } else {\n      return this.defaultCompareTo(other);\n    }\n  }\n\n  set(path: FieldPath, to: FieldValue): ObjectValue {\n    assert(!path.isEmpty(), 'Cannot set field for empty path on ObjectValue');\n    if (path.length === 1) {\n      return this.setChild(path.firstSegment(), to);\n    } else {\n      let child = this.child(path.firstSegment());\n      if (!(child instanceof ObjectValue)) {\n        child = ObjectValue.EMPTY;\n      }\n      const newChild = (child as ObjectValue).set(path.popFirst(), to);\n      return this.setChild(path.firstSegment(), newChild);\n    }\n  }\n\n  delete(path: FieldPath): ObjectValue {\n    assert(\n      !path.isEmpty(),\n      'Cannot delete field for empty path on ObjectValue'\n    );\n    if (path.length === 1) {\n      return new ObjectValue(this.internalValue.remove(path.firstSegment()));\n    } else {\n      // nested field\n      const child = this.child(path.firstSegment());\n      if (child instanceof ObjectValue) {\n        const newChild = child.delete(path.popFirst());\n        return new ObjectValue(\n          this.internalValue.insert(path.firstSegment(), newChild)\n        );\n      } else {\n        // Don't actually change a primitive value to an object for a delete\n        return this;\n      }\n    }\n  }\n\n  contains(path: FieldPath): boolean {\n    return this.field(path) !== undefined;\n  }\n\n  field(path: FieldPath): FieldValue {\n    assert(!path.isEmpty(), \"Can't get field of empty path\");\n    let field: FieldValue | undefined = this;\n    path.forEach((pathSegment: string) => {\n      if (field instanceof ObjectValue) {\n        field = field.internalValue.get(pathSegment) || undefined;\n      } else {\n        field = undefined;\n      }\n    });\n    return field;\n  }\n\n  toString(): string {\n    return JSON.stringify(this.value());\n  }\n\n  private child(childName: string): FieldValue | undefined {\n    return this.internalValue.get(childName) || undefined;\n  }\n\n  private setChild(childName: string, value: FieldValue): ObjectValue {\n    return new ObjectValue(this.internalValue.insert(childName, value));\n  }\n\n  static EMPTY = new ObjectValue(\n    new SortedMap<string, FieldValue>(primitiveComparator)\n  );\n}\n\nexport class ArrayValue extends FieldValue {\n  typeOrder = TypeOrder.ArrayValue;\n\n  constructor(readonly internalValue: FieldValue[]) {\n    super();\n  }\n\n  value(): FieldType[] {\n    return this.internalValue.map(v => v.value());\n  }\n\n  forEach(action: (value: FieldValue) => void): void {\n    this.internalValue.forEach(action);\n  }\n\n  equals(other: FieldValue): boolean {\n    if (other instanceof ArrayValue) {\n      if (this.internalValue.length !== other.internalValue.length) {\n        return false;\n      }\n\n      for (let i = 0; i < this.internalValue.length; i++) {\n        if (!this.internalValue[i].equals(other.internalValue[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof ArrayValue) {\n      const minLength = Math.min(\n        this.internalValue.length,\n        other.internalValue.length\n      );\n\n      for (let i = 0; i < minLength; i++) {\n        const cmp = this.internalValue[i].compareTo(other.internalValue[i]);\n\n        if (cmp) {\n          return cmp;\n        }\n      }\n\n      return primitiveComparator(\n        this.internalValue.length,\n        other.internalValue.length\n      );\n    } else {\n      return this.defaultCompareTo(other);\n    }\n  }\n\n  toString(): string {\n    return JSON.stringify(this.value());\n  }\n}\n"]}