{"version":3,"sources":["../src/remote/connection.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG","file":"connection.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Token } from '../api/credentials';\nimport { FirestoreError } from '../util/error';\n\n/**\n * A connected RPC interface to a remote Datastore.\n *\n * Responsible for maintaining a connection to the backend (and informing when\n * that connection state changes via onConnectionStateChange) and sending RPCs\n * when possible.\n *\n * The Connection is not responsible for queueing RPCs to the backend when\n * the connection is down.\n *\n * RPC messages are expected to be JavaScript objects representing the JSON that\n * would be sent over the REST/JSON API to Datastore or used as input to\n * creating the equivalent protocol buffers for GRPC.\n */\nexport interface Connection {\n  /**\n   * Invokes an RPC by name, given a request message as a JavaScript object\n   * representing the JSON to send.\n   *\n   * @param rpcName the name of the RPC to invoke\n   * @param request the Raw JSON object encoding of the request message\n   * @param token the Token to use for the RPC.\n   * @return a Promise containing the JSON object encoding of the response\n   */\n  invoke(rpcName: string, request: any, token: Token | null): Promise<any>;\n\n  /**\n   * Opens a stream to the given stream RPC endpoint. Returns a stream which\n   * will try to open itself.\n   * @param rpcName the name of the RPC to open the stream on\n   * @param token the Token to use for the RPC.\n   */\n  openStream(rpcName: string, token: Token | null): Stream<any, any>;\n\n  // TODO(mcg): subscribe to connection state changes.\n}\n\n/**\n * A bidirectional stream that can be used to send an receive messages.\n *\n * A stream can be closed locally with close() or can be closed remotely or\n * through network errors. onClose is guaranteed to be called. onOpen will only\n * be called if the stream successfully established a connection.\n */\nexport interface Stream<I, O> {\n  onOpen(callback: () => void): void;\n  onClose(callback: (err?: FirestoreError) => void): void;\n  onMessage(callback: (msg: O) => void): void;\n\n  send(msg: I): void;\n  close(): void;\n}\n"]}