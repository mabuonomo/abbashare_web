{"version":3,"sources":["../src/remote/remote_event.ts"],"names":[],"mappings":"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","file":"remote_event.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { ProtoByteString, TargetId } from '../core/types';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  MaybeDocumentMap\n} from '../model/collections';\nimport { MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { emptyByteString } from '../platform/platform';\n\n/**\n * An event from the RemoteStore. It is split into targetChanges (changes to the\n * state or the set of documents in our watched targets) and documentUpdates\n * (changes to the actual documents).\n */\nexport class RemoteEvent {\n  constructor(\n    /**\n       * The snapshot version this event brings us up to, or MIN if not set.\n       */\n    public readonly snapshotVersion: SnapshotVersion,\n    /**\n       * A map from target to changes to the target. See TargetChange.\n       */\n    public readonly targetChanges: { [targetId: number]: TargetChange },\n    /**\n       * A set of which documents have changed or been deleted, along with the\n       * doc's new values (if not deleted).\n       */\n    public documentUpdates: MaybeDocumentMap\n  ) {}\n\n  addDocumentUpdate(doc: MaybeDocument) {\n    this.documentUpdates = this.documentUpdates.insert(doc.key, doc);\n  }\n\n  handleExistenceFilterMismatch(targetId: TargetId) {\n    /*\n     * An existence filter mismatch will reset the query and we need to reset\n     * the mapping to contain no documents and an empty resume token.\n     *\n     * Note:\n     *   * The reset mapping is empty, specifically forcing the consumer of the\n     *     change to forget all keys for this targetID;\n     *   * The resume snapshot for this target must be reset\n     *   * The target must be unacked because unwatching and rewatching\n     *     introduces a race for changes.\n     */\n    this.targetChanges[targetId] = {\n      mapping: new ResetMapping(),\n      snapshotVersion: SnapshotVersion.MIN,\n      currentStatusUpdate: CurrentStatusUpdate.MarkNotCurrent,\n      resumeToken: emptyByteString()\n    };\n  }\n}\n\n/**\n * Represents an update to the current status of a target, either explicitly\n * having no new state, or the new value to set. Note \"current\" has special\n * meaning for in the RPC protocol that implies that a target is both up-to-date\n * and consistent with the rest of the watch stream.\n */\nexport enum CurrentStatusUpdate {\n  /** The current status is not affected and should not be modified. */\n  None,\n  /** The target must be marked as no longer \"current\". */\n  MarkNotCurrent,\n  /** The target must be marked as \"current\". */\n  MarkCurrent\n}\n\n/**\n * A part of a RemoteEvent specifying set of changes to a specific target. These\n * changes track what documents are currently included in the target as well as\n * the current snapshot version and resume token but the actual changes *to*\n * documents are not part of the TargetChange since documents may be part of\n * multiple targets.\n */\nexport interface TargetChange {\n  /**\n   * The new \"current\" (synced) status of this target. Set to\n   * CurrentStatusUpdateNone if the status should not be updated. Note \"current\"\n   * has special meaning in the RPC protocol that implies that a target is\n   * both up-to-date and consistent with the rest of the watch stream.\n   */\n  currentStatusUpdate: CurrentStatusUpdate;\n\n  /**\n   * A set of changes to documents in this target.\n   */\n  mapping: TargetMapping;\n\n  /** The snapshot version that this target change brings us up to. */\n  snapshotVersion: SnapshotVersion;\n\n  /**\n   * An opaque, server-assigned token that allows watching a query to be resumed\n   * after disconnecting without retransmitting all the data that matches the\n   * query. The resume token essentially identifies a point in time from which\n   * the server should resume sending results.\n   */\n  resumeToken: ProtoByteString;\n}\n\nexport type TargetMapping = ResetMapping | UpdateMapping;\n\nconst EMPTY_KEY_SET = documentKeySet();\n\nexport class ResetMapping {\n  private docs: DocumentKeySet = EMPTY_KEY_SET;\n\n  get documents(): DocumentKeySet {\n    return this.docs;\n  }\n\n  add(key: DocumentKey) {\n    this.docs = this.docs.add(key);\n  }\n\n  delete(key: DocumentKey) {\n    this.docs = this.docs.delete(key);\n  }\n\n  equals(other: ResetMapping): boolean {\n    return other !== null && this.docs.equals(other.docs);\n  }\n}\n\nexport class UpdateMapping {\n  addedDocuments: DocumentKeySet = EMPTY_KEY_SET;\n  removedDocuments: DocumentKeySet = EMPTY_KEY_SET;\n\n  applyToKeySet(keys: DocumentKeySet): DocumentKeySet {\n    let result = keys;\n    this.addedDocuments.forEach(key => (result = result.add(key)));\n    this.removedDocuments.forEach(key => (result = result.delete(key)));\n    return result;\n  }\n\n  add(key: DocumentKey) {\n    this.addedDocuments = this.addedDocuments.add(key);\n    this.removedDocuments = this.removedDocuments.delete(key);\n  }\n\n  delete(key: DocumentKey) {\n    this.addedDocuments = this.addedDocuments.delete(key);\n    this.removedDocuments = this.removedDocuments.add(key);\n  }\n\n  equals(other: UpdateMapping): boolean {\n    return (\n      other !== null &&\n      this.addedDocuments.equals(other.addedDocuments) &&\n      this.removedDocuments.equals(other.removedDocuments)\n    );\n  }\n}\n"]}