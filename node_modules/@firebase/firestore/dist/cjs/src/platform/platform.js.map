{"version":3,"sources":["../src/platform/platform.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAMH,yCAAsC;AAwBtC;;;;GAIG;AACH;IAAA;IAeA,CAAC;IAbQ,2BAAW,GAAlB,UAAmB,QAAkB;QACnC,EAAE,CAAC,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC7B,aAAI,CAAC,0BAA0B,CAAC,CAAC;QACnC,CAAC;QACD,eAAe,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACtC,CAAC;IAEM,2BAAW,GAAlB;QACE,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC9B,aAAI,CAAC,kBAAkB,CAAC,CAAC;QAC3B,CAAC;QACD,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC;IAClC,CAAC;IACH,sBAAC;AAAD,CAfA,AAeC,IAAA;AAfY,0CAAe;AAiB5B;;;GAGG;AACH;IACE,MAAM,CAAC,eAAe,CAAC,WAAW,EAAE,CAAC,eAAe,CAAC;AACvD,CAAC;AAFD,0CAEC","file":"platform.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DatabaseId, DatabaseInfo } from '../core/database_info';\nimport { ProtoByteString } from '../core/types';\nimport { Connection } from '../remote/connection';\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport { fail } from '../util/assert';\n\n/**\n * Provides a common interface to load anything platform dependent, e.g.\n * the connection implementation.\n *\n * An implementation of this must be provided at compile time for the platform.\n */\nexport interface Platform {\n  loadConnection(databaseInfo: DatabaseInfo): Promise<Connection>;\n  newSerializer(databaseId: DatabaseId): JsonProtoSerializer;\n\n  /** Converts a Base64 encoded string to a binary string. */\n  atob(encoded: string): string;\n\n  /** Converts a binary string to a Base64 encoded string. */\n  btoa(raw: string): string;\n\n  /** True if and only if the Base64 conversion functions are available. */\n  readonly base64Available: boolean;\n\n  readonly emptyByteString: ProtoByteString;\n}\n\n/**\n * Provides singleton helpers where setup code can inject a platform at runtime.\n * setPlatform needs to be set before Firestore is used and must be set exactly\n * once.\n */\nexport class PlatformSupport {\n  private static platform: Platform;\n  static setPlatform(platform: Platform): void {\n    if (PlatformSupport.platform) {\n      fail('Platform already defined');\n    }\n    PlatformSupport.platform = platform;\n  }\n\n  static getPlatform(): Platform {\n    if (!PlatformSupport.platform) {\n      fail('Platform not set');\n    }\n    return PlatformSupport.platform;\n  }\n}\n\n/**\n * Returns the representation of an empty \"proto\" byte string for the\n * platform.\n */\nexport function emptyByteString(): ProtoByteString {\n  return PlatformSupport.getPlatform().emptyByteString;\n}\n"]}