{"version":3,"sources":["../src/util/misc.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,mCAAkC;AAiBlC,8CAA8C;AAC9C;IAAA;IAYA,CAAC;IAXQ,YAAK,GAAZ;QACE,0BAA0B;QAC1B,IAAM,KAAK,GACT,gEAAgE,CAAC;QACnE,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;YAC5B,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;QACnE,CAAC;QACD,eAAM,CAAC,MAAM,CAAC,MAAM,KAAK,EAAE,EAAE,mBAAmB,GAAG,MAAM,CAAC,CAAC;QAC3D,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IACH,aAAC;AAAD,CAZA,AAYC,IAAA;AAZY,wBAAM;AAcnB,6BAAuC,IAAO,EAAE,KAAQ;IACtD,EAAE,CAAC,CAAC,IAAI,GAAG,KAAK,CAAC;QAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC5B,EAAE,CAAC,CAAC,IAAI,GAAG,KAAK,CAAC;QAAC,MAAM,CAAC,CAAC,CAAC;IAC3B,MAAM,CAAC,CAAC,CAAC;AACX,CAAC;AAJD,kDAIC;AAOD,6EAA6E;AAC7E,gBACE,IAAqC,EACrC,KAA2B;IAE3B,EAAE,CAAC,CAAC,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;IACzC,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,2EAA2E;QAC3E,gBAAgB;QAChB,MAAM,CAAE,IAAyB,KAAK,KAAK,CAAC;IAC9C,CAAC;AACH,CAAC;AAXD,wBAWC;AAED,+CAA+C;AAC/C,qBAA+B,IAAyB,EAAE,KAAU;IAClE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;QACjC,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAED,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QACrC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;IACH,CAAC;IAED,MAAM,CAAC,IAAI,CAAC;AACd,CAAC;AAZD,kCAYC;AAED;;;;;;;;GAQG;AACH,8BAAqC,CAAS;IAC5C,gEAAgE;IAChE,0EAA0E;IAC1E,kBAAkB;IAClB,IAAM,SAAS,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;IAC/B,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;QACnB,iCAAiC;QACjC,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;IACnC,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,CACL,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC;YACzB,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CACjD,CAAC;IACJ,CAAC;AACH,CAAC;AAhBD,oDAgBC;AAED;;;GAGG;AACH,4BAAmC,CAAS;IAC1C,iEAAiE;IACjE,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC;AAClB,CAAC;AAHD,gDAGC","file":"misc.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from './assert';\n\nexport type EventHandler<E> = (value: E) => void;\n\n/**\n * A union of all of the standard JS types, useful for cases where the type is\n * unknown. Unlike \"any\" this doesn't lose all type-safety, since the consuming\n * code must still cast to a particular type before using it.\n */\nexport type AnyJs = null | undefined | boolean | number | string | object;\n\n// TODO(b/66916745): AnyDuringMigration was used to suppress type check failures\n// that were found during the upgrade to TypeScript 2.4. They need to be audited\n// and fixed.\n// tslint:disable-next-line:no-any\nexport type AnyDuringMigration = any;\n\n// tslint:disable-next-line:class-as-namespace\nexport class AutoId {\n  static newId(): string {\n    // Alphanumeric characters\n    const chars =\n      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let autoId = '';\n    for (let i = 0; i < 20; i++) {\n      autoId += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    assert(autoId.length === 20, 'Invalid auto ID: ' + autoId);\n    return autoId;\n  }\n}\n\nexport function primitiveComparator<T>(left: T, right: T): number {\n  if (left < right) return -1;\n  if (left > right) return 1;\n  return 0;\n}\n\n/** Duck-typed interface for objects that have an equals() method. */\nexport interface Equatable<T> {\n  equals(other: T): boolean;\n}\n\n/** Helper to compare nullable (or undefined-able) objects using equals(). */\nexport function equals<T>(\n  left: Equatable<T> | null | undefined,\n  right: T | null | undefined\n): boolean {\n  if (left !== null && left !== undefined) {\n    return !!(right && left.equals(right));\n  } else {\n    // HACK: Explicitly cast since TypeScript's type narrowing apparently isn't\n    // smart enough.\n    return (left as null | undefined) === right;\n  }\n}\n\n/** Helper to compare arrays using equals(). */\nexport function arrayEquals<T>(left: Array<Equatable<T>>, right: T[]): boolean {\n  if (left.length !== right.length) {\n    return false;\n  }\n\n  for (let i = 0; i < left.length; i++) {\n    if (!left[i].equals(right[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Returns the largest lexicographically smaller string of equal or smaller\n * length. Returns an empty string if there is no such predecessor (if the input\n * is empty).\n *\n * Strings returned from this method can be invalid UTF-16 but this is sufficent\n * in use for indexeddb because that depends on lexicographical ordering but\n * shouldn't be used elsewhere.\n */\nexport function immediatePredecessor(s: string): string {\n  // We can decrement the last character in the string and be done\n  // unless that character is 0 (0x0000), in which case we have to erase the\n  // last character.\n  const lastIndex = s.length - 1;\n  if (s.length === 0) {\n    // Special case the empty string.\n    return '';\n  } else if (s.charAt(lastIndex) === '\\0') {\n    return s.substring(0, lastIndex);\n  } else {\n    return (\n      s.substring(0, lastIndex) +\n      String.fromCharCode(s.charCodeAt(lastIndex) - 1)\n    );\n  }\n}\n\n/**\n * Returns the immediate lexicographically-following string. This is useful to\n * construct an inclusive range for indexeddb iterators.\n */\nexport function immediateSuccessor(s: string): string {\n  // Return the input string, with an additional NUL byte appended.\n  return s + '\\0';\n}\n"]}