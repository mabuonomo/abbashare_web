{"version":3,"sources":["../src/local/remote_document_cache.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG","file":"remote_document_cache.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../core/query';\nimport { DocumentMap } from '../model/collections';\nimport { MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\n\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\n\n/**\n * Represents cached documents received from the remote backend.\n *\n * The cache is keyed by DocumentKey and entries in the cache are MaybeDocument\n * instances, meaning we can cache both Document instances (an actual document\n * with data) as well as NoDocument instances (indicating that the document is\n * known to not exist).\n */\nexport interface RemoteDocumentCache {\n  /**\n   * Adds or replaces an entry in the cache.\n   *\n   * The cache key is extracted from `maybeDocument.key`. If there is already a\n   * cache entry for the key, it will be replaced.\n   *\n   * @param maybeDocument A Document or NoDocument to put in the cache.\n   */\n  addEntry(\n    transaction: PersistenceTransaction,\n    maybeDocument: MaybeDocument\n  ): PersistencePromise<void>;\n\n  /** Removes the cached entry for the given key (no-op if no entry exists). */\n  removeEntry(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<void>;\n\n  /**\n   * Looks up an entry in the cache.\n   *\n   * @param documentKey The key of the entry to look up.\n   * @return The cached Document or NoDocument entry, or null if we have nothing\n   * cached.\n   */\n  getEntry(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MaybeDocument | null>;\n\n  /**\n   * Executes a query against the cached Document entries.\n   *\n   * Implementations may return extra documents if convenient. The results\n   * should be re-filtered by the consumer before presenting them to the user.\n   *\n   * Cached NoDocument entries have no bearing on query results.\n   *\n   * @param query The query to match documents against.\n   * @return The set of matching documents.\n   */\n  getDocumentsMatchingQuery(\n    transaction: PersistenceTransaction,\n    query: Query\n  ): PersistencePromise<DocumentMap>;\n}\n"]}