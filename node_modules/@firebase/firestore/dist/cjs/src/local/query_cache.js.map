{"version":3,"sources":["../src/local/query_cache.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG","file":"query_cache.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { TargetId } from '../core/types';\nimport { DocumentKeySet } from '../model/collections';\n\nimport { GarbageSource } from './garbage_source';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { QueryData } from './query_data';\n\n/**\n * Represents cached queries received from the remote backend.\n *\n * The cache is keyed by Query and entries in the cache are QueryData instances.\n */\nexport interface QueryCache extends GarbageSource {\n  /**\n   * Starts up the query cache.\n   */\n  start(transaction: PersistenceTransaction): PersistencePromise<void>;\n\n  /**\n   * Returns the highest target ID of any query in the cache. Typically called\n   * during startup to seed a target ID generator and avoid collisions with\n   * existing queries. If there are no queries in the cache, returns zero.\n   */\n  getHighestTargetId(): TargetId;\n\n  /**\n   * A global snapshot version representing the last consistent snapshot we\n   * received from the backend. This is monotonically increasing and any\n   * snapshots received from the backend prior to this version (e.g. for targets\n   * resumed with a resume_token) should be suppressed (buffered) until the\n   * backend has caught up to this snapshot version again. This prevents our\n   * cache from ever going backwards in time.\n   *\n   * This is updated whenever our we get a TargetChange with a read_time and\n   * empty target_ids.\n   */\n  getLastRemoteSnapshotVersion(): SnapshotVersion;\n\n  /**\n   * Set the snapshot version representing the last consistent snapshot received\n   * from the backend. (see getLastRemoteSnapshotVersion() for more details).\n   *\n   * @param snapshotVersion The new snapshot version.\n   */\n  setLastRemoteSnapshotVersion(\n    transaction: PersistenceTransaction,\n    snapshotVersion: SnapshotVersion\n  ): PersistencePromise<void>;\n\n  /**\n   * Adds or replaces an entry in the cache.\n   *\n   * The cache key is extracted from `queryData.query`. If there is already a\n   * cache entry for the key, it will be replaced.\n   *\n   * @param queryData A QueryData instance to put in the cache.\n   */\n  addQueryData(\n    transaction: PersistenceTransaction,\n    queryData: QueryData\n  ): PersistencePromise<void>;\n\n  /**\n   * Removes the cached entry for the given query data (no-op if no entry\n   * exists).\n   */\n  removeQueryData(\n    transaction: PersistenceTransaction,\n    queryData: QueryData\n  ): PersistencePromise<void>;\n\n  /**\n   * Looks up a QueryData entry in the cache.\n   *\n   * @param query The query corresponding to the entry to look up.\n   * @return The cached QueryData entry, or null if the cache has no entry for\n   * the query.\n   */\n  getQueryData(\n    transaction: PersistenceTransaction,\n    query: Query\n  ): PersistencePromise<QueryData | null>;\n\n  /**\n   * Adds the given document keys to cached query results of the given target\n   * ID.\n   */\n  addMatchingKeys(\n    transaction: PersistenceTransaction,\n    keys: DocumentKeySet,\n    targetId: TargetId\n  ): PersistencePromise<void>;\n\n  /**\n   * Removes the given document keys from the cached query results of the\n   * given target ID.\n   */\n  removeMatchingKeys(\n    transaction: PersistenceTransaction,\n    keys: DocumentKeySet,\n    targetId: TargetId\n  ): PersistencePromise<void>;\n\n  /**\n   * Removes all the keys in the query results of the given target ID.\n   */\n  removeMatchingKeysForTargetId(\n    transaction: PersistenceTransaction,\n    targetId: TargetId\n  ): PersistencePromise<void>;\n\n  getMatchingKeysForTargetId(\n    transaction: PersistenceTransaction,\n    targetId: TargetId\n  ): PersistencePromise<DocumentKeySet>;\n}\n"]}