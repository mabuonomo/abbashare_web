{"version":3,"sources":["../src/local/simple_db.ts"],"names":[],"mappings":"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","file":"simple_db.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '../util/assert';\nimport { debug } from '../util/log';\nimport { AnyDuringMigration } from '../util/misc';\n\nimport { PersistencePromise } from './persistence_promise';\n\nconst LOG_TAG = 'SimpleDb';\n\n/**\n * Provides a wrapper around IndexedDb with a simplified interface that uses\n * Promise-like return values to chain operations. Real promises cannot be used\n * since .then() continuations are executed asynchronously (e.g. via\n * .setImmediate), which would cause IndexedDB to end the transaction.\n * See PersistencePromise for more details.\n */\nexport class SimpleDb {\n  /** Opens the specified database, creating or upgrading it if necessary. */\n  static openOrCreate(\n    name: string,\n    version: number,\n    runUpgrade: (db: IDBDatabase, oldVersion: number) => void\n  ): Promise<SimpleDb> {\n    assert(\n      SimpleDb.isAvailable(),\n      'IndexedDB not supported in current environment.'\n    );\n    debug(LOG_TAG, 'Opening database:', name);\n    return new PersistencePromise<SimpleDb>((resolve, reject) => {\n      // TODO(mikelehen): Investigate browser compatibility.\n      // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB\n      // suggests IE9 and older WebKit browsers handle upgrade\n      // differently.\n      const request = window.indexedDB.open(name, version);\n\n      request.onsuccess = (event: Event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n        resolve(new SimpleDb(db));\n      };\n\n      request.onerror = (event: ErrorEvent) => {\n        reject((event.target as IDBOpenDBRequest).error);\n      };\n\n      request.onupgradeneeded = (event: IDBVersionChangeEvent) => {\n        debug(\n          LOG_TAG,\n          'Database \"' + name + '\" requires upgrade from version:',\n          event.oldVersion\n        );\n        // TODO(mikelehen): If/when we need to do an actual data\n        // migration, we'll want to wrap db in a SimpleDb and have the\n        // runUpgrade function return a PersistencePromise, since we'll\n        // likely need to do async reads and writes. For now we're\n        // cheating and just passing the raw IndexedDB in, since\n        // createObjectStore(), etc. are synchronous.\n        const db = (event.target as IDBOpenDBRequest).result;\n        runUpgrade(db, event.oldVersion);\n      };\n    }).toPromise();\n  }\n\n  /** Deletes the specified database. */\n  static delete(name: string): Promise<void> {\n    debug(LOG_TAG, 'Removing database:', name);\n    return wrapRequest<void>(window.indexedDB.deleteDatabase(name)).toPromise();\n  }\n\n  /** Returns true if IndexedDB is available in the current environment. */\n  static isAvailable(): boolean {\n    if (typeof window === 'undefined' || window.indexedDB == null) {\n      return false;\n    }\n    // We extensively use indexed array values and compound keys,\n    // which IE and Edge do not support. However, they still have indexedDB\n    // defined on the window, so we need to check for them here and make sure\n    // to return that persistence is not enabled for those browsers.\n    // For tracking support of this feature, see here:\n    // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/\n\n    // Check the UA string to find out the browser.\n    const ua = window.navigator.userAgent;\n\n    // IE 10\n    // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n\n    // IE 11\n    // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n\n    // Edge\n    // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,\n    // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n\n    if (\n      ua.indexOf('MSIE ') > 0 ||\n      ua.indexOf('Trident/') > 0 ||\n      ua.indexOf('Edge/') > 0\n    ) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  constructor(private db: IDBDatabase) {}\n\n  runTransaction<T>(\n    mode: 'readonly' | 'readwrite',\n    objectStores: string[],\n    transactionFn: (transaction: SimpleDbTransaction) => PersistencePromise<T>\n  ): Promise<T> {\n    const transaction = new SimpleDbTransaction(this.db, mode, objectStores);\n    const transactionFnResult = transactionFn(transaction)\n      .catch(error => {\n        // Abort the transaction if there was an\n        // error.\n        transaction.abort();\n        return PersistencePromise.reject(error);\n      })\n      .toPromise();\n\n    // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to\n    // fire), but still return the original transactionFnResult back to the\n    // caller.\n    return transaction.completionPromise.then(\n      () => transactionFnResult\n    ) as AnyDuringMigration;\n  }\n\n  close() {\n    this.db.close();\n  }\n}\n\n/**\n * A controller for iterating over a key range or index. It allows an iterate\n * callback to delete the currently-referenced object, or jump to a new key\n * within the key range or index.\n */\nexport class IterationController {\n  private shouldStop = false;\n  private nextKey: IDBValidKey | IDBKeyRange | null = null;\n\n  constructor(private dbCursor: IDBCursorWithValue) {}\n\n  get isDone(): boolean {\n    return this.shouldStop;\n  }\n\n  get skipToKey(): IDBValidKey | IDBKeyRange | null {\n    return this.nextKey;\n  }\n\n  set cursor(value: IDBCursorWithValue) {\n    this.dbCursor = value;\n  }\n\n  /**\n   * This function can be called to stop iteration at any point.\n   */\n  done(): void {\n    this.shouldStop = true;\n  }\n\n  /**\n   * This function can be called to skip to that next key, which could be\n   * an index or a primary key.\n   */\n  skip(key: IDBValidKey | IDBKeyRange): void {\n    this.nextKey = key;\n  }\n\n  /**\n   * Delete the current cursor value from the object store.\n   *\n   * NOTE: You CANNOT do this with a keysOnly query.\n   */\n  delete(): PersistencePromise<void> {\n    return wrapRequest<void>(this.dbCursor.delete());\n  }\n}\n\n/**\n * Callback used with iterate() method.\n */\nexport type IterateCallback<KeyType, ValueType> = (\n  key: KeyType,\n  value: ValueType,\n  control: IterationController\n) => void | PersistencePromise<void>;\n\n/** Options available to the iterate() method. */\nexport interface IterateOptions {\n  /** Index to iterate over (else primary keys will be iterated) */\n  index?: string;\n\n  /** IndxedDB Range to iterate over (else entire store will be iterated) */\n  range?: IDBKeyRange;\n\n  /** If true, values aren't read while iterating. */\n  keysOnly?: boolean;\n\n  /** If true, iterate over the store in reverse. */\n  reverse?: boolean;\n}\n\n/**\n * Wraps an IDBTransaction and exposes a store() method to get a handle to a\n * specific object store.\n */\nexport class SimpleDbTransaction {\n  private transaction: IDBTransaction;\n  private aborted = false;\n\n  /**\n   * A promise that resolves with the result of the IndexedDb transaction.\n   *\n   * Note: A transaction explicitly aborted via abort() is considered successful\n   * and this promise will resolve as successful.\n   */\n  readonly completionPromise: Promise<void>;\n\n  constructor(db: IDBDatabase, mode: string, objectStoresNames: string[]) {\n    this.transaction = db.transaction(\n      objectStoresNames,\n      mode as AnyDuringMigration\n    );\n\n    this.completionPromise = new Promise<void>((resolve, reject) => {\n      // We consider aborting to be \"normal\" and just resolve the promise.\n      // May need to revisit if/when we actually need to abort transactions.\n      this.transaction.onabort = this.transaction.oncomplete = event => {\n        resolve();\n      };\n      this.transaction.onerror = (event: Event) => {\n        reject((event.target as IDBRequest).error);\n      };\n    });\n  }\n\n  abort(): void {\n    if (!this.aborted) {\n      debug(LOG_TAG, 'Aborting transaction.');\n      this.aborted = true;\n      this.transaction.abort();\n    }\n  }\n\n  /**\n   * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All\n   * operations performed on the SimpleDbStore happen within the context of this\n   * transaction and it cannot be used anymore once the transaction is\n   * completed.\n   *\n   * Note that we can't actually enforce that the KeyType and ValueType are\n   * correct, but they allow type safety through the rest of the consuming code.\n   */\n  store<KeyType extends IDBValidKey, ValueType>(\n    storeName: string\n  ): SimpleDbStore<KeyType, ValueType> {\n    const store = this.transaction.objectStore(storeName);\n    assert(!!store, 'Object store not part of transaction: ' + storeName);\n    return new SimpleDbStore<KeyType, ValueType>(store);\n  }\n}\n\n/**\n * A wrapper around an IDBObjectStore providing an API that:\n *\n * 1) Has generic KeyType / ValueType parameters to provide strongly-typed\n * methods for acting against the object store.\n * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every\n * method return a PersistencePromise instead.\n * 3) Provides a higher-level API to avoid needing to do excessive wrapping of\n * intermediate IndexedDB types (IDBCursorWithValue, etc.)\n */\nexport class SimpleDbStore<KeyType extends IDBValidKey, ValueType> {\n  constructor(private store: IDBObjectStore) {}\n\n  /**\n   * Writes a value into the Object Store.\n   *\n   * @param key Optional explicit key to use when writing the object, else the\n   * key will be auto-assigned (e.g. via the defined keyPath for the store).\n   * @param value The object to write.\n   */\n  put(value: ValueType): PersistencePromise<void>;\n  put(key: KeyType, value: ValueType): PersistencePromise<void>;\n  put(\n    keyOrValue: KeyType | ValueType,\n    value?: ValueType\n  ): PersistencePromise<void> {\n    let request;\n    if (value !== undefined) {\n      debug(LOG_TAG, 'PUT', this.store.name, keyOrValue, value);\n      request = this.store.put(value, keyOrValue as KeyType);\n    } else {\n      debug(LOG_TAG, 'PUT', this.store.name, '<auto-key>', keyOrValue);\n      request = this.store.put(keyOrValue as ValueType);\n    }\n    return wrapRequest<void>(request);\n  }\n\n  /**\n   * Gets the object with the specified key from the specified store, or null\n   * if no object exists with the specified key.\n   *\n   * @key The key of the object to get.\n   * @return The object with the specified key or null if no object exists.\n   */\n  get(key: KeyType): PersistencePromise<ValueType | null> {\n    const request = this.store.get(key);\n    // tslint:disable-next-line:no-any We're doing an unsafe cast to ValueType.\n    return wrapRequest<any>(request).next(result => {\n      // Normalize nonexistence to null.\n      if (result === undefined) {\n        result = null;\n      }\n      debug(LOG_TAG, 'GET', this.store.name, key, result);\n      return result;\n    });\n  }\n\n  delete(key: KeyType | IDBKeyRange): PersistencePromise<void> {\n    debug(LOG_TAG, 'DELETE', this.store.name, key);\n    const request = this.store.delete(key);\n    return wrapRequest<void>(request);\n  }\n\n  loadAll(): PersistencePromise<ValueType[]>;\n  loadAll(range: IDBKeyRange): PersistencePromise<ValueType[]>;\n  loadAll(index: string, range: IDBKeyRange): PersistencePromise<ValueType[]>;\n  loadAll(\n    indexOrRange?: string | IDBKeyRange,\n    range?: IDBKeyRange\n  ): PersistencePromise<ValueType[]> {\n    const cursor = this.cursor(this.options(indexOrRange, range));\n    const results: ValueType[] = [];\n    return this.iterateCursor(cursor, (key, value) => {\n      results.push(value);\n    }).next(() => {\n      return results;\n    });\n  }\n\n  deleteAll(): PersistencePromise<void>;\n  deleteAll(range: IDBKeyRange): PersistencePromise<void>;\n  deleteAll(index: string, range: IDBKeyRange): PersistencePromise<void>;\n  deleteAll(\n    indexOrRange?: string | IDBKeyRange,\n    range?: IDBKeyRange\n  ): PersistencePromise<void> {\n    debug(LOG_TAG, 'DELETE ALL', this.store.name);\n    const options = this.options(indexOrRange, range);\n    options.keysOnly = false;\n    const cursor = this.cursor(options);\n    return this.iterateCursor(cursor, (key, value, control) => {\n      // NOTE: Calling delete() on a cursor is documented as more efficient than\n      // calling delete() on an object store with a single key\n      // (https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete),\n      // however, this requires us *not* to use a keysOnly cursor\n      // (https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/delete). We\n      // may want to compare the performance of each method.\n      return control.delete();\n    });\n  }\n\n  /**\n   * Iterates over keys and values in an object store.\n   *\n   * @param options Options specifying how to iterate the objects in the store.\n   * @param callback will be called for each iterated object. Iteration can be\n   * canceled at any point by calling the doneFn passed to the callback.\n   * The callback can return a PersistencePromise if it performs async\n   * operations but note that iteration will continue without waiting for them\n   * to complete.\n   * @returns A PersistencePromise that resolves once all PersistencePromises\n   * returned by callbacks resolve.\n   */\n  iterate(\n    callback: IterateCallback<KeyType, ValueType>\n  ): PersistencePromise<void>;\n  iterate(\n    options: IterateOptions,\n    callback: IterateCallback<KeyType, ValueType>\n  ): PersistencePromise<void>;\n  iterate(\n    optionsOrCallback: IterateOptions | IterateCallback<KeyType, ValueType>,\n    callback?: IterateCallback<KeyType, ValueType>\n  ): PersistencePromise<void> {\n    let options;\n    if (!callback) {\n      options = {};\n      callback = optionsOrCallback as IterateCallback<KeyType, ValueType>;\n    } else {\n      options = optionsOrCallback;\n    }\n    const cursor = this.cursor(options);\n    return this.iterateCursor(cursor, callback);\n  }\n\n  private iterateCursor(\n    cursorRequest: IDBRequest,\n    fn: IterateCallback<KeyType, ValueType>\n  ): PersistencePromise<void> {\n    const results: Array<PersistencePromise<void>> = [];\n    return new PersistencePromise((resolve, reject) => {\n      cursorRequest.onerror = (event: Event) => {\n        reject((event.target as IDBRequest).error);\n      };\n      cursorRequest.onsuccess = (event: Event) => {\n        const cursor: IDBCursorWithValue = (event.target as IDBRequest).result;\n        if (!cursor) {\n          resolve();\n          return;\n        }\n        const controller = new IterationController(cursor);\n        const userResult = fn(cursor.primaryKey, cursor.value, controller);\n        if (userResult instanceof PersistencePromise) {\n          results.push(userResult);\n        }\n        if (controller.isDone) {\n          resolve();\n        } else if (controller.skipToKey === null) {\n          cursor.continue();\n        } else {\n          cursor.continue(controller.skipToKey);\n        }\n      };\n    }).next(() => {\n      return PersistencePromise.waitFor(results);\n    });\n  }\n\n  private options(\n    indexOrRange?: string | IDBKeyRange,\n    range?: IDBKeyRange\n  ): IterateOptions {\n    let indexName: string | undefined = undefined;\n    if (indexOrRange !== undefined) {\n      if (typeof indexOrRange === 'string') {\n        indexName = indexOrRange;\n      } else {\n        assert(\n          range === undefined,\n          '3rd argument must not be defined if 2nd is a range.'\n        );\n        range = indexOrRange;\n      }\n    }\n    return { index: indexName, range };\n  }\n\n  private cursor(options: IterateOptions): IDBRequest {\n    let direction = 'next';\n    if (options.reverse) {\n      direction = 'prev';\n    }\n    if (options.index) {\n      const index = this.store.index(options.index);\n      if (options.keysOnly) {\n        return index.openKeyCursor(\n          options.range,\n          direction as AnyDuringMigration\n        );\n      } else {\n        return index.openCursor(options.range, direction as AnyDuringMigration);\n      }\n    } else {\n      return this.store.openCursor(\n        options.range,\n        direction as AnyDuringMigration\n      );\n    }\n  }\n}\n\n/**\n * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror\n * handlers to resolve / reject the PersistencePromise as appropriate.\n */\nfunction wrapRequest<R>(request: IDBRequest): PersistencePromise<R> {\n  return new PersistencePromise<R>((resolve, reject) => {\n    request.onsuccess = (event: Event) => {\n      const result = (event.target as IDBRequest).result;\n      resolve(result);\n    };\n\n    request.onerror = (event: Event) => {\n      reject((event.target as IDBRequest).error);\n    };\n  });\n}\n"]}