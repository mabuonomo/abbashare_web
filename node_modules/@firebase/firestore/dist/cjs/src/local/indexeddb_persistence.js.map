{"version":3,"sources":["../src/local/indexeddb_persistence.ts"],"names":[],"mappings":"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","file":"indexeddb_persistence.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport { DatabaseInfo } from '../core/database_info';\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport { assert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport * as log from '../util/log';\nimport { AutoId } from '../util/misc';\n\nimport { IndexedDbMutationQueue } from './indexeddb_mutation_queue';\nimport { IndexedDbQueryCache } from './indexeddb_query_cache';\nimport { IndexedDbRemoteDocumentCache } from './indexeddb_remote_document_cache';\nimport { ALL_STORES, DbOwner, DbOwnerKey } from './indexeddb_schema';\nimport { createOrUpgradeDb, SCHEMA_VERSION } from './indexeddb_schema';\nimport { LocalSerializer } from './local_serializer';\nimport { MutationQueue } from './mutation_queue';\nimport { Persistence } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { QueryCache } from './query_cache';\nimport { RemoteDocumentCache } from './remote_document_cache';\nimport { SimpleDb, SimpleDbTransaction } from './simple_db';\n\nconst LOG_TAG = 'IndexedDbPersistence';\n\n/** If the owner lease is older than 5 seconds, try to take ownership. */\nconst OWNER_LEASE_MAX_AGE_MS = 5000;\n/** Refresh the owner lease every 4 seconds while owner. */\nconst OWNER_LEASE_REFRESH_INTERVAL_MS = 4000;\n\n/** LocalStorage location to indicate a zombied ownerId (see class comment). */\nconst ZOMBIE_OWNER_LOCALSTORAGE_SUFFIX = 'zombiedOwnerId';\n/** Error when the owner lease cannot be acquired or is lost. */\nconst EXISTING_OWNER_ERROR_MSG =\n  'There is another tab open with offline' +\n  ' persistence enabled. Only one such tab is allowed at a time. The' +\n  ' other tab must be closed or persistence must be disabled.';\nconst UNSUPPORTED_PLATFORM_ERROR_MSG =\n  'This platform is either missing' +\n  ' IndexedDB or is known to have an incomplete implementation. Offline' +\n  ' persistence has been disabled.';\n\n/**\n * An IndexedDB-backed instance of Persistence. Data is stored persistently\n * across sessions.\n *\n * Currently the Firestore SDK only supports a single consumer of the database,\n * but browsers obviously support multiple tabs. IndexedDbPersistence ensures a\n * single consumer of the database via an \"owner lease\" stored in the database.\n *\n * On startup, IndexedDbPersistence assigns itself a random \"ownerId\" and writes\n * it to a special \"owner\" object in the database (if no entry exists already or\n * the current entry is expired). This owner lease is then verified inside every\n * transaction to ensure the lease has not been lost.\n *\n * If a tab opts not to acquire the owner lease (because there's an existing\n * non-expired owner) or loses the owner lease, IndexedDbPersistence enters a\n * failed state and all subsequent operations will automatically fail.\n *\n * The current owner regularly refreshes the owner lease with new timestamps to\n * prevent newly-opened tabs from taking over ownership.\n *\n * Additionally there is an optimization so that when a tab is closed, the owner\n * lease is released immediately (this is especially important to make sure that\n * a refreshed tab is able to immediately re-acquire the owner lease).\n * Unfortunately, IndexedDB cannot be reliably used in window.unload since it is\n * an asynchronous API. So in addition to attempting to give up the lease,\n * the owner writes its ownerId to a \"zombiedOwnerId\" entry in LocalStorage\n * which acts as an indicator that another tab should go ahead and take the\n * owner lease immediately regardless of the current lease timestamp.\n */\nexport class IndexedDbPersistence implements Persistence {\n  /**\n   * The name of the main (and currently only) IndexedDB database. this name is\n   * appended to the prefix provided to the IndexedDbPersistence constructor.\n   */\n  static MAIN_DATABASE = 'main';\n\n  private simpleDb: SimpleDb;\n  private started: boolean;\n  private dbName: string;\n  private localStoragePrefix: string;\n  private ownerId: string = this.generateOwnerId();\n\n  /**\n   * Set to an Error object if we encounter an unrecoverable error. All further\n   * transactions will be failed with this error.\n   */\n  private persistenceError: Error | null;\n  /** The setInterval() handle tied to refreshing the owner lease. */\n  // tslint:disable-next-line:no-any setTimeout() type differs on browser / node\n  private ownerLeaseRefreshHandle: any;\n  /** Our window.unload handler, if registered. */\n  private windowUnloadHandler: (() => void) | null;\n\n  private serializer: LocalSerializer;\n\n  constructor(prefix: string, serializer: JsonProtoSerializer) {\n    this.dbName = prefix + IndexedDbPersistence.MAIN_DATABASE;\n    this.serializer = new LocalSerializer(serializer);\n    this.localStoragePrefix = prefix;\n  }\n\n  start(): Promise<void> {\n    if (!IndexedDbPersistence.isAvailable()) {\n      this.persistenceError = new FirestoreError(\n        Code.UNIMPLEMENTED,\n        UNSUPPORTED_PLATFORM_ERROR_MSG\n      );\n      return Promise.reject(this.persistenceError);\n    }\n\n    assert(!this.started, 'IndexedDbPersistence double-started!');\n    this.started = true;\n\n    return SimpleDb.openOrCreate(this.dbName, SCHEMA_VERSION, createOrUpgradeDb)\n      .then(db => {\n        this.simpleDb = db;\n      })\n      .then(() => this.tryAcquireOwnerLease())\n      .then(() => {\n        this.scheduleOwnerLeaseRefreshes();\n        this.attachWindowUnloadHook();\n      });\n  }\n\n  shutdown(): Promise<void> {\n    assert(this.started, 'IndexedDbPersistence shutdown without start!');\n    this.started = false;\n    this.detachWindowUnloadHook();\n    this.stopOwnerLeaseRefreshes();\n    return this.releaseOwnerLease().then(() => {\n      this.simpleDb.close();\n    });\n  }\n\n  getMutationQueue(user: User): MutationQueue {\n    return IndexedDbMutationQueue.forUser(user, this.serializer);\n  }\n\n  getQueryCache(): QueryCache {\n    return new IndexedDbQueryCache(this.serializer);\n  }\n\n  getRemoteDocumentCache(): RemoteDocumentCache {\n    return new IndexedDbRemoteDocumentCache(this.serializer);\n  }\n\n  runTransaction<T>(\n    action: string,\n    operation: (transaction: SimpleDbTransaction) => PersistencePromise<T>\n  ): Promise<T> {\n    if (this.persistenceError) {\n      return Promise.reject(this.persistenceError);\n    }\n\n    log.debug(LOG_TAG, 'Starting transaction:', action);\n\n    // Do all transactions as readwrite against all object stores, since we\n    // are the only reader/writer.\n    return this.simpleDb.runTransaction('readwrite', ALL_STORES, txn => {\n      // Verify that we still have the owner lease as part of every transaction.\n      return this.ensureOwnerLease(txn).next(() => operation(txn));\n    });\n  }\n\n  static isAvailable(): boolean {\n    return SimpleDb.isAvailable();\n  }\n\n  /**\n   * Generates a string used as a prefix when storing data in IndexedDB and\n   * LocalStorage.\n   */\n  static buildStoragePrefix(databaseInfo: DatabaseInfo): string {\n    // Use two different prefix formats:\n    //\n    //   * firestore / persistenceKey / projectID . databaseID / ...\n    //   * firestore / persistenceKey / projectID / ...\n    //\n    // projectIDs are DNS-compatible names and cannot contain dots\n    // so there's no danger of collisions.\n    let database = databaseInfo.databaseId.projectId;\n    if (!databaseInfo.databaseId.isDefaultDatabase) {\n      database += '.' + databaseInfo.databaseId.database;\n    }\n\n    return 'firestore/' + databaseInfo.persistenceKey + '/' + database + '/';\n  }\n\n  /**\n   * Acquires the owner lease if there's no valid owner. Else returns a rejected\n   * promise.\n   */\n  private tryAcquireOwnerLease(): Promise<void> {\n    // NOTE: Don't use this.runTransaction, since it requires us to already\n    // have the lease.\n    return this.simpleDb.runTransaction('readwrite', [DbOwner.store], txn => {\n      const store = txn.store<DbOwnerKey, DbOwner>(DbOwner.store);\n      return store.get('owner').next(dbOwner => {\n        if (!this.validOwner(dbOwner)) {\n          const newDbOwner = new DbOwner(this.ownerId, Date.now());\n          log.debug(\n            LOG_TAG,\n            'No valid owner. Acquiring owner lease. Current owner:',\n            dbOwner,\n            'New owner:',\n            newDbOwner\n          );\n          return store.put('owner', newDbOwner);\n        } else {\n          log.debug(\n            LOG_TAG,\n            'Valid owner already. Failing. Current owner:',\n            dbOwner\n          );\n          this.persistenceError = new FirestoreError(\n            Code.FAILED_PRECONDITION,\n            EXISTING_OWNER_ERROR_MSG\n          );\n          return PersistencePromise.reject<void>(this.persistenceError);\n        }\n      });\n    });\n  }\n\n  /** Checks the owner lease and deletes it if we are the current owner. */\n  private releaseOwnerLease(): Promise<void> {\n    // NOTE: Don't use this.runTransaction, since it requires us to already\n    // have the lease.\n    return this.simpleDb.runTransaction('readwrite', [DbOwner.store], txn => {\n      const store = txn.store<DbOwnerKey, DbOwner>(DbOwner.store);\n      return store.get('owner').next(dbOwner => {\n        if (dbOwner !== null && dbOwner.ownerId === this.ownerId) {\n          log.debug(LOG_TAG, 'Releasing owner lease.');\n          return store.delete('owner');\n        } else {\n          return PersistencePromise.resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Checks the owner lease and returns a rejected promise if we are not the\n   * current owner. This should be included in every transaction to guard\n   * against losing the owner lease.\n   */\n  private ensureOwnerLease(txn: SimpleDbTransaction): PersistencePromise<void> {\n    const store = txn.store<DbOwnerKey, DbOwner>(DbOwner.store);\n    return store.get('owner').next(dbOwner => {\n      if (dbOwner === null || dbOwner.ownerId !== this.ownerId) {\n        this.persistenceError = new FirestoreError(\n          Code.FAILED_PRECONDITION,\n          EXISTING_OWNER_ERROR_MSG\n        );\n        return PersistencePromise.reject<void>(this.persistenceError);\n      } else {\n        return PersistencePromise.resolve();\n      }\n    });\n  }\n\n  /**\n   * Returns true if the provided owner exists, has a recent timestamp, and\n   * isn't zombied.\n   *\n   * NOTE: To determine if the owner is zombied, this method reads from\n   * LocalStorage which could be mildly expensive.\n   */\n  private validOwner(dbOwner: DbOwner | null): boolean {\n    const now = Date.now();\n    const minAcceptable = now - OWNER_LEASE_MAX_AGE_MS;\n    const maxAcceptable = now;\n    if (dbOwner === null) {\n      return false; // no owner.\n    } else if (dbOwner.leaseTimestampMs < minAcceptable) {\n      return false; // owner lease has expired.\n    } else if (dbOwner.leaseTimestampMs > maxAcceptable) {\n      log.error(\n        'Persistence owner-lease is in the future. Discarding.',\n        dbOwner\n      );\n      return false;\n    } else if (dbOwner.ownerId === this.getZombiedOwnerId()) {\n      return false; // owner's tab closed.\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * Schedules a recurring timer to update the owner lease timestamp to prevent\n   * other tabs from taking the lease.\n   */\n  private scheduleOwnerLeaseRefreshes(): void {\n    // NOTE: This doesn't need to be scheduled on the async queue and doing so\n    // would increase the chances of us not refreshing on time if the queue is\n    // backed up for some reason.\n    this.ownerLeaseRefreshHandle = setInterval(() => {\n      const txResult = this.runTransaction('Refresh owner timestamp', txn => {\n        // NOTE: We don't need to validate the current owner contents, since\n        // runTransaction does that automatically.\n        const store = txn.store<DbOwnerKey, DbOwner>(DbOwner.store);\n        return store.put('owner', new DbOwner(this.ownerId, Date.now()));\n      });\n\n      txResult.catch(reason => {\n        // Probably means we lost the lease. Report the error and stop trying to\n        // refresh the lease.\n        log.error(reason);\n        this.stopOwnerLeaseRefreshes();\n      });\n    }, OWNER_LEASE_REFRESH_INTERVAL_MS);\n  }\n\n  private stopOwnerLeaseRefreshes(): void {\n    if (this.ownerLeaseRefreshHandle) {\n      clearInterval(this.ownerLeaseRefreshHandle);\n      this.ownerLeaseRefreshHandle = null;\n    }\n  }\n\n  /**\n   * Attaches a window.unload handler that will synchronously write our\n   * ownerId to a \"zombie owner id\" location in localstorage. This can be used\n   * by tabs trying to acquire the lease to determine that the lease should be\n   * acquired immediately even if the timestamp is recent. This is particularly\n   * important for the refresh case (so the tab correctly re-acquires the owner\n   * lease). LocalStorage is used for this rather than IndexedDb because it is\n   * a synchronous API and so can be used reliably from an unload handler.\n   */\n  private attachWindowUnloadHook(): void {\n    this.windowUnloadHandler = () => {\n      // Record that we're zombied.\n      this.setZombiedOwnerId(this.ownerId);\n\n      // Attempt graceful shutdown (including releasing our owner lease), but\n      // there's no guarantee it will complete.\n      this.shutdown();\n    };\n    window.addEventListener('unload', this.windowUnloadHandler);\n  }\n\n  private detachWindowUnloadHook(): void {\n    if (this.windowUnloadHandler) {\n      window.removeEventListener('unload', this.windowUnloadHandler);\n      this.windowUnloadHandler = null;\n    }\n  }\n\n  /**\n   * Returns any recorded \"zombied owner\" (i.e. a previous owner that became\n   * zombied due to their tab closing) from LocalStorage, or null if no such\n   * record exists.\n   */\n  private getZombiedOwnerId(): string | null {\n    try {\n      const zombiedOwnerId = window.localStorage.getItem(\n        this.zombiedOwnerLocalStorageKey()\n      );\n      log.debug(LOG_TAG, 'Zombied ownerID from LocalStorage:', zombiedOwnerId);\n      return zombiedOwnerId;\n    } catch (e) {\n      // Gracefully handle if LocalStorage isn't available / working.\n      log.error(LOG_TAG, 'Failed to get zombie owner id.', e);\n      return null;\n    }\n  }\n\n  /**\n   * Records a zombied owner (an owner that had its tab closed) in LocalStorage\n   * or, if passed null, deletes any recorded zombied owner.\n   */\n  private setZombiedOwnerId(zombieOwnerId: string | null) {\n    try {\n      if (zombieOwnerId === null) {\n        window.localStorage.removeItem(this.zombiedOwnerLocalStorageKey());\n      } else {\n        window.localStorage.setItem(\n          this.zombiedOwnerLocalStorageKey(),\n          zombieOwnerId\n        );\n      }\n    } catch (e) {\n      // Gracefully handle if LocalStorage isn't available / working.\n      log.error(LOG_TAG, 'Failed to set zombie owner id.', e);\n    }\n  }\n\n  private zombiedOwnerLocalStorageKey(): string {\n    return this.localStoragePrefix + ZOMBIE_OWNER_LOCALSTORAGE_SUFFIX;\n  }\n\n  private generateOwnerId(): string {\n    // For convenience, just use an AutoId.\n    return AutoId.newId();\n  }\n}\n"]}