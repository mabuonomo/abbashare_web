{"version":3,"sources":["../src/local/no_op_garbage_collector.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,oDAAsE;AAMtE,6DAA2D;AAE3D;;;;GAIG;AACH;IAAA;QACW,YAAO,GAAG,KAAK,CAAC;IAmB3B,CAAC;IAjBC,+CAAgB,GAAhB,UAAiB,aAA4B;QAC3C,+CAA+C;IACjD,CAAC;IAED,kDAAmB,GAAnB,UAAoB,aAA4B;QAC9C,+CAA+C;IACjD,CAAC;IAED,qDAAsB,GAAtB,UAAuB,GAAgB;QACrC,kCAAkC;IACpC,CAAC;IAED,6CAAc,GAAd,UACE,GAAkC;QAElC,MAAM,CAAC,wCAAkB,CAAC,OAAO,CAAC,4BAAc,EAAE,CAAC,CAAC;IACtD,CAAC;IACH,2BAAC;AAAD,CApBA,AAoBC,IAAA;AApBY,oDAAoB","file":"no_op_garbage_collector.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DocumentKeySet, documentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\n\nimport { GarbageCollector } from './garbage_collector';\nimport { GarbageSource } from './garbage_source';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\n\n/**\n * A garbage collector implementation that does absolutely nothing. It ignores\n * all addGarbageSource and addPotentialGarbageKey messages and and never\n * produces any garbage.\n */\nexport class NoOpGarbageCollector implements GarbageCollector {\n  readonly isEager = false;\n\n  addGarbageSource(garbageSource: GarbageSource): void {\n    // Not tracking garbage so don't track sources.\n  }\n\n  removeGarbageSource(garbageSource: GarbageSource): void {\n    // Not tracking garbage so don't track sources.\n  }\n\n  addPotentialGarbageKey(key: DocumentKey): void {\n    // Not tracking garbage so ignore.\n  }\n\n  collectGarbage(\n    txn: PersistenceTransaction | null\n  ): PersistencePromise<DocumentKeySet> {\n    return PersistencePromise.resolve(documentKeySet());\n  }\n}\n"]}