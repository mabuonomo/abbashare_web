{"version":3,"sources":["../src/local/garbage_source.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG","file":"garbage_source.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DocumentKey } from '../model/document_key';\n\nimport { GarbageCollector } from './garbage_collector';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\n\n/**\n * A pseudo-collection that maintains references to documents. GarbageSource\n * collections notify the GarbageCollector when references to documents change\n * through the GarbageCollector.addPotentialGarbageKey method.\n */\nexport interface GarbageSource {\n  /**\n   * Sets the garbage collector to which this collection should send\n   * addPotentialGarbageKey messages.\n   */\n  setGarbageCollector(gc: GarbageCollector | null): void;\n\n  /**\n   * Checks to see if there are any references to a document with the given key.\n   * This can be used by garbage collectors to double-check if a key exists in\n   * this collection when it was released elsewhere.\n   *\n   * PORTING NODE: This is used in contexts where PersistenceTransaction is\n   * known not to be needed, in this case we just pass in null. Therefore\n   * any implementations must gaurd against null values.\n   */\n  containsKey(\n    transaction: PersistenceTransaction | null,\n    key: DocumentKey\n  ): PersistencePromise<boolean>;\n}\n"]}