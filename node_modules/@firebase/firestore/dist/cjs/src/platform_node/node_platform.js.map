{"version":3,"sources":["../src/platform_node/node_platform.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAKH,mDAA2D;AAC3D,uCAAqD;AAErD,qDAAmD;AACnD,6CAAgD;AAEhD;IAAA;QACW,oBAAe,GAAG,IAAI,CAAC;QAEvB,oBAAe,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC;IA2B/C,CAAC;IAzBC,qCAAc,GAAd,UAAe,YAA0B;QACvC,MAAM,CAAC,6BAAe,EAAE,CAAC,IAAI,CAAC,UAAA,MAAM;YAClC,MAAM,CAAC,IAAI,gCAAc,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACL,CAAC;IAED,oCAAa,GAAb,UAAc,WAAuB;QACnC,MAAM,CAAC,IAAI,gCAAmB,CAAC,WAAW,EAAE,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,CAAC;IACxE,CAAC;IAED,2BAAI,GAAJ,UAAK,OAAe;QAClB,iDAAiD;QACjD,2DAA2D;QAC3D,EAAE,CAAC,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACrC,MAAM,IAAI,sBAAc,CACtB,YAAI,CAAC,gBAAgB,EACrB,6BAA6B,GAAG,OAAO,CACxC,CAAC;QACJ,CAAC;QACD,MAAM,CAAC,IAAI,MAAM,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC1D,CAAC;IAED,2BAAI,GAAJ,UAAK,GAAW;QACd,MAAM,CAAC,IAAI,MAAM,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACtD,CAAC;IACH,mBAAC;AAAD,CA9BA,AA8BC,IAAA;AA9BY,oCAAY","file":"node_platform.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DatabaseId, DatabaseInfo } from '../core/database_info';\nimport { Platform } from '../platform/platform';\nimport { Connection } from '../remote/connection';\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport { Code, FirestoreError } from '../util/error';\n\nimport { GrpcConnection } from './grpc_connection';\nimport { loadProtosAsync } from './load_protos';\n\nexport class NodePlatform implements Platform {\n  readonly base64Available = true;\n\n  readonly emptyByteString = new Uint8Array(0);\n\n  loadConnection(databaseInfo: DatabaseInfo): Promise<Connection> {\n    return loadProtosAsync().then(protos => {\n      return new GrpcConnection(protos, databaseInfo);\n    });\n  }\n\n  newSerializer(partitionId: DatabaseId): JsonProtoSerializer {\n    return new JsonProtoSerializer(partitionId, { useProto3Json: false });\n  }\n\n  atob(encoded: string): string {\n    // Node actually doesn't validate base64 strings.\n    // A quick sanity check that is not a fool-proof validation\n    if (/[^-A-Za-z0-9+/=]/.test(encoded)) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Not a valid Base64 string: ' + encoded\n      );\n    }\n    return new Buffer(encoded, 'base64').toString('binary');\n  }\n\n  btoa(raw: string): string {\n    return new Buffer(raw, 'binary').toString('base64');\n  }\n}\n"]}