{"version":3,"sources":["../src/model/mutation_batch.ts"],"names":[],"mappings":"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","file":"mutation_batch.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Timestamp } from '../core/timestamp';\nimport { BatchId, ProtoByteString } from '../core/types';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  DocumentVersionMap,\n  documentVersionMap\n} from './collections';\nimport { MaybeDocument } from './document';\nimport { DocumentKey } from './document_key';\nimport { Mutation, MutationResult } from './mutation';\nimport { assert } from '../util/assert';\nimport * as misc from '../util/misc';\n\nexport const BATCHID_UNKNOWN = -1;\n\n/**\n * A batch of mutations that will be sent as one unit to the backend.\n */\nexport class MutationBatch {\n  constructor(\n    public batchId: BatchId,\n    public localWriteTime: Timestamp,\n    public mutations: Mutation[]\n  ) {}\n\n  /**\n   * Applies all the mutations in this MutationBatch to the specified document\n   * to create a new remote document\n   *\n   * @param docKey The key of the document to apply mutations to.\n   * @param maybeDoc The document to apply mutations to.\n   * @param batchResult The result of applying the MutationBatch to the\n   * backend.\n   */\n  applyToRemoteDocument(\n    docKey: DocumentKey,\n    maybeDoc: MaybeDocument | null,\n    batchResult: MutationBatchResult\n  ): MaybeDocument | null {\n    if (maybeDoc) {\n      assert(\n        maybeDoc.key.equals(docKey),\n        `applyToRemoteDocument: key ${docKey} should match maybeDoc key\n        ${maybeDoc.key}`\n      );\n    }\n\n    const mutationResults = batchResult.mutationResults;\n    assert(\n      mutationResults.length === this.mutations.length,\n      `Mismatch between mutations length\n      (${this.mutations.length}) and mutation results length\n      (${mutationResults.length}).`\n    );\n\n    for (let i = 0; i < this.mutations.length; i++) {\n      const mutation = this.mutations[i];\n      if (mutation.key.equals(docKey)) {\n        const mutationResult = mutationResults[i];\n        maybeDoc = mutation.applyToRemoteDocument(maybeDoc, mutationResult);\n      }\n    }\n    return maybeDoc;\n  }\n\n  /**\n   * Computes the local view of a document given all the mutations in this\n   * batch.\n   *\n   * @param docKey The key of the document to apply mutations to.\n   * @param maybeDoc The document to apply mutations to.\n   */\n  applyToLocalView(\n    docKey: DocumentKey,\n    maybeDoc: MaybeDocument | null\n  ): MaybeDocument | null {\n    if (maybeDoc) {\n      assert(\n        maybeDoc.key.equals(docKey),\n        `applyToLocalDocument: key ${docKey} should match maybeDoc key\n        ${maybeDoc.key}`\n      );\n    }\n\n    for (let i = 0; i < this.mutations.length; i++) {\n      const mutation = this.mutations[i];\n      if (mutation.key.equals(docKey)) {\n        maybeDoc = mutation.applyToLocalView(maybeDoc, this.localWriteTime);\n      }\n    }\n    return maybeDoc;\n  }\n\n  keys(): DocumentKeySet {\n    let keySet = documentKeySet();\n\n    for (const mutation of this.mutations) {\n      keySet = keySet.add(mutation.key);\n    }\n    return keySet;\n  }\n\n  equals(other: MutationBatch): boolean {\n    return (\n      this.batchId === other.batchId &&\n      misc.arrayEquals(this.mutations, other.mutations)\n    );\n  }\n\n  /**\n   * Returns true if this mutation batch has already been removed from the\n   * mutation queue.\n   *\n   * Note that not all implementations of the MutationQueue necessarily use\n   * tombstones as part of their implementation and generally speaking no code\n   * outside the mutation queues should really care about this.\n   */\n  isTombstone(): boolean {\n    return this.mutations.length === 0;\n  }\n\n  /** Converts this batch into a tombstone */\n  toTombstone(): MutationBatch {\n    return new MutationBatch(this.batchId, this.localWriteTime, []);\n  }\n}\n\n/** The result of applying a mutation batch to the backend. */\nexport class MutationBatchResult {\n  private constructor(\n    readonly batch: MutationBatch,\n    readonly commitVersion: SnapshotVersion,\n    readonly mutationResults: MutationResult[],\n    readonly streamToken: ProtoByteString,\n    /**\n     * A pre-computed mapping from each mutated document to the resulting\n     * version.\n     */\n    readonly docVersions: DocumentVersionMap\n  ) {}\n\n  /**\n   * Creates a new MutationBatchResult for the given batch and results. There\n   * must be one result for each mutation in the batch. This static factory\n   * caches a document=>version mapping (docVersions).\n   */\n  static from(\n    batch: MutationBatch,\n    commitVersion: SnapshotVersion,\n    results: MutationResult[],\n    streamToken: ProtoByteString\n  ) {\n    assert(\n      batch.mutations.length === results.length,\n      'Mutations sent ' +\n        batch.mutations.length +\n        ' must equal results received ' +\n        results.length\n    );\n\n    let versionMap = documentVersionMap();\n    const mutations = batch.mutations;\n    for (let i = 0; i < mutations.length; i++) {\n      let version = results[i].version;\n      if (version === null) {\n        // deletes don't have a version, so we substitute the commitVersion\n        // of the entire batch.\n        version = commitVersion;\n      }\n\n      versionMap = versionMap.insert(mutations[i].key, version);\n    }\n\n    return new MutationBatchResult(\n      batch,\n      commitVersion,\n      results,\n      streamToken,\n      versionMap\n    );\n  }\n}\n"]}