{"version":3,"sources":["../src/util/promise.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAaH;IAKE;QAAA,iBAKC;QAJC,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAC,UAAC,OAAoB,EAAE,MAAgB;YAChE,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACvB,CAAC,CAAC,CAAC;IACL,CAAC;IACH,eAAC;AAAD,CAXA,AAWC,IAAA;;AAED;;;;;;GAMG;AACH,MAAM,mBACJ,MAAW,EACX,EAA4C,EAC5C,YAAgB;IAEhB,IAAI,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;IAC3C,MAAM,CAAC,OAAO,CAAC,UAAA,KAAK;QAClB,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,EAAE,CAAC,KAAK,EAAE,UAAU,CAAC,EAArB,CAAqB,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,MAA4B,CAAC;AACtC,CAAC","file":"promise.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AnyDuringMigration } from './misc';\n\nexport interface Resolver<R> {\n  (value?: R | Promise<R>): void;\n}\n\n// tslint:disable-next-line:no-any\nexport interface Rejecter {\n  (value?: any): void;\n}\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  resolve: Resolver<R>;\n  reject: Rejecter;\n\n  constructor() {\n    this.promise = new Promise((resolve: Resolver<R>, reject: Rejecter) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n}\n\n/**\n * Takes an array of values and sequences them using the promise (or value)\n * returned by the supplied callback. The callback for each item is called\n * after the promise is resolved for the previous item.\n * The function returns a promise which is resolved after the promise for\n * the last item is resolved.\n */\nexport function sequence<T, R>(\n  values: T[],\n  fn: (value: T, result?: R) => R | Promise<R>,\n  initialValue?: R\n): Promise<R> {\n  let result = Promise.resolve(initialValue);\n  values.forEach(value => {\n    result = result.then(lastResult => fn(value, lastResult));\n  });\n  return result as AnyDuringMigration;\n}\n"]}