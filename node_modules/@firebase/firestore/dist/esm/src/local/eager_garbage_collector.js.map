{"version":3,"sources":["../src/local/eager_garbage_collector.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAEH,OAAO,EAAkB,cAAc,EAAE,MAAM,sBAAsB,CAAC;AAMtE,OAAO,EAAE,kBAAkB,EAAE,MAAM,uBAAuB,CAAC;AAE3D;;;;;;;;GAQG;AACH;IAAA;QACW,YAAO,GAAG,IAAI,CAAC;QAExB;;WAEG;QACK,YAAO,GAAoB,EAAE,CAAC;QAEtC;;;WAGG;QACK,qBAAgB,GAAmB,cAAc,EAAE,CAAC;IAyD9D,CAAC;IAvDC,gDAAgB,GAAhB,UAAiB,aAA4B;QAC3C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACjC,aAAa,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;IAC1C,CAAC;IAED,mDAAmB,GAAnB,UAAoB,aAA4B;QAC9C,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5D,aAAa,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;IAC1C,CAAC;IAED,sDAAsB,GAAtB,UAAuB,GAAgB;QACrC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACzD,CAAC;IAED,8CAAc,GAAd,UACE,GAAkC;QADpC,iBAsBC;QAnBC,IAAM,QAAQ,GAAoC,EAAE,CAAC;QACrD,IAAI,WAAW,GAAG,cAAc,EAAE,CAAC;QAEnC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,UAAA,GAAG;YAC/B,IAAM,cAAc,GAAG,KAAI,CAAC,wBAAwB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YAC/D,QAAQ,CAAC,IAAI,CACX,cAAc,CAAC,IAAI,CAAC,UAAA,OAAO;gBACzB,2CAA2C;gBAC3C,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;oBACb,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBACrC,CAAC;gBACD,MAAM,CAAC,kBAAkB,CAAC,OAAO,EAAE,CAAC;YACtC,CAAC,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,wEAAwE;QACxE,IAAI,CAAC,gBAAgB,GAAG,cAAc,EAAE,CAAC;QACzC,MAAM,CAAC,kBAAkB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,cAAM,OAAA,WAAW,EAAX,CAAW,CAAC,CAAC;IACtE,CAAC;IAED,wDAAwB,GAAxB,UACE,GAAkC,EAClC,GAAgB;QAEhB,IAAM,OAAO,GAAG,kBAAkB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAClD,MAAM,CAAC,IAAI,CAAC,OAAO;aAChB,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,cAAM,OAAA,MAAM,CAAC,WAAW,CAAC,GAAG,EAAE,GAAG,CAAC,EAA5B,CAA4B,EAAlC,CAAkC,CAAC;aACjD,MAAM,CAA8B,UAAC,OAAO,EAAE,WAAW;YACxD,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM;gBACxB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;oBACX,MAAM,CAAC,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAC1C,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,MAAM,CAAC,WAAW,EAAE,CAAC;gBACvB,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,EAAE,OAAO,CAAC,CAAC;IAChB,CAAC;IACH,4BAAC;AAAD,CArEA,AAqEC,IAAA","file":"eager_garbage_collector.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DocumentKeySet, documentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\n\nimport { GarbageCollector } from './garbage_collector';\nimport { GarbageSource } from './garbage_source';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\n\n/**\n * A garbage collector implementation that eagerly collects documents as soon as\n * they're no longer referenced in any of its registered GarbageSources.\n *\n * This implementation keeps track of a set of keys that are potentially garbage\n * without keeping an exact reference count. During collectGarbage, the\n * collector verifies that all potential garbage keys actually have no\n * references by consulting its list of garbage sources.\n */\nexport class EagerGarbageCollector implements GarbageCollector {\n  readonly isEager = true;\n\n  /**\n   * The garbage collectible sources to double-check during garbage collection.\n   */\n  private sources: GarbageSource[] = [];\n\n  /**\n   * A set of potentially garbage keys.\n   * PORTING NOTE: This would be a mutable set if Javascript had one.\n   */\n  private potentialGarbage: DocumentKeySet = documentKeySet();\n\n  addGarbageSource(garbageSource: GarbageSource): void {\n    this.sources.push(garbageSource);\n    garbageSource.setGarbageCollector(this);\n  }\n\n  removeGarbageSource(garbageSource: GarbageSource): void {\n    this.sources.splice(this.sources.indexOf(garbageSource), 1);\n    garbageSource.setGarbageCollector(null);\n  }\n\n  addPotentialGarbageKey(key: DocumentKey): void {\n    this.potentialGarbage = this.potentialGarbage.add(key);\n  }\n\n  collectGarbage(\n    txn: PersistenceTransaction | null\n  ): PersistencePromise<DocumentKeySet> {\n    const promises: Array<PersistencePromise<void>> = [];\n    let garbageKeys = documentKeySet();\n\n    this.potentialGarbage.forEach(key => {\n      const hasRefsPromise = this.documentHasAnyReferences(txn, key);\n      promises.push(\n        hasRefsPromise.next(hasRefs => {\n          // If there are no references, get the key.\n          if (!hasRefs) {\n            garbageKeys = garbageKeys.add(key);\n          }\n          return PersistencePromise.resolve();\n        })\n      );\n    });\n\n    // Clear locally retained potential keys and returned confirmed garbage.\n    this.potentialGarbage = documentKeySet();\n    return PersistencePromise.waitFor(promises).next(() => garbageKeys);\n  }\n\n  documentHasAnyReferences(\n    txn: PersistenceTransaction | null,\n    key: DocumentKey\n  ): PersistencePromise<boolean> {\n    const initial = PersistencePromise.resolve(false);\n    return this.sources\n      .map(source => () => source.containsKey(txn, key))\n      .reduce<PersistencePromise<boolean>>((promise, nextPromise) => {\n        return promise.next(result => {\n          if (result) {\n            return PersistencePromise.resolve(true);\n          } else {\n            return nextPromise();\n          }\n        });\n      }, initial);\n  }\n}\n"]}