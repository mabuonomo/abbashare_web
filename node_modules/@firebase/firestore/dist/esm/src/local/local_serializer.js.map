{"version":3,"sources":["../src/local/local_serializer.ts"],"names":[],"mappings":"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","file":"local_serializer.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\nimport { Query } from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Timestamp } from '../core/timestamp';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { MutationBatch } from '../model/mutation_batch';\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport { assert, fail } from '../util/assert';\n\nimport {\n  DbMutationBatch,\n  DbNoDocument,\n  DbQuery,\n  DbRemoteDocument,\n  DbTarget,\n  DbTimestamp\n} from './indexeddb_schema';\nimport { QueryData, QueryPurpose } from './query_data';\n\n/** Serializer for values stored in the LocalStore. */\nexport class LocalSerializer {\n  constructor(private remoteSerializer: JsonProtoSerializer) {}\n\n  /** Decodes a remote document from storage locally to a Document. */\n  fromDbRemoteDocument(remoteDoc: DbRemoteDocument): MaybeDocument {\n    if (remoteDoc.document) {\n      return this.remoteSerializer.fromDocument(remoteDoc.document);\n    } else if (remoteDoc.noDocument) {\n      const key = DocumentKey.fromSegments(remoteDoc.noDocument.path);\n      const readTime = remoteDoc.noDocument.readTime;\n      const timestamp = new Timestamp(readTime.seconds, readTime.nanos);\n      return new NoDocument(key, SnapshotVersion.fromTimestamp(timestamp));\n    } else {\n      return fail('Unexpected DbRemoteDocument');\n    }\n  }\n\n  /** Encodes a document for storage locally. */\n  toDbRemoteDocument(maybeDoc: MaybeDocument): DbRemoteDocument {\n    if (maybeDoc instanceof Document) {\n      const doc = this.remoteSerializer.toDocument(maybeDoc);\n      return new DbRemoteDocument(null, doc);\n    } else {\n      const path = maybeDoc.key.path.toArray();\n      const timestamp = maybeDoc.version.toTimestamp();\n      const readTime = new DbTimestamp(timestamp.seconds, timestamp.nanos);\n      return new DbRemoteDocument(new DbNoDocument(path, readTime), null);\n    }\n  }\n\n  /** Encodes a batch of mutations into a DbMutationBatch for local storage. */\n  toDbMutationBatch(userId: string, batch: MutationBatch): DbMutationBatch {\n    const serializedMutations = batch.mutations.map(m =>\n      this.remoteSerializer.toMutation(m)\n    );\n    return new DbMutationBatch(\n      userId,\n      batch.batchId,\n      batch.localWriteTime.toEpochMilliseconds(),\n      serializedMutations\n    );\n  }\n\n  /** Decodes a DbMutationBatch into a MutationBatch */\n  fromDbMutationBatch(dbBatch: DbMutationBatch): MutationBatch {\n    const mutations = dbBatch.mutations.map(m =>\n      this.remoteSerializer.fromMutation(m)\n    );\n    const timestamp = Timestamp.fromEpochMilliseconds(dbBatch.localWriteTimeMs);\n    return new MutationBatch(dbBatch.batchId, timestamp, mutations);\n  }\n\n  /** Decodes a DbTarget into QueryData */\n  fromDbTarget(dbTarget: DbTarget): QueryData {\n    const readTime = new Timestamp(\n      dbTarget.readTime.seconds,\n      dbTarget.readTime.nanos\n    );\n    const version = SnapshotVersion.fromTimestamp(readTime);\n    let query: Query;\n    if (isDocumentQuery(dbTarget.query)) {\n      query = this.remoteSerializer.fromDocumentsTarget(dbTarget.query);\n    } else {\n      query = this.remoteSerializer.fromQueryTarget(dbTarget.query);\n    }\n    return new QueryData(\n      query,\n      dbTarget.targetId,\n      QueryPurpose.Listen,\n      version,\n      dbTarget.resumeToken\n    );\n  }\n\n  /** Encodes QueryData into a DbTarget for storage locally. */\n  toDbTarget(queryData: QueryData): DbTarget {\n    assert(\n      QueryPurpose.Listen === queryData.purpose,\n      'Only queries with purpose ' +\n        QueryPurpose.Listen +\n        ' may be stored, got ' +\n        queryData.purpose\n    );\n    const timestamp = queryData.snapshotVersion.toTimestamp();\n    const dbTimestamp = new DbTimestamp(timestamp.seconds, timestamp.nanos);\n    let queryProto: DbQuery;\n    if (queryData.query.isDocumentQuery()) {\n      queryProto = this.remoteSerializer.toDocumentsTarget(queryData.query);\n    } else {\n      queryProto = this.remoteSerializer.toQueryTarget(queryData.query);\n    }\n    assert(\n      typeof queryData.resumeToken === 'string',\n      'Persisting non-string resume token not supported.'\n    );\n    const resumeToken = queryData.resumeToken as string;\n\n    // lastListenSequenceNumber is always 0 until we do real GC.\n    return new DbTarget(\n      queryData.targetId,\n      queryData.query.canonicalId(),\n      dbTimestamp,\n      resumeToken,\n      0,\n      queryProto\n    );\n  }\n}\n\n/**\n * A helper function for figuring out what kind of query has been stored.\n */\nfunction isDocumentQuery(dbQuery: DbQuery): dbQuery is api.DocumentsTarget {\n  return (dbQuery as api.DocumentsTarget).documents !== undefined;\n}\n"]}