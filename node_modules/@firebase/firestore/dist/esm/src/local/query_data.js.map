{"version":3,"sources":["../src/local/query_data.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAGH,OAAO,EAAE,eAAe,EAAE,MAAM,0BAA0B,CAAC;AAE3D,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;AAEvD,oEAAoE;AACpE,MAAM,CAAN,IAAY,YAWX;AAXD,WAAY,YAAY;IACtB,+BAA+B;IAC/B,mDAAM,CAAA;IAEN;;OAEG;IACH,qFAAuB,CAAA;IAEvB,sDAAsD;IACtD,qEAAe,CAAA;AACjB,CAAC,EAXW,YAAY,GAAZ,YAAY,KAAZ,YAAY,QAWvB;AAED;;GAEG;AACH;IACE;QACE,mCAAmC;QAC5B,KAAY;QACnB;;;WAGG;QACI,QAAkB;QACzB,gCAAgC;QACzB,OAAqB;QAC5B,wDAAwD;QACjD,eAAsD;QAC7D;;;;;WAKG;QACI,WAAgD;QAPhD,gCAAA,EAAA,kBAAmC,eAAe,CAAC,GAAG;QAOtD,4BAAA,EAAA,cAA+B,eAAe,EAAE;QAhBhD,UAAK,GAAL,KAAK,CAAO;QAKZ,aAAQ,GAAR,QAAQ,CAAU;QAElB,YAAO,GAAP,OAAO,CAAc;QAErB,oBAAe,GAAf,eAAe,CAAuC;QAOtD,gBAAW,GAAX,WAAW,CAAqC;IACtD,CAAC;IAEJ;;;OAGG;IACH,0BAAM,GAAN,UAAO,OAGN;QACC,MAAM,CAAC,IAAI,SAAS,CAClB,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,OAAO,EACZ,OAAO,CAAC,eAAe,EACvB,OAAO,CAAC,WAAW,CACpB,CAAC;IACJ,CAAC;IAED,0BAAM,GAAN,UAAO,KAAgB;QACrB,MAAM,CAAC,CACL,IAAI,CAAC,QAAQ,KAAK,KAAK,CAAC,QAAQ;YAChC,IAAI,CAAC,OAAO,KAAK,KAAK,CAAC,OAAO;YAC9B,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC;YAClD,IAAI,CAAC,WAAW,KAAK,KAAK,CAAC,WAAW;YACtC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAC/B,CAAC;IACJ,CAAC;IACH,gBAAC;AAAD,CAhDA,AAgDC,IAAA","file":"query_data.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { ProtoByteString, TargetId } from '../core/types';\nimport { emptyByteString } from '../platform/platform';\n\n/** An enumeration of the different purposes we have for queries. */\nexport enum QueryPurpose {\n  /** A regular, normal query. */\n  Listen,\n\n  /**\n   * The query was used to refill a query after an existence filter mismatch.\n   */\n  ExistenceFilterMismatch,\n\n  /** The query was used to resolve a limbo document. */\n  LimboResolution\n}\n\n/**\n * An immutable set of metadata that the local store tracks for each query.\n */\nexport class QueryData {\n  constructor(\n    /** The query being listened to. */\n    public query: Query,\n    /**\n     * The target ID to which the query corresponds; Assigned by the\n     * LocalStore for user listens and by the SyncEngine for limbo watches.\n     */\n    public targetId: TargetId,\n    /** The purpose of the query. */\n    public purpose: QueryPurpose,\n    /** The latest snapshot version seen for this target. */\n    public snapshotVersion: SnapshotVersion = SnapshotVersion.MIN,\n    /**\n     * An opaque, server-assigned token that allows watching a query to be\n     * resumed after disconnecting without retransmitting all the data that\n     * matches the query. The resume token essentially identifies a point in\n     * time from which the server should resume sending results.\n     */\n    public resumeToken: ProtoByteString = emptyByteString()\n  ) {}\n\n  /**\n   * Creates a new query data instance with an updated snapshot version and\n   * resume token.\n   */\n  update(updated: {\n    resumeToken: ProtoByteString;\n    snapshotVersion: SnapshotVersion;\n  }): QueryData {\n    return new QueryData(\n      this.query,\n      this.targetId,\n      this.purpose,\n      updated.snapshotVersion,\n      updated.resumeToken\n    );\n  }\n\n  equals(other: QueryData): boolean {\n    return (\n      this.targetId === other.targetId &&\n      this.purpose === other.purpose &&\n      this.snapshotVersion.equals(other.snapshotVersion) &&\n      this.resumeToken === other.resumeToken &&\n      this.query.equals(other.query)\n    );\n  }\n}\n"]}