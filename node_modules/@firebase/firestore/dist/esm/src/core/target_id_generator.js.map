{"version":3,"sources":["../src/core/target_id_generator.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAIH,IAAM,aAAa,GAAG,CAAC,CAAC;AAExB,IAAK,YAGJ;AAHD,WAAK,YAAY;IACf,2DAAc,CAAA;IACd,2DAAc,CAAA;AAChB,CAAC,EAHI,YAAY,KAAZ,YAAY,QAGhB;AAED;;;;;;GAMG;AACH;IAGE,2BAAoB,WAAmB,EAAE,SAAuB;QAAvB,0BAAA,EAAA,aAAuB;QAA5C,gBAAW,GAAX,WAAW,CAAQ;QACrC,oEAAoE;QACpE,IAAM,qBAAqB,GAAG,CAAC,SAAS,IAAI,aAAa,CAAC,IAAI,aAAa,CAAC;QAC5E,IAAM,cAAc,GAAG,SAAS,GAAG,qBAAqB,CAAC;QACzD,EAAE,CAAC,CAAC,cAAc,IAAI,WAAW,CAAC,CAAC,CAAC;YAClC,mBAAmB;YACnB,8BAA8B;YAC9B,mBAAmB;YACnB,4BAA4B;YAC5B,QAAQ;YACR,sBAAsB;YACtB,kBAAkB;YAClB,IAAI,CAAC,UAAU,GAAG,qBAAqB,GAAG,IAAI,CAAC,WAAW,CAAC;QAC7D,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,mBAAmB;YACnB,8BAA8B;YAC9B,mBAAmB;YACnB,4BAA4B;YAC5B,QAAQ;YACR,sBAAsB;YACtB,kBAAkB;YAClB,IAAI,CAAC,UAAU;gBACb,CAAC,qBAAqB,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,IAAI,aAAa,CAAC,CAAC;QACtE,CAAC;IACH,CAAC;IAED,gCAAI,GAAJ;QACE,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,aAAa,CAAC;QACtC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAEM,+BAAa,GAApB,UAAqB,SAAuB;QAAvB,0BAAA,EAAA,aAAuB;QAC1C,MAAM,CAAC,IAAI,iBAAiB,CAAC,YAAY,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;IACnE,CAAC;IAEM,+BAAa,GAApB;QACE,MAAM,CAAC,IAAI,iBAAiB,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;IACxD,CAAC;IACH,wBAAC;AAAD,CAzCA,AAyCC,IAAA","file":"target_id_generator.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TargetId } from './types';\n\nconst RESERVED_BITS = 1;\n\nenum GeneratorIds {\n  LocalStore = 0,\n  SyncEngine = 1\n}\n\n/**\n * TargetIdGenerator generates monotonically increasing integer IDs. There are\n * separate generators for different scopes. While these generators will operate\n * independently of each other, they are scoped, such that no two generators\n * will ever produce the same ID. This is useful, because sometimes the backend\n * may group IDs from separate parts of the client into the same ID space.\n */\nexport class TargetIdGenerator {\n  private previousId: TargetId;\n\n  constructor(private generatorId: number, initAfter: TargetId = 0) {\n    // Replace the generator part of initAfter with this generator's ID.\n    const afterWithoutGenerator = (initAfter >> RESERVED_BITS) << RESERVED_BITS;\n    const afterGenerator = initAfter - afterWithoutGenerator;\n    if (afterGenerator >= generatorId) {\n      // For example, if:\n      //   this.generatorId = 0b0000\n      //   after = 0b1011\n      //   afterGenerator = 0b0001\n      // Then:\n      //   previous = 0b1010\n      //   next = 0b1100\n      this.previousId = afterWithoutGenerator | this.generatorId;\n    } else {\n      // For example, if:\n      //   this.generatorId = 0b0001\n      //   after = 0b1010\n      //   afterGenerator = 0b0000\n      // Then:\n      //   previous = 0b1001\n      //   next = 0b1011\n      this.previousId =\n        (afterWithoutGenerator | this.generatorId) - (1 << RESERVED_BITS);\n    }\n  }\n\n  next(): TargetId {\n    this.previousId += 1 << RESERVED_BITS;\n    return this.previousId;\n  }\n\n  static forLocalStore(initAfter: TargetId = 0): TargetIdGenerator {\n    return new TargetIdGenerator(GeneratorIds.LocalStore, initAfter);\n  }\n\n  static forSyncEngine(): TargetIdGenerator {\n    return new TargetIdGenerator(GeneratorIds.SyncEngine);\n  }\n}\n"]}