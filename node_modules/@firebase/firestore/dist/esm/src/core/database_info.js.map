{"version":3,"sources":["../src/core/database_info.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAEH,OAAO,EAAE,mBAAmB,EAAE,MAAM,cAAc,CAAC;AAEnD;IACE;;;;;;;;;OASG;IACH,sBACW,UAAsB,EACtB,cAAsB,EACtB,IAAY,EACZ,GAAY;QAHZ,eAAU,GAAV,UAAU,CAAY;QACtB,mBAAc,GAAd,cAAc,CAAQ;QACtB,SAAI,GAAJ,IAAI,CAAQ;QACZ,QAAG,GAAH,GAAG,CAAS;IACpB,CAAC;IACN,mBAAC;AAAD,CAjBA,AAiBC,IAAA;;AAED,+CAA+C;AAC/C,IAAM,qBAAqB,GAAG,WAAW,CAAC;AAE1C,wEAAwE;AACxE;IAEE,oBAAqB,SAAiB,EAAE,QAAiB;QAApC,cAAS,GAAT,SAAS,CAAQ;QACpC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,qBAAqB,CAAC;IAC9D,CAAC;IAED,sBAAI,yCAAiB;aAArB;YACE,MAAM,CAAC,IAAI,CAAC,QAAQ,KAAK,qBAAqB,CAAC;QACjD,CAAC;;;OAAA;IAED,2BAAM,GAAN,UAAO,KAAS;QACd,MAAM,CAAC,CACL,KAAK,YAAY,UAAU;YAC3B,KAAK,CAAC,SAAS,KAAK,IAAI,CAAC,SAAS;YAClC,KAAK,CAAC,QAAQ,KAAK,IAAI,CAAC,QAAQ,CACjC,CAAC;IACJ,CAAC;IAED,8BAAS,GAAT,UAAU,KAAiB;QACzB,MAAM,CAAC,CACL,mBAAmB,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,SAAS,CAAC;YACpD,mBAAmB,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,QAAQ,CAAC,CACnD,CAAC;IACJ,CAAC;IACH,iBAAC;AAAD,CAxBA,AAwBC,IAAA","file":"database_info.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { primitiveComparator } from '../util/misc';\n\nexport class DatabaseInfo {\n  /**\n   * Constructs a DatabaseInfo using the provided host, databaseId and\n   * persistenceKey.\n   *\n   * @param databaseId The database to use.\n   * @param persistenceKey A unique identifier for this Firestore's local\n   * storage (used in conjunction with the databaseId).\n   * @param host The Firestore backend host to connect to.\n   * @param ssl Whether to use SSL when connecting.\n   */\n  constructor(\n    readonly databaseId: DatabaseId,\n    readonly persistenceKey: string,\n    readonly host: string,\n    readonly ssl: boolean\n  ) {}\n}\n\n/** The default database name for a project. */\nconst DEFAULT_DATABASE_NAME = '(default)';\n\n/** Represents the database ID a Firestore client is associated with. */\nexport class DatabaseId {\n  readonly database: string;\n  constructor(readonly projectId: string, database?: string) {\n    this.database = database ? database : DEFAULT_DATABASE_NAME;\n  }\n\n  get isDefaultDatabase(): boolean {\n    return this.database === DEFAULT_DATABASE_NAME;\n  }\n\n  equals(other: {}): boolean {\n    return (\n      other instanceof DatabaseId &&\n      other.projectId === this.projectId &&\n      other.database === this.database\n    );\n  }\n\n  compareTo(other: DatabaseId): number {\n    return (\n      primitiveComparator(this.projectId, other.projectId) ||\n      primitiveComparator(this.database, other.database)\n    );\n  }\n}\n"]}