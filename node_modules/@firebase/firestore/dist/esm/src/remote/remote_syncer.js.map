{"version":3,"sources":["../src/remote/remote_syncer.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG","file":"remote_syncer.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BatchId, TargetId } from '../core/types';\nimport { MutationBatchResult } from '../model/mutation_batch';\nimport { FirestoreError } from '../util/error';\n\nimport { RemoteEvent } from './remote_event';\n\n/**\n * A interface that describes the actions the RemoteStore needs to perform on\n * a cooperating synchronization engine.\n */\nexport interface RemoteSyncer {\n  /**\n   * Applies one remote event to the sync engine, notifying any views of the\n   * changes, and releasing any pending mutation batches that would become\n   * visible because of the snapshot version the remote event contains.\n   */\n  applyRemoteEvent(remoteEvent: RemoteEvent): Promise<void>;\n\n  /**\n   * Rejects the listen for the given targetID. This can be triggered by the\n   * backend for any active target.\n   *\n   * @param targetID The targetID corresponds to one previously initiated by the\n   * user as part of QueryData passed to listen() on RemoteStore.\n   * @param error A description of the condition that has forced the rejection.\n   * Nearly always this will be an indication that the user is no longer\n   * authorized to see the data matching the target.\n   */\n  rejectListen(targetId: TargetId, error: FirestoreError): Promise<void>;\n\n  /**\n   * Applies the result of a successful write of a mutation batch to the sync\n   * engine, emitting snapshots in any views that the mutation applies to, and\n   * removing the batch from the mutation queue.\n   */\n  applySuccessfulWrite(result: MutationBatchResult): Promise<void>;\n\n  /**\n   * Rejects the batch, removing the batch from the mutation queue, recomputing\n   * the local view of any documents affected by the batch and then, emitting\n   * snapshots with the reverted value.\n   */\n  rejectFailedWrite(batchId: BatchId, error: FirestoreError): Promise<void>;\n}\n"]}