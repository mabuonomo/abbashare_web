{"version":3,"sources":["../src/remote/rpc_error.ts"],"names":[],"mappings":"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","file":"rpc_error.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fail } from '../util/assert';\nimport { Code } from '../util/error';\n\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers.\n */\nenum RpcCode {\n  OK = 0,\n  CANCELLED = 1,\n  UNKNOWN = 2,\n  INVALID_ARGUMENT = 3,\n  DEADLINE_EXCEEDED = 4,\n  NOT_FOUND = 5,\n  ALREADY_EXISTS = 6,\n  PERMISSION_DENIED = 7,\n  UNAUTHENTICATED = 16,\n  RESOURCE_EXHAUSTED = 8,\n  FAILED_PRECONDITION = 9,\n  ABORTED = 10,\n  OUT_OF_RANGE = 11,\n  UNIMPLEMENTED = 12,\n  INTERNAL = 13,\n  UNAVAILABLE = 14,\n  DATA_LOSS = 15\n}\n\nexport function isPermanentError(code: Code): boolean {\n  switch (code) {\n    case Code.OK:\n      return fail('Treated status OK as error');\n    case Code.CANCELLED:\n    case Code.UNKNOWN:\n    case Code.DEADLINE_EXCEEDED:\n    case Code.RESOURCE_EXHAUSTED:\n    case Code.INTERNAL:\n    case Code.UNAVAILABLE:\n    // Unauthenticated means something went wrong with our token and we need\n    // to retry with new credentials which will happen automatically.\n    // TODO(b/37325376): Give up after second unauthenticated error.\n    case Code.UNAUTHENTICATED:\n      return false;\n    case Code.INVALID_ARGUMENT:\n    case Code.NOT_FOUND:\n    case Code.ALREADY_EXISTS:\n    case Code.PERMISSION_DENIED:\n    case Code.FAILED_PRECONDITION:\n    // Aborted might be retried in some scenarios, but that is dependant on\n    // the context and should handled individually by the calling code.\n    // See https://cloud.google.com/apis/design/errors.\n    case Code.ABORTED:\n    case Code.OUT_OF_RANGE:\n    case Code.UNIMPLEMENTED:\n    case Code.DATA_LOSS:\n      return true;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.\n *\n * @returns The Code equivalent to the given status string or undefined if\n *     there is no match.\n */\nexport function mapCodeFromRpcStatus(status: string): Code | undefined {\n  // tslint:disable-next-line:no-any lookup by string\n  const code: RpcCode = RpcCode[status as any] as any;\n  if (code === undefined) {\n    return undefined;\n  }\n\n  return mapCodeFromRpcCode(code);\n}\n\n/**\n * Maps an error Code from GRPC status code number, like 0, 1, or 14. These\n * are not the same as HTTP status codes.\n *\n * @returns The Code equivalent to the given GRPC status code. Fails if there\n *     is no match.\n */\nexport function mapCodeFromRpcCode(code: number): Code {\n  switch (code) {\n    case RpcCode.OK:\n      return Code.OK;\n    case RpcCode.CANCELLED:\n      return Code.CANCELLED;\n    case RpcCode.UNKNOWN:\n      return Code.UNKNOWN;\n    case RpcCode.DEADLINE_EXCEEDED:\n      return Code.DEADLINE_EXCEEDED;\n    case RpcCode.RESOURCE_EXHAUSTED:\n      return Code.RESOURCE_EXHAUSTED;\n    case RpcCode.INTERNAL:\n      return Code.INTERNAL;\n    case RpcCode.UNAVAILABLE:\n      return Code.UNAVAILABLE;\n    case RpcCode.UNAUTHENTICATED:\n      return Code.UNAUTHENTICATED;\n    case RpcCode.INVALID_ARGUMENT:\n      return Code.INVALID_ARGUMENT;\n    case RpcCode.NOT_FOUND:\n      return Code.NOT_FOUND;\n    case RpcCode.ALREADY_EXISTS:\n      return Code.ALREADY_EXISTS;\n    case RpcCode.PERMISSION_DENIED:\n      return Code.PERMISSION_DENIED;\n    case RpcCode.FAILED_PRECONDITION:\n      return Code.FAILED_PRECONDITION;\n    case RpcCode.ABORTED:\n      return Code.ABORTED;\n    case RpcCode.OUT_OF_RANGE:\n      return Code.OUT_OF_RANGE;\n    case RpcCode.UNIMPLEMENTED:\n      return Code.UNIMPLEMENTED;\n    case RpcCode.DATA_LOSS:\n      return Code.DATA_LOSS;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Maps an RPC code from a Code. This is the reverse operation from\n * mapCodeFromRpcCode and should really only be used in tests.\n */\nexport function mapRpcCodeFromCode(code: Code | undefined): number {\n  if (code === undefined) {\n    return RpcCode.OK;\n  }\n\n  switch (code) {\n    case Code.OK:\n      return RpcCode.OK;\n    case Code.CANCELLED:\n      return RpcCode.CANCELLED;\n    case Code.UNKNOWN:\n      return RpcCode.UNKNOWN;\n    case Code.DEADLINE_EXCEEDED:\n      return RpcCode.DEADLINE_EXCEEDED;\n    case Code.RESOURCE_EXHAUSTED:\n      return RpcCode.RESOURCE_EXHAUSTED;\n    case Code.INTERNAL:\n      return RpcCode.INTERNAL;\n    case Code.UNAVAILABLE:\n      return RpcCode.UNAVAILABLE;\n    case Code.UNAUTHENTICATED:\n      return RpcCode.UNAUTHENTICATED;\n    case Code.INVALID_ARGUMENT:\n      return RpcCode.INVALID_ARGUMENT;\n    case Code.NOT_FOUND:\n      return RpcCode.NOT_FOUND;\n    case Code.ALREADY_EXISTS:\n      return RpcCode.ALREADY_EXISTS;\n    case Code.PERMISSION_DENIED:\n      return RpcCode.PERMISSION_DENIED;\n    case Code.FAILED_PRECONDITION:\n      return RpcCode.FAILED_PRECONDITION;\n    case Code.ABORTED:\n      return RpcCode.ABORTED;\n    case Code.OUT_OF_RANGE:\n      return RpcCode.OUT_OF_RANGE;\n    case Code.UNIMPLEMENTED:\n      return RpcCode.UNIMPLEMENTED;\n    case Code.DATA_LOSS:\n      return RpcCode.DATA_LOSS;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nexport function mapCodeFromHttpStatus(status: number): Code {\n  // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n  // status codes but the mapping is not bijective. In each case of ambiguity\n  // this function chooses a primary error.\n  //\n  // [1]\n  // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n  switch (status) {\n    case 200: // OK\n      return Code.OK;\n\n    case 400: // Bad Request\n      return Code.INVALID_ARGUMENT;\n    // Other possibilities based on the forward mapping\n    // return Code.FAILED_PRECONDITION;\n    // return Code.OUT_OF_RANGE;\n\n    case 401: // Unauthorized\n      return Code.UNAUTHENTICATED;\n\n    case 403: // Forbidden\n      return Code.PERMISSION_DENIED;\n\n    case 404: // Not Found\n      return Code.NOT_FOUND;\n\n    case 409: // Conflict\n      return Code.ABORTED;\n    // Other possibilities:\n    // return Code.ALREADY_EXISTS;\n\n    case 416: // Range Not Satisfiable\n      return Code.OUT_OF_RANGE;\n\n    case 429: // Too Many Requests\n      return Code.RESOURCE_EXHAUSTED;\n\n    case 499: // Client Closed Request\n      return Code.CANCELLED;\n\n    case 500: // Internal Server Error\n      return Code.UNKNOWN;\n    // Other possibilities:\n    // return Code.INTERNAL;\n    // return Code.DATA_LOSS;\n\n    case 501: // Unimplemented\n      return Code.UNIMPLEMENTED;\n\n    case 503: // Service Unavailable\n      return Code.UNAVAILABLE;\n\n    case 504: // Gateway Timeout\n      return Code.DEADLINE_EXCEEDED;\n\n    default:\n      if (status >= 200 && status < 300) return Code.OK;\n      if (status >= 400 && status < 500) return Code.FAILED_PRECONDITION;\n      if (status >= 500 && status < 600) return Code.INTERNAL;\n      return Code.UNKNOWN;\n  }\n}\n"]}