{"version":3,"sources":["../src/remote/serializer.ts"],"names":[],"mappings":"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","file":"serializer.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\nimport { Blob } from '../api/blob';\nimport { GeoPoint } from '../api/geo_point';\nimport { DatabaseId } from '../core/database_info';\nimport {\n  Bound,\n  Direction,\n  Filter,\n  NanFilter,\n  NullFilter,\n  OrderBy,\n  Query,\n  RelationFilter,\n  RelationOp\n} from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Timestamp } from '../core/timestamp';\nimport { ProtoByteString, TargetId } from '../core/types';\nimport { QueryData, QueryPurpose } from '../local/query_data';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport * as fieldValue from '../model/field_value';\nimport {\n  DeleteMutation,\n  FieldMask,\n  FieldTransform,\n  Mutation,\n  MutationResult,\n  PatchMutation,\n  Precondition,\n  ServerTimestampTransform,\n  SetMutation,\n  TransformMutation\n} from '../model/mutation';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { AnyJs } from '../util/misc';\nimport * as obj from '../util/obj';\nimport * as typeUtils from '../util/types';\n\nimport { ExistenceFilter } from './existence_filter';\nimport { mapCodeFromRpcCode, mapRpcCodeFromCode } from './rpc_error';\nimport {\n  DocumentWatchChange,\n  ExistenceFilterChange,\n  WatchChange,\n  WatchTargetChange,\n  WatchTargetChangeState\n} from './watch_change';\nimport { ApiClientObjectMap } from '../protos/firestore_proto_api';\n\nconst DIRECTIONS = (() => {\n  const dirs: { [dir: string]: api.OrderDirection } = {};\n  dirs[Direction.ASCENDING.name] = 'ASCENDING';\n  dirs[Direction.DESCENDING.name] = 'DESCENDING';\n  return dirs;\n})();\n\nconst OPERATORS = (() => {\n  const ops: { [op: string]: api.FieldFilterOp } = {};\n  ops[RelationOp.LESS_THAN.name] = 'LESS_THAN';\n  ops[RelationOp.LESS_THAN_OR_EQUAL.name] = 'LESS_THAN_OR_EQUAL';\n  ops[RelationOp.GREATER_THAN.name] = 'GREATER_THAN';\n  ops[RelationOp.GREATER_THAN_OR_EQUAL.name] = 'GREATER_THAN_OR_EQUAL';\n  ops[RelationOp.EQUAL.name] = 'EQUAL';\n  return ops;\n})();\n\nfunction assertPresent(value: AnyJs, description: string) {\n  assert(!typeUtils.isNullOrUndefined(value), description + ' is missing');\n}\n\nfunction parseInt64(value: number | string): number {\n  // TODO(bjornick): Handle int64 greater than 53 bits.\n  if (typeof value === 'number') {\n    return value;\n  } else if (typeof value === 'string') {\n    return parseInt(value, 10);\n  } else {\n    return fail(\"can't parse \" + value);\n  }\n}\n\n// This is a supplement to the generated proto interfaces, which fail to account\n// for the fact that a timestamp may be encoded as either a string OR this.\ninterface TimestampProto {\n  seconds?: string;\n  nanos?: number;\n}\n\nexport interface SerializerOptions {\n  /**\n   * The serializer supports both Protobuf.js and Proto3 JSON formats. By\n   * setting this flag to true, the serializer will use the Proto3 JSON format.\n   *\n   * For a description of the Proto3 JSON format check\n   * https://developers.google.com/protocol-buffers/docs/proto3#json\n   */\n  useProto3Json: boolean;\n}\n\n/**\n * Generates JsonObject values for the Datastore API suitable for sending to\n * either GRPC stub methods or via the JSON/HTTP REST API.\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\nexport class JsonProtoSerializer {\n  constructor(\n    private databaseId: DatabaseId,\n    private options: SerializerOptions\n  ) {}\n\n  private emptyByteString(): ProtoByteString {\n    if (this.options.useProto3Json) {\n      return '';\n    } else {\n      return new Uint8Array(0);\n    }\n  }\n\n  private unsafeCastProtoByteString(byteString: ProtoByteString): string {\n    // byteStrings can be either string or UInt8Array, but the typings say\n    // it's always a string. Cast as string to avoid type check failing\n    return byteString as string;\n  }\n\n  fromRpcStatus(status: api.Status): FirestoreError {\n    const code =\n      status.code === undefined\n        ? Code.UNKNOWN\n        : mapCodeFromRpcCode(status.code);\n    return new FirestoreError(code, status.message || '');\n  }\n\n  /**\n   * Returns a value for a Date that's appropriate to put into a proto.\n   * DO NOT USE THIS FOR ANYTHING ELSE.\n   * This method cheats. It's typed as returning \"string\" because that's what\n   * our generated proto interfaces say dates must be. But it's easier and safer\n   * to actually return a Timestamp proto.\n   */\n  private toTimestamp(timestamp: Timestamp): string {\n    return {\n      seconds: timestamp.seconds,\n      nanos: timestamp.nanos\n      // tslint:disable-next-line:no-any\n    } as any;\n  }\n\n  private fromTimestamp(date: string | TimestampProto): Timestamp {\n    // The json interface (for the browser) will return an iso timestamp string,\n    // while the proto js library (for node) will return a\n    // google.protobuf.Timestamp instance.\n    if (typeof date === 'string') {\n      // TODO(b/37282237): Use strings for Proto3 timestamps\n      // assert(this.options.useProto3Json,\n      //   'The timestamp string format requires Proto3.');\n      return Timestamp.fromISOString(date);\n    } else {\n      assert(!!date, 'Cannot deserialize null or undefined timestamp.');\n      // TODO(b/37282237): Use strings for Proto3 timestamps\n      // assert(!this.options.useProto3Json,\n      //   'The timestamp instance format requires Proto JS.');\n      const seconds = parseInt64(date.seconds || '0');\n      const nanos = date.nanos || 0;\n      return new Timestamp(seconds, nanos);\n    }\n  }\n\n  /**\n   * Returns a value for bytes that's appropriate to put in a proto.\n   * DO NOT USE THIS FOR ANYTHING ELSE.\n   * This method cheats. It's typed as returning \"string\" because that's what\n   * our generated proto interfaces say bytes must be. But it should return\n   * an Uint8Array in Node.\n   */\n  private toBytes(bytes: Blob): string {\n    if (this.options.useProto3Json) {\n      return bytes.toBase64();\n    } else {\n      // The typings say it's a string, but it needs to be a Uint8Array in Node.\n      return this.unsafeCastProtoByteString(bytes.toUint8Array());\n    }\n  }\n\n  /**\n   * Parse the blob from the protos into the internal Blob class. Note that the\n   * typings assume all blobs are strings, but they are actually Uint8Arrays\n   * on Node.\n   */\n  private fromBlob(blob: string | Uint8Array): Blob {\n    if (typeof blob === 'string') {\n      assert(\n        this.options.useProto3Json,\n        'Expected bytes to be passed in as Uint8Array, but got a string instead.'\n      );\n      return Blob.fromBase64String(blob);\n    } else {\n      assert(\n        !this.options.useProto3Json,\n        'Expected bytes to be passed in as string, but got something else instead.'\n      );\n      return Blob.fromUint8Array(blob);\n    }\n  }\n\n  toVersion(version: SnapshotVersion): string {\n    return this.toTimestamp(version.toTimestamp());\n  }\n\n  fromVersion(version: string): SnapshotVersion {\n    assert(!!version, \"Trying to deserialize version that isn't set\");\n    return SnapshotVersion.fromTimestamp(this.fromTimestamp(version));\n  }\n\n  toResourceName(databaseId: DatabaseId, path: ResourcePath): string {\n    return this.fullyQualifiedPrefixPath(databaseId)\n      .child('documents')\n      .child(path)\n      .canonicalString();\n  }\n\n  fromResourceName(name: string): ResourcePath {\n    const resource = ResourcePath.fromString(name);\n    assert(\n      this.isValidResourceName(resource),\n      'Tried to deserialize invalid key ' + resource.toString()\n    );\n    return resource;\n  }\n\n  toName(key: DocumentKey): string {\n    return this.toResourceName(this.databaseId, key.path);\n  }\n\n  fromName(name: string): DocumentKey {\n    const resource = this.fromResourceName(name);\n    assert(\n      resource.get(1) === this.databaseId.projectId,\n      'Tried to deserialize key from different project: ' +\n        resource.get(1) +\n        ' vs ' +\n        this.databaseId.projectId\n    );\n    assert(\n      (!resource.get(3) && !this.databaseId.database) ||\n        resource.get(3) === this.databaseId.database,\n      'Tried to deserialize key from different database: ' +\n        resource.get(3) +\n        ' vs ' +\n        this.databaseId.database\n    );\n    return new DocumentKey(this.extractLocalPathFromResourceName(resource));\n  }\n\n  toQueryPath(path: ResourcePath): string {\n    if (path.length === 0) {\n      // If the path is empty, the backend requires we leave off the /documents\n      // at the end.\n      return this.encodedDatabaseId;\n    }\n    return this.toResourceName(this.databaseId, path);\n  }\n\n  fromQueryPath(name: string): ResourcePath {\n    const resourceName = this.fromResourceName(name);\n    if (resourceName.length === 4) {\n      return ResourcePath.EMPTY_PATH;\n    }\n    return this.extractLocalPathFromResourceName(resourceName);\n  }\n\n  get encodedDatabaseId(): string {\n    const path = new ResourcePath([\n      'projects',\n      this.databaseId.projectId,\n      'databases',\n      this.databaseId.database\n    ]);\n    return path.canonicalString();\n  }\n\n  private fullyQualifiedPrefixPath(databaseId: DatabaseId): ResourcePath {\n    return new ResourcePath([\n      'projects',\n      databaseId.projectId,\n      'databases',\n      databaseId.database\n    ]);\n  }\n\n  private extractLocalPathFromResourceName(\n    resourceName: ResourcePath\n  ): ResourcePath {\n    assert(\n      resourceName.length > 4 && resourceName.get(4) === 'documents',\n      'tried to deserialize invalid key ' + resourceName.toString()\n    );\n    return resourceName.popFirst(5);\n  }\n\n  private isValidResourceName(path: ResourcePath): boolean {\n    // Resource names have at least 4 components (project ID, database ID)\n    return (\n      path.length >= 4 &&\n      path.get(0) === 'projects' &&\n      path.get(2) === 'databases'\n    );\n  }\n\n  toValue(val: fieldValue.FieldValue): api.Value {\n    if (val instanceof fieldValue.NullValue) {\n      return { nullValue: 'NULL_VALUE' };\n    } else if (val instanceof fieldValue.BooleanValue) {\n      return { booleanValue: val.value() };\n    } else if (val instanceof fieldValue.IntegerValue) {\n      return { integerValue: '' + val.value() };\n    } else if (val instanceof fieldValue.DoubleValue) {\n      const doubleValue = val.value();\n      if (this.options.useProto3Json) {\n        // Proto 3 let's us encode NaN and Infinity as string values as\n        // expected by the backend. This is currently not checked by our unit\n        // tests because they rely on protobuf.js.\n        if (isNaN(doubleValue)) {\n          return { doubleValue: 'NaN' } as {};\n        } else if (doubleValue === Infinity) {\n          return { doubleValue: 'Infinity' } as {};\n        } else if (doubleValue === -Infinity) {\n          return { doubleValue: '-Infinity' } as {};\n        }\n      }\n      return { doubleValue: val.value() };\n    } else if (val instanceof fieldValue.StringValue) {\n      return { stringValue: val.value() };\n    } else if (val instanceof fieldValue.ObjectValue) {\n      return { mapValue: this.toMapValue(val) };\n    } else if (val instanceof fieldValue.ArrayValue) {\n      return { arrayValue: this.toArrayValue(val) };\n    } else if (val instanceof fieldValue.TimestampValue) {\n      return {\n        timestampValue: this.toTimestamp(val.internalValue)\n      };\n    } else if (val instanceof fieldValue.GeoPointValue) {\n      return {\n        geoPointValue: {\n          latitude: val.value().latitude,\n          longitude: val.value().longitude\n        }\n      };\n    } else if (val instanceof fieldValue.BlobValue) {\n      return {\n        bytesValue: this.toBytes(val.value())\n      };\n    } else if (val instanceof fieldValue.RefValue) {\n      return {\n        referenceValue: this.toResourceName(val.databaseId, val.key.path)\n      };\n    } else {\n      return fail('Unknown FieldValue ' + JSON.stringify(val));\n    }\n  }\n\n  fromValue(obj: api.Value): fieldValue.FieldValue {\n    // tslint:disable-next-line:no-any\n    const type = (obj as any)['value_type'];\n    if (hasTag(obj, type, 'nullValue')) {\n      return fieldValue.NullValue.INSTANCE;\n    } else if (hasTag(obj, type, 'booleanValue')) {\n      return fieldValue.BooleanValue.of(obj.booleanValue!);\n    } else if (hasTag(obj, type, 'integerValue')) {\n      return new fieldValue.IntegerValue(parseInt64(obj.integerValue!));\n    } else if (hasTag(obj, type, 'doubleValue')) {\n      if (this.options.useProto3Json) {\n        // Proto 3 uses the string values 'NaN' and 'Infinity'.\n        if ((obj.doubleValue as {}) === 'NaN') {\n          return fieldValue.DoubleValue.NAN;\n        } else if ((obj.doubleValue as {}) === 'Infinity') {\n          return fieldValue.DoubleValue.POSITIVE_INFINITY;\n        } else if ((obj.doubleValue as {}) === '-Infinity') {\n          return fieldValue.DoubleValue.NEGATIVE_INFINITY;\n        }\n      }\n\n      return new fieldValue.DoubleValue(obj.doubleValue!);\n    } else if (hasTag(obj, type, 'stringValue')) {\n      return new fieldValue.StringValue(obj.stringValue!);\n    } else if (hasTag(obj, type, 'mapValue')) {\n      return this.fromFields(obj.mapValue!.fields || {});\n    } else if (hasTag(obj, type, 'arrayValue')) {\n      // \"values\" is not present if the array is empty\n      assertPresent(obj.arrayValue, 'arrayValue');\n      const values = obj.arrayValue!.values || [];\n      return new fieldValue.ArrayValue(values.map(v => this.fromValue(v)));\n    } else if (hasTag(obj, type, 'timestampValue')) {\n      assertPresent(obj.timestampValue, 'timestampValue');\n      return new fieldValue.TimestampValue(\n        this.fromTimestamp(obj.timestampValue!)\n      );\n    } else if (hasTag(obj, type, 'geoPointValue')) {\n      assertPresent(obj.geoPointValue, 'geoPointValue');\n      const latitude = obj.geoPointValue!.latitude || 0;\n      const longitude = obj.geoPointValue!.longitude || 0;\n      return new fieldValue.GeoPointValue(new GeoPoint(latitude, longitude));\n    } else if (hasTag(obj, type, 'bytesValue')) {\n      assertPresent(obj.bytesValue, 'bytesValue');\n      const blob = this.fromBlob(obj.bytesValue!);\n      return new fieldValue.BlobValue(blob);\n    } else if (hasTag(obj, type, 'referenceValue')) {\n      assertPresent(obj.referenceValue, 'referenceValue');\n      const resourceName = this.fromResourceName(obj.referenceValue!);\n      const dbId = new DatabaseId(resourceName.get(1), resourceName.get(3));\n      const key = new DocumentKey(\n        this.extractLocalPathFromResourceName(resourceName)\n      );\n      return new fieldValue.RefValue(dbId, key);\n    } else {\n      return fail('Unknown Value proto ' + JSON.stringify(obj));\n    }\n  }\n\n  /** Creates an api.Document from key and fields (but no create/update time) */\n  toMutationDocument(\n    key: DocumentKey,\n    fields: fieldValue.ObjectValue\n  ): api.Document {\n    return {\n      name: this.toName(key),\n      fields: this.toFields(fields)\n    };\n  }\n\n  toDocument(document: Document): api.Document {\n    assert(\n      !document.hasLocalMutations,\n      \"Can't serialize documents with mutations.\"\n    );\n    return {\n      name: this.toName(document.key),\n      fields: this.toFields(document.data),\n      updateTime: this.toTimestamp(document.version.toTimestamp())\n    };\n  }\n\n  fromDocument(document: api.Document): Document {\n    return new Document(\n      this.fromName(document.name!),\n      this.fromVersion(document.updateTime!),\n      this.fromFields(document.fields || {}),\n      { hasLocalMutations: false }\n    );\n  }\n\n  toFields(fields: fieldValue.ObjectValue): { [key: string]: api.Value } {\n    const result: { [key: string]: api.Value } = {};\n    fields.forEach((key, value) => {\n      result[key] = this.toValue(value);\n    });\n    return result;\n  }\n\n  fromFields(object: {}): fieldValue.ObjectValue {\n    // Proto map<string, Value> gets mapped to Object, so cast it.\n    const map = object as { [key: string]: api.Value };\n    let result = fieldValue.ObjectValue.EMPTY;\n    obj.forEach(map, (key, value) => {\n      result = result.set(new FieldPath([key]), this.fromValue(value));\n    });\n    return result;\n  }\n\n  toMapValue(map: fieldValue.ObjectValue): api.MapValue {\n    return {\n      fields: this.toFields(map)\n    };\n  }\n\n  toArrayValue(array: fieldValue.ArrayValue): api.ArrayValue {\n    const result: api.Value[] = [];\n    array.forEach(value => {\n      result.push(this.toValue(value));\n    });\n    return { values: result };\n  }\n\n  private fromFound(doc: api.BatchGetDocumentsResponse): Document {\n    assert(\n      !!doc.found,\n      'Tried to deserialize a found document from a missing document.'\n    );\n    assertPresent(doc.found!.name, 'doc.found.name');\n    assertPresent(doc.found!.updateTime, 'doc.found.updateTime');\n    const key = this.fromName(doc.found!.name!);\n    const version = this.fromVersion(doc.found!.updateTime!);\n    const fields = this.fromFields(doc.found!.fields || {});\n    return new Document(key, version, fields, { hasLocalMutations: false });\n  }\n\n  private fromMissing(result: api.BatchGetDocumentsResponse): NoDocument {\n    assert(\n      !!result.missing,\n      'Tried to deserialize a missing document from a found document.'\n    );\n    assert(\n      !!result.readTime,\n      'Tried to deserialize a missing document without a read time.'\n    );\n    const key = this.fromName(result.missing!);\n    const version = this.fromVersion(result.readTime!);\n    return new NoDocument(key, version);\n  }\n\n  fromMaybeDocument(result: api.BatchGetDocumentsResponse): MaybeDocument {\n    // tslint:disable-next-line:no-any\n    const type = (result as any)['result_type'];\n    if (hasTag(result, type, 'found')) {\n      return this.fromFound(result);\n    } else if (hasTag(result, type, 'missing')) {\n      return this.fromMissing(result);\n    }\n    return fail('invalid batch get response: ' + JSON.stringify(result));\n  }\n\n  private toWatchTargetChangeState(\n    state: WatchTargetChangeState\n  ): api.TargetChangeTargetChangeType {\n    switch (state) {\n      case WatchTargetChangeState.Added:\n        return 'ADD';\n      case WatchTargetChangeState.Current:\n        return 'CURRENT';\n      case WatchTargetChangeState.NoChange:\n        return 'NO_CHANGE';\n      case WatchTargetChangeState.Removed:\n        return 'REMOVE';\n      case WatchTargetChangeState.Reset:\n        return 'RESET';\n      default:\n        return fail('Unknown WatchTargetChangeState: ' + state);\n    }\n  }\n\n  toTestWatchChange(watchChange: WatchChange): api.ListenResponse {\n    if (watchChange instanceof ExistenceFilterChange) {\n      return {\n        filter: {\n          count: watchChange.existenceFilter.count,\n          targetId: watchChange.targetId\n        }\n      };\n    }\n    if (watchChange instanceof DocumentWatchChange) {\n      if (watchChange.newDoc instanceof Document) {\n        const doc = watchChange.newDoc;\n        return {\n          documentChange: {\n            document: {\n              name: this.toName(doc.key),\n              fields: this.toFields(doc.data),\n              updateTime: this.toVersion(doc.version)\n            },\n            targetIds: watchChange.updatedTargetIds,\n            removedTargetIds: watchChange.removedTargetIds\n          }\n        };\n      } else if (watchChange.newDoc instanceof NoDocument) {\n        const doc = watchChange.newDoc;\n        return {\n          documentDelete: {\n            document: this.toName(doc.key),\n            readTime: this.toVersion(doc.version),\n            removedTargetIds: watchChange.removedTargetIds\n          }\n        };\n      } else if (watchChange.newDoc === null) {\n        return {\n          documentRemove: {\n            document: this.toName(watchChange.key),\n            removedTargetIds: watchChange.removedTargetIds\n          }\n        };\n      }\n    }\n    if (watchChange instanceof WatchTargetChange) {\n      let cause: api.Status | undefined = undefined;\n      if (watchChange.cause) {\n        cause = {\n          code: mapRpcCodeFromCode(watchChange.cause.code),\n          message: watchChange.cause.message\n        };\n      }\n      return {\n        targetChange: {\n          targetChangeType: this.toWatchTargetChangeState(watchChange.state),\n          targetIds: watchChange.targetIds,\n          resumeToken: this.unsafeCastProtoByteString(watchChange.resumeToken),\n          cause\n        }\n      };\n    }\n    return fail('Unrecognized watch change: ' + JSON.stringify(watchChange));\n  }\n\n  fromWatchChange(change: api.ListenResponse): WatchChange {\n    // tslint:disable-next-line:no-any\n    const type = (change as any)['change_type'];\n    let watchChange: WatchChange;\n    if (hasTag(change, type, 'targetChange')) {\n      assertPresent(change.targetChange, 'targetChange');\n      // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'\n      // if unset\n      const state = this.fromWatchTargetChangeState(\n        change.targetChange!.targetChangeType || 'NO_CHANGE'\n      );\n      const targetIds: TargetId[] = change.targetChange!.targetIds || [];\n      const resumeToken =\n        change.targetChange!.resumeToken || this.emptyByteString();\n      const causeProto = change.targetChange!.cause;\n      const cause = causeProto && this.fromRpcStatus(causeProto);\n      watchChange = new WatchTargetChange(\n        state,\n        targetIds,\n        resumeToken,\n        cause || null\n      );\n    } else if (hasTag(change, type, 'documentChange')) {\n      assertPresent(change.documentChange, 'documentChange');\n      assertPresent(change.documentChange!.document, 'documentChange.name');\n      assertPresent(\n        change.documentChange!.document!.name,\n        'documentChange.document.name'\n      );\n      assertPresent(\n        change.documentChange!.document!.updateTime,\n        'documentChange.document.updateTime'\n      );\n      const entityChange = change.documentChange!;\n      const key = this.fromName(entityChange.document!.name!);\n      const version = this.fromVersion(entityChange.document!.updateTime!);\n      const fields = this.fromFields(entityChange.document!.fields || {});\n      const doc = new Document(key, version, fields, {\n        hasLocalMutations: false\n      });\n      const updatedTargetIds = entityChange.targetIds || [];\n      const removedTargetIds = entityChange.removedTargetIds || [];\n      watchChange = new DocumentWatchChange(\n        updatedTargetIds,\n        removedTargetIds,\n        doc.key,\n        doc\n      );\n    } else if (hasTag(change, type, 'documentDelete')) {\n      assertPresent(change.documentDelete, 'documentDelete');\n      assertPresent(change.documentDelete!.document, 'documentDelete.document');\n      const docDelete = change.documentDelete!;\n      const key = this.fromName(docDelete.document!);\n      const version = docDelete.readTime\n        ? this.fromVersion(docDelete.readTime)\n        : SnapshotVersion.forDeletedDoc();\n      const doc = new NoDocument(key, version);\n      const removedTargetIds = docDelete.removedTargetIds || [];\n      watchChange = new DocumentWatchChange([], removedTargetIds, doc.key, doc);\n    } else if (hasTag(change, type, 'documentRemove')) {\n      assertPresent(change.documentRemove, 'documentRemove');\n      assertPresent(change.documentRemove!.document, 'documentRemove');\n      const docRemove = change.documentRemove!;\n      const key = this.fromName(docRemove.document!);\n      const removedTargetIds = docRemove.removedTargetIds || [];\n      watchChange = new DocumentWatchChange([], removedTargetIds, key, null);\n    } else if (hasTag(change, type, 'filter')) {\n      // TODO(dimond): implement existence filter parsing with strategy.\n      assertPresent(change.filter, 'filter');\n      assertPresent(change.filter!.targetId, 'filter.targetId');\n      const filter = change.filter;\n      const count = filter!.count || 0;\n      const existenceFilter = new ExistenceFilter(count);\n      const targetId = filter!.targetId!;\n      watchChange = new ExistenceFilterChange(targetId, existenceFilter);\n    } else {\n      return fail('Unknown change type ' + JSON.stringify(change));\n    }\n    return watchChange;\n  }\n\n  fromWatchTargetChangeState(\n    state: api.TargetChangeTargetChangeType\n  ): WatchTargetChangeState {\n    if (state === 'NO_CHANGE') {\n      return WatchTargetChangeState.NoChange;\n    } else if (state === 'ADD') {\n      return WatchTargetChangeState.Added;\n    } else if (state === 'REMOVE') {\n      return WatchTargetChangeState.Removed;\n    } else if (state === 'CURRENT') {\n      return WatchTargetChangeState.Current;\n    } else if (state === 'RESET') {\n      return WatchTargetChangeState.Reset;\n    } else {\n      return fail('Got unexpected TargetChange.state: ' + state);\n    }\n  }\n\n  versionFromListenResponse(change: api.ListenResponse): SnapshotVersion {\n    // We have only reached a consistent snapshot for the entire stream if there\n    // is a read_time set and it applies to all targets (i.e. the list of\n    // targets is empty). The backend is guaranteed to send such responses.\n    // tslint:disable-next-line:no-any\n    const type = (change as any)['response_type'];\n    if (!hasTag(change, type, 'targetChange')) {\n      return SnapshotVersion.MIN;\n    }\n    const targetChange = change.targetChange!;\n    if (targetChange.targetIds && targetChange.targetIds.length) {\n      return SnapshotVersion.MIN;\n    }\n    if (!targetChange.readTime) {\n      return SnapshotVersion.MIN;\n    }\n    return this.fromVersion(targetChange.readTime);\n  }\n\n  toMutation(mutation: Mutation): api.Write {\n    let result: api.Write;\n    if (mutation instanceof SetMutation) {\n      result = {\n        update: this.toMutationDocument(mutation.key, mutation.value)\n      };\n    } else if (mutation instanceof DeleteMutation) {\n      result = { delete: this.toName(mutation.key) };\n    } else if (mutation instanceof PatchMutation) {\n      result = {\n        update: this.toMutationDocument(mutation.key, mutation.data),\n        updateMask: this.toDocumentMask(mutation.fieldMask)\n      };\n    } else if (mutation instanceof TransformMutation) {\n      result = {\n        transform: {\n          document: this.toName(mutation.key),\n          fieldTransforms: mutation.fieldTransforms.map(transform =>\n            this.toFieldTransform(transform)\n          )\n        }\n      };\n    } else {\n      return fail('Unknown mutation type ' + mutation.type);\n    }\n\n    if (!mutation.precondition.isNone) {\n      result.currentDocument = this.toPrecondition(mutation.precondition);\n    }\n\n    return result;\n  }\n\n  fromMutation(proto: api.Write): Mutation {\n    const precondition = proto.currentDocument\n      ? this.fromPrecondition(proto.currentDocument)\n      : Precondition.NONE;\n\n    if (proto.update) {\n      assertPresent(proto.update.name, 'name');\n      const key = this.fromName(proto.update.name!);\n      const value = this.fromFields(proto.update.fields || {});\n      if (proto.updateMask) {\n        const fieldMask = this.fromDocumentMask(proto.updateMask);\n        return new PatchMutation(key, value, fieldMask, precondition);\n      } else {\n        return new SetMutation(key, value, precondition);\n      }\n    } else if (proto.delete) {\n      const key = this.fromName(proto.delete);\n      return new DeleteMutation(key, precondition);\n    } else if (proto.transform) {\n      const key = this.fromName(proto.transform.document!);\n      const fieldTransforms = proto.transform.fieldTransforms!.map(transform =>\n        this.fromFieldTransform(transform)\n      );\n      assert(\n        precondition.exists === true,\n        'Transforms only support precondition \"exists == true\"'\n      );\n      return new TransformMutation(key, fieldTransforms);\n    } else {\n      return fail('unknown mutation proto: ' + JSON.stringify(proto));\n    }\n  }\n\n  private toPrecondition(precondition: Precondition): api.Precondition {\n    assert(!precondition.isNone, \"Can't serialize an empty precondition\");\n    if (precondition.updateTime !== undefined) {\n      return {\n        updateTime: this.toVersion(precondition.updateTime)\n      };\n    } else if (precondition.exists !== undefined) {\n      return { exists: precondition.exists };\n    } else {\n      return fail('Unknown precondition');\n    }\n  }\n\n  private fromPrecondition(precondition: api.Precondition): Precondition {\n    if (precondition.updateTime !== undefined) {\n      return Precondition.updateTime(this.fromVersion(precondition.updateTime));\n    } else if (precondition.exists !== undefined) {\n      return Precondition.exists(precondition.exists);\n    } else {\n      return Precondition.NONE;\n    }\n  }\n\n  private fromWriteResult(proto: api.WriteResult): MutationResult {\n    // NOTE: Deletes don't have an updateTime.\n    const version = proto.updateTime\n      ? this.fromVersion(proto.updateTime)\n      : null;\n    let transformResults: fieldValue.FieldValue[] | null = null;\n    if (proto.transformResults) {\n      transformResults = proto.transformResults.map(result =>\n        this.fromValue(result)\n      );\n    }\n    return new MutationResult(version, transformResults);\n  }\n\n  fromWriteResults(protos: api.WriteResult[] | undefined): MutationResult[] {\n    return (protos || []).map(proto => this.fromWriteResult(proto));\n  }\n\n  private toFieldTransform(fieldTransform: FieldTransform): api.FieldTransform {\n    assert(\n      fieldTransform.transform instanceof ServerTimestampTransform,\n      'Unknown transform: ' + fieldTransform.transform\n    );\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      setToServerValue: 'REQUEST_TIME'\n    };\n  }\n\n  private fromFieldTransform(proto: api.FieldTransform): FieldTransform {\n    assert(\n      proto.setToServerValue! === 'REQUEST_TIME',\n      'Unknown transform proto: ' + JSON.stringify(proto)\n    );\n    const fieldPath = FieldPath.fromServerFormat(proto.fieldPath!);\n    return new FieldTransform(fieldPath, ServerTimestampTransform.instance);\n  }\n\n  toDocumentsTarget(query: Query): api.DocumentsTarget {\n    return { documents: [this.toQueryPath(query.path)] };\n  }\n\n  fromDocumentsTarget(documentsTarget: api.DocumentsTarget): Query {\n    const count = documentsTarget.documents!.length;\n    assert(\n      count === 1,\n      'DocumentsTarget contained other than 1 document: ' + count\n    );\n    const name = documentsTarget.documents![0];\n    return Query.atPath(this.fromQueryPath(name));\n  }\n\n  toQueryTarget(query: Query): api.QueryTarget {\n    // Dissect the path into parent, collectionId, and optional key filter.\n    const result: api.QueryTarget = { structuredQuery: {} };\n    if (query.path.isEmpty()) {\n      result.parent = this.toQueryPath(ResourcePath.EMPTY_PATH);\n    } else {\n      const path = query.path;\n      assert(\n        path.length % 2 !== 0,\n        'Document queries with filters are not supported.'\n      );\n      result.parent = this.toQueryPath(path.popLast());\n      result.structuredQuery!.from = [{ collectionId: path.lastSegment() }];\n    }\n\n    const where = this.toFilter(query.filters);\n    if (where) {\n      result.structuredQuery!.where = where;\n    }\n\n    const orderBy = this.toOrder(query.orderBy);\n    if (orderBy) {\n      result.structuredQuery!.orderBy = orderBy;\n    }\n\n    const limit = this.toLimit(query.limit);\n    if (limit !== undefined) {\n      result.structuredQuery!.limit = limit;\n    }\n\n    if (query.startAt) {\n      result.structuredQuery!.startAt = this.toCursor(query.startAt);\n    }\n    if (query.endAt) {\n      result.structuredQuery!.endAt = this.toCursor(query.endAt);\n    }\n\n    return result;\n  }\n\n  fromQueryTarget(target: api.QueryTarget): Query {\n    let path = this.fromQueryPath(target.parent!);\n\n    const query = target.structuredQuery!;\n    const fromCount = query.from ? query.from.length : 0;\n    if (fromCount > 0) {\n      assert(\n        fromCount === 1,\n        'StructuredQuery.from with more than one collection is not supported.'\n      );\n      const from = query.from![0];\n      path = path.child(from.collectionId!);\n    }\n\n    let filterBy: Filter[] = [];\n    if (query.where) {\n      filterBy = this.fromFilter(query.where);\n    }\n\n    let orderBy: OrderBy[] = [];\n    if (query.orderBy) {\n      orderBy = this.fromOrder(query.orderBy);\n    }\n\n    let limit: number | null = null;\n    if (query.limit) {\n      limit = query.limit;\n    }\n\n    let startAt: Bound | null = null;\n    if (query.startAt) {\n      startAt = this.fromCursor(query.startAt);\n    }\n\n    let endAt: Bound | null = null;\n    if (query.endAt) {\n      endAt = this.fromCursor(query.endAt);\n    }\n\n    return new Query(path, orderBy, filterBy, limit, startAt, endAt);\n  }\n\n  toListenRequestLabels(\n    queryData: QueryData\n  ): ApiClientObjectMap<string> | null {\n    const value = this.toLabel(queryData.purpose);\n    if (value == null) {\n      return null;\n    } else {\n      return {\n        'goog-listen-tags': value\n      };\n    }\n  }\n\n  private toLabel(purpose: QueryPurpose): string | null {\n    switch (purpose) {\n      case QueryPurpose.Listen:\n        return null;\n      case QueryPurpose.ExistenceFilterMismatch:\n        return 'existence-filter-mismatch';\n      case QueryPurpose.LimboResolution:\n        return 'limbo-document';\n      default:\n        return fail('Unrecognized query purpose: ' + purpose);\n    }\n  }\n\n  toTarget(queryData: QueryData): api.Target {\n    let result: api.Target;\n    const query = queryData.query;\n\n    if (query.isDocumentQuery()) {\n      result = { documents: this.toDocumentsTarget(query) };\n    } else {\n      result = { query: this.toQueryTarget(query) };\n    }\n\n    result.targetId = queryData.targetId;\n\n    if (queryData.resumeToken.length > 0) {\n      result.resumeToken = this.unsafeCastProtoByteString(\n        queryData.resumeToken\n      );\n    }\n\n    return result;\n  }\n\n  private toFilter(filters: Filter[]): api.Filter | undefined {\n    if (filters.length === 0) return;\n    const protos = filters.map(\n      filter =>\n        filter instanceof RelationFilter\n          ? this.toRelationFilter(filter)\n          : this.toUnaryFilter(filter)\n    );\n    if (protos.length === 1) {\n      return protos[0];\n    }\n    return { compositeFilter: { op: 'AND', filters: protos } };\n  }\n\n  private fromFilter(filter: api.Filter | undefined): Filter[] {\n    if (!filter) {\n      return [];\n    } else if (filter.unaryFilter !== undefined) {\n      return [this.fromUnaryFilter(filter)];\n    } else if (filter.fieldFilter !== undefined) {\n      return [this.fromRelationFilter(filter)];\n    } else if (filter.compositeFilter !== undefined) {\n      return filter.compositeFilter.filters!\n        .map(f => this.fromFilter(f))\n        .reduce((accum, current) => accum.concat(current));\n    } else {\n      return fail('Unknown filter: ' + JSON.stringify(filter));\n    }\n  }\n\n  private toOrder(orderBys: OrderBy[]): api.Order[] | undefined {\n    if (orderBys.length === 0) return;\n    return orderBys.map(order => this.toPropertyOrder(order));\n  }\n\n  private fromOrder(orderBys: api.Order[]): OrderBy[] {\n    return orderBys.map(order => this.fromPropertyOrder(order));\n  }\n\n  private toLimit(limit: number | null): number | undefined {\n    if (!typeUtils.isNullOrUndefined(limit)) {\n      return limit!;\n    }\n    return;\n  }\n\n  private toCursor(cursor: Bound): api.Cursor {\n    return {\n      before: cursor.before,\n      values: cursor.position.map(component => this.toValue(component))\n    };\n  }\n\n  private fromCursor(cursor: api.Cursor): Bound {\n    const before = !!cursor.before;\n    const position = cursor.values!.map(component => this.fromValue(component));\n    return new Bound(position, before);\n  }\n\n  // visible for testing\n  toDirection(dir: Direction): api.OrderDirection {\n    return DIRECTIONS[dir.name];\n  }\n\n  // visible for testing\n  fromDirection(dir: api.OrderDirection | undefined): Direction | undefined {\n    switch (dir) {\n      case 'ASCENDING':\n        return Direction.ASCENDING;\n      case 'DESCENDING':\n        return Direction.DESCENDING;\n      default:\n        return undefined;\n    }\n  }\n\n  // visible for testing\n  toOperatorName(op: RelationOp): api.FieldFilterOp {\n    return OPERATORS[op.name];\n  }\n\n  fromOperatorName(op: api.FieldFilterOp): RelationOp {\n    switch (op) {\n      case 'EQUAL':\n        return RelationOp.EQUAL;\n      case 'GREATER_THAN':\n        return RelationOp.GREATER_THAN;\n      case 'GREATER_THAN_OR_EQUAL':\n        return RelationOp.GREATER_THAN_OR_EQUAL;\n      case 'LESS_THAN':\n        return RelationOp.LESS_THAN;\n      case 'LESS_THAN_OR_EQUAL':\n        return RelationOp.LESS_THAN_OR_EQUAL;\n      case 'OPERATOR_UNSPECIFIED':\n        return fail('Unspecified relation');\n      default:\n        return fail('Unknown relation');\n    }\n  }\n\n  toFieldPathReference(path: FieldPath): api.FieldReference {\n    return { fieldPath: path.canonicalString() };\n  }\n\n  fromFieldPathReference(fieldReference: api.FieldReference): FieldPath {\n    return FieldPath.fromServerFormat(fieldReference.fieldPath!);\n  }\n\n  // visible for testing\n  toPropertyOrder(orderBy: OrderBy): api.Order {\n    return {\n      field: this.toFieldPathReference(orderBy.field),\n      direction: this.toDirection(orderBy.dir)\n    };\n  }\n\n  fromPropertyOrder(orderBy: api.Order): OrderBy {\n    return new OrderBy(\n      this.fromFieldPathReference(orderBy.field!),\n      this.fromDirection(orderBy.direction)\n    );\n  }\n\n  // visible for testing\n  toRelationFilter(filter: Filter): api.Filter {\n    if (filter instanceof RelationFilter) {\n      return {\n        fieldFilter: {\n          field: this.toFieldPathReference(filter.field),\n          op: this.toOperatorName(filter.op),\n          value: this.toValue(filter.value)\n        }\n      };\n    } else {\n      return fail('Unrecognized filter: ' + JSON.stringify(filter));\n    }\n  }\n\n  fromRelationFilter(filter: api.Filter): Filter {\n    return new RelationFilter(\n      this.fromFieldPathReference(filter.fieldFilter!.field!),\n      this.fromOperatorName(filter.fieldFilter!.op!),\n      this.fromValue(filter.fieldFilter!.value!)\n    );\n  }\n\n  // visible for testing\n  toUnaryFilter(filter: Filter): api.Filter {\n    if (filter instanceof NanFilter) {\n      return {\n        unaryFilter: {\n          field: this.toFieldPathReference(filter.field),\n          op: 'IS_NAN'\n        }\n      };\n    } else if (filter instanceof NullFilter) {\n      return {\n        unaryFilter: {\n          field: this.toFieldPathReference(filter.field),\n          op: 'IS_NULL'\n        }\n      };\n    } else {\n      return fail('Unrecognized filter: ' + JSON.stringify(filter));\n    }\n  }\n\n  fromUnaryFilter(filter: api.Filter): Filter {\n    switch (filter.unaryFilter!.op!) {\n      case 'IS_NAN':\n        const nanField = this.fromFieldPathReference(\n          filter.unaryFilter!.field!\n        );\n        return new NanFilter(nanField);\n      case 'IS_NULL':\n        const nullField = this.fromFieldPathReference(\n          filter.unaryFilter!.field!\n        );\n        return new NullFilter(nullField);\n      case 'OPERATOR_UNSPECIFIED':\n        return fail('Unspecified filter');\n      default:\n        return fail('Unknown filter');\n    }\n  }\n\n  toDocumentMask(fieldMask: FieldMask): api.DocumentMask {\n    return {\n      fieldPaths: fieldMask.fields.map(field => field.canonicalString())\n    };\n  }\n\n  fromDocumentMask(proto: api.DocumentMask): FieldMask {\n    const paths = proto.fieldPaths || [];\n    const fields = paths.map(path => FieldPath.fromServerFormat(path));\n    return new FieldMask(fields);\n  }\n}\n\n/**\n * Checks for a specific oneof tag in a protocol buffer message.\n *\n * This intentionally accommodates two distinct cases:\n *\n * 1) Messages containing a type tag: these are the format produced by GRPC in\n * return values. These may contain default-value mappings for all tags in the\n * oneof but the type tag specifies which one was actually set.\n *\n * 2) Messages that don't contain a type tag: these are the format required by\n * GRPC as inputs. If we emitted objects with type tags, ProtoBuf.js would\n * choke claiming that the tags aren't fields in the Message.\n *\n * Allowing both formats here makes the serializer able to consume the outputs\n * it produces: for all messages it supports, fromX(toX(value)) == value.\n *\n * Note that case 2 suffers from ambiguity: if multiple tags are present\n * without a type tag then the callers are structured in such a way that the\n * first invocation will win. Since we only parse in this mode when parsing\n * the output of a serialize method this works, but it's not a general\n * solution.\n *\n * Unfortunately there is no general solution here because proto3 makes it\n * impossible to distinguish unset from explicitly set fields: both have the\n * default value for the type. Without the type tag but multiple value tags\n * it's possible to have default values for each tag in the oneof and not be\n * able to know which was actually in effect.\n */\nfunction hasTag(obj: {}, type: string, tag: string): boolean {\n  return type === tag || (!type && tag in obj);\n}\n"]}