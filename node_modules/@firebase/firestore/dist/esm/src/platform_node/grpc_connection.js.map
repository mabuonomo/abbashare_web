{"version":3,"sources":["../src/platform_node/grpc_connection.ts"],"names":[],"mappings":"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","file":"grpc_connection.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// TODO(dimond): The following imports have been replaced with require\n// statements to not let the google closure compiler try to resolve them at\n// compile time.\n// import * as grpc from 'grpc';\n// import * as protobufjs from 'protobufjs';\n// import * as util from 'util';\n\nimport firebase from '@firebase/app';\nconst SDK_VERSION = firebase.SDK_VERSION;\n// Temporary type definition until types work again (see above)\nexport type GrpcMetadataCallback = any;\n\n// Trick the TS compiler & Google closure compiler into executing normal require\n// statements, not using goog.require to import modules at compile time\nconst dynamicRequire = require;\nconst grpc = dynamicRequire('grpc');\nconst grpcVersion = dynamicRequire('grpc/package.json').version;\nconst util = dynamicRequire('util');\n\nimport { Token } from '../api/credentials';\nimport { DatabaseInfo } from '../core/database_info';\nimport { Connection, Stream } from '../remote/connection';\nimport { StreamBridge } from '../remote/stream_bridge';\nimport { mapCodeFromRpcCode } from '../remote/rpc_error';\nimport { assert } from '../util/assert';\nimport { FirestoreError } from '../util/error';\nimport * as log from '../util/log';\nimport { AnyJs } from '../util/misc';\nimport { NodeCallback, nodePromise } from '../util/node_api';\nimport { ProtobufProtoBuilder } from './load_protos';\n\nconst LOG_TAG = 'Connection';\n\n// TODO(b/38203344): The SDK_VERSION is set independently from Firebase because\n// we are doing out-of-band releases. Once we release as part of Firebase, we\n// should use the Firebase version instead.\nconst X_GOOG_API_CLIENT_VALUE = `gl-node/${process.versions\n  .node} fire/${SDK_VERSION} grpc/${grpcVersion}`;\n\nfunction createHeaders(databaseInfo: DatabaseInfo, token: Token | null): {} {\n  assert(\n    token === null || token.type === 'OAuth',\n    'If provided, token must be OAuth'\n  );\n\n  const channelCredentials = databaseInfo.ssl\n    ? grpc.credentials.createSsl()\n    : grpc.credentials.createInsecure();\n\n  const callCredentials = grpc.credentials.createFromMetadataGenerator(\n    (context: { serviceUrl: string }, cb: GrpcMetadataCallback) => {\n      const metadata = new grpc.Metadata();\n      if (token) {\n        for (const header in token.authHeaders) {\n          if (token.authHeaders.hasOwnProperty(header)) {\n            metadata.set(header, token.authHeaders[header]);\n          }\n        }\n      }\n      metadata.set('x-goog-api-client', X_GOOG_API_CLIENT_VALUE);\n      // This header is used to improve routing and project isolation by the\n      // backend.\n      metadata.set(\n        'google-cloud-resource-prefix',\n        `projects/${databaseInfo.databaseId.projectId}/` +\n          `databases/${databaseInfo.databaseId.database}`\n      );\n      cb(null, metadata);\n    }\n  );\n\n  return grpc.credentials.combineChannelCredentials(\n    channelCredentials,\n    callCredentials\n  );\n}\n\ninterface CachedStub {\n  // The type of these stubs is dynamically generated by the GRPC runtime\n  // from the protocol buffer.\n  // tslint:disable-next-line:no-any\n  stub: any;\n\n  token: Token | null;\n}\n\n/** GRPC errors expose a code property. */\ninterface GrpcError extends Error {\n  code: number;\n}\n\n/** GRPC status information. */\ninterface GrpcStatus {\n  code: number;\n  details: string;\n}\n\n/**\n * A Connection implemented by GRPC-Node.\n */\nexport class GrpcConnection implements Connection {\n  // tslint:disable-next-line:no-any\n  private firestore: any;\n\n  // We cache stubs for the most-recently-used token.\n  private cachedStub: CachedStub | null = null;\n\n  constructor(\n    builder: ProtobufProtoBuilder,\n    private databaseInfo: DatabaseInfo\n  ) {\n    const protos = grpc.loadObject(builder.ns);\n    this.firestore = protos.google.firestore.v1beta1;\n  }\n\n  private sameToken(tokenA: Token | null, tokenB: Token | null): boolean {\n    const valueA = tokenA && tokenA.authHeaders['Authorization'];\n    const valueB = tokenB && tokenB.authHeaders['Authorization'];\n    return valueA === valueB;\n  }\n\n  // tslint:disable-next-line:no-any\n  private getStub(token: Token | null): any {\n    if (!this.cachedStub || !this.sameToken(this.cachedStub.token, token)) {\n      log.debug(LOG_TAG, 'Creating datastore stubs.');\n      const credentials = createHeaders(this.databaseInfo, token);\n      this.cachedStub = {\n        stub: new this.firestore.Firestore(this.databaseInfo.host, credentials),\n        token: token\n      };\n    }\n    return this.cachedStub.stub;\n  }\n\n  invoke(rpcName: string, request: any, token: Token | null): Promise<any> {\n    const stub = this.getStub(token);\n    return nodePromise((callback: NodeCallback<AnyJs>) => {\n      return stub[rpcName](request, (grpcError?: GrpcError, value?: AnyJs) => {\n        if (grpcError) {\n          log.debug(\n            LOG_TAG,\n            'RPC \"' +\n              rpcName +\n              '\" failed with error ' +\n              JSON.stringify(grpcError)\n          );\n          callback(\n            new FirestoreError(\n              mapCodeFromRpcCode(grpcError.code),\n              grpcError.message\n            )\n          );\n        } else {\n          callback(undefined, value);\n        }\n      });\n    });\n  }\n\n  // TODO(mikelehen): This \"method\" is a monster. Should be refactored.\n  openStream(rpcName: string, token: Token | null): Stream<any, any> {\n    const stub = this.getStub(token);\n    const grpcStream = stub[rpcName]();\n\n    let closed = false;\n    let close: (err?: Error) => void;\n    let remoteEnded = false;\n\n    const stream = new StreamBridge({\n      sendFn: (msg: any) => {\n        if (!closed) {\n          log.debug(\n            LOG_TAG,\n            'GRPC stream sending:',\n            util.inspect(msg, { depth: 100 })\n          );\n          try {\n            grpcStream.write(msg);\n          } catch (e) {\n            // This probably means we didn't conform to the proto.  Make sure to\n            // log the message we sent.\n            log.error(\n              LOG_TAG,\n              'Failure sending: ',\n              util.inspect(msg, { depth: 100 })\n            );\n            log.error(LOG_TAG, 'Error: ', e);\n            throw e;\n          }\n        } else {\n          log.debug(\n            LOG_TAG,\n            'Not sending because gRPC stream is closed:',\n            util.inspect(msg, { depth: 100 })\n          );\n        }\n      },\n      closeFn: () => {\n        close();\n      }\n    });\n\n    close = (err?: FirestoreError) => {\n      if (!closed) {\n        closed = true;\n        stream.callOnClose(err);\n        grpcStream.end();\n      }\n    };\n\n    grpcStream.on('data', (msg: {}) => {\n      if (!closed) {\n        log.debug(\n          LOG_TAG,\n          'GRPC stream received: ',\n          util.inspect(msg, { depth: 100 })\n        );\n        stream.callOnMessage(msg);\n      }\n    });\n\n    grpcStream.on('end', () => {\n      log.debug(LOG_TAG, 'GRPC stream ended.');\n      // The server closed the remote end.  Close our side too (which will\n      // trigger the 'finish' event).\n      remoteEnded = true;\n      grpcStream.end();\n    });\n\n    grpcStream.on('finish', () => {\n      // This means we've closed the write side of the stream.  We either did\n      // this because the StreamBridge was close()ed or because we got an 'end'\n      // event from the grpcStream.\n\n      // TODO(mikelehen): This is a hack because of weird grpc-node behavior\n      // (https://github.com/grpc/grpc/issues/7705).  The stream may be finished\n      // because we called end() because we got an 'end' event because there was\n      // an error.  Now that we've called end(), GRPC should deliver the error,\n      // but it may take some time (e.g. 700ms). So we delay our close handling\n      // in case we receive such an error.\n      if (remoteEnded) {\n        setTimeout(close, 2500);\n      } else {\n        close();\n      }\n    });\n\n    grpcStream.on('error', (grpcError: GrpcError) => {\n      log.debug(LOG_TAG, 'GRPC stream error:', grpcError);\n      const code = mapCodeFromRpcCode(grpcError.code);\n      close(new FirestoreError(code, grpcError.message));\n    });\n\n    grpcStream.on('status', (status: GrpcStatus) => {\n      if (!closed) {\n        log.debug(LOG_TAG, 'GRPC stream received status:', status);\n        if (status.code === 0) {\n          // all good\n        } else {\n          const code = mapCodeFromRpcCode(status.code);\n          close(new FirestoreError(code, status.details));\n        }\n      }\n    });\n\n    log.debug(LOG_TAG, 'Opening GRPC stream');\n    // TODO(dimond): Since grpc has no explicit open status (or does it?) we\n    // simulate an onOpen in the next loop after the stream had it's listeners\n    // registered\n    setTimeout(() => {\n      stream.callOnOpen();\n    }, 0);\n\n    return stream;\n  }\n}\n"]}