{"version":3,"sources":["../src/implementation/taskenums.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAWH,MAAM,CAAC,IAAM,SAAS,GAAG;IACvB,kEAAkE;IAClE,aAAa,EAAE,eAAe;CAC/B,CAAC;AAOF,MAAM,CAAC,IAAM,iBAAiB,GAAG;IAC/B,OAAO,EAAE,SAAS;IAClB,OAAO,EAAE,SAAS;IAClB,MAAM,EAAE,QAAQ;IAChB,OAAO,EAAE,SAAS;IAClB,SAAS,EAAE,WAAW;IACtB,QAAQ,EAAE,UAAU;IACpB,KAAK,EAAE,OAAO;CACf,CAAC;AAOF,MAAM,CAAC,IAAM,SAAS,GAAG;IACvB,+CAA+C;IAC/C,OAAO,EAAE,SAAS;IAClB,uCAAuC;IACvC,MAAM,EAAE,QAAQ;IAChB,uCAAuC;IACvC,OAAO,EAAE,SAAS;IAClB,6BAA6B;IAC7B,QAAQ,EAAE,UAAU;IACpB,qCAAqC;IACrC,KAAK,EAAE,OAAO;CACf,CAAC;AAEF,MAAM,yCACJ,KAAwB;IAExB,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QACd,KAAK,iBAAiB,CAAC,OAAO,CAAC;QAC/B,KAAK,iBAAiB,CAAC,OAAO,CAAC;QAC/B,KAAK,iBAAiB,CAAC,SAAS;YAC9B,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC;QAC3B,KAAK,iBAAiB,CAAC,MAAM;YAC3B,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC;QAC1B,KAAK,iBAAiB,CAAC,OAAO;YAC5B,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC;QAC3B,KAAK,iBAAiB,CAAC,QAAQ;YAC7B,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC;QAC5B,KAAK,iBAAiB,CAAC,KAAK;YAC1B,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC;QACzB;YACE,iCAAiC;YACjC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC;IAC3B,CAAC;AACH,CAAC","file":"taskenums.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * Enum for task events.\n * @enum {string}\n */\nexport type TaskEvent = string;\nexport const TaskEvent = {\n  /** Triggered whenever the task changes or progress is updated. */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n * @enum {string}\n */\nexport type InternalTaskState = string;\nexport const InternalTaskState = {\n  RUNNING: 'running',\n  PAUSING: 'pausing',\n  PAUSED: 'paused',\n  SUCCESS: 'success',\n  CANCELING: 'canceling',\n  CANCELED: 'canceled',\n  ERROR: 'error'\n};\n\n/**\n * External (API-surfaced) enum for task state.\n * @enum {string}\n */\nexport type TaskState = string;\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\n\nexport function taskStateFromInternalTaskState(\n  state: InternalTaskState\n): TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n"]}