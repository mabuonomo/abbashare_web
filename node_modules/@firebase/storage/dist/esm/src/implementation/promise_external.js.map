{"version":3,"sources":["../src/implementation/promise_external.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAEH;;;GAGG;AAEH;;;;GAIG;AAEH,MAAM,eACJ,QAAgE;IAEhE,MAAM,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,CAAC;AAED;;GAEG;AACH,MAAM,kBAAqB,KAAQ;IACjC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAe,CAAC;AAC9C,CAAC;AAED,MAAM,iBAAoB,KAAY;IACpC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAe,CAAC;AAC7C,CAAC","file":"promise_external.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implements the promise abstraction interface for external\n * (public SDK) packaging, which just passes through to the firebase-app impl.\n */\n\n/**\n * @template T\n * @param {function((function(T): void),\n *                  (function(!Error): void))} resolver\n */\n\nexport function make<T>(\n  resolver: (p1: (p1: T) => void, p2: (p1: Error) => void) => void\n): Promise<T> {\n  return new Promise(resolver);\n}\n\n/**\n * @template T\n */\nexport function resolve<T>(value: T): Promise<T> {\n  return Promise.resolve(value) as Promise<T>;\n}\n\nexport function reject<T>(error: Error): Promise<T> {\n  return Promise.reject(error) as Promise<T>;\n}\n"]}