{"version":3,"sources":["../src/implementation/requestinfo.ts"],"names":[],"mappings":";;AAoBA;IAiBE,qBACS,GAAW,EACX,MAAc;QACrB;;;;;;aAMK;QACE,OAAqC,EACrC,OAAe;QAVf,QAAG,GAAH,GAAG,CAAQ;QACX,WAAM,GAAN,MAAM,CAAQ;QAQd,YAAO,GAAP,OAAO,CAA8B;QACrC,YAAO,GAAP,OAAO,CAAQ;QA3BxB,cAAS,GAAc,EAAE,CAAC;QAC1B,YAAO,GAAY,EAAE,CAAC;QACtB,SAAI,GAAsC,IAAI,CAAC;QAE/C,iBAAY,GAED,IAAI,CAAC;QAEhB;;;WAGG;QACH,qBAAgB,GAA8C,IAAI,CAAC;QACnE,iBAAY,GAAa,CAAC,GAAG,CAAC,CAAC;QAC/B,yBAAoB,GAAa,EAAE,CAAC;IAcjC,CAAC;IACN,kBAAC;AAAD,CA9BA,AA8BC,IAAA;AA9BY,kCAAW","file":"requestinfo.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FirebaseStorageError } from './error';\nimport { Headers, XhrIo } from './xhrio';\n\nexport type UrlParams = { [name: string]: string };\n\nexport class RequestInfo<T> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n\n  errorHandler:\n    | ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError)\n    | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n       * Returns the value with which to resolve the request's promise. Only called\n       * if the request is successful. Throw from this function to reject the\n       * returned Request's promise with the thrown error.\n       * Note: The XhrIo passed to this function may be reused after this callback\n       * returns. Do not keep a reference to it in any way.\n       */\n    public handler: (p1: XhrIo, p2: string) => T,\n    public timeout: number\n  ) {}\n}\n"]}