{"version":3,"sources":["../src/controllers/sw-controller.ts"],"names":[],"mappings":"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","file":"sw-controller.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nimport ControllerInterface from './controller-interface';\nimport Errors from '../models/errors';\nimport WorkerPageMessage from '../models/worker-page-message';\nimport FCMDetails from '../models/fcm-details';\n\nconst FCM_MSG = 'FCM_MSG';\n\nexport default class SWController extends ControllerInterface {\n  private bgMessageHandler_: (input: Object) => Promise<any>;\n\n  constructor(app) {\n    super(app);\n\n    self.addEventListener('push', e => this.onPush_(e), false);\n    self.addEventListener(\n      'pushsubscriptionchange',\n      e => this.onSubChange_(e),\n      false\n    );\n    self.addEventListener(\n      'notificationclick',\n      e => this.onNotificationClick_(e),\n      false\n    );\n\n    /**\n     * @private\n     * @type {function(Object)|null}\n     */\n    this.bgMessageHandler_ = null;\n  }\n\n  /**\n  * A handler for push events that shows notifications based on the content of\n  * the payload.\n  *\n  * The payload must be a JSON-encoded Object with a `notification` key. The\n  * value of the `notification` property will be used as the NotificationOptions\n  * object passed to showNotification. Additionally, the `title` property of the\n  * notification object will be used as the title.\n  *\n  * If there is no notification data in the payload then no notification will be\n  * shown.\n  * @private\n  */\n  onPush_(event) {\n    let msgPayload;\n    try {\n      msgPayload = event.data.json();\n    } catch (err) {\n      // Not JSON so not an FCM message\n      return;\n    }\n\n    const handleMsgPromise = this.hasVisibleClients_().then(\n      hasVisibleClients => {\n        if (hasVisibleClients) {\n          // Do not need to show a notification.\n          if (msgPayload.notification || this.bgMessageHandler_) {\n            // Send to page\n            return this.sendMessageToWindowClients_(msgPayload);\n          }\n          return;\n        }\n\n        const notificationDetails = this.getNotificationData_(msgPayload);\n        if (notificationDetails) {\n          const notificationTitle = notificationDetails.title || '';\n          return (self as any).registration.showNotification(\n            notificationTitle,\n            notificationDetails\n          );\n        } else if (this.bgMessageHandler_) {\n          return this.bgMessageHandler_(msgPayload);\n        }\n      }\n    );\n\n    event.waitUntil(handleMsgPromise);\n  }\n\n  /**\n  * @private\n  */\n  onSubChange_(event) {\n    const promiseChain = this.getToken().then(token => {\n      if (!token) {\n        // We can't resubscribe if we don't have an FCM token for this scope.\n        throw this.errorFactory_.create(\n          Errors.codes.NO_FCM_TOKEN_FOR_RESUBSCRIBE\n        );\n      }\n\n      let tokenDetails = null;\n      const tokenManager = this.getTokenManager();\n      return tokenManager\n        .getTokenDetailsFromToken(token)\n        .then(details => {\n          tokenDetails = details;\n          if (!tokenDetails) {\n            throw this.errorFactory_.create(Errors.codes.INVALID_SAVED_TOKEN);\n          }\n\n          // Attempt to get a new subscription\n          return (self as any).registration.pushManager.subscribe(\n            FCMDetails.SUBSCRIPTION_OPTIONS\n          );\n        })\n        .then(newSubscription => {\n          // Send new subscription to FCM.\n          return tokenManager.subscribeToFCM(\n            tokenDetails.fcmSenderId,\n            newSubscription,\n            tokenDetails.fcmPushSet\n          );\n        })\n        .catch(err => {\n          // The best thing we can do is log this to the terminal so\n          // developers might notice the error.\n          return tokenManager.deleteToken(tokenDetails.fcmToken).then(() => {\n            throw this.errorFactory_.create(\n              Errors.codes.UNABLE_TO_RESUBSCRIBE,\n              {\n                message: err\n              }\n            );\n          });\n        });\n    });\n\n    event.waitUntil(promiseChain);\n  }\n\n  /**\n  * @private\n  */\n  onNotificationClick_(event) {\n    if (\n      !(\n        event.notification &&\n        event.notification.data &&\n        event.notification.data[FCM_MSG]\n      )\n    ) {\n      // Not an FCM notification, do nothing.\n      return;\n    }\n\n    // Prevent other listeners from receiving the event\n    event.stopImmediatePropagation();\n\n    event.notification.close();\n\n    const msgPayload = event.notification.data[FCM_MSG];\n    const clickAction = msgPayload['notification']['click_action'];\n    if (!clickAction) {\n      // Nothing to do.\n      return;\n    }\n\n    const promiseChain = this.getWindowClient_(clickAction)\n      .then(windowClient => {\n        if (!windowClient) {\n          // Unable to find window client so need to open one.\n          return (self as any).clients.openWindow(clickAction);\n        }\n        return windowClient;\n      })\n      .then(windowClient => {\n        if (!windowClient) {\n          // Window Client will not be returned if it's for a third party origin.\n          return;\n        }\n\n        // Delete notification data from payload before sending to the page.\n        const notificationData = msgPayload['notification'];\n        delete msgPayload['notification'];\n\n        const internalMsg = WorkerPageMessage.createNewMsg(\n          WorkerPageMessage.TYPES_OF_MSG.NOTIFICATION_CLICKED,\n          msgPayload\n        );\n        // Attempt to send a message to the client to handle the data\n        // Is affected by: https://github.com/slightlyoff/ServiceWorker/issues/728\n        return this.attemptToMessageClient_(windowClient, internalMsg);\n      });\n\n    event.waitUntil(promiseChain);\n  }\n\n  /**\n   * @private\n   * @param {Object} msgPayload\n   * @return {NotificationOptions|undefined}\n   */\n  getNotificationData_(msgPayload) {\n    if (!msgPayload) {\n      return;\n    }\n\n    if (typeof msgPayload.notification !== 'object') {\n      return;\n    }\n\n    const notificationInformation = Object.assign({}, msgPayload.notification);\n    // Put the message payload under FCM_MSG name so we can identify the\n    // notification as being an FCM notification vs a notification from\n    // somewhere else (i.e. normal web push or developer generated\n    // notification).\n    notificationInformation['data'] = {\n      [FCM_MSG]: msgPayload\n    };\n\n    return notificationInformation;\n  }\n\n  /**\n   * Calling setBackgroundMessageHandler will opt in to some specific\n   * behaviours.\n   * 1.) If a notification doesn't need to be shown due to a window already\n   * being visible, then push messages will be sent to the page.\n   * 2.) If a notification needs to be shown, and the message contains no\n   * notification data this method will be called\n   * and the promise it returns will be passed to event.waitUntil.\n   * If you do not set this callback then all push messages will let and the\n   * developer can handle them in a their own 'push' event callback\n   * @export\n   * @param {function(Object)} callback The callback to be called when a push\n   * message is received and a notification must be shown. The callback will\n   * be given the data from the push message.\n   */\n  setBackgroundMessageHandler(callback) {\n    if (callback && typeof callback !== 'function') {\n      throw this.errorFactory_.create(\n        Errors.codes.BG_HANDLER_FUNCTION_EXPECTED\n      );\n    }\n\n    this.bgMessageHandler_ = callback;\n  }\n\n  /**\n   * @private\n   * @param {string} url The URL to look for when focusing a client.\n   * @return {Object} Returns an existing window client or a newly opened\n   * WindowClient.\n   */\n  getWindowClient_(url) {\n    // Use URL to normalize the URL when comparing to windowClients.\n    // This at least handles whether to include trailing slashes or not\n    const parsedURL = new URL(url).href;\n\n    return (self as any).clients\n      .matchAll({\n        type: 'window',\n        includeUncontrolled: true\n      })\n      .then(clientList => {\n        let suitableClient = null;\n        for (let i = 0; i < clientList.length; i++) {\n          const parsedClientUrl = new URL(clientList[i].url).href;\n          if (parsedClientUrl === parsedURL) {\n            suitableClient = clientList[i];\n            break;\n          }\n        }\n\n        if (suitableClient) {\n          suitableClient.focus();\n          return suitableClient;\n        }\n      });\n  }\n\n  /**\n   * This message will attempt to send the message to a window client.\n   * @private\n   * @param {Object} client The WindowClient to send the message to.\n   * @param {Object} message The message to send to the client.\n   * @returns {Promise} Returns a promise that resolves after sending the\n   * message. This does not guarantee that the message was successfully\n   * received.\n   */\n  attemptToMessageClient_(client, message) {\n    return new Promise((resolve, reject) => {\n      if (!client) {\n        return reject(\n          this.errorFactory_.create(Errors.codes.NO_WINDOW_CLIENT_TO_MSG)\n        );\n      }\n\n      client.postMessage(message);\n      resolve();\n    });\n  }\n\n  /**\n   * @private\n   * @returns {Promise<boolean>} If there is currently a visible WindowClient,\n   * this method will resolve to true, otherwise false.\n   */\n  hasVisibleClients_() {\n    return (self as any).clients\n      .matchAll({\n        type: 'window',\n        includeUncontrolled: true\n      })\n      .then(clientList => {\n        return clientList.some(client => client.visibilityState === 'visible');\n      });\n  }\n\n  /**\n   * @private\n   * @param {Object} msgPayload The data from the push event that should be sent\n   * to all available pages.\n   * @returns {Promise} Returns a promise that resolves once the message\n   * has been sent to all WindowClients.\n   */\n  sendMessageToWindowClients_(msgPayload) {\n    return (self as any).clients\n      .matchAll({\n        type: 'window',\n        includeUncontrolled: true\n      })\n      .then(clientList => {\n        const internalMsg = WorkerPageMessage.createNewMsg(\n          WorkerPageMessage.TYPES_OF_MSG.PUSH_MSG_RECEIVED,\n          msgPayload\n        );\n\n        return Promise.all(\n          clientList.map(client => {\n            return this.attemptToMessageClient_(client, internalMsg);\n          })\n        );\n      });\n  }\n\n  /**\n   * This will register the default service worker and return the registration.\n   * @private\n   * @return {Promise<!ServiceWorkerRegistration>} The service worker\n   * registration to be used for the push service.\n   */\n  getSWRegistration_() {\n    return Promise.resolve((self as any).registration);\n  }\n}\n"]}