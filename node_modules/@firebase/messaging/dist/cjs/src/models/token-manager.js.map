{"version":3,"sources":["../src/models/token-manager.ts"],"names":[],"mappings":"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","file":"token-manager.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nimport { ErrorFactory } from '@firebase/util';\n\nimport Errors from './errors';\nimport arrayBufferToBase64 from '../helpers/array-buffer-to-base64';\nimport FCMDetails from './fcm-details';\n\nconst FCM_TOKEN_OBJ_STORE = 'fcm_token_object_Store';\nconst FCM_TOKEN_DETAILS_DB_VERSION = 1;\n\nexport default class TokenManager {\n  private errorFactory_: ErrorFactory<string>;\n  private openDbPromise_: Promise<IDBDatabase>;\n\n  static DB_NAME: 'fcm_token_details_db';\n\n  constructor() {\n    this.errorFactory_ = new ErrorFactory('messaging', 'Messaging', Errors.map);\n    this.openDbPromise_ = null;\n  }\n\n  /**\n   * Get the indexedDB as a promsie.\n   * @private\n   * @return {Promise<IDBDatabase>} The IndexedDB database\n   */\n  openDatabase_() {\n    if (this.openDbPromise_) {\n      return this.openDbPromise_;\n    }\n\n    this.openDbPromise_ = new Promise((resolve, reject) => {\n      const request = indexedDB.open(\n        TokenManager.DB_NAME,\n        FCM_TOKEN_DETAILS_DB_VERSION\n      );\n      request.onerror = event => {\n        reject((<IDBRequest>event.target).error);\n      };\n      request.onsuccess = event => {\n        resolve((<IDBRequest>event.target).result);\n      };\n      request.onupgradeneeded = event => {\n        var db = (<IDBRequest>event.target).result;\n\n        var objectStore = db.createObjectStore(FCM_TOKEN_OBJ_STORE, {\n          keyPath: 'swScope'\n        });\n\n        // Make sure the sender ID can be searched\n        objectStore.createIndex('fcmSenderId', 'fcmSenderId', {\n          unique: false\n        });\n\n        objectStore.createIndex('fcmToken', 'fcmToken', {\n          unique: true\n        });\n      };\n    });\n\n    return this.openDbPromise_;\n  }\n\n  /**\n   * Close the currently open database.\n   * @return {Promise<?>} Returns the result of the promise chain.\n   */\n  closeDatabase() {\n    if (this.openDbPromise_) {\n      return this.openDbPromise_.then(db => {\n        db.close();\n        this.openDbPromise_ = null;\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Given a token, this method will look up the details in indexedDB.\n   * @public\n   * @param {string} fcmToken\n   * @return {Promise<Object>} The details associated with that token.\n   */\n  getTokenDetailsFromToken(fcmToken) {\n    return this.openDatabase_().then(db => {\n      return new Promise((resolve, reject) => {\n        const transaction = db.transaction([FCM_TOKEN_OBJ_STORE]);\n        const objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);\n        const index = objectStore.index('fcmToken');\n        const request = index.get(fcmToken);\n        request.onerror = function(event) {\n          reject((<IDBRequest>event.target).error);\n        };\n        request.onsuccess = function(event) {\n          resolve((<IDBRequest>event.target).result);\n        };\n      });\n    });\n  }\n\n  getTokenDetailsFromSWScope_(swScope) {\n    return this.openDatabase_().then(db => {\n      return new Promise((resolve, reject) => {\n        const transaction = db.transaction([FCM_TOKEN_OBJ_STORE]);\n        const objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);\n        const scopeRequest = objectStore.get(swScope);\n        scopeRequest.onerror = event => {\n          reject((<IDBRequest>event.target).error);\n        };\n\n        scopeRequest.onsuccess = event => {\n          resolve((<IDBRequest>event.target).result);\n        };\n      });\n    });\n  }\n\n  getAllTokenDetailsForSenderId_(senderId): Promise<Array<Object>> {\n    return this.openDatabase_().then(db => {\n      return new Promise<Array<Object>>((resolve, reject) => {\n        const transaction = db.transaction([FCM_TOKEN_OBJ_STORE]);\n        const objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);\n\n        const senderIdTokens = [];\n\n        const cursorRequest = objectStore.openCursor();\n        cursorRequest.onerror = event => {\n          reject((<IDBRequest>event.target).error);\n        };\n\n        cursorRequest.onsuccess = event => {\n          const cursor = (<IDBRequest>event.target).result;\n          if (cursor) {\n            if (cursor.value['fcmSenderId'] === senderId) {\n              senderIdTokens.push(cursor.value);\n            }\n            cursor.continue();\n          } else {\n            resolve(senderIdTokens);\n          }\n        };\n      });\n    });\n  }\n\n  /**\n   * Given a PushSubscription and messagingSenderId, get an FCM token.\n   * @public\n   * @param  {string} senderId The 'messagingSenderId' to tie the token to.\n   * @param  {PushSubscription} subscription The PushSusbcription to \"federate\".\n   * @param  {string=} pushSet If defined this will swap the subscription for\n   * matching FCM token.\n   * @return {Promise<!Object>} Returns the FCM token to be used in place\n   * of the PushSubscription.\n   */\n  subscribeToFCM(senderId, subscription, pushSet?): Promise<Object> {\n    const p256dh = arrayBufferToBase64(subscription['getKey']('p256dh'));\n    const auth = arrayBufferToBase64(subscription['getKey']('auth'));\n\n    let fcmSubscribeBody =\n      `authorized_entity=${senderId}&` +\n      `endpoint=${subscription.endpoint}&` +\n      `encryption_key=${p256dh}&` +\n      `encryption_auth=${auth}`;\n\n    if (pushSet) {\n      fcmSubscribeBody += `&pushSet=${pushSet}`;\n    }\n\n    const headers = new Headers();\n    headers.append('Content-Type', 'application/x-www-form-urlencoded');\n\n    const subscribeOptions = {\n      method: 'POST',\n      headers: headers,\n      body: fcmSubscribeBody\n    };\n\n    return fetch(\n      FCMDetails.ENDPOINT + '/fcm/connect/subscribe',\n      subscribeOptions\n    )\n      .then(response => response.json())\n      .then(response => {\n        const fcmTokenResponse = response;\n        if (fcmTokenResponse['error']) {\n          const message = fcmTokenResponse['error']['message'];\n          throw this.errorFactory_.create(Errors.codes.TOKEN_SUBSCRIBE_FAILED, {\n            message: message\n          });\n        }\n\n        if (!fcmTokenResponse['token']) {\n          throw this.errorFactory_.create(\n            Errors.codes.TOKEN_SUBSCRIBE_NO_TOKEN\n          );\n        }\n\n        if (!fcmTokenResponse['pushSet']) {\n          throw this.errorFactory_.create(\n            Errors.codes.TOKEN_SUBSCRIBE_NO_PUSH_SET\n          );\n        }\n\n        return {\n          token: fcmTokenResponse['token'],\n          pushSet: fcmTokenResponse['pushSet']\n        };\n      });\n  }\n\n  /**\n   * Checks the that fields in the PushSubscription are equivalent to the\n   * details stores in the masterTokenDetails.\n   * @private\n   * @param  {PushSubscription} subscription The push subscription we expect\n   * the master token to match.\n   * @param  {Object}  masterTokenDetails The saved details we wish to compare\n   * with the PushSubscription\n   * @return {boolean} true if the subscription and token details are\n   * equivalent.\n   */\n  isSameSubscription_(subscription, masterTokenDetails) {\n    // getKey() isn't defined in the PushSubscription externs file, hence\n    // subscription['getKey']('<key name>').\n    return (\n      subscription.endpoint === masterTokenDetails['endpoint'] &&\n      arrayBufferToBase64(subscription['getKey']('auth')) ===\n        masterTokenDetails['auth'] &&\n      arrayBufferToBase64(subscription['getKey']('p256dh')) ===\n        masterTokenDetails['p256dh']\n    );\n  }\n\n  /**\n   * Save the details for the fcm token for re-use at a later date.\n   * @private\n   * @param  {string} senderId The 'messagingSenderId' used for this project\n   * @param  {ServiceWorkerRegistration} swRegistration The service worker\n   * used to subscribe the user for web push\n   * @param  {PushSubscription} subscription The push subscription passed to\n   * FCM for the current token.\n   * @param  {string} fcmToken The FCM token currently used on this\n   * device.\n   * @param  {string} fcmPushSet The FCM push tied to the fcm token.\n   * @return {Promise<void>}\n   */\n  saveTokenDetails_(\n    senderId,\n    swRegistration,\n    subscription,\n    fcmToken,\n    fcmPushSet\n  ) {\n    const details = {\n      swScope: swRegistration.scope,\n      endpoint: subscription.endpoint,\n      auth: arrayBufferToBase64(subscription['getKey']('auth')),\n      p256dh: arrayBufferToBase64(subscription['getKey']('p256dh')),\n      fcmToken: fcmToken,\n      fcmPushSet: fcmPushSet,\n      fcmSenderId: senderId\n    };\n\n    return this.openDatabase_().then(db => {\n      return new Promise((resolve, reject) => {\n        const transaction = db.transaction([FCM_TOKEN_OBJ_STORE], 'readwrite');\n        const objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);\n        const request = objectStore.put(details);\n        request.onerror = event => {\n          reject((<IDBRequest>event.target).error);\n        };\n        request.onsuccess = event => {\n          resolve();\n        };\n      });\n    });\n  }\n\n  /**\n   * Returns the saved FCM Token if one is available and still valid,\n   * otherwise `null` is returned.\n   * @param {string} senderId This should be the sender ID associated with the\n   * FCM Token being retrieved.\n   * @param {ServiceWorkerRegistration} swRegistration Registration to be used\n   * to subscribe the user to push.\n   * @return {Promise<string> | Promise} Returns the saved FCM Token if\n   * avilable and valid.\n   * @export\n   */\n  getSavedToken(senderId, swRegistration) {\n    if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n      return Promise.reject(\n        this.errorFactory_.create(Errors.codes.SW_REGISTRATION_EXPECTED)\n      );\n    }\n\n    if (typeof senderId !== 'string' || senderId.length === 0) {\n      return Promise.reject(\n        this.errorFactory_.create(Errors.codes.BAD_SENDER_ID)\n      );\n    }\n\n    return this.getAllTokenDetailsForSenderId_(senderId)\n      .then(allTokenDetails => {\n        if (allTokenDetails.length === 0) {\n          return;\n        }\n\n        const index = allTokenDetails.findIndex(tokenDetails => {\n          return (\n            swRegistration.scope === tokenDetails['swScope'] &&\n            senderId === tokenDetails['fcmSenderId']\n          );\n        });\n\n        if (index === -1) {\n          return;\n        }\n\n        return allTokenDetails[index];\n      })\n      .then(tokenDetails => {\n        if (!tokenDetails) {\n          return;\n        }\n\n        return swRegistration.pushManager\n          .getSubscription()\n          .catch(err => {\n            throw this.errorFactory_.create(\n              Errors.codes.GET_SUBSCRIPTION_FAILED\n            );\n          })\n          .then(subscription => {\n            if (\n              subscription &&\n              this.isSameSubscription_(subscription, tokenDetails)\n            ) {\n              return tokenDetails['fcmToken'];\n            }\n          });\n      });\n  }\n\n  /**\n   * Creates a new FCM token.\n   */\n  createToken(senderId, swRegistration): Promise<String> {\n    if (typeof senderId !== 'string' || senderId.length === 0) {\n      return Promise.reject(\n        this.errorFactory_.create(Errors.codes.BAD_SENDER_ID)\n      );\n    }\n\n    if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n      return Promise.reject(\n        this.errorFactory_.create(Errors.codes.SW_REGISTRATION_EXPECTED)\n      );\n    }\n\n    // Check for existing subscription first\n    let subscription;\n    let fcmTokenDetails;\n    return swRegistration.pushManager\n      .getSubscription()\n      .then(subscription => {\n        if (subscription) {\n          return subscription;\n        }\n\n        return swRegistration.pushManager.subscribe(\n          FCMDetails.SUBSCRIPTION_OPTIONS\n        );\n      })\n      .then(sub => {\n        subscription = sub;\n        return this.subscribeToFCM(senderId, subscription);\n      })\n      .then(tokenDetails => {\n        fcmTokenDetails = tokenDetails;\n        return this.saveTokenDetails_(\n          senderId,\n          swRegistration,\n          subscription,\n          fcmTokenDetails['token'],\n          fcmTokenDetails['pushSet']\n        );\n      })\n      .then(() => fcmTokenDetails['token']);\n  }\n\n  /**\n   * This method deletes details of the current FCM token.\n   * It's returning a promise in case we need to move to an async\n   * method for deleting at a later date.\n   * @param {string} token Token to be deleted\n   * @return {Promise<Object>} Resolves once the FCM token details have been\n   * deleted and returns the deleted details.\n   */\n  deleteToken(token) {\n    if (typeof token !== 'string' || token.length === 0) {\n      return Promise.reject(\n        this.errorFactory_.create(Errors.codes.INVALID_DELETE_TOKEN)\n      );\n    }\n\n    return this.getTokenDetailsFromToken(token).then(details => {\n      if (!details) {\n        throw this.errorFactory_.create(Errors.codes.DELETE_TOKEN_NOT_FOUND);\n      }\n\n      return this.openDatabase_().then(db => {\n        return new Promise((resolve, reject) => {\n          const transaction = db.transaction(\n            [FCM_TOKEN_OBJ_STORE],\n            'readwrite'\n          );\n          const objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);\n          const request = objectStore.delete(details['swScope']);\n          request.onerror = event => {\n            reject((<IDBRequest>event.target).error);\n          };\n          request.onsuccess = event => {\n            if ((<IDBRequest>event.target).result === 0) {\n              reject(\n                this.errorFactory_.create(Errors.codes.FAILED_TO_DELETE_TOKEN)\n              );\n              return;\n            }\n\n            resolve(details);\n          };\n        });\n      });\n    });\n  }\n}\n"]}