{"version":3,"sources":["../src/core/snap/indexes/KeyIndex.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;AAEH,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAChC,OAAO,EAAQ,SAAS,EAAE,MAAM,SAAS,CAAC;AAC1C,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;AACxD,OAAO,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,gBAAgB,CAAC;AAGxD,IAAI,YAA0B,CAAC;AAE/B;IAA8B,4BAAK;IAAnC;;IAoEA,CAAC;IAnEC,sBAAW,wBAAY;aAAvB;YACE,MAAM,CAAC,YAAY,CAAC;QACtB,CAAC;aAED,UAAwB,GAAG;YACzB,YAAY,GAAG,GAAG,CAAC;QACrB,CAAC;;;OAJA;IAMD;;OAEG;IACH,0BAAO,GAAP,UAAQ,CAAY,EAAE,CAAY;QAChC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAED;;OAEG;IACH,8BAAW,GAAX,UAAY,IAAU;QACpB,yFAAyF;QACzF,yCAAyC;QACzC,MAAM,cAAc,CAAC,iDAAiD,CAAC,CAAC;IAC1E,CAAC;IAED;;OAEG;IACH,sCAAmB,GAAnB,UAAoB,OAAa,EAAE,OAAa;QAC9C,MAAM,CAAC,KAAK,CAAC,CAAC,oCAAoC;IACpD,CAAC;IAED;;OAEG;IACH,0BAAO,GAAP;QACE,MAAM,CAAE,SAAiB,CAAC,GAAG,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,0BAAO,GAAP;QACE,gFAAgF;QAChF,qEAAqE;QACrE,MAAM,CAAC,IAAI,SAAS,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;IAC/C,CAAC;IAED;;;;OAIG;IACH,2BAAQ,GAAR,UAAS,UAAkB,EAAE,IAAY;QACvC,MAAM,CACJ,OAAO,UAAU,KAAK,QAAQ,EAC9B,8CAA8C,CAC/C,CAAC;QACF,gGAAgG;QAChG,MAAM,CAAC,IAAI,SAAS,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;IACjD,CAAC;IAED;;OAEG;IACH,2BAAQ,GAAR;QACE,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IACH,eAAC;AAAD,CApEA,AAoEC,CApE6B,KAAK,GAoElC;;AAED,MAAM,CAAC,IAAM,SAAS,GAAG,IAAI,QAAQ,EAAE,CAAC","file":"KeyIndex.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { Node, NamedNode } from '../Node';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { assert, assertionError } from '@firebase/util';\nimport { ChildrenNode } from '../ChildrenNode';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost() {\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n"]}