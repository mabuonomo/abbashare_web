{"version":3,"sources":["../src/core/view/ViewProcessor.ts"],"names":[],"mappings":"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","file":"ViewProcessor.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { assert, assertionError } from '@firebase/util';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport { Change } from './Change';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport { Path } from '../util/Path';\nimport {\n  WriteTreeCompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  CompleteChildSource\n} from './CompleteChildSource';\nimport { ViewCache } from './ViewCache';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { WriteTreeRef } from '../WriteTree';\nimport { Overwrite } from '../operation/Overwrite';\nimport { Merge } from '../operation/Merge';\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Node } from '../snap/Node';\n\n/**\n * @constructor\n * @struct\n */\nexport class ProcessorResult {\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Array.<!Change>} changes\n   */\n  constructor(\n    public readonly viewCache: ViewCache,\n    public readonly changes: Change[]\n  ) {}\n}\n\n/**\n * @constructor\n */\nexport class ViewProcessor {\n  /**\n   * @param {!NodeFilter} filter_\n   */\n  constructor(private readonly filter_: NodeFilter) {}\n\n  /**\n   * @param {!ViewCache} viewCache\n   */\n  assertIndexed(viewCache: ViewCache) {\n    assert(\n      viewCache\n        .getEventCache()\n        .getNode()\n        .isIndexed(this.filter_.getIndex()),\n      'Event snap not indexed'\n    );\n    assert(\n      viewCache\n        .getServerCache()\n        .getNode()\n        .isIndexed(this.filter_.getIndex()),\n      'Server snap not indexed'\n    );\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Operation} operation\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @return {!ProcessorResult}\n   */\n  applyOperation(\n    oldViewCache: ViewCache,\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null\n  ): ProcessorResult {\n    const accumulator = new ChildChangeAccumulator();\n    let newViewCache, filterServerNode;\n    if (operation.type === OperationType.OVERWRITE) {\n      const overwrite = operation as Overwrite;\n      if (overwrite.source.fromUser) {\n        newViewCache = this.applyUserOverwrite_(\n          oldViewCache,\n          overwrite.path,\n          overwrite.snap,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        assert(overwrite.source.fromServer, 'Unknown source.');\n        // We filter the node if it's a tagged update or the node has been previously filtered  and the\n        // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n        // again\n        filterServerNode =\n          overwrite.source.tagged ||\n          (oldViewCache.getServerCache().isFiltered() &&\n            !overwrite.path.isEmpty());\n        newViewCache = this.applyServerOverwrite_(\n          oldViewCache,\n          overwrite.path,\n          overwrite.snap,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.MERGE) {\n      const merge = operation as Merge;\n      if (merge.source.fromUser) {\n        newViewCache = this.applyUserMerge_(\n          oldViewCache,\n          merge.path,\n          merge.children,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        assert(merge.source.fromServer, 'Unknown source.');\n        // We filter the node if it's a tagged update or the node has been previously filtered\n        filterServerNode =\n          merge.source.tagged || oldViewCache.getServerCache().isFiltered();\n        newViewCache = this.applyServerMerge_(\n          oldViewCache,\n          merge.path,\n          merge.children,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.ACK_USER_WRITE) {\n      const ackUserWrite = operation as AckUserWrite;\n      if (!ackUserWrite.revert) {\n        newViewCache = this.ackUserWrite_(\n          oldViewCache,\n          ackUserWrite.path,\n          ackUserWrite.affectedTree,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        newViewCache = this.revertUserWrite_(\n          oldViewCache,\n          ackUserWrite.path,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n      newViewCache = this.listenComplete_(\n        oldViewCache,\n        operation.path,\n        writesCache,\n        accumulator\n      );\n    } else {\n      throw assertionError('Unknown operation type: ' + operation.type);\n    }\n    const changes = accumulator.getChanges();\n    ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\n    return new ProcessorResult(newViewCache, changes);\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!ViewCache} newViewCache\n   * @param {!Array.<!Change>} accumulator\n   * @private\n   */\n  private static maybeAddValueEvent_(\n    oldViewCache: ViewCache,\n    newViewCache: ViewCache,\n    accumulator: Change[]\n  ) {\n    const eventSnap = newViewCache.getEventCache();\n    if (eventSnap.isFullyInitialized()) {\n      const isLeafOrEmpty =\n        eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n      const oldCompleteSnap = oldViewCache.getCompleteEventSnap();\n      if (\n        accumulator.length > 0 ||\n        !oldViewCache.getEventCache().isFullyInitialized() ||\n        (isLeafOrEmpty &&\n          !eventSnap\n            .getNode()\n            .equals(/** @type {!Node} */ (oldCompleteSnap))) ||\n        !eventSnap\n          .getNode()\n          .getPriority()\n          .equals(oldCompleteSnap.getPriority())\n      ) {\n        accumulator.push(\n          Change.valueChange(\n            /** @type {!Node} */ newViewCache.getCompleteEventSnap()\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} changePath\n   * @param {!WriteTreeRef} writesCache\n   * @param {!CompleteChildSource} source\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private generateEventCacheAfterServerEvent_(\n    viewCache: ViewCache,\n    changePath: Path,\n    writesCache: WriteTreeRef,\n    source: CompleteChildSource,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldEventSnap = viewCache.getEventCache();\n    if (writesCache.shadowingWrite(changePath) != null) {\n      // we have a shadowing write, ignore changes\n      return viewCache;\n    } else {\n      let newEventCache, serverNode;\n      if (changePath.isEmpty()) {\n        // TODO: figure out how this plays with \"sliding ack windows\"\n        assert(\n          viewCache.getServerCache().isFullyInitialized(),\n          'If change path is empty, we must have complete server data'\n        );\n        if (viewCache.getServerCache().isFiltered()) {\n          // We need to special case this, because we need to only apply writes to complete children, or\n          // we might end up raising events for incomplete children. If the server data is filtered deep\n          // writes cannot be guaranteed to be complete\n          const serverCache = viewCache.getCompleteServerSnap();\n          const completeChildren =\n            serverCache instanceof ChildrenNode\n              ? serverCache\n              : ChildrenNode.EMPTY_NODE;\n          const completeEventChildren = writesCache.calcCompleteEventChildren(\n            completeChildren\n          );\n          newEventCache = this.filter_.updateFullNode(\n            viewCache.getEventCache().getNode(),\n            completeEventChildren,\n            accumulator\n          );\n        } else {\n          const completeNode = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n          newEventCache = this.filter_.updateFullNode(\n            viewCache.getEventCache().getNode(),\n            completeNode,\n            accumulator\n          );\n        }\n      } else {\n        const childKey = changePath.getFront();\n        if (childKey == '.priority') {\n          assert(\n            changePath.getLength() == 1,\n            \"Can't have a priority with additional path components\"\n          );\n          const oldEventNode = oldEventSnap.getNode();\n          serverNode = viewCache.getServerCache().getNode();\n          // we might have overwrites for this priority\n          const updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(\n            changePath,\n            oldEventNode,\n            serverNode\n          );\n          if (updatedPriority != null) {\n            newEventCache = this.filter_.updatePriority(\n              oldEventNode,\n              updatedPriority\n            );\n          } else {\n            // priority didn't change, keep old node\n            newEventCache = oldEventSnap.getNode();\n          }\n        } else {\n          const childChangePath = changePath.popFront();\n          // update child\n          let newEventChild;\n          if (oldEventSnap.isCompleteForChild(childKey)) {\n            serverNode = viewCache.getServerCache().getNode();\n            const eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n            if (eventChildUpdate != null) {\n              newEventChild = oldEventSnap\n                .getNode()\n                .getImmediateChild(childKey)\n                .updateChild(childChangePath, eventChildUpdate);\n            } else {\n              // Nothing changed, just keep the old child\n              newEventChild = oldEventSnap\n                .getNode()\n                .getImmediateChild(childKey);\n            }\n          } else {\n            newEventChild = writesCache.calcCompleteChild(\n              childKey,\n              viewCache.getServerCache()\n            );\n          }\n          if (newEventChild != null) {\n            newEventCache = this.filter_.updateChild(\n              oldEventSnap.getNode(),\n              childKey,\n              newEventChild,\n              childChangePath,\n              source,\n              accumulator\n            );\n          } else {\n            // no complete child available or no change\n            newEventCache = oldEventSnap.getNode();\n          }\n        }\n      }\n      return viewCache.updateEventSnap(\n        newEventCache,\n        oldEventSnap.isFullyInitialized() || changePath.isEmpty(),\n        this.filter_.filtersNodes()\n      );\n    }\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Path} changePath\n   * @param {!Node} changedSnap\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {boolean} filterServerNode\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  applyServerOverwrite_(\n    oldViewCache: ViewCache,\n    changePath: Path,\n    changedSnap: Node,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    filterServerNode: boolean,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldServerSnap = oldViewCache.getServerCache();\n    let newServerCache;\n    const serverFilter = filterServerNode\n      ? this.filter_\n      : this.filter_.getIndexedFilter();\n    if (changePath.isEmpty()) {\n      newServerCache = serverFilter.updateFullNode(\n        oldServerSnap.getNode(),\n        changedSnap,\n        null\n      );\n    } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n      // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n      const newServerNode = oldServerSnap\n        .getNode()\n        .updateChild(changePath, changedSnap);\n      newServerCache = serverFilter.updateFullNode(\n        oldServerSnap.getNode(),\n        newServerNode,\n        null\n      );\n    } else {\n      const childKey = changePath.getFront();\n      if (\n        !oldServerSnap.isCompleteForPath(changePath) &&\n        changePath.getLength() > 1\n      ) {\n        // We don't update incomplete nodes with updates intended for other listeners\n        return oldViewCache;\n      }\n      const childChangePath = changePath.popFront();\n      const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n      const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n      if (childKey == '.priority') {\n        newServerCache = serverFilter.updatePriority(\n          oldServerSnap.getNode(),\n          newChildNode\n        );\n      } else {\n        newServerCache = serverFilter.updateChild(\n          oldServerSnap.getNode(),\n          childKey,\n          newChildNode,\n          childChangePath,\n          NO_COMPLETE_CHILD_SOURCE,\n          null\n        );\n      }\n    }\n    const newViewCache = oldViewCache.updateServerSnap(\n      newServerCache,\n      oldServerSnap.isFullyInitialized() || changePath.isEmpty(),\n      serverFilter.filtersNodes()\n    );\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      newViewCache,\n      completeCache\n    );\n    return this.generateEventCacheAfterServerEvent_(\n      newViewCache,\n      changePath,\n      writesCache,\n      source,\n      accumulator\n    );\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Path} changePath\n   * @param {!Node} changedSnap\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  applyUserOverwrite_(\n    oldViewCache: ViewCache,\n    changePath: Path,\n    changedSnap: Node,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldEventSnap = oldViewCache.getEventCache();\n    let newViewCache, newEventCache;\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      oldViewCache,\n      completeCache\n    );\n    if (changePath.isEmpty()) {\n      newEventCache = this.filter_.updateFullNode(\n        oldViewCache.getEventCache().getNode(),\n        changedSnap,\n        accumulator\n      );\n      newViewCache = oldViewCache.updateEventSnap(\n        newEventCache,\n        true,\n        this.filter_.filtersNodes()\n      );\n    } else {\n      const childKey = changePath.getFront();\n      if (childKey === '.priority') {\n        newEventCache = this.filter_.updatePriority(\n          oldViewCache.getEventCache().getNode(),\n          changedSnap\n        );\n        newViewCache = oldViewCache.updateEventSnap(\n          newEventCache,\n          oldEventSnap.isFullyInitialized(),\n          oldEventSnap.isFiltered()\n        );\n      } else {\n        const childChangePath = changePath.popFront();\n        const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n        let newChild;\n        if (childChangePath.isEmpty()) {\n          // Child overwrite, we can replace the child\n          newChild = changedSnap;\n        } else {\n          const childNode = source.getCompleteChild(childKey);\n          if (childNode != null) {\n            if (\n              childChangePath.getBack() === '.priority' &&\n              childNode.getChild(childChangePath.parent()).isEmpty()\n            ) {\n              // This is a priority update on an empty node. If this node exists on the server, the\n              // server will send down the priority in the update, so ignore for now\n              newChild = childNode;\n            } else {\n              newChild = childNode.updateChild(childChangePath, changedSnap);\n            }\n          } else {\n            // There is no complete child node available\n            newChild = ChildrenNode.EMPTY_NODE;\n          }\n        }\n        if (!oldChild.equals(newChild)) {\n          const newEventSnap = this.filter_.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n          newViewCache = oldViewCache.updateEventSnap(\n            newEventSnap,\n            oldEventSnap.isFullyInitialized(),\n            this.filter_.filtersNodes()\n          );\n        } else {\n          newViewCache = oldViewCache;\n        }\n      }\n    }\n    return newViewCache;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {string} childKey\n   * @return {boolean}\n   * @private\n   */\n  private static cacheHasChild_(\n    viewCache: ViewCache,\n    childKey: string\n  ): boolean {\n    return viewCache.getEventCache().isCompleteForChild(childKey);\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {ImmutableTree.<!Node>} changedChildren\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private applyUserMerge_(\n    viewCache: ViewCache,\n    path: Path,\n    changedChildren: ImmutableTree<Node>,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    changedChildren.foreach((relativePath, childNode) => {\n      const writePath = path.child(relativePath);\n      if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = this.applyUserOverwrite_(\n          curViewCache,\n          writePath,\n          childNode,\n          writesCache,\n          serverCache,\n          accumulator\n        );\n      }\n    });\n\n    changedChildren.foreach((relativePath, childNode) => {\n      const writePath = path.child(relativePath);\n      if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = this.applyUserOverwrite_(\n          curViewCache,\n          writePath,\n          childNode,\n          writesCache,\n          serverCache,\n          accumulator\n        );\n      }\n    });\n\n    return curViewCache;\n  }\n\n  /**\n   * @param {!Node} node\n   * @param {ImmutableTree.<!Node>} merge\n   * @return {!Node}\n   * @private\n   */\n  private applyMerge_(node: Node, merge: ImmutableTree<Node>): Node {\n    merge.foreach(function(relativePath, childNode) {\n      node = node.updateChild(relativePath, childNode);\n    });\n    return node;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!ImmutableTree.<!Node>} changedChildren\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache\n   * @param {boolean} filterServerNode\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private applyServerMerge_(\n    viewCache: ViewCache,\n    path: Path,\n    changedChildren: ImmutableTree<Node>,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    filterServerNode: boolean,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n    // wait for the complete data update coming soon.\n    if (\n      viewCache\n        .getServerCache()\n        .getNode()\n        .isEmpty() &&\n      !viewCache.getServerCache().isFullyInitialized()\n    ) {\n      return viewCache;\n    }\n\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    let viewMergeTree;\n    if (path.isEmpty()) {\n      viewMergeTree = changedChildren;\n    } else {\n      viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);\n    }\n    const serverNode = viewCache.getServerCache().getNode();\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n      if (serverNode.hasChild(childKey)) {\n        const serverChild = viewCache\n          .getServerCache()\n          .getNode()\n          .getImmediateChild(childKey);\n        const newChild = this.applyMerge_(serverChild, childTree);\n        curViewCache = this.applyServerOverwrite_(\n          curViewCache,\n          new Path(childKey),\n          newChild,\n          writesCache,\n          serverCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    });\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n      const isUnknownDeepMerge =\n        !viewCache.getServerCache().isCompleteForChild(childKey) &&\n        childMergeTree.value == null;\n      if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n        const serverChild = viewCache\n          .getServerCache()\n          .getNode()\n          .getImmediateChild(childKey);\n        const newChild = this.applyMerge_(serverChild, childMergeTree);\n        curViewCache = this.applyServerOverwrite_(\n          curViewCache,\n          new Path(childKey),\n          newChild,\n          writesCache,\n          serverCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    });\n\n    return curViewCache;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} ackPath\n   * @param {!ImmutableTree<!boolean>} affectedTree\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private ackUserWrite_(\n    viewCache: ViewCache,\n    ackPath: Path,\n    affectedTree: ImmutableTree<boolean>,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    if (writesCache.shadowingWrite(ackPath) != null) {\n      return viewCache;\n    }\n\n    // Only filter server node if it is currently filtered\n    const filterServerNode = viewCache.getServerCache().isFiltered();\n\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n    // now that it won't be shadowed.\n    const serverCache = viewCache.getServerCache();\n    if (affectedTree.value != null) {\n      // This is an overwrite.\n      if (\n        (ackPath.isEmpty() && serverCache.isFullyInitialized()) ||\n        serverCache.isCompleteForPath(ackPath)\n      ) {\n        return this.applyServerOverwrite_(\n          viewCache,\n          ackPath,\n          serverCache.getNode().getChild(ackPath),\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      } else if (ackPath.isEmpty()) {\n        // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n        // should just re-apply whatever we have in our cache as a merge.\n        let changedChildren = ImmutableTree.Empty;\n        serverCache.getNode().forEachChild(KEY_INDEX, function(name, node) {\n          changedChildren = changedChildren.set(new Path(name), node);\n        });\n        return this.applyServerMerge_(\n          viewCache,\n          ackPath,\n          changedChildren,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      } else {\n        return viewCache;\n      }\n    } else {\n      // This is a merge.\n      let changedChildren = ImmutableTree.Empty;\n      affectedTree.foreach(function(mergePath, value) {\n        const serverCachePath = ackPath.child(mergePath);\n        if (serverCache.isCompleteForPath(serverCachePath)) {\n          changedChildren = changedChildren.set(\n            mergePath,\n            serverCache.getNode().getChild(serverCachePath)\n          );\n        }\n      });\n      return this.applyServerMerge_(\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!WriteTreeRef} writesCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private listenComplete_(\n    viewCache: ViewCache,\n    path: Path,\n    writesCache: WriteTreeRef,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldServerNode = viewCache.getServerCache();\n    const newViewCache = viewCache.updateServerSnap(\n      oldServerNode.getNode(),\n      oldServerNode.isFullyInitialized() || path.isEmpty(),\n      oldServerNode.isFiltered()\n    );\n    return this.generateEventCacheAfterServerEvent_(\n      newViewCache,\n      path,\n      writesCache,\n      NO_COMPLETE_CHILD_SOURCE,\n      accumulator\n    );\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeServerCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private revertUserWrite_(\n    viewCache: ViewCache,\n    path: Path,\n    writesCache: WriteTreeRef,\n    completeServerCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    let complete;\n    if (writesCache.shadowingWrite(path) != null) {\n      return viewCache;\n    } else {\n      const source = new WriteTreeCompleteChildSource(\n        writesCache,\n        viewCache,\n        completeServerCache\n      );\n      const oldEventCache = viewCache.getEventCache().getNode();\n      let newEventCache;\n      if (path.isEmpty() || path.getFront() === '.priority') {\n        let newNode;\n        if (viewCache.getServerCache().isFullyInitialized()) {\n          newNode = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n        } else {\n          const serverChildren = viewCache.getServerCache().getNode();\n          assert(\n            serverChildren instanceof ChildrenNode,\n            'serverChildren would be complete if leaf node'\n          );\n          newNode = writesCache.calcCompleteEventChildren(\n            serverChildren as ChildrenNode\n          );\n        }\n        newNode = newNode as Node;\n        newEventCache = this.filter_.updateFullNode(\n          oldEventCache,\n          newNode,\n          accumulator\n        );\n      } else {\n        const childKey = path.getFront();\n        let newChild = writesCache.calcCompleteChild(\n          childKey,\n          viewCache.getServerCache()\n        );\n        if (\n          newChild == null &&\n          viewCache.getServerCache().isCompleteForChild(childKey)\n        ) {\n          newChild = oldEventCache.getImmediateChild(childKey);\n        }\n        if (newChild != null) {\n          newEventCache = this.filter_.updateChild(\n            oldEventCache,\n            childKey,\n            newChild,\n            path.popFront(),\n            source,\n            accumulator\n          );\n        } else if (\n          viewCache\n            .getEventCache()\n            .getNode()\n            .hasChild(childKey)\n        ) {\n          // No complete child available, delete the existing one, if any\n          newEventCache = this.filter_.updateChild(\n            oldEventCache,\n            childKey,\n            ChildrenNode.EMPTY_NODE,\n            path.popFront(),\n            source,\n            accumulator\n          );\n        } else {\n          newEventCache = oldEventCache;\n        }\n        if (\n          newEventCache.isEmpty() &&\n          viewCache.getServerCache().isFullyInitialized()\n        ) {\n          // We might have reverted all child writes. Maybe the old event was a leaf node\n          complete = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n          if (complete.isLeafNode()) {\n            newEventCache = this.filter_.updateFullNode(\n              newEventCache,\n              complete,\n              accumulator\n            );\n          }\n        }\n      }\n      complete =\n        viewCache.getServerCache().isFullyInitialized() ||\n        writesCache.shadowingWrite(Path.Empty) != null;\n      return viewCache.updateEventSnap(\n        newEventCache,\n        complete,\n        this.filter_.filtersNodes()\n      );\n    }\n  }\n}\n"]}