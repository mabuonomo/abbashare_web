{"version":3,"sources":["../src/api/Database.ts"],"names":[],"mappings":"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","file":"Database.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fatal } from '../core/util/util';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { Path } from '../core/util/Path';\nimport { Reference } from './Reference';\nimport { Repo } from '../core/Repo';\nimport { RepoManager } from '../core/RepoManager';\nimport { validateArgCount } from '@firebase/util';\nimport { validateUrl } from '../core/util/validation';\nimport { FirebaseApp, FirebaseService } from '@firebase/app';\nimport { RepoInfo } from '../core/RepoInfo';\n\n/**\n * Class representing a firebase database.\n * @implements {FirebaseService}\n */\nexport class Database implements FirebaseService {\n  INTERNAL: DatabaseInternals;\n  private root_: Reference;\n\n  static readonly ServerValue = {\n    TIMESTAMP: {\n      '.sv': 'timestamp'\n    }\n  };\n\n  /**\n   * The constructor should not be called by users of our public API.\n   * @param {!Repo} repo_\n   */\n  constructor(private repo_: Repo) {\n    if (!(repo_ instanceof Repo)) {\n      fatal(\n        \"Don't call new Database() directly - please use firebase.database().\"\n      );\n    }\n\n    /** @type {Reference} */\n    this.root_ = new Reference(repo_, Path.Empty);\n\n    this.INTERNAL = new DatabaseInternals(this);\n  }\n\n  get app(): FirebaseApp {\n    return this.repo_.app;\n  }\n\n  /**\n   * Returns a reference to the root or the path specified in opt_pathString.\n   * @param {string=} pathString\n   * @return {!Reference} Firebase reference.\n   */\n  ref(pathString?: string): Reference {\n    this.checkDeleted_('ref');\n    validateArgCount('database.ref', 0, 1, arguments.length);\n\n    return pathString !== undefined ? this.root_.child(pathString) : this.root_;\n  }\n\n  /**\n   * Returns a reference to the root or the path specified in url.\n   * We throw a exception if the url is not in the same domain as the\n   * current repo.\n   * @param {string} url\n   * @return {!Reference} Firebase reference.\n   */\n  refFromURL(url: string): Reference {\n    /** @const {string} */\n    const apiName = 'database.refFromURL';\n    this.checkDeleted_(apiName);\n    validateArgCount(apiName, 1, 1, arguments.length);\n    const parsedURL = parseRepoInfo(url);\n    validateUrl(apiName, 1, parsedURL);\n\n    const repoInfo = parsedURL.repoInfo;\n    if (repoInfo.host !== ((this.repo_ as any).repoInfo_ as RepoInfo).host) {\n      fatal(\n        apiName +\n          ': Host name does not match the current database: ' +\n          '(found ' +\n          repoInfo.host +\n          ' but expected ' +\n          ((this.repo_ as any).repoInfo_ as RepoInfo).host +\n          ')'\n      );\n    }\n\n    return this.ref(parsedURL.path.toString());\n  }\n\n  /**\n   * @param {string} apiName\n   */\n  private checkDeleted_(apiName: string) {\n    if (this.repo_ === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n\n  // Make individual repo go offline.\n  goOffline() {\n    validateArgCount('database.goOffline', 0, 0, arguments.length);\n    this.checkDeleted_('goOffline');\n    this.repo_.interrupt();\n  }\n\n  goOnline() {\n    validateArgCount('database.goOnline', 0, 0, arguments.length);\n    this.checkDeleted_('goOnline');\n    this.repo_.resume();\n  }\n}\n\nexport class DatabaseInternals {\n  /** @param {!Database} database */\n  constructor(public database: Database) {}\n\n  /** @return {Promise<void>} */\n  delete(): Promise<void> {\n    (this.database as any).checkDeleted_('delete');\n    RepoManager.getInstance().deleteRepo((this.database as any).repo_ as Repo);\n\n    (this.database as any).repo_ = null;\n    (this.database as any).root_ = null;\n    this.database.INTERNAL = null;\n    this.database = null;\n    return Promise.resolve();\n  }\n}\n"]}