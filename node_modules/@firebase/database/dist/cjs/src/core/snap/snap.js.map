{"version":3,"sources":["../src/core/snap/snap.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,uCAAwC;AACxC,qCAAqD;AACrD,uCAA0C;AAG1C,IAAI,QAAc,CAAC;AAEnB,oBAA2B,GAAS;IAClC,QAAQ,GAAG,GAAG,CAAC;AACjB,CAAC;AAFD,gCAEC;AAED;;;GAGG;AACU,QAAA,gBAAgB,GAAG,UAAS,QAAyB;IAChE,EAAE,CAAC,CAAC,OAAO,QAAQ,KAAK,QAAQ,CAAC;QAC/B,MAAM,CAAC,SAAS,GAAG,4BAAqB,CAAC,QAAQ,CAAC,CAAC;IACrD,IAAI;QAAC,MAAM,CAAC,SAAS,GAAG,QAAQ,CAAC;AACnC,CAAC,CAAC;AAEF;;;;GAIG;AACU,QAAA,oBAAoB,GAAG,UAAS,YAAkB;IAC7D,EAAE,CAAC,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;QAC9B,IAAM,GAAG,GAAG,YAAY,CAAC,GAAG,EAAE,CAAC;QAC/B,aAAM,CACJ,OAAO,GAAG,KAAK,QAAQ;YACrB,OAAO,GAAG,KAAK,QAAQ;YACvB,CAAC,OAAO,GAAG,KAAK,QAAQ,IAAI,eAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,EACnD,sCAAsC,CACvC,CAAC;IACJ,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,aAAM,CACJ,YAAY,KAAK,QAAQ,IAAI,YAAY,CAAC,OAAO,EAAE,EACnD,8BAA8B,CAC/B,CAAC;IACJ,CAAC;IACD,mEAAmE;IACnE,aAAM,CACJ,YAAY,KAAK,QAAQ,IAAI,YAAY,CAAC,WAAW,EAAE,CAAC,OAAO,EAAE,EACjE,oDAAoD,CACrD,CAAC;AACJ,CAAC,CAAC","file":"snap.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { doubleToIEEE754String } from '../util/util';\nimport { contains } from '@firebase/util';\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\n/**\n * @param {(!string|!number)} priority\n * @return {!string}\n */\nexport const priorityHashText = function(priority: string | number): string {\n  if (typeof priority === 'number')\n    return 'number:' + doubleToIEEE754String(priority);\n  else return 'string:' + priority;\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n *\n * @param {!Node} priorityNode\n */\nexport const validatePriorityNode = function(priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n"]}