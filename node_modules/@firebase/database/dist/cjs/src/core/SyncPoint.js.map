{"version":3,"sources":["../src/core/SyncPoint.ts"],"names":[],"mappings":"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","file":"SyncPoint.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CacheNode } from './view/CacheNode';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { assert } from '@firebase/util';\nimport { isEmpty, forEach, findValue, safeGet } from '@firebase/util';\nimport { ViewCache } from './view/ViewCache';\nimport { View } from './view/View';\nimport { Operation } from './operation/Operation';\nimport { WriteTreeRef } from './WriteTree';\nimport { Query } from '../api/Query';\nimport { EventRegistration } from './view/EventRegistration';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { Event } from './view/Event';\nimport { Reference, ReferenceConstructor } from '../api/Reference';\n\nlet __referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  static set __referenceConstructor(val: ReferenceConstructor) {\n    assert(\n      !__referenceConstructor,\n      '__referenceConstructor has already been defined'\n    );\n    __referenceConstructor = val;\n  }\n\n  static get __referenceConstructor() {\n    assert(__referenceConstructor, 'Reference.ts has not been loaded');\n    return __referenceConstructor;\n  }\n\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   *\n   * @type {!Object.<!string, !View>}\n   * @private\n   */\n  private views_: { [k: string]: View } = {};\n\n  /**\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return isEmpty(this.views_);\n  }\n\n  /**\n   *\n   * @param {!Operation} operation\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} optCompleteServerCache\n   * @return {!Array.<!Event>}\n   */\n  applyOperation(\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    optCompleteServerCache: Node | null\n  ): Event[] {\n    const queryId = operation.source.queryId;\n    if (queryId !== null) {\n      const view = safeGet(this.views_, queryId);\n      assert(view != null, 'SyncTree gave us an op for an invalid query.');\n      return view.applyOperation(\n        operation,\n        writesCache,\n        optCompleteServerCache\n      );\n    } else {\n      let events: Event[] = [];\n\n      forEach(this.views_, function(key: string, view: View) {\n        events = events.concat(\n          view.applyOperation(operation, writesCache, optCompleteServerCache)\n        );\n      });\n\n      return events;\n    }\n  }\n\n  /**\n   * Add an event callback for the specified query.\n   *\n   * @param {!Query} query\n   * @param {!EventRegistration} eventRegistration\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache Complete server cache, if we have it.\n   * @param {boolean} serverCacheComplete\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  addEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    serverCacheComplete: boolean\n  ): Event[] {\n    const queryId = query.queryIdentifier();\n    let view = safeGet(this.views_, queryId);\n    if (!view) {\n      // TODO: make writesCache take flag for complete server node\n      let eventCache = writesCache.calcCompleteEventCache(\n        serverCacheComplete ? serverCache : null\n      );\n      let eventCacheComplete = false;\n      if (eventCache) {\n        eventCacheComplete = true;\n      } else if (serverCache instanceof ChildrenNode) {\n        eventCache = writesCache.calcCompleteEventChildren(serverCache);\n        eventCacheComplete = false;\n      } else {\n        eventCache = ChildrenNode.EMPTY_NODE;\n        eventCacheComplete = false;\n      }\n      const viewCache = new ViewCache(\n        new CacheNode(\n          /** @type {!Node} */ (eventCache),\n          eventCacheComplete,\n          false\n        ),\n        new CacheNode(\n          /** @type {!Node} */ (serverCache),\n          serverCacheComplete,\n          false\n        )\n      );\n      view = new View(query, viewCache);\n      this.views_[queryId] = view;\n    }\n\n    // This is guaranteed to exist now, we just created anything that was missing\n    view.addEventRegistration(eventRegistration);\n    return view.getInitialEvents(eventRegistration);\n  }\n\n  /**\n   * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n   *\n   * If query is the default query, we'll check all views for the specified eventRegistration.\n   * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n   *\n   * @param {!Query} query\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events\n   */\n  removeEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): { removed: Query[]; events: Event[] } {\n    const queryId = query.queryIdentifier();\n    const removed: Query[] = [];\n    let cancelEvents: Event[] = [];\n    const hadCompleteView = this.hasCompleteView();\n    if (queryId === 'default') {\n      // When you do ref.off(...), we search all views for the registration to remove.\n      const self = this;\n      forEach(this.views_, function(viewQueryId: string, view: View) {\n        cancelEvents = cancelEvents.concat(\n          view.removeEventRegistration(eventRegistration, cancelError)\n        );\n        if (view.isEmpty()) {\n          delete self.views_[viewQueryId];\n\n          // We'll deal with complete views later.\n          if (\n            !view\n              .getQuery()\n              .getQueryParams()\n              .loadsAllData()\n          ) {\n            removed.push(view.getQuery());\n          }\n        }\n      });\n    } else {\n      // remove the callback from the specific view.\n      const view = safeGet(this.views_, queryId);\n      if (view) {\n        cancelEvents = cancelEvents.concat(\n          view.removeEventRegistration(eventRegistration, cancelError)\n        );\n        if (view.isEmpty()) {\n          delete this.views_[queryId];\n\n          // We'll deal with complete views later.\n          if (\n            !view\n              .getQuery()\n              .getQueryParams()\n              .loadsAllData()\n          ) {\n            removed.push(view.getQuery());\n          }\n        }\n      }\n    }\n\n    if (hadCompleteView && !this.hasCompleteView()) {\n      // We removed our last complete view.\n      removed.push(\n        new SyncPoint.__referenceConstructor(query.repo, query.path)\n      );\n    }\n\n    return { removed: removed, events: cancelEvents };\n  }\n\n  /**\n   * @return {!Array.<!View>}\n   */\n  getQueryViews(): View[] {\n    const values = Object.keys(this.views_).map(key => this.views_[key]);\n    return values.filter(function(view) {\n      return !view\n        .getQuery()\n        .getQueryParams()\n        .loadsAllData();\n    });\n  }\n\n  /**\n   *\n   * @param {!Path} path The path to the desired complete snapshot\n   * @return {?Node} A complete cache, if it exists\n   */\n  getCompleteServerCache(path: Path): Node | null {\n    let serverCache: Node | null = null;\n    forEach(this.views_, (key: string, view: View) => {\n      serverCache = serverCache || view.getCompleteServerCache(path);\n    });\n    return serverCache;\n  }\n\n  /**\n   * @param {!Query} query\n   * @return {?View}\n   */\n  viewForQuery(query: Query): View | null {\n    const params = query.getQueryParams();\n    if (params.loadsAllData()) {\n      return this.getCompleteView();\n    } else {\n      const queryId = query.queryIdentifier();\n      return safeGet(this.views_, queryId);\n    }\n  }\n\n  /**\n   * @param {!Query} query\n   * @return {boolean}\n   */\n  viewExistsForQuery(query: Query): boolean {\n    return this.viewForQuery(query) != null;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasCompleteView(): boolean {\n    return this.getCompleteView() != null;\n  }\n\n  /**\n   * @return {?View}\n   */\n  getCompleteView(): View | null {\n    const completeView = findValue(this.views_, (view: View) =>\n      view\n        .getQuery()\n        .getQueryParams()\n        .loadsAllData()\n    );\n    return completeView || null;\n  }\n}\n"]}