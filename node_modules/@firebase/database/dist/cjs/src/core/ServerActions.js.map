{"version":3,"sources":["../src/core/ServerActions.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAIH;;;;;GAKG;AACH;IAAA;IAyFA,CAAC;IAnEC;;;;;OAKG;IACH,2BAAG,GAAH,UACE,UAAkB,EAClB,IAAS,EACT,UAA2C,EAC3C,IAAa,IACZ,CAAC;IAEJ;;;;;OAKG;IACH,6BAAK,GAAL,UACE,UAAkB,EAClB,IAAS,EACT,UAAiD,EACjD,IAAa,IACZ,CAAC;IAEJ;;;OAGG;IACH,wCAAgB,GAAhB,UAAiB,KAAa,IAAG,CAAC;IAElC;;;;OAIG;IACH,uCAAe,GAAf,UACE,UAAkB,EAClB,IAAS,EACT,UAA2C,IAC1C,CAAC;IAEJ;;;;OAIG;IACH,yCAAiB,GAAjB,UACE,UAAkB,EAClB,IAAS,EACT,UAA2C,IAC1C,CAAC;IAEJ;;;OAGG;IACH,0CAAkB,GAAlB,UACE,UAAkB,EAClB,UAA2C,IAC1C,CAAC;IAEJ;;OAEG;IACH,mCAAW,GAAX,UAAY,KAA2B,IAAG,CAAC;IAC7C,oBAAC;AAAD,CAzFA,AAyFC,IAAA;AAzFqB,sCAAa","file":"ServerActions.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../api/Query';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  /**\n   * @param {!Query} query\n   * @param {function():string} currentHashFn\n   * @param {?number} tag\n   * @param {function(string, *)} onComplete\n   */\n  abstract listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: any) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   *\n   * @param {!Query} query\n   * @param {?number} tag\n   */\n  abstract unlisten(query: Query, tag: number | null): void;\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   * @param {string=} hash\n   */\n  put(\n    pathString: string,\n    data: any,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, ?string)} onComplete\n   * @param {string=} hash\n   */\n  merge(\n    pathString: string,\n    data: any,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param {string} token The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectPut(\n    pathString: string,\n    data: any,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectMerge(\n    pathString: string,\n    data: any,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {Object.<string, *>} stats\n   */\n  reportStats(stats: { [k: string]: any }) {}\n}\n"]}