{"version":3,"sources":["../src/core/view/Change.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAIH;;;;;;;;GAQG;AACH;IACE,gBACS,IAAY,EACZ,YAAkB,EAClB,SAAkB,EAClB,OAAc,EACd,QAAiB;QAJjB,SAAI,GAAJ,IAAI,CAAQ;QACZ,iBAAY,GAAZ,YAAY,CAAM;QAClB,cAAS,GAAT,SAAS,CAAS;QAClB,YAAO,GAAP,OAAO,CAAO;QACd,aAAQ,GAAR,QAAQ,CAAS;IACvB,CAAC;IAEJ;;;OAGG;IACI,kBAAW,GAAlB,UAAmB,QAAc;QAC/B,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IAC5C,CAAC;IAED;;;;OAIG;IACI,uBAAgB,GAAvB,UAAwB,QAAgB,EAAE,QAAc;QACtD,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAC5D,CAAC;IAED;;;;OAIG;IACI,yBAAkB,GAAzB,UAA0B,QAAgB,EAAE,QAAc;QACxD,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC,aAAa,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAC9D,CAAC;IAED;;;;;OAKG;IACI,yBAAkB,GAAzB,UACE,QAAgB,EAChB,WAAiB,EACjB,WAAiB;QAEjB,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC,aAAa,EAAE,WAAW,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC;IAC9E,CAAC;IAED;;;;OAIG;IACI,uBAAgB,GAAvB,UAAwB,QAAgB,EAAE,QAAc;QACtD,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAC5D,CAAC;IAED,aAAa;IACb,mCAAmC;IAC5B,kBAAW,GAAG,aAAa,CAAC;IAEnC,qCAAqC;IAC9B,oBAAa,GAAG,eAAe,CAAC;IAEvC,qCAAqC;IAC9B,oBAAa,GAAG,eAAe,CAAC;IAEvC,mCAAmC;IAC5B,kBAAW,GAAG,aAAa,CAAC;IAEnC,oCAAoC;IAC7B,YAAK,GAAG,OAAO,CAAC;IACzB,aAAC;CAzED,AAyEC,IAAA;AAzEY,wBAAM","file":"Change.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\n/**\n * @constructor\n * @struct\n * @param {!string} type The event type\n * @param {!Node} snapshotNode The data\n * @param {string=} childName The name for this child, if it's a child event\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\n * @param {string=} prevName The name for the previous child, if applicable\n */\nexport class Change {\n  constructor(\n    public type: string,\n    public snapshotNode: Node,\n    public childName?: string,\n    public oldSnap?: Node,\n    public prevName?: string\n  ) {}\n\n  /**\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static valueChange(snapshot: Node): Change {\n    return new Change(Change.VALUE, snapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childAddedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_ADDED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childRemovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_REMOVED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} newSnapshot\n   * @param {!Node} oldSnapshot\n   * @return {!Change}\n   */\n  static childChangedChange(\n    childKey: string,\n    newSnapshot: Node,\n    oldSnapshot: Node\n  ): Change {\n    return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childMovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_MOVED, snapshot, childKey);\n  }\n\n  //event types\n  /** Event type for a child added */\n  static CHILD_ADDED = 'child_added';\n\n  /** Event type for a child removed */\n  static CHILD_REMOVED = 'child_removed';\n\n  /** Event type for a child changed */\n  static CHILD_CHANGED = 'child_changed';\n\n  /** Event type for a child moved */\n  static CHILD_MOVED = 'child_moved';\n\n  /** Event type for a value change */\n  static VALUE = 'value';\n}\n"]}