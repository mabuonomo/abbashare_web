{
  "version": 3,
  "file": "urlService.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/core/url/urlService.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "/**\n * @coreapi\n * @module url\n */ /** */\n\nimport { UIRouter } from \"../router\";\nimport { LocationServices, notImplemented, LocationConfig } from \"../common/coreservices\";\nimport { noop, createProxyFunctions } from \"../common/common\";\nimport { UrlConfigApi, UrlSyncApi, UrlRulesApi, UrlParts, MatchResult } from \"./interface\";\n\n/** @hidden */\nconst makeStub = (keys: string[]): any =>\n    keys.reduce((acc, key) => (acc[key] = notImplemented(key), acc), { dispose: noop });\n\n/** @hidden */ const locationServicesFns = [\"url\", \"path\", \"search\", \"hash\", \"onChange\"];\n/** @hidden */ const locationConfigFns = [\"port\", \"protocol\", \"host\", \"baseHref\", \"html5Mode\", \"hashPrefix\"];\n/** @hidden */ const umfFns = [\"type\", \"caseInsensitive\", \"strictMode\", \"defaultSquashPolicy\"];\n/** @hidden */ const rulesFns = [\"sort\", \"when\", \"initial\", \"otherwise\", \"rules\", \"rule\", \"removeRule\"];\n/** @hidden */ const syncFns = [\"deferIntercept\", \"listen\", \"sync\", \"match\"];\n\n/**\n * API for URL management\n */\nexport class UrlService implements LocationServices, UrlSyncApi {\n  /** @hidden */\n  static locationServiceStub: LocationServices = makeStub(locationServicesFns);\n  /** @hidden */\n  static locationConfigStub: LocationConfig = makeStub(locationConfigFns);\n\n  /** @inheritdoc */\n  url(): string;\n  /** @inheritdoc */\n  url(newurl: string, replace?: boolean, state?): void;\n  url(newurl?, replace?, state?): any { return };\n  /** @inheritdoc */\n  path(): string { return };\n  /** @inheritdoc */\n  search(): { [key: string]: any } { return };\n  /** @inheritdoc */\n  hash(): string { return };\n  /** @inheritdoc */\n  onChange(callback: Function): Function { return };\n\n\n  /**\n   * Returns the current URL parts\n   *\n   * This method returns the current URL components as a [[UrlParts]] object.\n   *\n   * @returns the current url parts\n   */\n  parts(): UrlParts {\n    return { path: this.path(), search: this.search(), hash: this.hash() }\n  }\n\n  dispose() { }\n\n  /** @inheritdoc */\n  sync(evt?) { return }\n  /** @inheritdoc */\n  listen(enabled?: boolean): Function { return };\n  /** @inheritdoc */\n  deferIntercept(defer?: boolean) { return }\n  /** @inheritdoc */\n  match(urlParts: UrlParts): MatchResult { return }\n\n  /**\n   * A nested API for managing URL rules and rewrites\n   *\n   * See: [[UrlRulesApi]] for details\n   */\n  rules: UrlRulesApi;\n\n  /**\n   * A nested API to configure the URL and retrieve URL information\n   *\n   * See: [[UrlConfigApi]] for details\n   */\n  config: UrlConfigApi;\n\n  /** @hidden */\n  private router: UIRouter;\n\n  /** @hidden */\n  constructor(router: UIRouter, lateBind = true) {\n    this.router = router;\n    this.rules = {} as any;\n    this.config = {} as any;\n\n    // proxy function calls from UrlService to the LocationService/LocationConfig\n    const locationServices = () => router.locationService;\n    createProxyFunctions(locationServices, this, locationServices, locationServicesFns, lateBind);\n\n    const locationConfig = () => router.locationConfig;\n    createProxyFunctions(locationConfig, this.config, locationConfig, locationConfigFns, lateBind);\n\n    const umf = () => router.urlMatcherFactory;\n    createProxyFunctions(umf, this.config, umf, umfFns);\n\n    const urlRouter = () => router.urlRouter;\n    createProxyFunctions(urlRouter, this.rules, urlRouter, rulesFns);\n    createProxyFunctions(urlRouter, this, urlRouter, syncFns);\n  }\n}\n"
  ]
}