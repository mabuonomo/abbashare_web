{
  "version": 3,
  "file": "transitionService.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/core/transition/transitionService.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "/**\n * @coreapi\n * @module transition\n */\n/** for typedoc */\nimport {\n  IHookRegistry, TransitionOptions, TransitionHookScope, TransitionHookPhase, TransitionCreateHookFn, HookMatchCriteria,\n  HookRegOptions, PathTypes, PathType, RegisteredHooks, TransitionHookFn, TransitionStateHookFn\n} from \"./interface\";\nimport { Transition } from \"./transition\";\nimport { makeEvent, RegisteredHook } from \"./hookRegistry\";\nimport { TargetState } from \"../state/targetState\";\nimport { PathNode } from \"../path/pathNode\";\nimport { ViewService } from \"../view/view\";\nimport { UIRouter } from \"../router\";\nimport { registerAddCoreResolvables } from \"../hooks/coreResolvables\";\nimport { registerRedirectToHook } from \"../hooks/redirectTo\";\nimport { registerOnExitHook, registerOnRetainHook, registerOnEnterHook } from \"../hooks/onEnterExitRetain\";\nimport { registerEagerResolvePath, registerLazyResolveState } from \"../hooks/resolve\";\nimport { registerLoadEnteringViews, registerActivateViews } from \"../hooks/views\";\nimport { registerUpdateGlobalState } from \"../hooks/updateGlobals\";\nimport { registerUpdateUrl } from \"../hooks/url\";\nimport { registerLazyLoadHook } from \"../hooks/lazyLoad\";\nimport { TransitionEventType } from \"./transitionEventType\";\nimport { TransitionHook, GetResultHandler, GetErrorHandler } from \"./transitionHook\";\nimport { isDefined } from \"../common/predicates\";\nimport { removeFrom, values, createProxyFunctions } from \"../common/common\";\nimport { Disposable } from \"../interface\"; // has or is using\nimport { val } from \"../common/hof\";\nimport { registerIgnoredTransitionHook } from '../hooks/ignoredTransition';\nimport { registerInvalidTransitionHook } from '../hooks/invalidTransition';\n\n/**\n * The default [[Transition]] options.\n *\n * Include this object when applying custom defaults:\n * let reloadOpts = { reload: true, notify: true }\n * let options = defaults(theirOpts, customDefaults, defaultOptions);\n */\nexport let defaultTransOpts: TransitionOptions = {\n  location    : true,\n  relative    : null,\n  inherit     : false,\n  notify      : true,\n  reload      : false,\n  custom      : {},\n  current     : () => null,\n  source      : \"unknown\"\n};\n\n\n/**\n * Plugin API for Transition Service\n * @internalapi\n */\nexport interface TransitionServicePluginAPI {\n  /**\n   * Adds a Path to be used as a criterion against a TreeChanges path\n   *\n   * For example: the `exiting` path in [[HookMatchCriteria]] is a STATE scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('exiting', TransitionHookScope.STATE)`\n   * Each state in the exiting path is checked against the criteria and returned as part of the match.\n   *\n   * Another example: the `to` path in [[HookMatchCriteria]] is a TRANSITION scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('to', TransitionHookScope.TRANSITION)`\n   * Only the tail of the `to` path is checked against the criteria and returned as part of the match.\n   */\n  _definePathType(name: string, hookScope: TransitionHookScope);\n\n  /**\n   * Gets a Path definition used as a criterion against a TreeChanges path\n   */\n  _getPathTypes(): PathTypes;\n\n  /**\n   * Defines a transition hook type and returns a transition hook registration\n   * function (which can then be used to register hooks of this type).\n   */\n  _defineEvent(name: string,\n               hookPhase: TransitionHookPhase,\n               hookOrder: number,\n               criteriaMatchPath: PathType,\n               reverseSort?: boolean,\n               getResultHandler?: GetResultHandler,\n               getErrorHandler?: GetErrorHandler,\n               rejectIfSuperseded?: boolean);\n\n  /**\n   * Returns the known event types, such as `onBefore`\n   * If a phase argument is provided, returns only events for the given phase.\n   */\n  _getEvents(phase?: TransitionHookPhase): TransitionEventType[];\n\n  /** Returns the hooks registered for the given hook name */\n  getHooks(hookName: string): RegisteredHook[];\n}\n\n/**\n * This class provides services related to Transitions.\n *\n * - Most importantly, it allows global Transition Hooks to be registered.\n * - It allows the default transition error handler to be set.\n * - It also has a factory function for creating new [[Transition]] objects, (used internally by the [[StateService]]).\n *\n * At bootstrap, [[UIRouter]] creates a single instance (singleton) of this class.\n */\nexport class TransitionService implements IHookRegistry, Disposable {\n  /** @hidden */\n  _transitionCount = 0;\n\n  /**\n   * Registers a [[TransitionHookFn]], called *while a transition is being constructed*.\n   *\n   * Registers a transition lifecycle hook, which is invoked during transition construction.\n   *\n   * This low level hook should only be used by plugins.\n   * This can be a useful time for plugins to add resolves or mutate the transition as needed.\n   * The Sticky States plugin uses this hook to modify the treechanges.\n   *\n   * ### Lifecycle\n   *\n   * `onCreate` hooks are invoked *while a transition is being constructed*.\n   *\n   * ### Return value\n   *\n   * The hook's return value is ignored\n   *\n   * @internalapi\n   * @param criteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be invoked.\n   * @param options the registration options\n   * @returns a function which deregisters the hook.\n   */\n  onCreate(criteria: HookMatchCriteria, callback: TransitionCreateHookFn, options?: HookRegOptions): Function { return }\n  /** @inheritdoc */\n  onBefore(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return }\n  /** @inheritdoc */\n  onStart(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return }\n  /** @inheritdoc */\n  onExit(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function { return }\n  /** @inheritdoc */\n  onRetain(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function { return }\n  /** @inheritdoc */\n  onEnter(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function { return }\n  /** @inheritdoc */\n  onFinish(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return }\n  /** @inheritdoc */\n  onSuccess(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return }\n  /** @inheritdoc */\n  onError(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return }\n\n  /** @hidden */\n  public $view: ViewService;\n\n  /** @hidden The transition hook types, such as `onEnter`, `onStart`, etc */\n  private _eventTypes: TransitionEventType[] = [];\n  /** @hidden The registered transition hooks */\n  _registeredHooks = { } as RegisteredHooks;\n  /** @hidden The  paths on a criteria object */\n  private _criteriaPaths = { } as PathTypes;\n  /** @hidden */\n  private _router: UIRouter;\n\n  /** @internalapi */\n  _pluginapi: TransitionServicePluginAPI;\n\n  /**\n   * This object has hook de-registration functions for the built-in hooks.\n   * This can be used by third parties libraries that wish to customize the behaviors\n   *\n   * @hidden\n   */\n  _deregisterHookFns: {\n    addCoreResolves: Function;\n    ignored: Function;\n    invalid: Function;\n    redirectTo: Function;\n    onExit: Function;\n    onRetain: Function;\n    onEnter: Function;\n    eagerResolve: Function;\n    lazyResolve: Function;\n    loadViews: Function;\n    activateViews: Function;\n    updateGlobals: Function;\n    updateUrl: Function;\n    lazyLoad: Function;\n  };\n\n  /** @hidden */\n  constructor(_router: UIRouter) {\n    this._router = _router;\n    this.$view = _router.viewService;\n    this._deregisterHookFns = <any> {};\n    this._pluginapi = <TransitionServicePluginAPI> createProxyFunctions(val(this), {}, val(this), [\n      '_definePathType',\n      '_defineEvent',\n      '_getPathTypes',\n      '_getEvents',\n      'getHooks',\n    ]);\n\n    this._defineCorePaths();\n    this._defineCoreEvents();\n    this._registerCoreTransitionHooks();\n  }\n\n  /**\n   * dispose\n   * @internalapi\n   */\n  dispose(router: UIRouter) {\n    values(this._registeredHooks).forEach((hooksArray: RegisteredHook[]) => hooksArray.forEach(hook => {\n      hook._deregistered = true;\n      removeFrom(hooksArray, hook);\n    }));\n  }\n\n  /**\n   * Creates a new [[Transition]] object\n   *\n   * This is a factory function for creating new Transition objects.\n   * It is used internally by the [[StateService]] and should generally not be called by application code.\n   *\n   * @param fromPath the path to the current state (the from state)\n   * @param targetState the target state (destination)\n   * @returns a Transition\n   */\n  create(fromPath: PathNode[], targetState: TargetState): Transition {\n    return new Transition(fromPath, targetState, this._router);\n  }\n\n  /** @hidden */\n  private _defineCoreEvents() {\n    const Phase = TransitionHookPhase;\n    const TH = TransitionHook;\n    const paths = this._criteriaPaths;\n    const NORMAL_SORT = false, REVERSE_SORT = true;\n    const ASYNCHRONOUS = false, SYNCHRONOUS = true;\n\n    this._defineEvent(\"onCreate\",  Phase.CREATE,  0,   paths.to, NORMAL_SORT, TH.LOG_REJECTED_RESULT, TH.THROW_ERROR, SYNCHRONOUS);\n\n    this._defineEvent(\"onBefore\",  Phase.BEFORE,  0,   paths.to);\n\n    this._defineEvent(\"onStart\",   Phase.RUN,     0,   paths.to);\n    this._defineEvent(\"onExit\",    Phase.RUN,     100, paths.exiting, REVERSE_SORT);\n    this._defineEvent(\"onRetain\",  Phase.RUN,     200, paths.retained);\n    this._defineEvent(\"onEnter\",   Phase.RUN,     300, paths.entering);\n    this._defineEvent(\"onFinish\",  Phase.RUN,     400, paths.to);\n\n    this._defineEvent(\"onSuccess\", Phase.SUCCESS, 0,   paths.to, NORMAL_SORT, TH.LOG_REJECTED_RESULT, TH.LOG_ERROR, SYNCHRONOUS);\n    this._defineEvent(\"onError\",   Phase.ERROR,   0,   paths.to, NORMAL_SORT, TH.LOG_REJECTED_RESULT, TH.LOG_ERROR, SYNCHRONOUS);\n  }\n\n  /** @hidden */\n  private _defineCorePaths() {\n    const { STATE, TRANSITION } = TransitionHookScope;\n\n    this._definePathType(\"to\", TRANSITION);\n    this._definePathType(\"from\", TRANSITION);\n    this._definePathType(\"exiting\", STATE);\n    this._definePathType(\"retained\", STATE);\n    this._definePathType(\"entering\", STATE);\n  }\n\n  /** @hidden */\n  _defineEvent(name: string,\n               hookPhase: TransitionHookPhase,\n               hookOrder: number,\n               criteriaMatchPath: PathType,\n               reverseSort: boolean = false,\n               getResultHandler: GetResultHandler = TransitionHook.HANDLE_RESULT,\n               getErrorHandler: GetErrorHandler = TransitionHook.REJECT_ERROR,\n               synchronous: boolean = false)\n  {\n    let eventType = new TransitionEventType(name, hookPhase, hookOrder, criteriaMatchPath, reverseSort, getResultHandler, getErrorHandler, synchronous);\n\n    this._eventTypes.push(eventType);\n    makeEvent(this, this, eventType);\n  };\n\n  /** @hidden */\n  private _getEvents(phase?: TransitionHookPhase): TransitionEventType[] {\n    let transitionHookTypes = isDefined(phase) ?\n        this._eventTypes.filter(type => type.hookPhase === phase) :\n        this._eventTypes.slice();\n\n    return transitionHookTypes.sort((l, r) => {\n      let cmpByPhase = l.hookPhase - r.hookPhase;\n      return cmpByPhase === 0 ? l.hookOrder - r.hookOrder : cmpByPhase;\n    })\n  }\n\n  /**\n   * Adds a Path to be used as a criterion against a TreeChanges path\n   *\n   * For example: the `exiting` path in [[HookMatchCriteria]] is a STATE scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('exiting', TransitionHookScope.STATE)`\n   * Each state in the exiting path is checked against the criteria and returned as part of the match.\n   *\n   * Another example: the `to` path in [[HookMatchCriteria]] is a TRANSITION scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('to', TransitionHookScope.TRANSITION)`\n   * Only the tail of the `to` path is checked against the criteria and returned as part of the match.\n   *\n   * @hidden\n   */\n  private _definePathType(name: string, hookScope: TransitionHookScope) {\n    this._criteriaPaths[name] = { name, scope: hookScope };\n  }\n\n  /** * @hidden */\n  private _getPathTypes(): PathTypes {\n    return this._criteriaPaths;\n  }\n\n  /** @hidden */\n  public getHooks(hookName: string): RegisteredHook[] {\n    return this._registeredHooks[hookName];\n  }\n\n  /** @hidden */\n  private _registerCoreTransitionHooks() {\n    let fns = this._deregisterHookFns;\n\n    fns.addCoreResolves = registerAddCoreResolvables(this);\n    fns.ignored         = registerIgnoredTransitionHook(this);\n    fns.invalid         = registerInvalidTransitionHook(this);\n\n    // Wire up redirectTo hook\n    fns.redirectTo      = registerRedirectToHook(this);\n    \n    // Wire up onExit/Retain/Enter state hooks\n    fns.onExit          = registerOnExitHook(this);\n    fns.onRetain        = registerOnRetainHook(this);\n    fns.onEnter         = registerOnEnterHook(this);\n\n    // Wire up Resolve hooks\n    fns.eagerResolve    = registerEagerResolvePath(this);\n    fns.lazyResolve     = registerLazyResolveState(this);\n                                 \n    // Wire up the View management hooks\n    fns.loadViews       = registerLoadEnteringViews(this);\n    fns.activateViews   = registerActivateViews(this);\n\n    // Updates global state after a transition\n    fns.updateGlobals   = registerUpdateGlobalState(this);\n\n    // After globals.current is updated at priority: 10000\n    fns.updateUrl       = registerUpdateUrl(this);\n\n    // Lazy load state trees\n    fns.lazyLoad        = registerLazyLoadHook(this);\n  }\n}\n"
  ]
}