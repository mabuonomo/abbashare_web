{
  "version": 3,
  "file": "q.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/core/vanilla/q.ts"
  ],
  "names": [],
  "mappings": "AAAA;;;GAGG;AACH,MAAM;AACN,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAU,MAAM,iBAAiB,CAAC;AAE5D;;;;;;;;;;;;;;GAcG;AACH,MAAM,CAAC,IAAM,EAAE,GAAG;IAChB,sCAAsC;IACtC,IAAI,EAAE,UAAC,GAAG,IAAK,OAAA,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,IAAK,OAAA,OAAO,CAAC,GAAG,CAAC,EAAZ,CAAY,CAAC,EAA9C,CAA8C;IAE7D,gDAAgD;IAChD,MAAM,EAAE,UAAC,GAAG,IAAK,OAAA,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,IAAO,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAlD,CAAkD;IAEnE,6EAA6E;IAC7E,KAAK,EAAE;QACL,IAAI,QAAQ,GAAQ,EAAE,CAAC;QACvB,QAAQ,CAAC,OAAO,GAAG,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC7C,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;YAC3B,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC;QAC3B,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC;IAED,gFAAgF;IAChF,GAAG,EAAE,UAAC,QAA0D;QAC9D,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACtB,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC/B,CAAC;QAED,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACvB,0CAA0C;YAC1C,uEAAuE;YACvE,IAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;iBAC5B,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,CAAC,EAAC,GAAG,KAAA,EAAE,GAAG,KAAA,EAAC,CAAC,EAAZ,CAAY,CAAC,EAAvC,CAAuC,CAAC,CAAC;YAEzD,4EAA4E;YAC5E,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;gBAC9B,OAAA,MAAM,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,KAAK,IAAO,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;YAA9E,CAA8E,CAAC,CAAC;QACpF,CAAC;IACH,CAAC;CACQ,CAAC",
  "sourcesContent": [
    "/**\n * @internalapi\n * @module vanilla\n */\n/** */\nimport { isArray, isObject, $QLike } from \"../common/index\";\n\n/**\n * An angular1-like promise api\n *\n * This object implements four methods similar to the\n * [angular 1 promise api](https://docs.angularjs.org/api/ng/service/$q)\n *\n * UI-Router evolved from an angular 1 library to a framework agnostic library.\n * However, some of the `@uirouter/core` code uses these ng1 style APIs to support ng1 style dependency injection.\n *\n * This API provides native ES6 promise support wrapped as a $q-like API.\n * Internally, UI-Router uses this $q object to perform promise operations.\n * The `angular-ui-router` (ui-router for angular 1) uses the $q API provided by angular.\n *\n * $q-like promise api\n */\nexport const $q = {\n  /** Normalizes a value as a promise */\n  when: (val) => new Promise((resolve, reject) => resolve(val)),\n\n  /** Normalizes a value as a promise rejection */\n  reject: (val) => new Promise((resolve, reject) => { reject(val); }),\n\n  /** @returns a deferred object, which has `resolve` and `reject` functions */\n  defer: () => {\n    let deferred: any = {};\n    deferred.promise = new Promise((resolve, reject) => {\n      deferred.resolve = resolve;\n      deferred.reject = reject;\n    });\n    return deferred;\n  },\n\n  /** Like Promise.all(), but also supports object key/promise notation like $q */\n  all: (promises: { [key: string]: Promise<any> } | Promise<any>[]) => {\n    if (isArray(promises)) {\n      return Promise.all(promises);\n    }\n\n    if (isObject(promises)) {\n      // Convert promises map to promises array.\n      // When each promise resolves, map it to a tuple { key: key, val: val }\n      let chain = Object.keys(promises)\n          .map(key => promises[key].then(val => ({key, val})));\n\n      // Then wait for all promises to resolve, and convert them back to an object\n      return $q.all(chain).then(values =>\n        values.reduce((acc, tuple) => { acc[tuple.key] = tuple.val; return acc; }, {}));\n    }\n  }\n} as $QLike;"
  ]
}