{
  "version": 3,
  "file": "urlRouter.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/core/url/urlRouter.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "/**\n * @internalapi\n * @module url\n */\n/** for typedoc */\nimport { createProxyFunctions, extend, removeFrom } from '../common/common';\nimport { isDefined, isFunction, isString } from '../common/predicates';\nimport { UrlMatcher } from './urlMatcher';\nimport { RawParams } from '../params/interface';\nimport { Disposable } from '../interface';\nimport { UIRouter } from '../router';\nimport { is, pattern, val } from '../common/hof';\nimport { UrlRuleFactory } from './urlRule';\nimport { TargetState } from '../state/targetState';\nimport { MatcherUrlRule, MatchResult, UrlParts, UrlRule, UrlRuleHandlerFn, UrlRuleMatchFn, UrlRulesApi, UrlSyncApi, } from './interface';\nimport { TargetStateDef } from '../state/interface';\nimport { stripFile } from '../common';\n\n/** @hidden */\nfunction appendBasePath(url: string, isHtml5: boolean, absolute: boolean, baseHref: string): string {\n  if (baseHref === '/') return url;\n  if (isHtml5) return stripFile(baseHref) + url;\n  if (absolute) return baseHref.slice(1) + url;\n  return url;\n}\n\n/** @hidden */\nconst prioritySort = (a: UrlRule, b: UrlRule) =>\n  (b.priority || 0) - (a.priority || 0);\n\n/** @hidden */\nconst typeSort = (a: UrlRule, b: UrlRule) => {\n  const weights = { \"STATE\": 4, \"URLMATCHER\": 4, \"REGEXP\": 3, \"RAW\": 2, \"OTHER\": 1 };\n  return (weights[a.type] || 0) - (weights[b.type] || 0);\n};\n\n/** @hidden */\nconst urlMatcherSort = (a: MatcherUrlRule, b: MatcherUrlRule) =>\n  !a.urlMatcher || !b.urlMatcher ? 0 : UrlMatcher.compare(a.urlMatcher, b.urlMatcher);\n\n/** @hidden */\nconst idSort = (a: UrlRule, b: UrlRule) => {\n  // Identically sorted STATE and URLMATCHER best rule will be chosen by `matchPriority` after each rule matches the URL\n  const useMatchPriority = { STATE: true, URLMATCHER: true };\n  const equal = useMatchPriority[a.type] && useMatchPriority[b.type];\n  return equal ? 0 : (a.$id || 0) - (b.$id || 0);\n};\n\n/**\n * Default rule priority sorting function.\n *\n * Sorts rules by:\n *\n * - Explicit priority (set rule priority using [[UrlRulesApi.when]])\n * - Rule type (STATE: 4, URLMATCHER: 4, REGEXP: 3, RAW: 2, OTHER: 1)\n * - `UrlMatcher` specificity ([[UrlMatcher.compare]]): works for STATE and URLMATCHER types to pick the most specific rule.\n * - Rule registration order (for rule types other than STATE and URLMATCHER)\n *   - Equally sorted State and UrlMatcher rules will each match the URL.\n *     Then, the *best* match is chosen based on how many parameter values were matched.\n *\n * @coreapi\n */\nlet defaultRuleSortFn: (a: UrlRule, b: UrlRule) => number;\ndefaultRuleSortFn = (a, b) => {\n  let cmp = prioritySort(a, b);\n  if (cmp !== 0) return cmp;\n\n  cmp = typeSort(a, b);\n  if (cmp !== 0) return cmp;\n\n  cmp = urlMatcherSort(a as MatcherUrlRule, b as MatcherUrlRule);\n  if (cmp !== 0) return cmp;\n\n  return idSort(a, b);\n};\n\n/**\n * Updates URL and responds to URL changes\n *\n * ### Deprecation warning:\n * This class is now considered to be an internal API\n * Use the [[UrlService]] instead.\n * For configuring URL rules, use the [[UrlRulesApi]] which can be found as [[UrlService.rules]].\n *\n * This class updates the URL when the state changes.\n * It also responds to changes in the URL.\n */\nexport class UrlRouter implements UrlRulesApi, UrlSyncApi, Disposable {\n  /** used to create [[UrlRule]] objects for common cases */\n  public urlRuleFactory: UrlRuleFactory;\n\n  /** @hidden */ private _router: UIRouter;\n  /** @hidden */ private location: string;\n  /** @hidden */ private _sortFn = defaultRuleSortFn;\n  /** @hidden */ private _stopFn: Function;\n  /** @hidden */ _rules: UrlRule[] = [];\n  /** @hidden */ private _otherwiseFn: UrlRule;\n  /** @hidden */ interceptDeferred = false;\n  /** @hidden */ private _id = 0;\n  /** @hidden */ private _sorted = false;\n\n  /** @hidden */\n  constructor(router: UIRouter) {\n    this._router = router;\n    this.urlRuleFactory = new UrlRuleFactory(router);\n    createProxyFunctions(val(UrlRouter.prototype), this, val(this));\n  }\n\n  /** @internalapi */\n  dispose() {\n    this.listen(false);\n    this._rules = [];\n    delete this._otherwiseFn;\n  }\n\n  /** @inheritdoc */\n  sort(compareFn?: (a: UrlRule, b: UrlRule) => number) {\n    this._rules = this.stableSort(this._rules, this._sortFn = compareFn || this._sortFn);\n    this._sorted = true;\n  }\n\n  private ensureSorted() {\n    this._sorted || this.sort();\n  }\n\n  private stableSort(arr, compareFn) {\n    const arrOfWrapper = arr.map((elem, idx) => ({ elem, idx }));\n\n    arrOfWrapper.sort((wrapperA, wrapperB) => {\n      const cmpDiff = compareFn(wrapperA.elem, wrapperB.elem);\n      return cmpDiff === 0\n        ? wrapperA.idx - wrapperB.idx\n        : cmpDiff;\n    });\n\n    return arrOfWrapper.map(wrapper => wrapper.elem);\n  }\n\n  /**\n   * Given a URL, check all rules and return the best [[MatchResult]]\n   * @param url\n   * @returns {MatchResult}\n   */\n  match(url: UrlParts): MatchResult {\n    this.ensureSorted();\n\n    url = extend({path: '', search: {}, hash: '' }, url);\n    let rules = this.rules();\n    if (this._otherwiseFn) rules.push(this._otherwiseFn);\n\n    // Checks a single rule. Returns { rule: rule, match: match, weight: weight } if it matched, or undefined\n\n    let checkRule = (rule: UrlRule): MatchResult => {\n      let match = rule.match(url, this._router);\n      return match && { match, rule, weight: rule.matchPriority(match) };\n    };\n\n    // The rules are pre-sorted.\n    // - Find the first matching rule.\n    // - Find any other matching rule that sorted *exactly the same*, according to `.sort()`.\n    // - Choose the rule with the highest match weight.\n    let best: MatchResult;\n    for (let i = 0; i < rules.length; i++) {\n      // Stop when there is a 'best' rule and the next rule sorts differently than it.\n      if (best && this._sortFn(rules[i], best.rule) !== 0) break;\n\n      let current = checkRule(rules[i]);\n      // Pick the best MatchResult\n      best = (!best || current && current.weight > best.weight) ? current : best;\n    }\n\n    return best;\n  }\n\n  /** @inheritdoc */\n  sync(evt?) {\n    if (evt && evt.defaultPrevented) return;\n\n    let router = this._router,\n        $url = router.urlService,\n        $state = router.stateService;\n\n    let url: UrlParts = {\n      path: $url.path(), search: $url.search(), hash: $url.hash(),\n    };\n\n    let best = this.match(url);\n\n    let applyResult = pattern([\n      [isString, (newurl: string) => $url.url(newurl, true)],\n      [TargetState.isDef, (def: TargetStateDef) => $state.go(def.state, def.params, def.options)],\n      [is(TargetState), (target: TargetState) => $state.go(target.state(), target.params(), target.options())],\n    ]);\n\n    applyResult(best && best.rule.handler(best.match, url, router));\n  }\n\n  /** @inheritdoc */\n  listen(enabled?: boolean): Function {\n    if (enabled === false) {\n      this._stopFn && this._stopFn();\n      delete this._stopFn;\n    } else {\n      return this._stopFn = this._stopFn || this._router.urlService.onChange(evt => this.sync(evt));\n    }\n  }\n\n  /**\n   * Internal API.\n   * @internalapi\n   */\n  update(read?: boolean) {\n    let $url = this._router.locationService;\n    if (read) {\n      this.location = $url.path();\n      return;\n    }\n    if ($url.path() === this.location) return;\n\n    $url.url(this.location, true);\n  }\n\n  /**\n   * Internal API.\n   *\n   * Pushes a new location to the browser history.\n   *\n   * @internalapi\n   * @param urlMatcher\n   * @param params\n   * @param options\n   */\n  push(urlMatcher: UrlMatcher, params?: RawParams, options?: { replace?: (string|boolean) }) {\n    let replace = options && !!options.replace;\n    this._router.urlService.url(urlMatcher.format(params || {}), replace);\n  }\n\n  /**\n   * Builds and returns a URL with interpolated parameters\n   *\n   * #### Example:\n   * ```js\n   * matcher = $umf.compile(\"/about/:person\");\n   * params = { person: \"bob\" };\n   * $bob = $urlRouter.href(matcher, params);\n   * // $bob == \"/about/bob\";\n   * ```\n   *\n   * @param urlMatcher The [[UrlMatcher]] object which is used as the template of the URL to generate.\n   * @param params An object of parameter values to fill the matcher's required parameters.\n   * @param options Options object. The options are:\n   *\n   * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n   *\n   * @returns Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`\n   */\n  href(urlMatcher: UrlMatcher, params?: any, options?: { absolute: boolean }): string {\n    let url = urlMatcher.format(params);\n    if (url == null) return null;\n\n    options = options || { absolute: false };\n\n    let cfg = this._router.urlService.config;\n    let isHtml5 = cfg.html5Mode();\n    if (!isHtml5 && url !== null) {\n      url = \"#\" + cfg.hashPrefix() + url;\n    }\n    url = appendBasePath(url, isHtml5, options.absolute, cfg.baseHref());\n\n    if (!options.absolute || !url) {\n      return url;\n    }\n\n    let slash = (!isHtml5 && url ? '/' : ''), port = cfg.port();\n    port = <any> (port === 80 || port === 443 ? '' : ':' + port);\n\n    return [cfg.protocol(), '://', cfg.host(), port, slash, url].join('');\n  }\n\n\n  /**\n   * Manually adds a URL Rule.\n   *\n   * Usually, a url rule is added using [[StateDeclaration.url]] or [[when]].\n   * This api can be used directly for more control (to register a [[BaseUrlRule]], for example).\n   * Rules can be created using [[UrlRouter.urlRuleFactory]], or create manually as simple objects.\n   *\n   * A rule should have a `match` function which returns truthy if the rule matched.\n   * It should also have a `handler` function which is invoked if the rule is the best match.\n   *\n   * @return a function that deregisters the rule\n   */\n  rule(rule: UrlRule): Function {\n    if (!UrlRuleFactory.isUrlRule(rule)) throw new Error(\"invalid rule\");\n    rule.$id = this._id++;\n    rule.priority = rule.priority || 0;\n\n    this._rules.push(rule);\n    this._sorted = false;\n\n    return () => this.removeRule(rule);\n  }\n\n  /** @inheritdoc */\n  removeRule(rule): void {\n    removeFrom(this._rules, rule);\n  }\n\n  /** @inheritdoc */\n  rules(): UrlRule[] {\n    this.ensureSorted();\n    return this._rules.slice();\n  }\n\n  /** @inheritdoc */\n  otherwise(handler: string|UrlRuleHandlerFn|TargetState|TargetStateDef) {\n    let handlerFn: UrlRuleHandlerFn = getHandlerFn(handler);\n\n    this._otherwiseFn = this.urlRuleFactory.create(val(true), handlerFn);\n    this._sorted = false;\n  };\n\n  /** @inheritdoc */\n  initial(handler: string | UrlRuleHandlerFn | TargetState | TargetStateDef) {\n    let handlerFn: UrlRuleHandlerFn = getHandlerFn(handler);\n\n    let matchFn: UrlRuleMatchFn = (urlParts, router) =>\n        router.globals.transitionHistory.size() === 0 && !!/^\\/?$/.exec(urlParts.path);\n\n    this.rule(this.urlRuleFactory.create(matchFn, handlerFn));\n  };\n\n  /** @inheritdoc */\n  when(matcher: (RegExp|UrlMatcher|string), handler: string|UrlRuleHandlerFn, options?: { priority: number }): UrlRule {\n    let rule = this.urlRuleFactory.create(matcher, handler);\n    if (isDefined(options && options.priority)) rule.priority = options.priority;\n    this.rule(rule);\n    return rule;\n  };\n\n  /** @inheritdoc */\n  deferIntercept(defer?: boolean) {\n    if (defer === undefined) defer = true;\n    this.interceptDeferred = defer;\n  };\n}\n\nfunction getHandlerFn(handler: string|UrlRuleHandlerFn|TargetState|TargetStateDef): UrlRuleHandlerFn {\n  if (!isFunction(handler) && !isString(handler) && !is(TargetState)(handler) && !TargetState.isDef(handler)) {\n    throw new Error(\"'handler' must be a string, function, TargetState, or have a state: 'newtarget' property\");\n  }\n  return isFunction(handler) ? handler as UrlRuleHandlerFn : val(handler);\n}\n"
  ]
}