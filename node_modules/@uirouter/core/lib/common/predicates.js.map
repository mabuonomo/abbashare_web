{
  "version": 3,
  "file": "predicates.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/core/common/predicates.ts"
  ],
  "names": [],
  "mappings": ";;AAAA;;;;;;GAMG;AACH,MAAM;AACN,6BAAiD;AAEjD,oDAAmD;AAEnD,IAAM,KAAK,GAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC;AACxC,IAAM,GAAG,GAAG,UAAC,CAAS,IAAK,OAAA,UAAC,CAAM,IAAK,OAAA,OAAM,CAAC,CAAC,CAAC,KAAK,CAAC,EAAf,CAAe,EAA3B,CAA2B,CAAC;AAC1C,QAAA,WAAW,GAAG,GAAG,CAAC,WAAW,CAAC,CAAC;AAC/B,QAAA,SAAS,GAAG,SAAG,CAAC,mBAAW,CAAC,CAAC;AAC7B,QAAA,MAAM,GAAG,UAAC,CAAM,IAAK,OAAA,CAAC,KAAK,IAAI,EAAV,CAAU,CAAC;AAChC,QAAA,iBAAiB,GAAG,QAAE,CAAC,cAAM,EAAE,mBAAW,CAAC,CAAC;AAC5C,QAAA,UAAU,GAAoC,GAAG,CAAC,UAAU,CAAC,CAAC;AAC9D,QAAA,QAAQ,GAAkC,GAAG,CAAC,QAAQ,CAAC,CAAC;AACxD,QAAA,QAAQ,GAA6B,GAAG,CAAC,QAAQ,CAAC,CAAC;AACnD,QAAA,QAAQ,GAAG,UAAC,CAAM,IAAK,OAAA,CAAC,KAAK,IAAI,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAnC,CAAmC,CAAC;AAC3D,QAAA,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;AACxB,QAAA,MAAM,GAAgC,CAAC,UAAC,CAAM,IAAK,OAAA,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,eAAe,EAAjC,CAAiC,CAAC,CAAC;AACtF,QAAA,QAAQ,GAAkC,CAAC,UAAC,CAAM,IAAK,OAAA,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,iBAAiB,EAAnC,CAAmC,CAAC,CAAC;AAC5F,QAAA,OAAO,GAAiC,yBAAW,CAAC,OAAO,CAAC;AAEzE;;;;;GAKG;AACH,sBAA6B,GAAQ;IACnC,EAAE,CAAC,CAAC,eAAO,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;QAC/B,IAAI,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,SAAG,CAAC,gBAAQ,CAAC,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,SAAG,CAAC,kBAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;IACrF,CAAC;IACD,MAAM,CAAC,kBAAU,CAAC,GAAG,CAAC,CAAC;AACzB,CAAC;AAND,oCAMC;AAED;;;;GAIG;AACU,QAAA,SAAS,GAAmC,SAAG,CAAC,gBAAQ,EAAE,UAAI,CAAC,UAAI,CAAC,MAAM,CAAC,EAAE,kBAAU,CAAC,CAAC,CAAC",
  "sourcesContent": [
    "/** Predicates\n *\n * These predicates return true/false based on the input.\n * Although these functions are exported, they are subject to change without notice.\n *\n * @module common_predicates\n */\n/** */\nimport { and, not, pipe, prop, or } from \"./hof\";\nimport { Predicate } from \"./common\"; // has or is using\nimport { StateObject } from \"../state/stateObject\";\n\nconst toStr = Object.prototype.toString;\nconst tis = (t: string) => (x: any) => typeof(x) === t;\nexport const isUndefined = tis('undefined');\nexport const isDefined = not(isUndefined);\nexport const isNull = (o: any) => o === null;\nexport const isNullOrUndefined = or(isNull, isUndefined);\nexport const isFunction: (x: any) => x is Function = <any> tis('function');\nexport const isNumber: (x: any) => x is number = <any> tis('number');\nexport const isString = <(x: any) => x is string> tis('string');\nexport const isObject = (x: any) => x !== null && typeof x === 'object';\nexport const isArray = Array.isArray;\nexport const isDate: (x: any) => x is Date = <any> ((x: any) => toStr.call(x) === '[object Date]');\nexport const isRegExp: (x: any) => x is RegExp = <any> ((x: any) => toStr.call(x) === '[object RegExp]');\nexport const isState: (x: any) => x is StateObject = StateObject.isState;\n\n/**\n * Predicate which checks if a value is injectable\n *\n * A value is \"injectable\" if it is a function, or if it is an ng1 array-notation-style array\n * where all the elements in the array are Strings, except the last one, which is a Function\n */\nexport function isInjectable(val: any) {\n  if (isArray(val) && val.length) {\n    let head = val.slice(0, -1), tail = val.slice(-1);\n    return !(head.filter(not(isString)).length || tail.filter(not(isFunction)).length);\n  }\n  return isFunction(val);\n}\n\n/**\n * Predicate which checks if a value looks like a Promise\n *\n * It is probably a Promise if it's an object, and it has a `then` property which is a Function\n */\nexport const isPromise = <(x: any) => x is Promise<any>> and(isObject, pipe(prop('then'), isFunction));\n\n"
  ]
}