{
  "version": 3,
  "file": "glob.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/core/common/glob.ts"
  ],
  "names": [],
  "mappings": ";;AAAA;;;GAGG;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+CG;AACH;IAKE,cAAY,IAAY;QACtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAE5B,IAAI,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;aAClC,GAAG,CAAC,UAAA,GAAG;YACN,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC;gBAAC,MAAM,CAAC,oBAAoB,CAAC;YAC9C,EAAE,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC;gBAAE,MAAM,CAAC,UAAU,CAAC;YACpC,MAAM,CAAmB,KAAK,GAAG,GAAG,CAAC;QACvC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAEhB,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,GAAG,GAAG,YAAY,GAAG,GAAG,CAAC,CAAC;IACrD,CAAC;IAED,sBAAO,GAAP,UAAQ,IAAY;QAClB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC;IACtC,CAAC;IAED,gEAAgE;IACzD,OAAE,GAAT,UAAU,IAAY;QACpB,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED,4EAA4E;IACrE,eAAU,GAAjB,UAAkB,IAAY;QAC5B,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC/C,CAAC;IACH,WAAC;AAAD,CAAC,AAhCD,IAgCC;AAhCY,oBAAI",
  "sourcesContent": [
    "/**\n * @coreapi\n * @module core\n */\n/** \n * Matches state names using glob-like pattern strings.\n *\n * Globs can be used in specific APIs including:\n *\n * - [[StateService.is]]\n * - [[StateService.includes]]\n * - The first argument to Hook Registration functions like [[TransitionService.onStart]]\n *    - [[HookMatchCriteria]] and [[HookMatchCriterion]]\n *\n * A `Glob` string is a pattern which matches state names.\n * Nested state names are split into segments (separated by a dot) when processing.\n * The state named `foo.bar.baz` is split into three segments ['foo', 'bar', 'baz']\n *\n * Globs work according to the following rules:\n *\n * ### Exact match:\n *\n * The glob `'A.B'` matches the state named exactly `'A.B'`.\n *\n * | Glob        |Matches states named|Does not match state named|\n * |:------------|:--------------------|:---------------------|\n * | `'A'`       | `'A'`               | `'B'` , `'A.C'`      |\n * | `'A.B'`     | `'A.B'`             | `'A'` , `'A.B.C'`    |\n * | `'foo'`     | `'foo'`             | `'FOO'` , `'foo.bar'`|\n *\n * ### Single star (`*`)\n *\n * A single star (`*`) is a wildcard that matches exactly one segment.\n *\n * | Glob        |Matches states named  |Does not match state named |\n * |:------------|:---------------------|:--------------------------|\n * | `'*'`       | `'A'` , `'Z'`        | `'A.B'` , `'Z.Y.X'`       |\n * | `'A.*'`     | `'A.B'` , `'A.C'`    | `'A'` , `'A.B.C'`         |\n * | `'A.*.*'`   | `'A.B.C'` , `'A.X.Y'`| `'A'`, `'A.B'` , `'Z.Y.X'`|\n *\n * ### Double star (`**`)\n *\n * A double star (`'**'`) is a wildcard that matches *zero or more segments*\n *\n * | Glob        |Matches states named                           |Does not match state named         |\n * |:------------|:----------------------------------------------|:----------------------------------|\n * | `'**'`      | `'A'` , `'A.B'`, `'Z.Y.X'`                    | (matches all states)              |\n * | `'A.**'`    | `'A'` , `'A.B'` , `'A.C.X'`                   | `'Z.Y.X'`                         |\n * | `'**.X'`    | `'X'` , `'A.X'` , `'Z.Y.X'`                   | `'A'` , `'A.login.Z'`             |\n * | `'A.**.X'`  | `'A.X'` , `'A.B.X'` , `'A.B.C.X'`             | `'A'` , `'A.B.C'`                 |\n *\n */\nexport class Glob {\n  text: string;\n  glob: Array<string>;\n  regexp: RegExp;\n\n  constructor(text: string) {\n    this.text = text;\n    this.glob = text.split('.');\n\n    let regexpString = this.text.split('.')\n        .map(seg => {\n          if (seg === '**') return '(?:|(?:\\\\.[^.]*)*)';\n          if (seg === '*')  return '\\\\.[^.]*';\n          return                   '\\\\.' + seg;\n        }).join('');\n\n    this.regexp = new RegExp(\"^\" + regexpString + \"$\");\n  }\n\n  matches(name: string) {\n    return this.regexp.test('.' + name);\n  }\n\n  /** Returns true if the string has glob-like characters in it */\n  static is(text: string) {\n    return !!/[!,*]+/.exec(text);\n  }\n\n  /** Returns a glob from the string, or null if the string isn't Glob-like */\n  static fromString(text: string) {\n    return Glob.is(text) ? new Glob(text) : null;\n  }\n}\n"
  ]
}