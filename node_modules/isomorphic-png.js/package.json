{
  "_args": [
    [
      {
        "raw": "isomorphic-png.js@^0.2.4",
        "scope": null,
        "escapedName": "isomorphic-png.js",
        "name": "isomorphic-png.js",
        "rawSpec": "^0.2.4",
        "spec": ">=0.2.4 <0.3.0",
        "type": "range"
      },
      "/home/mario/projects/omnia/meteor_abbashare/node_modules/isomorphic-pkg-reader"
    ]
  ],
  "_from": "isomorphic-png.js@>=0.2.4 <0.3.0",
  "_id": "isomorphic-png.js@0.2.6",
  "_inCache": true,
  "_location": "/isomorphic-png.js",
  "_nodeVersion": "4.4.2",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/isomorphic-png.js-0.2.6.tgz_1472025715605_0.013208731543272734"
  },
  "_npmUser": {
    "name": "xiaoyuze88",
    "email": "xiaoyuze88@gmail.com"
  },
  "_npmVersion": "3.8.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "isomorphic-png.js@^0.2.4",
    "scope": null,
    "escapedName": "isomorphic-png.js",
    "name": "isomorphic-png.js",
    "rawSpec": "^0.2.4",
    "spec": ">=0.2.4 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/isomorphic-pkg-reader"
  ],
  "_resolved": "https://registry.npmjs.org/isomorphic-png.js/-/isomorphic-png.js-0.2.6.tgz",
  "_shasum": "c6c4137b9a1f7f46f26c5afc8e8416ea09a6bd23",
  "_shrinkwrap": null,
  "_spec": "isomorphic-png.js@^0.2.4",
  "_where": "/home/mario/projects/omnia/meteor_abbashare/node_modules/isomorphic-pkg-reader",
  "author": {
    "name": "Arian Stolwijk"
  },
  "browser": "PNGReader-browser.js",
  "bugs": {
    "url": "https://github.com/TencentWSRD/png.js/issues"
  },
  "dependencies": {
    "browserify-zlib": "^0.1.4"
  },
  "description": "A PNG decoder fully written in JavaScript",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "c6c4137b9a1f7f46f26c5afc8e8416ea09a6bd23",
    "tarball": "https://registry.npmjs.org/isomorphic-png.js/-/isomorphic-png.js-0.2.6.tgz"
  },
  "gitHead": "1ae0b4ce6cdae23f2f7a2f2d3e74cd447cdc48c9",
  "homepage": "https://github.com/TencentWSRD/png.js",
  "main": "PNGReader.js",
  "maintainers": [
    {
      "name": "arian",
      "email": "stolwijk.arian@gmail.com"
    },
    {
      "name": "xiaoyuze88",
      "email": "xiaoyuze88@gmail.com"
    }
  ],
  "name": "isomorphic-png.js",
  "optionalDependencies": {},
  "readme": "\nPNG.js\n======\n\nForked from https://github.com/devongovett/png.js.\n\nPNG.js is a PNG decoder fully written in JavaScript. It works in Node.js as\nwell as in (modern) browsers.\n\nModified a little bit so it can decode `CgBI` format png (Png file that is being [curshed](http://pmt.sourceforge.net/pngcrush/) by XCode in IOS.).\n\nAlso added support for Broswerify/Webpack by turning `zlib`(NodeJS) to [browserify-zlib](https://www.npmjs.com/package/browserify-zlib)  so that it can works fine both on NodeJS/Browser.\n\nAll apis are the same with the original project.\n\nMake this repo to support my another project [isomorphic-pkg-reader](https://github.com/xiaoyuze88/isomorphic-pkg-reader) which can parse Apks/Ipas in both browser/NodeJS.\n\nInstall\n-----\n\n``` js\nnpm i isomorphic-png.js\n```\n\nUsage\n-----\n\n``` js\nvar PNGReader = require('png.js');\n\nvar reader = new PNGReader(bytes);\nreader.parse(function(err, png){\n\tif (err) throw err;\n\tconsole.log(png);\n});\n\n```\n\nOr with options:\n\n``` js\nreader.parse({\n\tdata: false\n}, function(err, png){\n\tif (err) throw err;\n\tconsole.log(png);\n});\n\n```\n\nCurrently the only option is:\n\n- `data` (*boolean*) - should it read the pixel data, or only the image information.\n\n### PNG object\n\nThe PNG object is passed in the callback. It contains all the data extracted\nfrom the image.\n\n``` js\n// most importantly\npng.getWidth();\npng.getHeight();\npng.getPixel(x, y); // [red, blue, green, alpha]\n// but also\npng.getBitDepth();\npng.getColorType();\npng.getCompressionMethod();\npng.getFilterMethod();\npng.getInterlaceMethod();\npng.getPalette();\n```\n\nUsing PNGReader in Node.js\n--------------------------\n\nPNGReader accepts an `Buffer` object, returned by `fs.readFile`, for example:\n\n``` js\nfs.readFile('test.png', function(err, buffer){\n\n\tvar reader = new PNGReader(buffer);\n\treader.parse(function(err, png){\n\t\tif (err) throw err;\n\t\tconsole.log(png);\n\t});\n\n});\n```\n\nUsing PNGReader in the Browser\n------------------------------\n\nPNGReader accepts a byte string, array of bytes or an ArrayBuffer.\n\nFor example using FileReader with file input fields:\n\n```js\nvar reader = new FileReader();\n\nreader.onload = function(event){\n\tvar reader = new PNGReader(event.target.result);\n\treader.parse(function(err, png){\n\t\tif (err) throw err;\n\t\tconsole.log(png);\n\t});\n};\n\nfileInputElement.onchange = function(){\n\treader.readAsArrayBuffer(fileInputElement.files[0]);\n\t// or, but less optimal\n\treader.readAsBinaryString(fileInputElement.files[0]);\n};\n```\n\nOr instead of using input elements, XHR can also be used:\n\n```js\nvar xhr = new XMLHttpRequest();\nxhr.open('GET', 'image.png', true);\nxhr.responseType = 'arraybuffer';\n\nxhr.onload = function(e){\n\tif (this.status == 200){\n\t\tvar reader = new PNGReader(this.response);\n\t\treader.parse(function(err, png){\n\t\t\tif (err) throw err;\n\t\t\tconsole.log(png);\n\t\t});\n\t}\n};\n\nxhr.send();\n```\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "url": "git://github.com/TencentWSRD/png.js.git"
  },
  "scripts": {},
  "version": "0.2.6"
}
