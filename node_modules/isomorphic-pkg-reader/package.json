{
  "_args": [
    [
      {
        "raw": "isomorphic-pkg-reader@^1.1.21",
        "scope": null,
        "escapedName": "isomorphic-pkg-reader",
        "name": "isomorphic-pkg-reader",
        "rawSpec": "^1.1.21",
        "spec": ">=1.1.21 <2.0.0",
        "type": "range"
      },
      "/home/mario/projects/omnia/meteor_abbashare"
    ]
  ],
  "_from": "isomorphic-pkg-reader@>=1.1.21 <2.0.0",
  "_id": "isomorphic-pkg-reader@1.1.21",
  "_inCache": true,
  "_location": "/isomorphic-pkg-reader",
  "_nodeVersion": "4.4.2",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/isomorphic-pkg-reader-1.1.21.tgz_1470365000776_0.9379346249625087"
  },
  "_npmUser": {
    "name": "xiaoyuze88",
    "email": "xiaoyuze88@gmail.com"
  },
  "_npmVersion": "3.8.2",
  "_phantomChildren": {
    "ieee754": "1.1.8",
    "isarray": "1.0.0"
  },
  "_requested": {
    "raw": "isomorphic-pkg-reader@^1.1.21",
    "scope": null,
    "escapedName": "isomorphic-pkg-reader",
    "name": "isomorphic-pkg-reader",
    "rawSpec": "^1.1.21",
    "spec": ">=1.1.21 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/isomorphic-pkg-reader/-/isomorphic-pkg-reader-1.1.21.tgz",
  "_shasum": "fb1799065bbbe88ba277bf2e4b790743b08d36bf",
  "_shrinkwrap": null,
  "_spec": "isomorphic-pkg-reader@^1.1.21",
  "_where": "/home/mario/projects/omnia/meteor_abbashare",
  "author": {
    "name": "xiaoyuze88@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/TencentWSRD/isomorphic-pkg-reader/issues"
  },
  "dependencies": {
    "buffer": "^4.6.0",
    "bytebuffer": "^5.0.1",
    "inherits": "^2.0.1",
    "isomorphic-png.js": "^0.2.4",
    "isomorphic-unzip": "^1.1.0",
    "xmldom": "^0.1.22"
  },
  "description": "Read IOS/Android pkg's(.apk/.ipa ) manifest info, for NodeJS/Webpack/Browserify.",
  "devDependencies": {
    "beta-dev-uploader": "^5.6.3",
    "css-loader": "^0.15.5",
    "express": "^4.13.3",
    "file-loader": "^0.8.5",
    "html-webpack-plugin": "^2.19.0",
    "multer": "^1.1.0",
    "style-loader": "^0.12.4",
    "url-loader": "^0.5.7",
    "webpack": "^1.9.11",
    "webpack-dev-server": "^1.14.1"
  },
  "directories": {},
  "dist": {
    "shasum": "fb1799065bbbe88ba277bf2e4b790743b08d36bf",
    "tarball": "https://registry.npmjs.org/isomorphic-pkg-reader/-/isomorphic-pkg-reader-1.1.21.tgz"
  },
  "gitHead": "2c0bacc5a8cb1025f95b407f76f5c0b7ed78fd45",
  "homepage": "https://github.com/TencentWSRD/isomorphic-pkg-reader#readme",
  "keywords": [
    "Javascript",
    "NodeJS",
    "Browserify",
    "WebPack",
    ".apk",
    ".ipa",
    "manifest",
    "parser"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "xiaoyuze88",
      "email": "xiaoyuze88@gmail.com"
    }
  ],
  "name": "isomorphic-pkg-reader",
  "optionalDependencies": {},
  "readme": "# isomorphic-pkg-reader\nRead IOS/Android package's(.apk/.ipa ) manifest info, for NodeJS/Webpack/Browserify.\n\n## Introduction\nFor `.apk`, parse the `AndroidManifest.xml` and `resources.arsc` files, read all values listed in AndroidManifest.xml(both primitive and reference type), also you can get and show the icon of the apk file directly from the parsed result.\n\nFor `.ipa`, parse the `info.plist` and `embedded.mobileprovision` files, read all basic information in info.plist file, including the icon of the ipa file(already handled the crushed pngs).\n\n## Install\n```javascript\nnpm i isomorphic-pkg-reader\n```\n\n## Example\n\n``` javascript\n\nnpm i;\nnpm run start;\n\n```\n\nThen open http://localhost:3000 to try the DEMO. You can find the basic usage for browser and NodeJS in the /example folder.\n\n### Constructor\n\n#### PkgReader(pkgFile, Extensions, options)\n\n```javascript\nvar PkgReader = require('isomorphic-pkg-reader');\n\n// in browser, it received a file object or a blob object.\nvar reader = new PkgReader(blob/file, 'apk', { withIcon: true, iconType: 'base64', searchResource: true });\n```\n\n##### pkgFile {Blob/File/String}\nIn browser, you can pass a File object that you can get from a `<input type=file>`, or you can pass a Blob directly.\n\nIn NodeJS, you need to pass the path or the file (Don't support passing a Buffer in here).\n\n##### Extensions {String}\nThe extensions of your file, like 'apk' or 'ipa', because we need to make sure what type of the package is before we start to parse, and it's not reliable by detecting the extensions by the file name.\n\n##### Options {Object}\n\n##### Options.withIcon {Boolean}\nDefault: false.\n\nDo you need the icon for showing. If it's true, we will find out the icon from the package and turn it into a BlobUrl or Base64, so you can directly use it for show like:\n```javascript\nvar reader = new PkgReader(file, 'apk', {withIcon: true});\nreader.parse(function(err, pkgInfo) {\n  document.querySelector('img').src = pkgInfo.icon; // It's a base64 DataUrl or a BlobUrl depending on another options: iconType\n});\n```\nThis options only works for browser.\n\n#### Options.iconType {String}\nDefault: 'base64'\n\nWhat type of icon you need to show, this can be either 'base64' or 'blob'.\n\nThis options only works for browser too.\n\n#### Options.searchResource {Boolean}\nDefault: true\n\nThis options only works for .apk files. Whether parse the `resources.arsc` or not, if it's `false`, it won't parse the `resources.arsc` file and will return the information in the AndroidManifest.xml directly (So you can't read all reference type values).\n\n### APIs\n\n#### reader.parse(callback)\n\nThe basic method, unzip the package file, read the information of the package.\n\nThe callback function received two parameters: error and pkgInfo: `callback(error, pkgInfo)`\n\nWhat's the `pkgInfo` like is totally different from .apk to .ipa, also if you set the `options.withIcon=true`, you can access the icon from `pkgInfo.icon`, it'll be a BlobUrl or a DataUrl.\n\n#### reader.getEntries(whatYouNeed, [options], callback)\nBasically this method just calling the `unzip.getBuffer` function which you can find the docs [here](https://www.npmjs.com/package/isomorphic-unzip#unzipgetbufferwhatyouneed-callback).\n\n##### whatYouNeed {Array}\nAn array of String/RegExp/Function that contains the entry name you want to access.\n\n##### options {Object}\nEmm...currently we don't have any options here, forget it.\n\n##### options.callback {Function}\nWill be called like: `callback(error, buffers)`.\n\n`buffers` is a object that use the entry name as key, Buffer object as value.\n\n#### reader.getEntry(entryName, options, callback)\nThis function works just like getEntries, but this will only search for one entry a time.\n\n#### reader.parseIcon(buffer, callback)\nThis method repair the crushed pngs from ipa, turing a buffer/blob into a [Png Object](https://www.npmjs.com/package/pngjs#class-png), then you can call the `reader.redraw(png, function(err, base64Icon))` to get the repaired icon.\n\n##### buffer {Buffer/Blob}\nBuffer/Blob of your icon\n\n##### callback(error, png)\n\nNotice:\n\nYou can access this method only when you're parsing an ipa package, because for apk there is no need to use it.\n\nSometimes when you set `options.withIcon=true`, but we can't find out the icon from a ipa file in our search rules(In which you can read the source from /lib/utils -> `findOutIcon` function), so in this situation(maybe rare), you can also find out the icon yourself and use this to repair a curshed png.\n\n#### reader.redraw(png, [type,] callback)\n\n##### png {Object}\nA [Png Object](https://www.npmjs.com/package/pngjs#class-png) that you get from calling `reader.parseIcon`.\n\n##### type {String}\nWhat type of data you need to show an icon, can be either 'base64' or 'blob', default to be 'base64'.\n\n##### callback(error, icon)\nWhen you set `type=base64`, the `icon` is an base64 format image, if `type=blob`, the `icon` is an BlobUrl.\n\n\n## Additional\n\nBasically this pkg reader can get everything the other readers could get, and it can run both on browser and NodeJS.\n\nDon't worried about the efficiency in browser, it's all async by using WebWorkers(That means it required IE10+, and currently it's only async in the unzipping process).\n\nIt's now working fine on our production environment, if you have any issue when using this, please make us know.\n\n## CHANGE LOG\n\n2016.6.13 `1.1.15`\n\nFix some range error when parsing .apk resource map. ",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/TencentWSRD/isomorphic-pkg-reader.git"
  },
  "scripts": {
    "start": "node ./example/webpack.config.js & node ./example/server"
  },
  "version": "1.1.21"
}
