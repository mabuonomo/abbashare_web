{
  "_args": [
    [
      {
        "raw": "get-uri@^2.0.0",
        "scope": null,
        "escapedName": "get-uri",
        "name": "get-uri",
        "rawSpec": "^2.0.0",
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "/home/mario/projects/omnia/meteor_abbashare/node_modules/pac-proxy-agent"
    ]
  ],
  "_from": "get-uri@>=2.0.0 <3.0.0",
  "_id": "get-uri@2.0.1",
  "_inCache": true,
  "_location": "/get-uri",
  "_nodeVersion": "8.1.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/get-uri-2.0.1.tgz_1499796650884_0.35804933751933277"
  },
  "_npmUser": {
    "name": "tootallnate",
    "email": "nathan@tootallnate.net"
  },
  "_npmVersion": "5.0.3",
  "_phantomChildren": {
    "ms": "2.0.0"
  },
  "_requested": {
    "raw": "get-uri@^2.0.0",
    "scope": null,
    "escapedName": "get-uri",
    "name": "get-uri",
    "rawSpec": "^2.0.0",
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/pac-proxy-agent"
  ],
  "_resolved": "https://registry.npmjs.org/get-uri/-/get-uri-2.0.1.tgz",
  "_shasum": "dbdcacacd8c608a38316869368117697a1631c59",
  "_shrinkwrap": null,
  "_spec": "get-uri@^2.0.0",
  "_where": "/home/mario/projects/omnia/meteor_abbashare/node_modules/pac-proxy-agent",
  "author": {
    "name": "Nathan Rajlich",
    "email": "nathan@tootallnate.net",
    "url": "http://n8.io/"
  },
  "bugs": {
    "url": "https://github.com/TooTallNate/node-get-uri/issues"
  },
  "dependencies": {
    "data-uri-to-buffer": "1",
    "debug": "2",
    "extend": "3",
    "file-uri-to-path": "1",
    "ftp": "~0.3.10",
    "readable-stream": "2"
  },
  "description": "Returns a `stream.Readable` from a URI string",
  "devDependencies": {
    "ftpd": "github:sstur/nodeftpd",
    "mocha": "3",
    "st": ">= 0.2.3 && < 1",
    "stream-to-array": "2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-7aelVrYqCLuVjq2kEKRTH8fXPTC0xKTkM+G7UlFkEwCXY3sFbSxvY375JoFowOAYbkaU47SrBvOefUlLZZ+6QA==",
    "shasum": "dbdcacacd8c608a38316869368117697a1631c59",
    "tarball": "https://registry.npmjs.org/get-uri/-/get-uri-2.0.1.tgz"
  },
  "gitHead": "52dee08ad45b48882029163d19f49d2ead961270",
  "homepage": "https://github.com/TooTallNate/node-get-uri#readme",
  "keywords": [
    "uri",
    "read",
    "readstream",
    "stream",
    "get",
    "http",
    "https",
    "ftp",
    "file",
    "data",
    "protocol",
    "url"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "tootallnate",
      "email": "nathan@tootallnate.net"
    }
  ],
  "name": "get-uri",
  "optionalDependencies": {},
  "readme": "get-uri\n=======\n### Returns a `stream.Readable` from a URI string\n[![Build Status](https://travis-ci.org/TooTallNate/node-get-uri.svg?branch=master)](https://travis-ci.org/TooTallNate/node-get-uri)\n\nThis high-level module accepts a URI string and returns a `Readable` stream\ninstance. There is built-in support for a variety of \"protocols\", and it's\neasily extensible with more:\n\n| Protocol  | Description                     | Example\n|:---------:|:-------------------------------:|:---------------------------------:\n| `data`    | [Data URIs][data]               | `data:text/plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D`\n| `file`    | [File URIs][file]               | `file:///c:/windows/example.ini`\n| `ftp`     | [FTP URIs][ftp]                 | `ftp://ftp.kernel.org/pub/site/README`\n| `http`    | [HTTP URIs][http]               | `http://www.example.com/path/to/name`\n| `https`   | [HTTPS URIs][https]             | `https://www.example.com/path/to/name`\n\n\nInstallation\n------------\n\nInstall with `npm`:\n\n``` bash\n$ npm install get-uri\n```\n\n\nExample\n-------\n\nTo simply get a `stream.Readable` instance from a `file:` URI, try something like:\n\n``` js\nvar getUri = require('get-uri');\n\n// `file:` maps to a `fs.ReadStream` instance…\ngetUri('file:///Users/nrajlich/wat.json', function (err, rs) {\n  if (err) throw err;\n  rs.pipe(process.stdout);\n});\n```\n\n\nMissing Endpoints\n-----------------\n\nWhen you pass in a URI in which the resource referenced does not exist on the\ndestination server, then a `NotFoundError` will be returned. The `code` of the\nerror instance is set to `\"ENOTFOUND\"`, so you can special-case that in your code\nto detect when a bad filename is requested:\n\n``` js\ngetUri('http://example.com/resource.json', function (err, rs) {\n  if (err) {\n    if ('ENOTFOUND' == err.code) {\n      // bad file path requested\n    } else {\n      // something else bad happened...\n      throw err;\n    }\n  }\n\n  // your app code…\n});\n```\n\n\nCacheability\n------------\n\nWhen calling `getUri()` with the same URI multiple times, the `get-uri` module\nsupports sending an indicator that the remote resource has not been modified\nsince the last time it has been retreived from that node process.\n\nTo do this, pass in a `cache` option to the \"options object\" argument\nwith the value set to the `stream.Readable` instance that was previously\nreturned. If the remote resource has not been changed since the last call for\nthat same URI, then a `NotModifiedError` instance will be returned with it's\n`code` property set to `\"ENOTMODIFIED\"`.\n\nWhen the `\"ENOTMODIFIED\"` error occurs, then you can safely re-use the\nresults from the previous `getUri()` call for that same URI:\n\n``` js\n// maps to a `fs.ReadStream` instance\ngetUri('http://example.com/resource.json', function (err, rs) {\n  if (err) throw err;\n\n  // … some time later, if you need to get this same URI again, pass in the\n  // previous `stream.Readable` instance as `cache` option to potentially\n  // receive an \"ENOTMODIFIED\" response:\n  var opts = { cache: rs };\n  getUri('http://example.com/resource.json', opts, function (err, rs2) {\n    if (err) {\n      if ('ENOTFOUND' == err.code) {\n        // bad file path requested\n      } else if ('ENOTMODIFIED' == err.code) {\n        // source file has not been modified since last time it was requested,\n        // so `rs2` is undefined and you are expected to re-use results from\n        // a previous call to `getUri()`\n      } else {\n        // something else bad happened...\n        throw err;\n      }\n    }\n  });\n});\n```\n\n\nAPI\n---\n\n### getUri(String uri[, Object options,] Function callback)\n\nA `uri` String is required. An optional `options` object may be passed in:\n\n - `cache` - A `stream.Readable` instance from a previous call to `getUri()` with the same URI. If this option is passed in, and the destination endpoint has not been modified, then an `ENOTMODIFIED` error is returned\n\nAny other options passed in to the `options` object will be passed through\nto the low-level connection creation functions (`http.get()`, `ftp.connect()`,\netc).\n\nInvokes the given `callback` function with a `stream.Readable` instance to\nread the resource at the given `uri`.\n\nLicense\n-------\n\n(The MIT License)\n\nCopyright (c) 2014 Nathan Rajlich &lt;nathan@tootallnate.net&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[data]: http://tools.ietf.org/html/rfc2397\n[file]: http://tools.ietf.org/html/draft-hoffman-file-uri-03\n[ftp]: http://www.w3.org/Protocols/rfc959/\n[http]: http://www.w3.org/Protocols/rfc2616/rfc2616.html\n[https]: http://wikipedia.org/wiki/HTTP_Secure\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/TooTallNate/node-get-uri.git"
  },
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "version": "2.0.1"
}
