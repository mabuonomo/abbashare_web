{"version":3,"sources":["webpack:///firebase-firestore.js","webpack:///./firestore/index.js","webpack:///../firestore/dist/esm/src/util/log.js","webpack:///../firestore/dist/esm/src/util/assert.js","webpack:///../firestore/dist/esm/src/platform/platform.js","webpack:///../firestore/dist/esm/src/util/api.js","webpack:///../firestore/dist/esm/src/util/obj.js","webpack:///../firestore/dist/esm/src/util/input_validation.js","webpack:///../firestore/dist/esm/src/util/misc.js","webpack:///../firestore/dist/esm/src/api/blob.js","webpack:///../firestore/dist/esm/src/model/field_value.js","webpack:///../firestore/dist/esm/src/util/types.js","webpack:///../firestore/dist/esm/src/core/query.js","webpack:///../firestore/dist/esm/src/remote/rpc_error.js","webpack:///../firestore/dist/esm/src/model/collections.js","webpack:///../firestore/dist/esm/src/remote/watch_change.js","webpack:///../firestore/dist/esm/src/remote/serializer.js","webpack:///../firestore/dist/esm/src/api/field_path.js","webpack:///../firestore/dist/esm/src/core/view.js","webpack:///../firestore/dist/esm/src/local/encoded_resource_path.js","webpack:///../firestore/dist/esm/src/local/indexeddb_schema.js","webpack:///../firestore/dist/esm/src/local/simple_db.js","webpack:///../firestore/dist/esm/src/local/indexeddb_mutation_queue.js","webpack:///../firestore/dist/esm/src/local/indexeddb_query_cache.js","webpack:///../firestore/dist/esm/src/local/indexeddb_remote_document_cache.js","webpack:///../firestore/dist/esm/src/local/local_serializer.js","webpack:///../firestore/dist/esm/src/api/credentials.js","webpack:///../firestore/dist/esm/src/api/observer.js","webpack:///../firestore/dist/esm/src/api/user_data_converter.js","webpack:///../firestore/dist/esm/src/api/database.js","webpack:///../firestore/dist/esm/src/platform/config.js","webpack:///../firestore/dist/esm/index.js","webpack:///../firestore/dist/esm/src/core/version.js","webpack:///../firestore/dist/esm/src/util/error.js","webpack:///../firestore/dist/esm/src/api/geo_point.js","webpack:///../firestore/dist/esm/src/core/database_info.js","webpack:///../firestore/dist/esm/src/model/path.js","webpack:///../firestore/dist/esm/src/model/document_key.js","webpack:///../firestore/dist/esm/src/model/document.js","webpack:///../firestore/dist/esm/src/util/sorted_map.js","webpack:///../firestore/dist/esm/src/local/query_data.js","webpack:///../firestore/dist/esm/src/core/timestamp.js","webpack:///../firestore/dist/esm/src/core/snapshot_version.js","webpack:///../firestore/dist/esm/src/model/mutation.js","webpack:///../firestore/dist/esm/src/remote/existence_filter.js","webpack:///../firestore/dist/esm/src/util/sorted_set.js","webpack:///../firestore/dist/esm/src/remote/remote_event.js","webpack:///../firestore/dist/esm/src/remote/stream_bridge.js","webpack:///../firestore/dist/esm/src/platform_browser/webchannel_connection.js","webpack:///../firestore/dist/esm/src/platform_browser/browser_platform.js","webpack:///../firestore/dist/esm/src/platform_browser/browser_init.js","webpack:///../firestore/dist/esm/src/core/types.js","webpack:///../firestore/dist/esm/src/core/view_snapshot.js","webpack:///../firestore/dist/esm/src/core/target_id_generator.js","webpack:///../firestore/dist/esm/src/model/document_set.js","webpack:///../firestore/dist/esm/src/util/obj_map.js","webpack:///../firestore/dist/esm/src/core/event_manager.js","webpack:///../firestore/dist/esm/src/local/persistence_promise.js","webpack:///../firestore/dist/esm/src/local/eager_garbage_collector.js","webpack:///../firestore/dist/esm/src/local/local_view_changes.js","webpack:///../firestore/dist/esm/src/local/reference_set.js","webpack:///../firestore/dist/esm/src/remote/persistent_stream.js","webpack:///../firestore/dist/esm/src/core/sync_engine.js","webpack:///../firestore/dist/esm/src/model/mutation_batch.js","webpack:///../firestore/dist/esm/src/local/indexeddb_persistence.js","webpack:///../firestore/dist/esm/src/local/local_documents_view.js","webpack:///../firestore/dist/esm/src/local/remote_document_change_buffer.js","webpack:///../firestore/dist/esm/src/local/local_store.js","webpack:///../firestore/dist/esm/src/local/memory_mutation_queue.js","webpack:///../firestore/dist/esm/src/local/memory_query_cache.js","webpack:///../firestore/dist/esm/src/local/memory_remote_document_cache.js","webpack:///../firestore/dist/esm/src/local/memory_persistence.js","webpack:///../firestore/dist/esm/src/local/no_op_garbage_collector.js","webpack:///../firestore/dist/esm/src/util/promise.js","webpack:///../firestore/dist/esm/src/remote/backoff.js","webpack:///../firestore/dist/esm/src/remote/datastore.js","webpack:///../firestore/dist/esm/src/core/transaction.js","webpack:///../firestore/dist/esm/src/remote/remote_store.js","webpack:///../firestore/dist/esm/src/core/firestore_client.js","webpack:///../firestore/dist/esm/src/util/async_observer.js","webpack:///../firestore/dist/esm/src/util/async_queue.js","webpack:///../firestore/dist/esm/src/auth/user.js","webpack:///../firestore/dist/esm/src/api/field_value.js","webpack:///../webchannel-wrapper/dist/index.js"],"names":["webpackJsonpFirebase","113","module","exports","__webpack_require__","114","__webpack_exports__","getLogLevel","logLevel","setLogLevel","newLevel","debug","tag","msg","obj","_i","arguments","length","LogLevel","DEBUG","time","Date","toISOString","args","map","argToString","console","log","apply","SDK_VERSION","concat","log_error","ERROR","error","JSON","stringify","e","fail","failure","message","Error","assert","assertion","emptyByteString","platform_PlatformSupport","getPlatform","makeConstructorPrivate","cls","optionalMessage","PublicConstructor","FirestoreError","Code","INVALID_ARGUMENT","prototype","staticProperty","hasOwnProperty","contains","key","Object","call","defaulted","value","defaultValue","undefined","forEachNumber","fn","num","parseInt","isNaN","forEach","isEmpty","shallowCopy","result","validateExactNumberOfArgs","functionName","numberOfArgs","formatPlural","validateAtLeastNumberOfArgs","minNumberOfArgs","validateBetweenNumberOfArgs","maxNumberOfArgs","validateNamedArrayAtLeastNumberOfElements","name","minNumberOfElements","Array","validateArgType","type","position","argument","validateType","ordinal","validateOptionalArgType","validateNamedType","optionName","validateNamedOptionalType","inputName","input","isPlainObject","description","valueDescription","getPrototypeOf","substring","customObjectName","tryGetCustomObjectType","constructor","funcNameRegex","results","exec","validateDefined","validateOptionNames","options","optionNames","_","indexOf","join","invalidClassError","str","primitiveComparator","left","right","equals","arrayEquals","i","immediatePredecessor","s","lastIndex","charAt","String","fromCharCode","charCodeAt","immediateSuccessor","assertUint8ArrayAvailable","Uint8Array","UNIMPLEMENTED","assertBase64Available","base64Available","numericComparator","numericEquals","isNullOrUndefined","isSafeInteger","isInteger","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","fieldFilter","field","op","NullValue","INSTANCE","query_RelationOp","EQUAL","NullFilter","DoubleValue","NAN","NanFilter","query_RelationFilter","isPermanentError","code","OK","CANCELLED","UNKNOWN","DEADLINE_EXCEEDED","RESOURCE_EXHAUSTED","INTERNAL","UNAVAILABLE","UNAUTHENTICATED","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","DATA_LOSS","mapCodeFromRpcStatus","status","RpcCode","mapCodeFromRpcCode","mapRpcCodeFromCode","mapCodeFromHttpStatus","maybeDocumentMap","EMPTY_MAYBE_DOCUMENT_MAP","documentMap","EMPTY_DOCUMENT_MAP","documentVersionMap","EMPTY_DOCUMENT_VERSION_MAP","documentKeySet","EMPTY_DOCUMENT_KEY_SET","applyResumeToken","change","resumeToken","assertPresent","parseInt64","hasTag","fromDotSeparatedString","path","search","RESERVED","field_path_FieldPath","bind","split","compareChangeType","c1","c2","order","ChangeType","Added","Modified","Metadata","Removed","encode","encodeSeparator","encodeSegment","get","segment","resultBuf","c","escapeChar","encodedNul","encodedEscape","encodedSeparatorChar","decode","path_ResourcePath","EMPTY_PATH","lastReasonableEscapeIndex","segments","segmentBuilder","start","end","currentPiece","push","createOrUpgradeDb","db","oldVersion","createObjectStore","DbMutationQueue","store","keyPath","DbMutationBatch","DbTargetDocument","createIndex","documentTargetsIndex","documentTargetsKeyPath","unique","DbTarget","queryTargetsIndexName","queryTargetsKeyPath","indexeddb_schema_DbDocumentMutation","DbRemoteDocument","DbOwner","DbTargetGlobal","wrapRequest","request","persistence_promise_PersistencePromise","resolve","reject","onsuccess","event","target","onerror","validateStreamToken","token","mutationsStore","txn","getStore","documentMutationsStore","mutationQueuesStore","simple_db_SimpleDbTransaction","targetsStore","indexeddb_query_cache_getStore","globalTargetStore","documentTargetStore","remoteDocumentsStore","dbKey","docKey","toArray","isDocumentQuery","dbQuery","documents","makeCredentialsProvider","credentials","credentials_EmptyCredentialsProvider","credentials_GoogleCredentialsProvider","client","credentials_FirstPartyCredentialsProvider","sessionIndex","isPartialObserver","implementsAnyMethods","methods","object","methods_1","method","looksLikeJsonObject","geo_point_GeoPoint","blob_Blob","DocumentKeyReference","FieldValueImpl","validatePlainObject","context","createError","fieldPathFromArgument","methodName","_internalPath","fieldPathFromDotSeparatedString","errorMessage","validateSetOptions","merge","validateReference","documentRef","firestore","database_DocumentReference","changesFromSnapshot","snapshot","oldDocs","lastDoc_1","index_1","docChanges","doc","database_DocumentSnapshot","fromCache","query","docComparator","oldIndex","newIndex","indexTracker_1","delete","add","resultChangeType","configureForFirebase","firebase","registerService","app","database_Firestore","firestoreNamespace","registerFirestore","instance","defineProperty","esm","PlatformSupport","setPlatform","platform","__extends","this","extendStatics","setPrototypeOf","__proto__","d","b","p","__","create","_super","_this","toString","misc_AutoId","AutoId","newId","chars","autoId","Math","floor","random","Blob","binaryString","_binaryString","fromBase64String","base64","atob","fromUint8Array","array","char","toBase64","btoa","toUint8Array","buffer","_equals","other","_compareTo","PublicBlob","GeoPoint","latitude","longitude","isFinite","_lat","_long","enumerable","configurable","DatabaseInfo","databaseId","persistenceKey","host","ssl","DEFAULT_DATABASE_NAME","database_info_DatabaseId","DatabaseId","projectId","database","compareTo","path___extends","path_Path","Path","offset","init","len","construct","comparator","child","nameOrPath","slice","limit","popFirst","size","popLast","firstSegment","lastSegment","index","isPrefixOf","p1","p2","min","ResourcePath","canonicalString","fromString","filter","identifierRegExp","path_FieldPath","FieldPath","isValidIdentifier","test","replace","isKeyField","keyField","fromServerFormat","current","addCurrentSegment","inBackticks","next","document_key_DocumentKey","DocumentKey","isDocumentKey","k1","k2","fromSegments","fromPathString","EMPTY","document_Document","Document","version","data","hasLocalMutations","fieldValue","compareByKey","d1","d2","compareByField","v1","v2","document_NoDocument","NoDocument","sorted_map_SortedMap","SortedMap","root","sorted_map_LLRBNode","insert","copy","BLACK","remove","node","cmp","getPredecessorKey","rightParent","prunedNodes","minKey","maxKey","inorderTraversal","action","k","v","reverseTraversal","getIterator","resultGenerator","sorted_map_SortedMapIterator","getIteratorFrom","getReverseIterator","getReverseIteratorFrom","SortedMapIterator","startKey","isReverse","nodeStack","getNext","pop","hasNext","peek","LLRBNode","color","RED","n","fixUp","removeMin","isRed","moveRedLeft","smallest","rotateRight","moveRedRight","rotateLeft","colorFlip","nl","nr","checkMaxDepth","blackDepth","check","pow","LLRBEmptyNode","TypeOrder","field_value___extends","QueryPurpose","field_value_FieldValue","FieldValue","val","defaultCompareTo","typeOrder","internalValue","field_value_BooleanValue","BooleanValue","of","TRUE","FALSE","NumberValue","IntegerValue","NaN","POSITIVE_INFINITY","Infinity","NEGATIVE_INFINITY","field_value_StringValue","StringValue","TimestampValue","toDate","ServerTimestampValue","localWriteTime","BlobValue","field_value_RefValue","RefValue","GeoPointValue","field_value_ObjectValue","ObjectValue","it1","it2","next1","next2","set","to","setChild","newChild","pathSegment","childName","field_value_ArrayValue","ArrayValue","minLength","NumberAsAny","Number","query_Query","Query","explicitOrderBy","filters","startAt","endAt","memoizedCanonicalId","memoizedOrderBy","assertValidBound","atPath","inequalityField","getInequalityFilterField","firstOrderByField","getFirstOrderByField","KEY_ORDERING_ASC","query_OrderBy","foundKeyOrdering","_a","orderBy","lastDirection","dir","Direction","ASCENDING","KEY_ORDERING_DESC","addFilter","isInequality","newFilters","addOrderBy","newOrderBy","withLimit","withStartAt","bound","withEndAt","canonicalId","_b","_c","comparedOnKeyField","comp","compare","matches","matchesAncestor","matchesOrderBy","matchesFilters","matchesBounds","hasLimit","docPath","sortsBeforeDocument","RelationOp","LESS_THAN","LESS_THAN_OR_EQUAL","GREATER_THAN_OR_EQUAL","GREATER_THAN","RelationFilter","refValue","comparison","matchesComparison","matchesValue","DESCENDING","query_Bound","Bound","before","component","orderByComponent","docValue","thisPosition","otherPosition","OrderBy","isKeyOrderBy","isoRegExp","RegExp","timestamp_Timestamp","Timestamp","seconds","nanos","now","fromEpochMilliseconds","fromDate","date","getTime","milliseconds","fromISOString","utc","fraction","nanoStr","substr","toEpochMilliseconds","snapshot_version_SnapshotVersion","SnapshotVersion","timestamp","fromMicroseconds","fromTimestamp","forDeletedDoc","MIN","toMicroseconds","toTimestamp","MutationType","query_data_QueryData","QueryData","targetId","purpose","snapshotVersion","update","updated","mutation___extends","mutation_FieldMask","FieldMask","fields","ServerTimestampTransform","FieldTransform","transform","MutationResult","transformResults","mutation_Precondition","Precondition","updateTime","exists","isValidFor","maybeDoc","isNone","NONE","mutation_Mutation","Mutation","verifyKeyMatches","getPostMutationVersion","mutation_SetMutation","SetMutation","precondition","Set","applyToRemoteDocument","mutationResult","applyToLocalView","mutation_PatchMutation","PatchMutation","fieldMask","Patch","newData","patchDocument","patchObject","fieldPath","newValue","mutation_TransformMutation","TransformMutation","fieldTransforms","Transform","requireDocument","transformObject","localTransformResults","fieldTransform","mutation_DeleteMutation","DeleteMutation","Delete","ExistenceFilter","count","CurrentStatusUpdate","sorted_set_SortedSet","SortedSet","fromMapKeys","keys","has","elem","first","last","cb","forEachInRange","range","iter","forEachWhile","firstAfterOrEqual","unionWith","thisIt","otherIt","thisElem","otherElem","remote_event_RemoteEvent","RemoteEvent","targetChanges","documentUpdates","addDocumentUpdate","handleExistenceFilterMismatch","mapping","ResetMapping","currentStatusUpdate","MarkNotCurrent","WatchTargetChangeState","EMPTY_KEY_SET","docs","UpdateMapping","addedDocuments","removedDocuments","applyToKeySet","DocumentWatchChange","updatedTargetIds","removedTargetIds","newDoc","ExistenceFilterChange","existenceFilter","watch_change_WatchTargetChange","WatchTargetChange","state","targetIds","cause","watch_change_WatchChangeAggregator","WatchChangeAggregator","listenTargets","pendingTargetResponses","existenceFilters","frozen","watchChange","addDocumentChange","addTargetChange","addExistenceFilterChange","addChanges","watchChanges","createRemoteEvent","isActiveTarget","ensureTargetChange","None","docChange","relevant","targetChange","NoChange","recordTargetResponse","Current","MarkCurrent","Reset","newCount","DIRECTIONS","dirs","OPERATORS","ops","serializer_JsonProtoSerializer","JsonProtoSerializer","useProto3Json","unsafeCastProtoByteString","byteString","fromRpcStatus","toBytes","bytes","fromBlob","blob","toVersion","fromVersion","toResourceName","fullyQualifiedPrefixPath","fromResourceName","resource","isValidResourceName","toName","fromName","extractLocalPathFromResourceName","toQueryPath","encodedDatabaseId","fromQueryPath","resourceName","toValue","nullValue","booleanValue","integerValue","doubleValue","stringValue","mapValue","toMapValue","arrayValue","toArrayValue","timestampValue","geoPointValue","bytesValue","referenceValue","fromValue","fromFields","values","dbId","toMutationDocument","toFields","toDocument","document","fromDocument","fromFound","found","fromMissing","missing","readTime","fromMaybeDocument","toWatchTargetChangeState","toTestWatchChange","documentChange","documentDelete","documentRemove","targetChangeType","fromWatchChange","fromWatchTargetChangeState","causeProto","entityChange","docDelete","docRemove","versionFromListenResponse","toMutation","mutation","updateMask","toDocumentMask","toFieldTransform","currentDocument","toPrecondition","fromMutation","proto","fromPrecondition","fromDocumentMask","fromFieldTransform","fromWriteResult","fromWriteResults","protos","setToServerValue","toDocumentsTarget","fromDocumentsTarget","documentsTarget","toQueryTarget","structuredQuery","parent","from","collectionId","where","toFilter","toOrder","toLimit","toCursor","fromQueryTarget","fromCount","filterBy","fromFilter","fromOrder","fromCursor","toListenRequestLabels","queryData","toLabel","goog-listen-tags","Listen","ExistenceFilterMismatch","LimboResolution","toTarget","toRelationFilter","toUnaryFilter","compositeFilter","unaryFilter","fromUnaryFilter","fromRelationFilter","f","reduce","accum","orderBys","toPropertyOrder","fromPropertyOrder","cursor","toDirection","fromDirection","toOperatorName","fromOperatorName","toFieldPathReference","fromFieldPathReference","fieldReference","direction","nanField","nullField","fieldPaths","paths","dist","stream_bridge_StreamBridge","StreamBridge","wrappedOnOpen","wrappedOnClose","wrappedOnMessage","sendFn","closeFn","onOpen","callback","onClose","onMessage","close","send","callOnOpen","callOnClose","err","callOnMessage","LOG_TAG","X_GOOG_API_CLIENT_VALUE","webchannel_connection_WebChannelConnection","WebChannelConnection","info","pool","baseUrl","modifyHeadersForRequest","headers","header","authHeaders","invoke","rpcName","url","makeUrl","Promise","getObject","xhr","listenOnce","COMPLETE","getLastErrorCode","NO_ERROR","json","getResponseJson","TIMEOUT","HTTP_ERROR","status_1","getStatus","getResponseText","getStatusText","getLastError","releaseObject","requestString","Content-Type","openStream","rpcService","RPC_STREAM_SERVICE_MAPPING","rpcUrlName","RPC_STREAM_NAME_MAPPING","urlParts","webchannelTransport","backgroundChannelTest","httpSessionIdParam","initMessageHeaders","sendRawJson","supportsCrossDomainXhr","channel","createWebChannel","opened","closed","streamBridge","open","unguardedEventListen","listen","param","setTimeout","EventType","OPEN","CLOSE","MESSAGE","msgData","status_2","Write","browser_platform_BrowserPlatform","BrowserPlatform","loadConnection","databaseInfo","newSerializer","encoded","raw","OnlineState","fieldNames","documentId","_DOCUMENT_ID","SyncState","GeneratorIds","view_snapshot_DocumentChangeSet","DocumentChangeSet","changeMap","track","oldChange","getChanges","changes","document_set_DocumentSet","DocumentSet","keyedMap","sortedSet","emptySet","oldSet","prevDoc","thisDoc","otherDoc","docStrings","newSet","obj_map_ObjectMap","ObjectMap","mapKeyFn","inner","id","matches_1","otherKey","splice","entries","entries_1","QueryListenersInfo","listeners","event_manager_EventManager","EventManager","syncEngine","queries","q","onlineState","Unknown","subscribe","onChange","onError","listener","firstListen","queryInfo","onOnlineStateChanged","viewSnap","onViewSnapshot","then","unlisten","lastListen","viewSnaps","viewSnaps_1","event_manager_QueryListener","QueryListener","queryObserver","raisedInitialEvent","snap","syncStateChanged","includeDocumentMetadataChanges","hasPendingWrites","shouldRaiseEvent","shouldRaiseInitialEvent","raiseInitialEvent","maybeOnline","Failed","waitForSyncWhenOnline","hasPendingWritesChanged","includeQueryMetadataChanges","getInitialViewChanges","PersistencePromise","nextCallback","catchCallback","isDone","callbackAttached","catch","nextFn","catchFn","wrapFailure","wrapSuccess","toPromise","wrapUserFunction","waitFor","all","promise","nextPromise","idx","initial","eager_garbage_collector_EagerGarbageCollector","EagerGarbageCollector","isEager","sources","potentialGarbage","addGarbageSource","garbageSource","setGarbageCollector","removeGarbageSource","addPotentialGarbageKey","collectGarbage","promises","garbageKeys","hasRefsPromise","documentHasAnyReferences","hasRefs","source","containsKey","local_view_changes_LocalViewChanges","LocalViewChanges","addedKeys","removedKeys","fromSnapshot","viewSnapshot","reference_set_ReferenceSet","ReferenceSet","refsByKey","reference_set_DocReference","refsByTarget","compareByTargetId","garbageCollector","addReference","ref","addReferences","removeReference","removeRef","removeReferences","removeReferencesForId","emptyKey","startRef","endRef","removeAllReferences","referencesForId","firstRef","DocReference","targetOrBatchId","RESERVED_BITS","PersistentStreamState","TargetIdGenerator","generatorId","initAfter","afterWithoutGenerator","afterGenerator","previousId","forLocalStore","LocalStore","forSyncEngine","SyncEngine","AddedLimboDocument","RemovedLimboDocument","view_View","View","syncedDocuments","syncState","limboDocuments","mutatedKeys","documentSet","computeDocChanges","previousChanges","changeSet","oldDocumentSet","newMutatedKeys","newDocumentSet","needsRefill","lastDocInLimit","newMaybeDoc","oldDoc","docsEqual","applyChanges","sort","limboChanges","applyTargetChange","synced","newSyncState","Synced","Local","shouldBeInLimbo","targetMapping","oldLimboDocuments","QueryView","view","sync_engine_SyncEngine","localStore","remoteStore","currentUser","viewHandler","errorHandler","queryViewsByQuery","queryViewsByTarget","limboTargetsByKey","limboKeysByTarget","limboDocumentRefs","limboCollector","mutationUserCallbacks","targetIdGenerator","assertSubscribed","allocateQuery","executeQuery","remoteDocumentKeys","remoteKeys","viewDocChanges","viewChange","queryView","releaseQuery","removeAndCleanupQuery","write","batch","userCallback","localWrite","addMutationCallback","batchId","emitNewSnapsAndNotifyLocalStore","fillWritePipeline","wrapUpdateFunctionError","runTransaction","updateFunction","retries","transaction","createTransaction","userPromise","commit","applyRemoteEvent","remoteEvent","limboKey","rejectListen","docMap","event_1","queryView_1","applySuccessfulWrite","mutationBatchResult","processUserCallback","acknowledgeBatch","rejectFailedWrite","rejectBatch","newCallbacks","toKey","gcLimboDocuments","updateTrackedLimbos","limboChanges_1","limboChange","trackLimboChange","limboTargetId","currentLimboDocs","newSnaps","docChangesInAllViews","queriesProcessed","notifyLocalViewChanges","fnName","handleUserChange","user","BATCHID_UNKNOWN","mutation_batch_MutationBatch","MutationBatch","mutations","batchResult","mutationResults","keySet","isTombstone","toTombstone","mutation_batch_MutationBatchResult","MutationBatchResult","commitVersion","streamToken","docVersions","versionMap","DbTimestamp","ownerId","leaseTimestampMs","userId","lastAcknowledgedBatchId","lastStreamToken","localWriteTimeMs","DbDocumentMutation","prefixForUser","prefixForPath","PLACEHOLDER","DbNoDocument","noDocument","lastListenSequenceNumber","highestTargetId","highestListenSequenceNumber","lastRemoteSnapshotVersion","ALL_STORES","simple_db_SimpleDb","SimpleDb","openOrCreate","runUpgrade","isAvailable","window","indexedDB","onupgradeneeded","deleteDatabase","ua","navigator","userAgent","mode","objectStores","transactionFn","transactionFnResult","abort","completionPromise","IterationController","dbCursor","shouldStop","nextKey","done","skip","SimpleDbTransaction","objectStoresNames","aborted","onabort","oncomplete","storeName","objectStore","simple_db_SimpleDbStore","SimpleDbStore","put","keyOrValue","loadAll","indexOrRange","iterateCursor","deleteAll","keysOnly","control","iterate","optionsOrCallback","cursorRequest","controller","userResult","primaryKey","skipToKey","continue","indexName","reverse","openKeyCursor","openCursor","indexeddb_mutation_queue_IndexedDbMutationQueue","IndexedDbMutationQueue","serializer","forUser","uid","isUnauthenticated","loadNextBatchIdFromDb","nextBatchId","metadata","checkEmpty","empty","maxBatchId","nextUser","IDBKeyRange","keyForBatchId","getNextBatchId","getHighestAcknowledgedBatchId","getLastStreamToken","setLastStreamToken","addMutationBatch","dbBatch","toDbMutationBatch","mutations_1","indexKey","lookupMutationBatch","fromDbMutationBatch","getNextMutationBatchAfterBatchId","lowerBound","foundBatch","getAllMutationBatches","dbBatches","getAllMutationBatchesThroughBatchId","getAllMutationBatchesAffectingDocumentKey","documentKey","indexPrefix","indexStart","userID","encodedPath","batchID","mutationKey","getAllMutationBatchesAffectingQuery","queryPath","immediateChildrenLength","uniqueBatchIDs","removeMutationBatches","batches","indexTxn","this_1","batches_1","only","numDeleted","removePromise","performConsistencyCheck","startRange","danglingMutationReferences","gc","indexeddb_query_cache_IndexedDbQueryCache","IndexedDbQueryCache","lastSavedVersion","getHighestTargetId","getLastRemoteSnapshotVersion","setLastRemoteSnapshotVersion","addQueryData","addedQueryPromise","toDbTarget","removeQueryData","removeMatchingKeysForTargetId","getQueryData","fromDbTarget","addMatchingKeys","removeMatchingKeys","notifyGCForRemovedKeys","getMatchingKeysForTargetId","indexeddb_remote_document_cache_IndexedDbRemoteDocumentCache","IndexedDbRemoteDocumentCache","addEntry","maybeDocument","toDbRemoteDocument","removeEntry","getEntry","dbRemoteDoc","fromDbRemoteDocument","getDocumentsMatchingQuery","local_serializer_LocalSerializer","LocalSerializer","remoteSerializer","remoteDoc","serializedMutations","m","dbTarget","queryProto","dbTimestamp","EXISTING_OWNER_ERROR_MSG","indexeddb_persistence_IndexedDbPersistence","IndexedDbPersistence","prefix","generateOwnerId","dbName","MAIN_DATABASE","localStoragePrefix","started","simpleDb","tryAcquireOwnerLease","scheduleOwnerLeaseRefreshes","attachWindowUnloadHook","persistenceError","shutdown","detachWindowUnloadHook","stopOwnerLeaseRefreshes","releaseOwnerLease","getMutationQueue","getQueryCache","getRemoteDocumentCache","operation","ensureOwnerLease","buildStoragePrefix","isDefaultDatabase","dbOwner","validOwner","newDbOwner","minAcceptable","maxAcceptable","getZombiedOwnerId","ownerLeaseRefreshHandle","setInterval","reason","clearInterval","windowUnloadHandler","setZombiedOwnerId","addEventListener","removeEventListener","zombiedOwnerId","localStorage","getItem","zombiedOwnerLocalStorageKey","zombieOwnerId","removeItem","setItem","local_documents_view_LocalDocumentsView","LocalDocumentsView","remoteDocumentCache","mutationQueue","getDocument","computeLocalDocument","getDocuments","getDocumentsMatchingDocumentQuery","getDocumentsMatchingCollectionQuery","queryResults","computeLocalDocuments","promisedResults","matchingMutationBatches","matchingKeys","matchingMutationBatches_1","mutatedDoc","remote_document_change_buffer_RemoteDocumentChangeBuffer","RemoteDocumentChangeBuffer","assertChanges","bufferedEntry","local_store_LocalStore","persistence","initialUser","localViewReferences","heldBatchResults","remoteDocuments","queryCache","localDocuments","startMutationQueue","startQueryCache","oldBatches","promisedOldBatches","newBatches","changedKeys","_d","highestAck","ackedBatches","promisedBatch","changedDocuments","affected","shouldHoldBatchResult","documentBuffer_1","releaseBatchResults","promisedAffectedKeys","toReject","affectedKeys","promisedToReject","lastAcked","removeMutationBatch","documentBuffer","changedDocKeys","existingDoc","lastRemoteVersion","remoteVersion","releasedWriteKeys","releaseHeldBatchResults","promisedReleasedWriteKeys","viewChanges","viewChanges_1","nextMutationBatch","afterBatchId","readDocument","cached","documentBuffer_2","garbage","toRelease","isRemoteUpToVersion","batchResults","promiseChain","batchResults_1","applyWriteToRemoteDocuments","affectedDocs","batches_2","docKeys","ackVersion","memory_mutation_queue_MemoryMutationQueue","MemoryMutationQueue","highestAcknowledgedBatchId","batchesByDocumentKey","batchIndex","indexOfExistingBatchId","findMutationBatch","max","rawIndex","indexOfBatchId","getAllLiveMutationBatchesBeforeIndex","endIndex","immediateChildrenPathLength","startPath","rowKeyPath","batchCount","firstBatchId","queueCount","startIndex","queueIndex","length_1","references","memory_query_cache_MemoryQueryCache","MemoryQueryCache","memory_remote_document_cache_MemoryRemoteDocumentCache","MemoryRemoteDocumentCache","iterator","memory_persistence_MemoryPersistence","MemoryPersistence","mutationQueues","queue","MemoryPersistenceTransaction","no_op_garbage_collector_NoOpGarbageCollector","NoOpGarbageCollector","Deferred","backoff_ExponentialBackoff","ExponentialBackoff","initialDelayMs","backoffFactor","maxDelayMs","reset","currentBaseMs","resetToMax","backoffAndWait","def","delayWithJitterMs","jitterDelayMs","persistent_stream___extends","UserDataSource","BACKOFF_INITIAL_DELAY_MS","BACKOFF_MAX_DELAY_MS","BACKOFF_FACTOR","persistent_stream_PersistentStream","PersistentStream","connection","credentialsProvider","initialBackoffDelay","stream","backoff","Initial","isStarted","Backoff","Auth","Open","isOpen","performBackoff","auth","stop","Stopped","inhibitBackoff","getToken","startStream","schedule","rpcError","handleStreamClose","dispatchIfNotStopped","startRpc","PersistentListenStream","watchChangeProto","onWatchChange","watch","addTarget","labels","unwatch","removeTarget","persistent_stream_PersistentWriteStream","PersistentWriteStream","handshakeComplete_","responseProto","writeResults","commitTime","onMutationResult","onHandshakeComplete","writeHandshake","writeMutations","writes","datastore_Datastore","Datastore","newPersistentWriteStream","newPersistentWatchStream","params","invokeRPC","response","lookup","transaction_Transaction","Transaction","datastore","readVersions","committed","recordVersion","docVersion","existingVersion","preconditionForUpdate","toMutations","unwritten","remote_store_RemoteStore","RemoteStore","asyncQueue","onlineStateHandler","pendingWrites","lastBatchSeen","accumulatedWatchChanges","watchStream","writeStream","watchStreamOnlineState","watchStreamFailures","enableNetwork","setOnlineStateToHealthy","updateAndBroadcastOnlineState","Healthy","setOnlineStateToUnknown","updateOnlineStateAfterFailure","didChange","isNetworkEnabled","onWatchStreamOpen","onWatchStreamClose","onWatchStreamChange","onWriteStreamOpen","onWriteStreamClose","onWriteHandshakeComplete","shouldStartWatchStream","startWatchStream","disableNetwork","cleanUpWatchStreamState","cleanUpWriteStreamState","sendWatchRequest","sendUnwatchRequest","recordPendingTargetRequest","handleTargetError","handleWatchChangeBatch","aggregator","deletedDoc","trackedRemote","newQueryData","requestQueryData","canWriteMutations","outstandingWrites","shouldStartWriteStream","startWriteStream","handshakeComplete","shift","success","errorHandling","handleWriteError","handleHandshakeError","firestore_client_FirestoreClient","FirestoreClient","usePersistence","initializationDone","persistenceResult","initialized","setUserChangeListener","initializePersistence","initializeRest","startIndexedDbPersistence","canFallback","warn","startMemoryPersistence","storagePrefix","onlineStateChangedHandler","eventMgr","verifyOperationInProgress","removeUserChangeListener","observer","deferred","AsyncObserver","muted","scheduleEvent","mute","eventHandler","async_queue_AsyncQueue","AsyncQueue","tail","delayedOpCount","operationInProgress","delay","deferred_1","scheduleInternal","stack","drain","User","otherUser","GOOGLE_CREDENTIALS","FIRST_PARTY","OAuthToken","Authorization","EmptyCredentialsProvider","userListener","forceRefresh","credentials_FirebaseCredentialsProvider","FirebaseCredentialsProvider","tokenListener","userCounter","newUser","getUser","addAuthTokenListener","initialUserCounter","tokenData","accessToken","removeAuthTokenListener","getUid","currentUid","GoogleCredentialsProvider","authClient","tokenLiteral","credentials_FirstPartyToken","FirstPartyToken","gapi","X-Goog-AuthUser","FirstPartyCredentialsProvider","api_field_value___extends","DeleteFieldValueImpl","serverTimestamp","ServerTimestampFieldValueImpl","PublicFieldValue","RESERVED_FIELD_REGEX","user_data_converter_ParsedSetData","ParsedSetData","user_data_converter_ParsedUpdateData","ParsedUpdateData","user_data_converter_ParseContext","ParseContext","dataSource","arrayElement","validatePath","childContextForField","childPath","validatePathSegment","childContextForFieldPath","childContextForArray","fieldDescription","isWrite","Update","user_data_converter_UserDataConverter","UserDataConverter","preConverter","parseSetData","updateData","childContext","runPreConverter","parsedValue","parseData","parseUpdateData","fieldMaskPaths","mask","parseUpdateVarargs","moreFieldsAndValues","value_1","parseQueryValue","QueryValue","parsed","parseArray","parseObject","parseScalarValue","entryIndex","array_1","entry","parsedEntry","database___extends","DEFAULT_HOST","DEFAULT_SSL","database_FirestoreSettings","FirestoreSettings","settings","FirestoreConfig","Firestore","databaseIdOrApp","_firestoreClient","config","firebaseApp","databaseIdFromApp","external_1","_config","_databaseId","settingsLiteral","newSettings","enablePersistence","configureClient","ensureClientConfigured","thisDb","otherDb","_key","_dataConverter","collection","pathString","database_CollectionReference","forPath","database_Transaction","database_WriteBatch","SILENT","level","_firestore","_transaction","fieldOrUpdateData","WriteBatch","_mutations","_committed","verifyNotCommitted","DocumentReference","isEqual","onSnapshot","includeMetadataChanges","currArg","internalOptions","complete","onSnapshotInternal","errHandler","asyncObserver","internalListener","DocumentSnapshot","_document","_fromCache","convertObject","convertValue","convertArray","database_Query","_query","opStr","validateNewFilter","directionStr","validateNewOrderBy","docOrField","boundFromDocOrFields","startAfter","endBefore","boundFromDocument","allFields","boundFromFields","components","rawValue","wrapped","database_QuerySnapshot","firestoreClient","existingField","validateOrderByAndInequalityMatch","inequality","QuerySnapshot","_originalQuery","_snapshot","_cachedChanges","thisArg","convertToDocumentImpl","CollectionReference","parentPath","docRef","PublicFirestore","PublicTransaction","PublicWriteBatch","PublicDocumentReference","PublicDocumentSnapshot","PublicQuery","PublicQuerySnapshot","PublicCollectionReference","115","l","a","aa","ba","propertyIsEnumerable","ca","da","fa","ha","unshift","r","Function","ia","u","L","Bb","ja","captureStackTrace","ka","ma","na","oa","w","qa","ra","ea","va","wa","xa","ya","y","x","Ba","Ca","Da","Ea","Ga","Fa","Ha","Ia","Ja","Oa","documentMode","Ua","la","Pa","h","A","Qa","ab","relatedTarget","button","screenY","screenX","clientY","clientX","metaKey","shiftKey","altKey","ctrlKey","pointerId","pointerType","changedTouches","srcElement","Ma","nodeName","fromElement","toElement","pageX","pageY","bb","defaultPrevented","fb","src","capture","eb","X","gb","hb","ib","jb","kb","sa","lb","pb","once","qb","rb","$","sb","tb","mb","ub","$a","attachEvent","vb","ob","wb","Ya","xb","yb","detachEvent","nb","zb","Ab","keyCode","returnValue","parentNode","handleEvent","B","P","J","Cb","Db","Eb","eval","Fb","Gb","Hb","Boolean","Ib","valueOf","Lb","Jb","Mb","g","Ob","Pb","Nb","Qb","Sb","MessageChannel","postMessage","createElement","style","display","documentElement","appendChild","contentWindow","location","protocol","origin","port1","onmessage","port2","onreadystatechange","removeChild","Ub","Tb","Vb","setImmediate","Window","Rb","C","Wb","Xb","t","Yb","Z","K","clearTimeout","Zb","$b","ac","W","D","cc","dc","fc","E","lc","F","G","hc","oc","nc","mc","jc","lastIndexOf","pc","ic","H","kc","qc","rc","parse","Ra","Kb","Pe","I","sc","tc","uc","dispatchEvent","vc","wc","xc","Ac","Bc","Cc","Ec","Fc","ActiveXObject","XMLHttpRequest","S","M","Gc","Hc","T","o","j","N","Ic","Lc","Mc","Nc","Oc","Pc","Qc","ta","Sc","Wc","Kc","Jc","Tc","Uc","Vc","Xc","Rc","Ka","Y","Na","Yc","Zc","O","ad","bd","$c","dd","decodeURIComponent","Q","ed","fd","gd","hd","match","cd","jd","kd","qd","ld","rd","R","sd","abs","td","ud","decodeURI","encodeURI","vd","wd","xd","yd","toLowerCase","zd","Bd","Ad","Cd","Dd","Fd","Gd","Hd","Id","Jd","Kd","Md","Nd","Od","Pd","pa","La","Qd","Rd","Sd","Td","Ud","Vd","Wd","Xd","encodeURIComponent","Yd","Image","onload","Zd","ontimeout","U","$d","ee","z","timeout","ce","fe","ge","he","goog","V","self","ae","de","readyState","ie","je","ke","za","Va","Aa","ga","concurrentRequestLimit","fastHandshake","le","me","ne","sendBeacon","oe","cancel","pe","qe","re","te","se","round","Wa","ue","ve","we","xe","Ld","ye","hostname","port","ze","Ae","Be","testUrl","messageUrlParams","messageHeaders","clientProtocolHeaderRequired","X-Client-Protocol","httpHeadersOverwriteParam","Ce","De","Ee","Ge","He","Ie","Je","Ke","Le","Me","Ne","Oe","trim","Sa","Ta","parseFloat","compatMode","Xa","freeze","Za","2","3","4","preventDefault","\"","\\","/","\b","\f","\n","\r","\t","\u000b","bc","ec","timeStamp","msWriteProfilerMark","yc","zc","Dc","md","nd","od","pd","Ed","getResponseHeader","be","toUpperCase","FormData","setRequestHeader","responseType","withCredentials","statusText","responseText","__data__","Fe","createWebChannelTransport","ErrorCode","WebChannel","XhrIoPool"],"mappings":"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","file":"firebase-firestore.js","sourcesContent":["/*!\n * @license Firebase v4.6.0\n * Build: rev-8db58d3\n * Terms: https://firebase.google.com/terms/\n */\ntry {\n        webpackJsonpFirebase([1],{\n\n/***/ 113:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n__webpack_require__(114);\n\n\n/***/ }),\n\n/***/ 114:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// EXTERNAL MODULE: ../app/dist/esm/index.js + 1 modules\nvar esm = __webpack_require__(6);\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/version.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nvar SDK_VERSION = esm[\"default\"].SDK_VERSION;\n\n//# sourceMappingURL=version.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/log.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* tslint:disable:no-console */\n\nvar LogLevel;\n(function (LogLevel) {\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n    LogLevel[LogLevel[\"ERROR\"] = 1] = \"ERROR\";\n    LogLevel[LogLevel[\"SILENT\"] = 2] = \"SILENT\";\n})(LogLevel = LogLevel || (LogLevel = {}));\nvar logLevel = LogLevel.ERROR;\n// Helper methods are needed because variables can't be exported as read/write\nfunction getLogLevel() {\n    return logLevel;\n}\nfunction setLogLevel(newLevel) {\n    logLevel = newLevel;\n}\nfunction debug(tag, msg) {\n    var obj = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        obj[_i - 2] = arguments[_i];\n    }\n    if (logLevel <= LogLevel.DEBUG) {\n        var time = new Date().toISOString();\n        var args = obj.map(argToString);\n        console.log.apply(console, [\"Firestore (\" + SDK_VERSION + \") \" + time + \" [\" + tag + \"]: \" + msg].concat(args));\n    }\n}\nfunction log_error(msg) {\n    var obj = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        obj[_i - 1] = arguments[_i];\n    }\n    if (logLevel <= LogLevel.ERROR) {\n        var time = new Date().toISOString();\n        var args = obj.map(argToString);\n        console.error.apply(console, [\"Firestore (\" + SDK_VERSION + \") \" + time + \": \" + msg].concat(args));\n    }\n}\n/**\n * Converts an additional log parameter to a string representation.\n */\nfunction argToString(obj) {\n    if (typeof obj === 'string') {\n        return obj;\n    }\n    else {\n        try {\n            return JSON.stringify(obj);\n        }\n        catch (e) {\n            // Converting to JSON failed, just log the object directly\n            return obj;\n        }\n    }\n}\n\n//# sourceMappingURL=log.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/assert.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Unconditionally fails, throwing an Error with the given message.\n *\n * Returns any so it can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */\nfunction fail(failure) {\n    // Log the failure in addition to throw an exception, just in case the\n    // exception is swallowed.\n    var message = \"FIRESTORE (\" + SDK_VERSION + \") INTERNAL ASSERTION FAILED: \" + failure;\n    log_error(message);\n    // NOTE: We don't use FirestoreError here because these are internal failures\n    // that cannot be handled by the user. (Also it would create a circular\n    // dependency between the error and assert modules which doesn't work.)\n    throw new Error(message);\n}\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n */\nfunction assert(assertion, message) {\n    if (!assertion) {\n        fail(message);\n    }\n}\n\n//# sourceMappingURL=assert.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/platform/platform.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Provides singleton helpers where setup code can inject a platform at runtime.\n * setPlatform needs to be set before Firestore is used and must be set exactly\n * once.\n */\nvar platform_PlatformSupport = /** @class */ (function () {\n    function PlatformSupport() {\n    }\n    PlatformSupport.setPlatform = function (platform) {\n        if (PlatformSupport.platform) {\n            fail('Platform already defined');\n        }\n        PlatformSupport.platform = platform;\n    };\n    PlatformSupport.getPlatform = function () {\n        if (!PlatformSupport.platform) {\n            fail('Platform not set');\n        }\n        return PlatformSupport.platform;\n    };\n    return PlatformSupport;\n}());\n\n/**\n * Returns the representation of an empty \"proto\" byte string for the\n * platform.\n */\nfunction emptyByteString() {\n    return platform_PlatformSupport.getPlatform().emptyByteString;\n}\n\n//# sourceMappingURL=platform.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/error.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n// TODO(mcg): Change to a string enum once we've upgraded to typescript 2.4.\n//  tslint:disable-next-line:variable-name Intended to look like a TS 2.4 enum\nvar Code = {\n    // Causes are copied from:\n    // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n    /** Not an error; returned on success. */\n    OK: 'ok',\n    /** The operation was cancelled (typically by the caller). */\n    CANCELLED: 'cancelled',\n    /** Unknown error or an error from a different error domain. */\n    UNKNOWN: 'unknown',\n    /**\n     * Client specified an invalid argument. Note that this differs from\n     * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are\n     * problematic regardless of the state of the system (e.g., a malformed file\n     * name).\n     */\n    INVALID_ARGUMENT: 'invalid-argument',\n    /**\n     * Deadline expired before operation could complete. For operations that\n     * change the state of the system, this error may be returned even if the\n     * operation has completed successfully. For example, a successful response\n     * from a server could have been delayed long enough for the deadline to\n     * expire.\n     */\n    DEADLINE_EXCEEDED: 'deadline-exceeded',\n    /** Some requested entity (e.g., file or directory) was not found. */\n    NOT_FOUND: 'not-found',\n    /**\n     * Some entity that we attempted to create (e.g., file or directory) already\n     * exists.\n     */\n    ALREADY_EXISTS: 'already-exists',\n    /**\n     * The caller does not have permission to execute the specified operation.\n     * PERMISSION_DENIED must not be used for rejections caused by exhausting\n     * some resource (use RESOURCE_EXHAUSTED instead for those errors).\n     * PERMISSION_DENIED must not be used if the caller can not be identified\n     * (use UNAUTHENTICATED instead for those errors).\n     */\n    PERMISSION_DENIED: 'permission-denied',\n    /**\n     * The request does not have valid authentication credentials for the\n     * operation.\n     */\n    UNAUTHENTICATED: 'unauthenticated',\n    /**\n     * Some resource has been exhausted, perhaps a per-user quota, or perhaps the\n     * entire file system is out of space.\n     */\n    RESOURCE_EXHAUSTED: 'resource-exhausted',\n    /**\n     * Operation was rejected because the system is not in a state required for\n     * the operation's execution. For example, directory to be deleted may be\n     * non-empty, an rmdir operation is applied to a non-directory, etc.\n     *\n     * A litmus test that may help a service implementor in deciding\n     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\n     *  (a) Use UNAVAILABLE if the client can retry just the failing call.\n     *  (b) Use ABORTED if the client should retry at a higher-level\n     *      (e.g., restarting a read-modify-write sequence).\n     *  (c) Use FAILED_PRECONDITION if the client should not retry until\n     *      the system state has been explicitly fixed. E.g., if an \"rmdir\"\n     *      fails because the directory is non-empty, FAILED_PRECONDITION\n     *      should be returned since the client should not retry unless\n     *      they have first fixed up the directory by deleting files from it.\n     *  (d) Use FAILED_PRECONDITION if the client performs conditional\n     *      REST Get/Update/Delete on a resource and the resource on the\n     *      server does not match the condition. E.g., conflicting\n     *      read-modify-write on the same resource.\n     */\n    FAILED_PRECONDITION: 'failed-precondition',\n    /**\n     * The operation was aborted, typically due to a concurrency issue like\n     * sequencer check failures, transaction aborts, etc.\n     *\n     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n     * and UNAVAILABLE.\n     */\n    ABORTED: 'aborted',\n    /**\n     * Operation was attempted past the valid range. E.g., seeking or reading\n     * past end of file.\n     *\n     * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed\n     * if the system state changes. For example, a 32-bit file system will\n     * generate INVALID_ARGUMENT if asked to read at an offset that is not in the\n     * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from\n     * an offset past the current file size.\n     *\n     * There is a fair bit of overlap between FAILED_PRECONDITION and\n     * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)\n     * when it applies so that callers who are iterating through a space can\n     * easily look for an OUT_OF_RANGE error to detect when they are done.\n     */\n    OUT_OF_RANGE: 'out-of-range',\n    /** Operation is not implemented or not supported/enabled in this service. */\n    UNIMPLEMENTED: 'unimplemented',\n    /**\n     * Internal errors. Means some invariants expected by underlying System has\n     * been broken. If you see one of these errors, Something is very broken.\n     */\n    INTERNAL: 'internal',\n    /**\n     * The service is currently unavailable. This is a most likely a transient\n     * condition and may be corrected by retrying with a backoff.\n     *\n     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n     * and UNAVAILABLE.\n     */\n    UNAVAILABLE: 'unavailable',\n    /** Unrecoverable data loss or corruption. */\n    DATA_LOSS: 'data-loss'\n};\n/**\n * An error class used for Firestore-generated errors. Ideally we should be\n * using FirebaseError, but integrating with it is overly arduous at the moment,\n * so we define our own compatible error class (with a `name` of 'FirebaseError'\n * and compatible `code` and `message` fields.)\n */\nvar FirestoreError = /** @class */ (function (_super) {\n    __extends(FirestoreError, _super);\n    function FirestoreError(code, message) {\n        var _this = _super.call(this, message) || this;\n        _this.code = code;\n        _this.message = message;\n        _this.name = 'FirebaseError';\n        // HACK: We write a toString property directly because Error is not a real\n        // class and so inheritance does not work correctly. We could alternatively\n        // do the same \"back-door inheritance\" trick that FirebaseError does.\n        _this.toString = function () { return _this.name + \": [code=\" + _this.code + \"]: \" + _this.message; };\n        return _this;\n    }\n    return FirestoreError;\n}(Error));\n\n\n//# sourceMappingURL=error.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/api.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// We are doing some heavy reflective stuff, lots of any casting necessary\n/* tslint:disable:no-any */\n\n/**\n * Helper function to prevent instantiation through the constructor.\n *\n * This method creates a new constructor that throws when it's invoked.\n * The prototype of that constructor is then set to the prototype of the hidden\n * \"class\" to expose all the prototype methods and allow for instanceof\n * checks.\n *\n * To also make all the static methods available, all properties of the\n * original constructor are copied to the new constructor.\n */\nfunction makeConstructorPrivate(cls, optionalMessage) {\n    function PublicConstructor() {\n        var error = 'This constructor is private.';\n        if (optionalMessage) {\n            error += ' ';\n            error += optionalMessage;\n        }\n        throw new FirestoreError(Code.INVALID_ARGUMENT, error);\n    }\n    // Make sure instanceof checks work and all methods are exposed on the public\n    // constructor\n    PublicConstructor.prototype = cls.prototype;\n    // Copy any static methods/members\n    for (var staticProperty in cls) {\n        if (cls.hasOwnProperty(staticProperty)) {\n            PublicConstructor[staticProperty] = cls[staticProperty];\n        }\n    }\n    return PublicConstructor;\n}\n\n//# sourceMappingURL=api.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/obj.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction contains(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\nfunction get(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key) ? obj[key] : null;\n}\nfunction obj_size(obj) {\n    var count = 0;\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            count++;\n        }\n    }\n    return count;\n}\n/** Returns the given value if it's defined or the defaultValue otherwise. */\nfunction defaulted(value, defaultValue) {\n    return value !== undefined ? value : defaultValue;\n}\nfunction forEachNumber(obj, fn) {\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var num = parseInt(key, 10);\n            if (!isNaN(num)) {\n                fn(num, obj[key]);\n            }\n        }\n    }\n}\nfunction forEach(obj, fn) {\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            fn(key, obj[key]);\n        }\n    }\n}\nfunction lookupOrInsert(obj, key, valFn) {\n    if (!contains(obj, key)) {\n        obj[key] = valFn();\n    }\n    return obj[key];\n}\nfunction isEmpty(obj) {\n    assert(obj != null && typeof obj === 'object', 'isEmpty() expects object parameter.');\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction shallowCopy(obj) {\n    assert(obj && typeof obj === 'object', 'shallowCopy() expects object parameter.');\n    var result = {};\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            result[key] = obj[key];\n        }\n    }\n    return result;\n}\n\n//# sourceMappingURL=obj.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/input_validation.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * Validates the invocation of functionName has the exact number of arguments.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateExactNumberOfArgs('myFunction', arguments, 2);\n */\nfunction validateExactNumberOfArgs(functionName, args, numberOfArgs) {\n    if (args.length !== numberOfArgs) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires \" +\n            formatPlural(numberOfArgs, 'argument') +\n            ', but was called with ' +\n            formatPlural(args.length, 'argument') +\n            '.');\n    }\n}\n/**\n * Validates the invocation of functionName has at least the provided number of\n * arguments (but can have many more).\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateAtLeastNumberOfArgs('myFunction', arguments, 2);\n */\nfunction validateAtLeastNumberOfArgs(functionName, args, minNumberOfArgs) {\n    if (args.length < minNumberOfArgs) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires at least \" +\n            formatPlural(minNumberOfArgs, 'argument') +\n            ', but was called with ' +\n            formatPlural(args.length, 'argument') +\n            '.');\n    }\n}\n/**\n * Validates the invocation of functionName has number of arguments between\n * the values provided.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateBetweenNumberOfArgs('myFunction', arguments, 2, 3);\n */\nfunction validateBetweenNumberOfArgs(functionName, args, minNumberOfArgs, maxNumberOfArgs) {\n    if (args.length < minNumberOfArgs || args.length > maxNumberOfArgs) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires between \" + minNumberOfArgs + \" and \" +\n            (maxNumberOfArgs + \" arguments, but was called with \") +\n            formatPlural(args.length, 'argument') +\n            '.');\n    }\n}\n/**\n * Validates the provided argument is an array and has as least the expected\n * number of elements.\n */\nfunction validateNamedArrayAtLeastNumberOfElements(functionName, value, name, minNumberOfElements) {\n    if (!(value instanceof Array) || value.length < minNumberOfElements) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + name + \" argument to be an \" +\n            'array with at least ' +\n            (formatPlural(minNumberOfElements, 'element') + \".\"));\n    }\n}\n/**\n * Validates the provided positional argument has the native JavaScript type\n * using typeof checks.\n */\nfunction validateArgType(functionName, type, position, argument) {\n    validateType(functionName, type, ordinal(position) + \" argument\", argument);\n}\n/**\n * Validates the provided argument has the native JavaScript type using\n * typeof checks or is undefined.\n */\nfunction validateOptionalArgType(functionName, type, position, argument) {\n    if (argument !== undefined) {\n        validateArgType(functionName, type, position, argument);\n    }\n}\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks.\n */\nfunction validateNamedType(functionName, type, optionName, argument) {\n    validateType(functionName, type, optionName + \" option\", argument);\n}\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks or is undefined.\n */\nfunction validateNamedOptionalType(functionName, type, optionName, argument) {\n    if (argument !== undefined) {\n        validateNamedType(functionName, type, optionName, argument);\n    }\n}\n/** Helper to validate the type of a provided input. */\nfunction validateType(functionName, type, inputName, input) {\n    if (typeof input !== type || (type === 'object' && !isPlainObject(input))) {\n        var description = valueDescription(input);\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + inputName + \" \" +\n            (\"to be of type \" + type + \", but it was: \" + description));\n    }\n}\n/**\n * Returns true iff it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\nfunction isPlainObject(input) {\n    return (typeof input === 'object' &&\n        input !== null &&\n        Object.getPrototypeOf(input) === Object.prototype);\n}\n/** Returns a string describing the type / value of the provided input. */\nfunction valueDescription(input) {\n    if (input === undefined) {\n        return 'undefined';\n    }\n    else if (input === null) {\n        return 'null';\n    }\n    else if (typeof input === 'string') {\n        if (input.length > 20) {\n            input = input.substring(0, 20) + \"...\";\n        }\n        return JSON.stringify(input);\n    }\n    else if (typeof input === 'number' || typeof input === 'boolean') {\n        return '' + input;\n    }\n    else if (typeof input === 'object') {\n        if (input instanceof Array) {\n            return 'an array';\n        }\n        else {\n            var customObjectName = tryGetCustomObjectType(input);\n            if (customObjectName) {\n                return \"a custom \" + customObjectName + \" object\";\n            }\n            else {\n                return 'an object';\n            }\n        }\n    }\n    else if (typeof input === 'function') {\n        return 'a function';\n    }\n    else {\n        return fail('Unknown wrong type: ' + typeof input);\n    }\n}\n/** Hacky method to try to get the constructor name for an object. */\nfunction tryGetCustomObjectType(input) {\n    if (input.constructor) {\n        var funcNameRegex = /function\\s+([^\\s(]+)\\s*\\(/;\n        var results = funcNameRegex.exec(input.constructor.toString());\n        if (results && results.length > 1) {\n            return results[1];\n        }\n    }\n    return null;\n}\n/** Validates the provided argument is defined. */\nfunction validateDefined(functionName, position, argument) {\n    if (argument === undefined) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires a valid \" + ordinal(position) + \" \" +\n            \"argument, but it was undefined.\");\n    }\n}\n/**\n * Validates the provided positional argument is an object, and its keys and\n * values match the expected keys and types provided in optionTypes.\n */\nfunction validateOptionNames(functionName, options, optionNames) {\n    forEach(options, function (key, _) {\n        if (optionNames.indexOf(key) < 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Unknown option '\" + key + \"' passed to function \" + functionName + \"(). \" +\n                'Available options: ' +\n                optionNames.join(', '));\n        }\n    });\n}\n/**\n * Helper method to throw an error that the provided argument did not pass\n * an instanceof check.\n */\nfunction invalidClassError(functionName, type, position, argument) {\n    var description = valueDescription(argument);\n    return new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + ordinal(position) + \" \" +\n        (\"argument to be a \" + type + \", but it was: \" + description));\n}\n/** Converts a number to its english word representation */\nfunction ordinal(num) {\n    switch (num) {\n        case 1:\n            return 'first';\n        case 2:\n            return 'second';\n        case 3:\n            return 'third';\n        default:\n            return num + 'th';\n    }\n}\n/**\n * Formats the given word as plural conditionally given the preceding number.\n */\nfunction formatPlural(num, str) {\n    return num + \" \" + str + (num === 1 ? '' : 's');\n}\n\n//# sourceMappingURL=input_validation.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/misc.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// tslint:disable-next-line:class-as-namespace\nvar misc_AutoId = /** @class */ (function () {\n    function AutoId() {\n    }\n    AutoId.newId = function () {\n        // Alphanumeric characters\n        var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var autoId = '';\n        for (var i = 0; i < 20; i++) {\n            autoId += chars.charAt(Math.floor(Math.random() * chars.length));\n        }\n        assert(autoId.length === 20, 'Invalid auto ID: ' + autoId);\n        return autoId;\n    };\n    return AutoId;\n}());\n\nfunction primitiveComparator(left, right) {\n    if (left < right)\n        return -1;\n    if (left > right)\n        return 1;\n    return 0;\n}\n/** Helper to compare nullable (or undefined-able) objects using equals(). */\nfunction equals(left, right) {\n    if (left !== null && left !== undefined) {\n        return !!(right && left.equals(right));\n    }\n    else {\n        // HACK: Explicitly cast since TypeScript's type narrowing apparently isn't\n        // smart enough.\n        return left === right;\n    }\n}\n/** Helper to compare arrays using equals(). */\nfunction arrayEquals(left, right) {\n    if (left.length !== right.length) {\n        return false;\n    }\n    for (var i = 0; i < left.length; i++) {\n        if (!left[i].equals(right[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Returns the largest lexicographically smaller string of equal or smaller\n * length. Returns an empty string if there is no such predecessor (if the input\n * is empty).\n *\n * Strings returned from this method can be invalid UTF-16 but this is sufficent\n * in use for indexeddb because that depends on lexicographical ordering but\n * shouldn't be used elsewhere.\n */\nfunction immediatePredecessor(s) {\n    // We can decrement the last character in the string and be done\n    // unless that character is 0 (0x0000), in which case we have to erase the\n    // last character.\n    var lastIndex = s.length - 1;\n    if (s.length === 0) {\n        // Special case the empty string.\n        return '';\n    }\n    else if (s.charAt(lastIndex) === '\\0') {\n        return s.substring(0, lastIndex);\n    }\n    else {\n        return (s.substring(0, lastIndex) +\n            String.fromCharCode(s.charCodeAt(lastIndex) - 1));\n    }\n}\n/**\n * Returns the immediate lexicographically-following string. This is useful to\n * construct an inclusive range for indexeddb iterators.\n */\nfunction immediateSuccessor(s) {\n    // Return the input string, with an additional NUL byte appended.\n    return s + '\\0';\n}\n\n//# sourceMappingURL=misc.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/blob.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/** Helper function to assert Uint8Array is available at runtime. */\nfunction assertUint8ArrayAvailable() {\n    if (typeof Uint8Array === 'undefined') {\n        throw new FirestoreError(Code.UNIMPLEMENTED, 'Uint8Arrays are not available in this environment.');\n    }\n}\n/** Helper function to assert Base64 functions are available at runtime. */\nfunction assertBase64Available() {\n    if (!platform_PlatformSupport.getPlatform().base64Available) {\n        throw new FirestoreError(Code.UNIMPLEMENTED, 'Blobs are unavailable in Firestore in this environment.');\n    }\n}\n/**\n * Immutable class holding a blob (binary data).\n * This class is directly exposed in the public API.\n *\n * Note that while you can't hide the constructor in JavaScript code, we are\n * using the hack above to make sure no-one outside this module can call it.\n */\nvar blob_Blob = /** @class */ (function () {\n    function Blob(binaryString) {\n        assertBase64Available();\n        this._binaryString = binaryString;\n    }\n    Blob.fromBase64String = function (base64) {\n        validateExactNumberOfArgs('Blob.fromBase64String', arguments, 1);\n        validateArgType('Blob.fromBase64String', 'string', 1, base64);\n        assertBase64Available();\n        try {\n            var binaryString = platform_PlatformSupport.getPlatform().atob(base64);\n            return new Blob(binaryString);\n        }\n        catch (e) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Failed to construct Blob from Base64 string: ' + e);\n        }\n    };\n    Blob.fromUint8Array = function (array) {\n        validateExactNumberOfArgs('Blob.fromUint8Array', arguments, 1);\n        assertUint8ArrayAvailable();\n        if (!(array instanceof Uint8Array)) {\n            throw invalidClassError('Blob.fromUint8Array', 'Uint8Array', 1, array);\n        }\n        // We can't call array.map directly because it expects the return type to\n        // be a Uint8Array, whereas we can convert it to a regular array by invoking\n        // map on the Array prototype.\n        var binaryString = Array.prototype.map\n            .call(array, function (char) {\n            return String.fromCharCode(char);\n        })\n            .join('');\n        return new Blob(binaryString);\n    };\n    Blob.prototype.toBase64 = function () {\n        validateExactNumberOfArgs('Blob.toBase64', arguments, 0);\n        assertBase64Available();\n        return platform_PlatformSupport.getPlatform().btoa(this._binaryString);\n    };\n    Blob.prototype.toUint8Array = function () {\n        validateExactNumberOfArgs('Blob.toUint8Array', arguments, 0);\n        assertUint8ArrayAvailable();\n        var buffer = new Uint8Array(this._binaryString.length);\n        for (var i = 0; i < this._binaryString.length; i++) {\n            buffer[i] = this._binaryString.charCodeAt(i);\n        }\n        return buffer;\n    };\n    Blob.prototype.toString = function () {\n        return 'Blob(base64: ' + this.toBase64() + ')';\n    };\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    Blob.prototype._equals = function (other) {\n        return this._binaryString === other._binaryString;\n    };\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    Blob.prototype._compareTo = function (other) {\n        return primitiveComparator(this._binaryString, other._binaryString);\n    };\n    return Blob;\n}());\n\n// Public instance that disallows construction at runtime. This constructor is\n// used when exporting Blob on firebase.firestore.Blob and will be called Blob\n// publicly. Internally we still use Blob which has a type checked private\n// constructor. Note that Blob and PublicBlob can be used interchangeably in\n// instanceof checks.\n// For our internal TypeScript code PublicBlob doesn't exist as a type, and so\n// we need to use Blob as type and export it too.\n// tslint:disable-next-line:variable-name We're treating this as a class name.\nvar PublicBlob = makeConstructorPrivate(blob_Blob, 'Use Blob.fromUint8Array() or Blob.fromBase64String() instead.');\n\n//# sourceMappingURL=blob.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/geo_point.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * Immutable class representing a geo point as latitude-longitude pair.\n * This class is directly exposed in the public API, including its constructor.\n */\nvar geo_point_GeoPoint = /** @class */ (function () {\n    function GeoPoint(latitude, longitude) {\n        validateExactNumberOfArgs('GeoPoint', arguments, 2);\n        validateArgType('GeoPoint', 'number', 1, latitude);\n        validateArgType('GeoPoint', 'number', 2, longitude);\n        if (!isFinite(latitude) || latitude < -90 || latitude > 90) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Latitude must be a number between -90 and 90, but was: ' + latitude);\n        }\n        if (!isFinite(longitude) || longitude < -180 || longitude > 180) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Longitude must be a number between -180 and 180, but was: ' + longitude);\n        }\n        this._lat = latitude;\n        this._long = longitude;\n    }\n    Object.defineProperty(GeoPoint.prototype, \"latitude\", {\n        /**\n         * Returns the latitude of this geo point, a number between -90 and 90.\n         */\n        get: function () {\n            return this._lat;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GeoPoint.prototype, \"longitude\", {\n        /**\n         * Returns the longitude of this geo point, a number between -180 and 180.\n         */\n        get: function () {\n            return this._long;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    GeoPoint.prototype._equals = function (other) {\n        return this._lat === other._lat && this._long === other._long;\n    };\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    GeoPoint.prototype._compareTo = function (other) {\n        return (primitiveComparator(this._lat, other._lat) ||\n            primitiveComparator(this._long, other._long));\n    };\n    return GeoPoint;\n}());\n\n\n//# sourceMappingURL=geo_point.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/database_info.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar DatabaseInfo = /** @class */ (function () {\n    /**\n     * Constructs a DatabaseInfo using the provided host, databaseId and\n     * persistenceKey.\n     *\n     * @param databaseId The database to use.\n     * @param persistenceKey A unique identifier for this Firestore's local\n     * storage (used in conjunction with the databaseId).\n     * @param host The Firestore backend host to connect to.\n     * @param ssl Whether to use SSL when connecting.\n     */\n    function DatabaseInfo(databaseId, persistenceKey, host, ssl) {\n        this.databaseId = databaseId;\n        this.persistenceKey = persistenceKey;\n        this.host = host;\n        this.ssl = ssl;\n    }\n    return DatabaseInfo;\n}());\n\n/** The default database name for a project. */\nvar DEFAULT_DATABASE_NAME = '(default)';\n/** Represents the database ID a Firestore client is associated with. */\nvar database_info_DatabaseId = /** @class */ (function () {\n    function DatabaseId(projectId, database) {\n        this.projectId = projectId;\n        this.database = database ? database : DEFAULT_DATABASE_NAME;\n    }\n    Object.defineProperty(DatabaseId.prototype, \"isDefaultDatabase\", {\n        get: function () {\n            return this.database === DEFAULT_DATABASE_NAME;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DatabaseId.prototype.equals = function (other) {\n        return (other instanceof DatabaseId &&\n            other.projectId === this.projectId &&\n            other.database === this.database);\n    };\n    DatabaseId.prototype.compareTo = function (other) {\n        return (primitiveComparator(this.projectId, other.projectId) ||\n            primitiveComparator(this.database, other.database));\n    };\n    return DatabaseId;\n}());\n\n\n//# sourceMappingURL=database_info.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/path.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar path___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\nvar DOCUMENT_KEY_NAME = '__name__';\n/**\n * Path represents an ordered sequence of string segments.\n */\nvar path_Path = /** @class */ (function () {\n    function Path(segments, offset, length) {\n        this.init(segments, offset, length);\n    }\n    /**\n     * An initialization method that can be called from outside the constructor.\n     * We need this so that we can have a non-static construct method that returns\n     * the polymorphic `this` type.\n     */\n    Path.prototype.init = function (segments, offset, length) {\n        if (offset === undefined) {\n            offset = 0;\n        }\n        else if (offset > segments.length) {\n            fail('offset ' + offset + ' out of range ' + segments.length);\n        }\n        if (length === undefined) {\n            length = segments.length - offset;\n        }\n        else if (length > segments.length - offset) {\n            fail('length ' + length + ' out of range ' + (segments.length - offset));\n        }\n        this.segments = segments;\n        this.offset = offset;\n        this.len = length;\n    };\n    /**\n     * Constructs a new instance of Path using the same concrete type as `this`.\n     * We need this instead of using the normal constructor, because polymorphic\n     * `this` doesn't work on static methods.\n     */\n    Path.prototype.construct = function (segments, offset, length) {\n        var path = Object.create(Object.getPrototypeOf(this));\n        path.init(segments, offset, length);\n        return path;\n    };\n    Object.defineProperty(Path.prototype, \"length\", {\n        get: function () {\n            return this.len;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Path.prototype.equals = function (other) {\n        return Path.comparator(this, other) === 0;\n    };\n    Path.prototype.child = function (nameOrPath) {\n        var segments = this.segments.slice(this.offset, this.limit());\n        if (nameOrPath instanceof Path) {\n            nameOrPath.forEach(function (segment) {\n                segments.push(segment);\n            });\n        }\n        else if (typeof nameOrPath === 'string') {\n            segments.push(nameOrPath);\n        }\n        else {\n            fail('Unknown parameter type for Path.child(): ' + nameOrPath);\n        }\n        return this.construct(segments);\n    };\n    /** The index of one past the last segment of the path. */\n    Path.prototype.limit = function () {\n        return this.offset + this.length;\n    };\n    Path.prototype.popFirst = function (size) {\n        size = size === undefined ? 1 : size;\n        assert(this.length >= size, \"Can't call popFirst() with less segments\");\n        return this.construct(this.segments, this.offset + size, this.length - size);\n    };\n    Path.prototype.popLast = function () {\n        assert(!this.isEmpty(), \"Can't call popLast() on empty path\");\n        return this.construct(this.segments, this.offset, this.length - 1);\n    };\n    Path.prototype.firstSegment = function () {\n        assert(!this.isEmpty(), \"Can't call firstSegment() on empty path\");\n        return this.segments[this.offset];\n    };\n    Path.prototype.lastSegment = function () {\n        assert(!this.isEmpty(), \"Can't call lastSegment() on empty path\");\n        return this.segments[this.limit() - 1];\n    };\n    Path.prototype.get = function (index) {\n        assert(index < this.length, 'Index out of range');\n        return this.segments[this.offset + index];\n    };\n    Path.prototype.isEmpty = function () {\n        return this.length === 0;\n    };\n    Path.prototype.isPrefixOf = function (other) {\n        if (other.length < this.length) {\n            return false;\n        }\n        for (var i = 0; i < this.length; i++) {\n            if (this.get(i) !== other.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    Path.prototype.forEach = function (fn) {\n        for (var i = this.offset, end = this.limit(); i < end; i++) {\n            fn(this.segments[i]);\n        }\n    };\n    Path.prototype.toArray = function () {\n        return this.segments.slice(this.offset, this.limit());\n    };\n    Path.comparator = function (p1, p2) {\n        var len = Math.min(p1.length, p2.length);\n        for (var i = 0; i < len; i++) {\n            var left = p1.get(i);\n            var right = p2.get(i);\n            if (left < right)\n                return -1;\n            if (left > right)\n                return 1;\n        }\n        if (p1.length < p2.length)\n            return -1;\n        if (p1.length > p2.length)\n            return 1;\n        return 0;\n    };\n    return Path;\n}());\n\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n */\nvar path_ResourcePath = /** @class */ (function (_super) {\n    path___extends(ResourcePath, _super);\n    function ResourcePath() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ResourcePath.prototype.canonicalString = function () {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        return this.toArray().join('/');\n    };\n    ResourcePath.prototype.toString = function () {\n        return this.canonicalString();\n    };\n    /**\n     * Creates a resource path from the given slash-delimited string.\n     */\n    ResourcePath.fromString = function (path) {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        if (path.indexOf('//') >= 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid path (\" + path + \"). Paths must not contain // in them.\");\n        }\n        // We may still have an empty segment at the beginning or end if they had a\n        // leading or trailing slash (which we allow).\n        var segments = path.split('/').filter(function (segment) { return segment.length > 0; });\n        return new ResourcePath(segments);\n    };\n    ResourcePath.EMPTY_PATH = new ResourcePath([]);\n    return ResourcePath;\n}(path_Path));\n\nvar identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/** A dot-separated path for navigating sub-objects within a document. */\nvar path_FieldPath = /** @class */ (function (_super) {\n    path___extends(FieldPath, _super);\n    function FieldPath() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Returns true if the string could be used as a segment in a field path\n     * without escaping.\n     */\n    FieldPath.isValidIdentifier = function (segment) {\n        return identifierRegExp.test(segment);\n    };\n    FieldPath.prototype.canonicalString = function () {\n        return this.toArray()\n            .map(function (str) {\n            str = str.replace('\\\\', '\\\\\\\\').replace('`', '\\\\`');\n            if (!FieldPath.isValidIdentifier(str)) {\n                str = '`' + str + '`';\n            }\n            return str;\n        })\n            .join('.');\n    };\n    FieldPath.prototype.toString = function () {\n        return this.canonicalString();\n    };\n    /**\n     * Returns true if this field references the key of a document.\n     */\n    FieldPath.prototype.isKeyField = function () {\n        return this.length === 1 && this.get(0) === DOCUMENT_KEY_NAME;\n    };\n    /**\n     * The field designating the key of a document.\n     */\n    FieldPath.keyField = function () {\n        return new FieldPath([DOCUMENT_KEY_NAME]);\n    };\n    /**\n     * Parses a field string from the given server-formatted string.\n     *\n     * - Splitting the empty string is not allowed (for now at least).\n     * - Empty segments within the string (e.g. if there are two consecutive\n     *   separators) are not allowed.\n     *\n     * TODO(b/37244157): we should make this more strict. Right now, it allows\n     * non-identifier path components, even if they aren't escaped.\n     */\n    FieldPath.fromServerFormat = function (path) {\n        var segments = [];\n        var current = '';\n        var i = 0;\n        var addCurrentSegment = function () {\n            if (current.length === 0) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not be empty, begin \" +\n                    \"with '.', end with '.', or contain '..'\");\n            }\n            segments.push(current);\n            current = '';\n        };\n        var inBackticks = false;\n        while (i < path.length) {\n            var c = path[i];\n            if (c === '\\\\') {\n                if (i + 1 === path.length) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has trailing escape character: ' + path);\n                }\n                var next = path[i + 1];\n                if (!(next === '\\\\' || next === '.' || next === '`')) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has invalid escape sequence: ' + path);\n                }\n                current += next;\n                i += 2;\n            }\n            else if (c === '`') {\n                inBackticks = !inBackticks;\n                i++;\n            }\n            else if (c === '.' && !inBackticks) {\n                addCurrentSegment();\n                i++;\n            }\n            else {\n                current += c;\n                i++;\n            }\n        }\n        addCurrentSegment();\n        if (inBackticks) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Unterminated ` in path: ' + path);\n        }\n        return new FieldPath(segments);\n    };\n    FieldPath.EMPTY_PATH = new FieldPath([]);\n    return FieldPath;\n}(path_Path));\n\n\n//# sourceMappingURL=path.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/document_key.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar document_key_DocumentKey = /** @class */ (function () {\n    function DocumentKey(path) {\n        this.path = path;\n        assert(DocumentKey.isDocumentKey(path), 'Invalid DocumentKey with an odd number of segments: ' +\n            path.toArray().join('/'));\n    }\n    DocumentKey.prototype.equals = function (other) {\n        return (other !== null && path_ResourcePath.comparator(this.path, other.path) === 0);\n    };\n    DocumentKey.prototype.toString = function () {\n        return this.path.toString();\n    };\n    DocumentKey.comparator = function (k1, k2) {\n        return path_ResourcePath.comparator(k1.path, k2.path);\n    };\n    DocumentKey.isDocumentKey = function (path) {\n        return path.length % 2 === 0;\n    };\n    /**\n     * Creates and returns a new document key with the given segments.\n     *\n     * @param path The segments of the path to the document\n     * @return A new instance of DocumentKey\n     */\n    DocumentKey.fromSegments = function (segments) {\n        return new DocumentKey(new path_ResourcePath(segments.slice()));\n    };\n    /**\n     * Creates and returns a new document key using '/' to split the string into\n     * segments.\n     *\n     * @param path The slash-separated path string to the document\n     * @return A new instance of DocumentKey\n     */\n    DocumentKey.fromPathString = function (path) {\n        return new DocumentKey(path_ResourcePath.fromString(path));\n    };\n    DocumentKey.EMPTY = new DocumentKey(new path_ResourcePath([]));\n    return DocumentKey;\n}());\n\n\n//# sourceMappingURL=document_key.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/document.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar document_Document = /** @class */ (function () {\n    function Document(key, version, data, options) {\n        this.key = key;\n        this.version = version;\n        this.data = data;\n        this.hasLocalMutations = options.hasLocalMutations;\n    }\n    Document.prototype.field = function (path) {\n        return this.data.field(path);\n    };\n    Document.prototype.fieldValue = function (path) {\n        var field = this.field(path);\n        return field ? field.value() : undefined;\n    };\n    Document.prototype.value = function () {\n        return this.data.value();\n    };\n    Document.prototype.equals = function (other) {\n        return (other instanceof Document &&\n            this.key.equals(other.key) &&\n            this.version.equals(other.version) &&\n            this.data.equals(other.data) &&\n            this.hasLocalMutations === other.hasLocalMutations);\n    };\n    Document.prototype.toString = function () {\n        return (\"Document(\" + this.key + \", \" + this.version + \", \" + this.data.toString() + \", \" +\n            (\"{hasLocalMutations: \" + this.hasLocalMutations + \"})\"));\n    };\n    Document.compareByKey = function (d1, d2) {\n        return document_key_DocumentKey.comparator(d1.key, d2.key);\n    };\n    Document.compareByField = function (field, d1, d2) {\n        var v1 = d1.field(field);\n        var v2 = d2.field(field);\n        if (v1 !== undefined && v2 !== undefined) {\n            return v1.compareTo(v2);\n        }\n        else {\n            return fail(\"Trying to compare documents on fields that don't exist\");\n        }\n    };\n    return Document;\n}());\n\n/**\n * A class representing a deleted document.\n * Version is set to 0 if we don't point to any specific time, otherwise it\n * denotes time we know it didn't exist at.\n */\nvar document_NoDocument = /** @class */ (function () {\n    function NoDocument(key, version) {\n        this.key = key;\n        this.version = version;\n    }\n    NoDocument.prototype.toString = function () {\n        return \"NoDocument(\" + this.key + \", \" + this.version + \")\";\n    };\n    NoDocument.prototype.equals = function (other) {\n        return (other && other.version.equals(this.version) && other.key.equals(this.key));\n    };\n    NoDocument.compareByKey = function (d1, d2) {\n        return document_key_DocumentKey.comparator(d1.key, d2.key);\n    };\n    return NoDocument;\n}());\n\n\n//# sourceMappingURL=document.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/sorted_map.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\nvar sorted_map_SortedMap = /** @class */ (function () {\n    function SortedMap(comparator, root) {\n        this.comparator = comparator;\n        this.root = root ? root : sorted_map_LLRBNode.EMPTY;\n    }\n    // Returns a copy of the map, with the specified key/value added or replaced.\n    SortedMap.prototype.insert = function (key, value) {\n        return new SortedMap(this.comparator, this.root\n            .insert(key, value, this.comparator)\n            .copy(null, null, sorted_map_LLRBNode.BLACK, null, null));\n    };\n    // Returns a copy of the map, with the specified key removed.\n    SortedMap.prototype.remove = function (key) {\n        return new SortedMap(this.comparator, this.root\n            .remove(key, this.comparator)\n            .copy(null, null, sorted_map_LLRBNode.BLACK, null, null));\n    };\n    // Returns the value of the node with the given key, or null.\n    SortedMap.prototype.get = function (key) {\n        var node = this.root;\n        while (!node.isEmpty()) {\n            var cmp = this.comparator(key, node.key);\n            if (cmp === 0) {\n                return node.value;\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                node = node.right;\n            }\n        }\n        return null;\n    };\n    // Returns the key of the item *before* the specified key, or null if key is\n    // the first item.\n    SortedMap.prototype.getPredecessorKey = function (key) {\n        var node = this.root;\n        var rightParent = null;\n        while (!node.isEmpty()) {\n            var cmp = this.comparator(key, node.key);\n            if (cmp === 0) {\n                if (!node.left.isEmpty()) {\n                    node = node.left;\n                    while (!node.right.isEmpty())\n                        node = node.right;\n                    return node.key;\n                }\n                else if (rightParent) {\n                    return rightParent.key;\n                }\n                else {\n                    return null; // first item.\n                }\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                rightParent = node;\n                node = node.right;\n            }\n        }\n        throw fail('Attempted to find predecessor key for a nonexistent key.' +\n            '  What gives?');\n    };\n    // Returns the index of the element in this sorted map, or -1 if it doesn't\n    // exist.\n    SortedMap.prototype.indexOf = function (key) {\n        // Number of nodes that were pruned when descending right\n        var prunedNodes = 0;\n        var node = this.root;\n        while (!node.isEmpty()) {\n            var cmp = this.comparator(key, node.key);\n            if (cmp === 0) {\n                return prunedNodes + node.left.size;\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else {\n                // Count all nodes left of the node plus the node itself\n                prunedNodes += node.left.size + 1;\n                node = node.right;\n            }\n        }\n        // Node not found\n        return -1;\n    };\n    SortedMap.prototype.isEmpty = function () {\n        return this.root.isEmpty();\n    };\n    Object.defineProperty(SortedMap.prototype, \"size\", {\n        // Returns the total number of nodes in the map.\n        get: function () {\n            return this.root.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Returns the minimum key in the map.\n    SortedMap.prototype.minKey = function () {\n        return this.root.minKey();\n    };\n    // Returns the maximum key in the map.\n    SortedMap.prototype.maxKey = function () {\n        return this.root.maxKey();\n    };\n    // Traverses the map in key order and calls the specified action function\n    // for each key/value pair. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    SortedMap.prototype.inorderTraversal = function (action) {\n        return this.root.inorderTraversal(action);\n    };\n    SortedMap.prototype.forEach = function (fn) {\n        this.inorderTraversal(function (k, v) {\n            fn(k, v);\n            return false;\n        });\n    };\n    // Traverses the map in reverse key order and calls the specified action\n    // function for each key/value pair. If action returns true, traversal is\n    // aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    SortedMap.prototype.reverseTraversal = function (action) {\n        return this.root.reverseTraversal(action);\n    };\n    SortedMap.prototype.getIterator = function (resultGenerator) {\n        return new sorted_map_SortedMapIterator(this.root, null, this.comparator, false, resultGenerator);\n    };\n    SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {\n        return new sorted_map_SortedMapIterator(this.root, key, this.comparator, false, resultGenerator);\n    };\n    SortedMap.prototype.getReverseIterator = function (resultGenerator) {\n        return new sorted_map_SortedMapIterator(this.root, null, this.comparator, true, resultGenerator);\n    };\n    SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {\n        return new sorted_map_SortedMapIterator(this.root, key, this.comparator, true, resultGenerator);\n    };\n    return SortedMap;\n}()); // end SortedMap\n\n// An iterator over an LLRBNode.\nvar sorted_map_SortedMapIterator = /** @class */ (function () {\n    function SortedMapIterator(node, startKey, comparator, isReverse, resultGenerator) {\n        this.resultGenerator = resultGenerator || null;\n        this.isReverse = isReverse;\n        this.nodeStack = [];\n        var cmp = 1;\n        while (!node.isEmpty()) {\n            cmp = startKey ? comparator(node.key, startKey) : 1;\n            // flip the comparison if we're going in reverse\n            if (isReverse)\n                cmp *= -1;\n            if (cmp < 0) {\n                // This node is less than our start key. ignore it\n                if (this.isReverse) {\n                    node = node.left;\n                }\n                else {\n                    node = node.right;\n                }\n            }\n            else if (cmp === 0) {\n                // This node is exactly equal to our start key. Push it on the stack,\n                // but stop iterating;\n                this.nodeStack.push(node);\n                break;\n            }\n            else {\n                // This node is greater than our start key, add it to the stack and move\n                // to the next one\n                this.nodeStack.push(node);\n                if (this.isReverse) {\n                    node = node.right;\n                }\n                else {\n                    node = node.left;\n                }\n            }\n        }\n    }\n    SortedMapIterator.prototype.getNext = function () {\n        assert(this.nodeStack.length > 0, 'getNext() called on iterator when hasNext() is false.');\n        var node = this.nodeStack.pop();\n        var result;\n        if (this.resultGenerator)\n            result = this.resultGenerator(node.key, node.value);\n        else\n            result = { key: node.key, value: node.value };\n        if (this.isReverse) {\n            node = node.left;\n            while (!node.isEmpty()) {\n                this.nodeStack.push(node);\n                node = node.right;\n            }\n        }\n        else {\n            node = node.right;\n            while (!node.isEmpty()) {\n                this.nodeStack.push(node);\n                node = node.left;\n            }\n        }\n        return result;\n    };\n    SortedMapIterator.prototype.hasNext = function () {\n        return this.nodeStack.length > 0;\n    };\n    SortedMapIterator.prototype.peek = function () {\n        if (this.nodeStack.length === 0)\n            return null;\n        var node = this.nodeStack[this.nodeStack.length - 1];\n        if (this.resultGenerator) {\n            return this.resultGenerator(node.key, node.value);\n        }\n        else {\n            return { key: node.key, value: node.value };\n        }\n    };\n    return SortedMapIterator;\n}()); // end SortedMapIterator\n\n// Represents a node in a Left-leaning Red-Black tree.\nvar sorted_map_LLRBNode = /** @class */ (function () {\n    function LLRBNode(key, value, color, left, right) {\n        this.key = key;\n        this.value = value;\n        this.color = color != null ? color : LLRBNode.RED;\n        this.left = left != null ? left : LLRBNode.EMPTY;\n        this.right = right != null ? right : LLRBNode.EMPTY;\n        this.size = this.left.size + 1 + this.right.size;\n    }\n    // Returns a copy of the current node, optionally replacing pieces of it.\n    LLRBNode.prototype.copy = function (key, value, color, left, right) {\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n    };\n    LLRBNode.prototype.isEmpty = function () {\n        return false;\n    };\n    // Traverses the tree in key order and calls the specified action function\n    // for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    LLRBNode.prototype.inorderTraversal = function (action) {\n        return (this.left.inorderTraversal(action) ||\n            action(this.key, this.value) ||\n            this.right.inorderTraversal(action));\n    };\n    // Traverses the tree in reverse key order and calls the specified action\n    // function for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    LLRBNode.prototype.reverseTraversal = function (action) {\n        return (this.right.reverseTraversal(action) ||\n            action(this.key, this.value) ||\n            this.left.reverseTraversal(action));\n    };\n    // Returns the minimum node in the tree.\n    LLRBNode.prototype.min = function () {\n        if (this.left.isEmpty()) {\n            return this;\n        }\n        else {\n            return this.left.min();\n        }\n    };\n    // Returns the maximum key in the tree.\n    LLRBNode.prototype.minKey = function () {\n        return this.min().key;\n    };\n    // Returns the maximum key in the tree.\n    LLRBNode.prototype.maxKey = function () {\n        if (this.right.isEmpty()) {\n            return this.key;\n        }\n        else {\n            return this.right.maxKey();\n        }\n    };\n    // Returns new tree, with the key/value added.\n    LLRBNode.prototype.insert = function (key, value, comparator) {\n        var n = this;\n        var cmp = comparator(key, n.key);\n        if (cmp < 0) {\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n        }\n        else if (cmp === 0) {\n            n = n.copy(null, value, null, null, null);\n        }\n        else {\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n        }\n        return n.fixUp();\n    };\n    LLRBNode.prototype.removeMin = function () {\n        if (this.left.isEmpty()) {\n            return LLRBNode.EMPTY;\n        }\n        var n = this;\n        if (!n.left.isRed() && !n.left.left.isRed())\n            n = n.moveRedLeft();\n        n = n.copy(null, null, null, n.left.removeMin(), null);\n        return n.fixUp();\n    };\n    // Returns new tree, with the specified item removed.\n    LLRBNode.prototype.remove = function (key, comparator) {\n        var smallest;\n        var n = this;\n        if (comparator(key, n.key) < 0) {\n            if (!n.left.isEmpty() && !n.left.isRed() && !n.left.left.isRed()) {\n                n = n.moveRedLeft();\n            }\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n        }\n        else {\n            if (n.left.isRed())\n                n = n.rotateRight();\n            if (!n.right.isEmpty() && !n.right.isRed() && !n.right.left.isRed()) {\n                n = n.moveRedRight();\n            }\n            if (comparator(key, n.key) === 0) {\n                if (n.right.isEmpty()) {\n                    return LLRBNode.EMPTY;\n                }\n                else {\n                    smallest = n.right.min();\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin());\n                }\n            }\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n        }\n        return n.fixUp();\n    };\n    LLRBNode.prototype.isRed = function () {\n        return this.color;\n    };\n    // Returns new tree after performing any needed rotations.\n    LLRBNode.prototype.fixUp = function () {\n        var n = this;\n        if (n.right.isRed() && !n.left.isRed())\n            n = n.rotateLeft();\n        if (n.left.isRed() && n.left.left.isRed())\n            n = n.rotateRight();\n        if (n.left.isRed() && n.right.isRed())\n            n = n.colorFlip();\n        return n;\n    };\n    LLRBNode.prototype.moveRedLeft = function () {\n        var n = this.colorFlip();\n        if (n.right.left.isRed()) {\n            n = n.copy(null, null, null, null, n.right.rotateRight());\n            n = n.rotateLeft();\n            n = n.colorFlip();\n        }\n        return n;\n    };\n    LLRBNode.prototype.moveRedRight = function () {\n        var n = this.colorFlip();\n        if (n.left.left.isRed()) {\n            n = n.rotateRight();\n            n = n.colorFlip();\n        }\n        return n;\n    };\n    LLRBNode.prototype.rotateLeft = function () {\n        var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n        return this.right.copy(null, null, this.color, nl, null);\n    };\n    LLRBNode.prototype.rotateRight = function () {\n        var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n        return this.left.copy(null, null, this.color, null, nr);\n    };\n    LLRBNode.prototype.colorFlip = function () {\n        var left = this.left.copy(null, null, !this.left.color, null, null);\n        var right = this.right.copy(null, null, !this.right.color, null, null);\n        return this.copy(null, null, !this.color, left, right);\n    };\n    // For testing.\n    LLRBNode.prototype.checkMaxDepth = function () {\n        var blackDepth = this.check();\n        if (Math.pow(2.0, blackDepth) <= this.size + 1) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    // In a balanced RB tree, the black-depth (number of black nodes) from root to\n    // leaves is equal on both sides.  This function verifies that or asserts.\n    LLRBNode.prototype.check = function () {\n        if (this.isRed() && this.left.isRed()) {\n            throw fail('Red node has red child(' + this.key + ',' + this.value + ')');\n        }\n        if (this.right.isRed()) {\n            throw fail('Right child of (' + this.key + ',' + this.value + ') is red');\n        }\n        var blackDepth = this.left.check();\n        if (blackDepth !== this.right.check()) {\n            throw fail('Black depths differ');\n        }\n        else {\n            return blackDepth + (this.isRed() ? 0 : 1);\n        }\n    };\n    LLRBNode.EMPTY = null;\n    LLRBNode.RED = true;\n    LLRBNode.BLACK = false;\n    return LLRBNode;\n}()); // end LLRBNode\n\n// Represents an empty node (a leaf node in the Red-Black Tree).\nvar LLRBEmptyNode = /** @class */ (function () {\n    function LLRBEmptyNode() {\n        this.size = 0;\n    }\n    // Returns a copy of the current node.\n    LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\n        return this;\n    };\n    // Returns a copy of the tree, with the specified key/value added.\n    LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\n        return new sorted_map_LLRBNode(key, value);\n    };\n    // Returns a copy of the tree, with the specified key removed.\n    LLRBEmptyNode.prototype.remove = function (key, comparator) {\n        return this;\n    };\n    LLRBEmptyNode.prototype.isEmpty = function () {\n        return true;\n    };\n    LLRBEmptyNode.prototype.inorderTraversal = function (action) {\n        return false;\n    };\n    LLRBEmptyNode.prototype.reverseTraversal = function (action) {\n        return false;\n    };\n    LLRBEmptyNode.prototype.minKey = function () {\n        return null;\n    };\n    LLRBEmptyNode.prototype.maxKey = function () {\n        return null;\n    };\n    LLRBEmptyNode.prototype.isRed = function () {\n        return false;\n    };\n    // For testing.\n    LLRBEmptyNode.prototype.checkMaxDepth = function () {\n        return true;\n    };\n    LLRBEmptyNode.prototype.check = function () {\n        return 0;\n    };\n    return LLRBEmptyNode;\n}()); // end LLRBEmptyNode\n\nsorted_map_LLRBNode.EMPTY = new LLRBEmptyNode();\n\n//# sourceMappingURL=sorted_map.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/field_value.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar field_value___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\nvar TypeOrder;\n(function (TypeOrder) {\n    // This order is defined by the backend.\n    TypeOrder[TypeOrder[\"NullValue\"] = 0] = \"NullValue\";\n    TypeOrder[TypeOrder[\"BooleanValue\"] = 1] = \"BooleanValue\";\n    TypeOrder[TypeOrder[\"NumberValue\"] = 2] = \"NumberValue\";\n    TypeOrder[TypeOrder[\"TimestampValue\"] = 3] = \"TimestampValue\";\n    TypeOrder[TypeOrder[\"StringValue\"] = 4] = \"StringValue\";\n    TypeOrder[TypeOrder[\"BlobValue\"] = 5] = \"BlobValue\";\n    TypeOrder[TypeOrder[\"RefValue\"] = 6] = \"RefValue\";\n    TypeOrder[TypeOrder[\"GeoPointValue\"] = 7] = \"GeoPointValue\";\n    TypeOrder[TypeOrder[\"ArrayValue\"] = 8] = \"ArrayValue\";\n    TypeOrder[TypeOrder[\"ObjectValue\"] = 9] = \"ObjectValue\";\n})(TypeOrder = TypeOrder || (TypeOrder = {}));\n/**\n * A field value represents a datatype as stored by Firestore.\n */\nvar field_value_FieldValue = /** @class */ (function () {\n    function FieldValue() {\n    }\n    FieldValue.prototype.toString = function () {\n        var val = this.value();\n        return val === null ? 'null' : val.toString();\n    };\n    FieldValue.prototype.defaultCompareTo = function (other) {\n        assert(this.typeOrder !== other.typeOrder, 'Default compareTo should not be used for values of same type.');\n        var cmp = primitiveComparator(this.typeOrder, other.typeOrder);\n        return cmp;\n    };\n    return FieldValue;\n}());\n\nvar NullValue = /** @class */ (function (_super) {\n    field_value___extends(NullValue, _super);\n    function NullValue() {\n        var _this = _super.call(this) || this;\n        _this.typeOrder = TypeOrder.NullValue;\n        // internalValue is unused but we add it to work around\n        // https://github.com/Microsoft/TypeScript/issues/15585\n        _this.internalValue = null;\n        return _this;\n    }\n    NullValue.prototype.value = function () {\n        return null;\n    };\n    NullValue.prototype.equals = function (other) {\n        return other instanceof NullValue;\n    };\n    NullValue.prototype.compareTo = function (other) {\n        if (other instanceof NullValue) {\n            return 0;\n        }\n        return this.defaultCompareTo(other);\n    };\n    NullValue.INSTANCE = new NullValue();\n    return NullValue;\n}(field_value_FieldValue));\n\nvar field_value_BooleanValue = /** @class */ (function (_super) {\n    field_value___extends(BooleanValue, _super);\n    function BooleanValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.BooleanValue;\n        return _this;\n    }\n    BooleanValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    BooleanValue.prototype.equals = function (other) {\n        return (other instanceof BooleanValue &&\n            this.internalValue === other.internalValue);\n    };\n    BooleanValue.prototype.compareTo = function (other) {\n        if (other instanceof BooleanValue) {\n            return primitiveComparator(this, other);\n        }\n        return this.defaultCompareTo(other);\n    };\n    BooleanValue.of = function (value) {\n        return value ? BooleanValue.TRUE : BooleanValue.FALSE;\n    };\n    BooleanValue.TRUE = new BooleanValue(true);\n    BooleanValue.FALSE = new BooleanValue(false);\n    return BooleanValue;\n}(field_value_FieldValue));\n\n/** Base class for IntegerValue and DoubleValue. */\nvar NumberValue = /** @class */ (function (_super) {\n    field_value___extends(NumberValue, _super);\n    function NumberValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.NumberValue;\n        return _this;\n    }\n    NumberValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    NumberValue.prototype.compareTo = function (other) {\n        if (other instanceof NumberValue) {\n            return numericComparator(this.internalValue, other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return NumberValue;\n}(field_value_FieldValue));\n\n/** Utility function to compare doubles (using Firestore semantics for NaN). */\nfunction numericComparator(left, right) {\n    if (left < right) {\n        return -1;\n    }\n    else if (left > right) {\n        return 1;\n    }\n    else if (left === right) {\n        return 0;\n    }\n    else {\n        // one or both are NaN.\n        if (isNaN(left)) {\n            return isNaN(right) ? 0 : -1;\n        }\n        else {\n            return 1;\n        }\n    }\n}\n/**\n * Utility function to check numbers for equality using Firestore semantics\n * (NaN === NaN, -0.0 !== 0.0).\n */\nfunction numericEquals(left, right) {\n    // Implemented based on Object.is() polyfill from\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n    if (left === right) {\n        // +0 != -0\n        return left !== 0 || 1 / left === 1 / right;\n    }\n    else {\n        // NaN == NaN\n        return left !== left && right !== right;\n    }\n}\nvar IntegerValue = /** @class */ (function (_super) {\n    field_value___extends(IntegerValue, _super);\n    function IntegerValue(internalValue) {\n        return _super.call(this, internalValue) || this;\n    }\n    IntegerValue.prototype.equals = function (other) {\n        // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,\n        // but that doesn't make them equal via equals().\n        if (other instanceof IntegerValue) {\n            return numericEquals(this.internalValue, other.internalValue);\n        }\n        else {\n            return false;\n        }\n    };\n    return IntegerValue;\n}(NumberValue));\n\nvar DoubleValue = /** @class */ (function (_super) {\n    field_value___extends(DoubleValue, _super);\n    function DoubleValue(internalValue) {\n        var _this = _super.call(this, internalValue) || this;\n        _this.internalValue = internalValue;\n        return _this;\n    }\n    DoubleValue.prototype.equals = function (other) {\n        // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,\n        // but that doesn't make them equal via equals().\n        if (other instanceof DoubleValue) {\n            return numericEquals(this.internalValue, other.internalValue);\n        }\n        else {\n            return false;\n        }\n    };\n    DoubleValue.NAN = new DoubleValue(NaN);\n    DoubleValue.POSITIVE_INFINITY = new DoubleValue(Infinity);\n    DoubleValue.NEGATIVE_INFINITY = new DoubleValue(-Infinity);\n    return DoubleValue;\n}(NumberValue));\n\n// TODO(b/37267885): Add truncation support\nvar field_value_StringValue = /** @class */ (function (_super) {\n    field_value___extends(StringValue, _super);\n    function StringValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.StringValue;\n        return _this;\n    }\n    StringValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    StringValue.prototype.equals = function (other) {\n        return (other instanceof StringValue && this.internalValue === other.internalValue);\n    };\n    StringValue.prototype.compareTo = function (other) {\n        if (other instanceof StringValue) {\n            return primitiveComparator(this.internalValue, other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return StringValue;\n}(field_value_FieldValue));\n\nvar TimestampValue = /** @class */ (function (_super) {\n    field_value___extends(TimestampValue, _super);\n    function TimestampValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.TimestampValue;\n        return _this;\n    }\n    TimestampValue.prototype.value = function () {\n        return this.internalValue.toDate();\n    };\n    TimestampValue.prototype.equals = function (other) {\n        return (other instanceof TimestampValue &&\n            this.internalValue.equals(other.internalValue));\n    };\n    TimestampValue.prototype.compareTo = function (other) {\n        if (other instanceof TimestampValue) {\n            return this.internalValue.compareTo(other.internalValue);\n        }\n        else if (other instanceof ServerTimestampValue) {\n            // Concrete timestamps come before server timestamps.\n            return -1;\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    return TimestampValue;\n}(field_value_FieldValue));\n\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   TransformMutation (see TransformMutation.applyTo()). They can only exist in\n *   the local view of a document. Therefore they do not need to be parsed or\n *   serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they evaluate to null.\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */\nvar ServerTimestampValue = /** @class */ (function (_super) {\n    field_value___extends(ServerTimestampValue, _super);\n    function ServerTimestampValue(localWriteTime) {\n        var _this = _super.call(this) || this;\n        _this.localWriteTime = localWriteTime;\n        _this.typeOrder = TypeOrder.TimestampValue;\n        return _this;\n    }\n    ServerTimestampValue.prototype.value = function () {\n        return null;\n    };\n    ServerTimestampValue.prototype.equals = function (other) {\n        return (other instanceof ServerTimestampValue &&\n            this.localWriteTime.equals(other.localWriteTime));\n    };\n    ServerTimestampValue.prototype.compareTo = function (other) {\n        if (other instanceof ServerTimestampValue) {\n            return this.localWriteTime.compareTo(other.localWriteTime);\n        }\n        else if (other instanceof TimestampValue) {\n            // Server timestamps come after all concrete timestamps.\n            return 1;\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ServerTimestampValue.prototype.toString = function () {\n        return '<ServerTimestamp localTime=' + this.localWriteTime.toString() + '>';\n    };\n    return ServerTimestampValue;\n}(field_value_FieldValue));\n\nvar BlobValue = /** @class */ (function (_super) {\n    field_value___extends(BlobValue, _super);\n    function BlobValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.BlobValue;\n        return _this;\n    }\n    BlobValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    BlobValue.prototype.equals = function (other) {\n        return (other instanceof BlobValue &&\n            this.internalValue._equals(other.internalValue));\n    };\n    BlobValue.prototype.compareTo = function (other) {\n        if (other instanceof BlobValue) {\n            return this.internalValue._compareTo(other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return BlobValue;\n}(field_value_FieldValue));\n\nvar field_value_RefValue = /** @class */ (function (_super) {\n    field_value___extends(RefValue, _super);\n    function RefValue(databaseId, key) {\n        var _this = _super.call(this) || this;\n        _this.databaseId = databaseId;\n        _this.key = key;\n        _this.typeOrder = TypeOrder.RefValue;\n        return _this;\n    }\n    RefValue.prototype.value = function () {\n        return this.key;\n    };\n    RefValue.prototype.equals = function (other) {\n        if (other instanceof RefValue) {\n            return (this.key.equals(other.key) && this.databaseId.equals(other.databaseId));\n        }\n        else {\n            return false;\n        }\n    };\n    RefValue.prototype.compareTo = function (other) {\n        if (other instanceof RefValue) {\n            var cmp = this.databaseId.compareTo(other.databaseId);\n            return cmp !== 0 ? cmp : document_key_DocumentKey.comparator(this.key, other.key);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return RefValue;\n}(field_value_FieldValue));\n\nvar GeoPointValue = /** @class */ (function (_super) {\n    field_value___extends(GeoPointValue, _super);\n    function GeoPointValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.GeoPointValue;\n        return _this;\n    }\n    GeoPointValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    GeoPointValue.prototype.equals = function (other) {\n        return (other instanceof GeoPointValue &&\n            this.internalValue._equals(other.internalValue));\n    };\n    GeoPointValue.prototype.compareTo = function (other) {\n        if (other instanceof GeoPointValue) {\n            return this.internalValue._compareTo(other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return GeoPointValue;\n}(field_value_FieldValue));\n\nvar field_value_ObjectValue = /** @class */ (function (_super) {\n    field_value___extends(ObjectValue, _super);\n    function ObjectValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.ObjectValue;\n        return _this;\n    }\n    ObjectValue.prototype.value = function () {\n        var result = {};\n        this.internalValue.inorderTraversal(function (key, val) {\n            result[key] = val.value();\n        });\n        return result;\n    };\n    ObjectValue.prototype.forEach = function (action) {\n        this.internalValue.inorderTraversal(action);\n    };\n    ObjectValue.prototype.equals = function (other) {\n        if (other instanceof ObjectValue) {\n            var it1 = this.internalValue.getIterator();\n            var it2 = other.internalValue.getIterator();\n            while (it1.hasNext() && it2.hasNext()) {\n                var next1 = it1.getNext();\n                var next2 = it2.getNext();\n                if (next1.key !== next2.key || !next1.value.equals(next2.value)) {\n                    return false;\n                }\n            }\n            return !it1.hasNext() && !it2.hasNext();\n        }\n        return false;\n    };\n    ObjectValue.prototype.compareTo = function (other) {\n        if (other instanceof ObjectValue) {\n            var it1 = this.internalValue.getIterator();\n            var it2 = other.internalValue.getIterator();\n            while (it1.hasNext() && it2.hasNext()) {\n                var next1 = it1.getNext();\n                var next2 = it2.getNext();\n                var cmp = primitiveComparator(next1.key, next2.key) ||\n                    next1.value.compareTo(next2.value);\n                if (cmp) {\n                    return cmp;\n                }\n            }\n            // Only equal if both iterators are exhausted\n            return primitiveComparator(it1.hasNext(), it2.hasNext());\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ObjectValue.prototype.set = function (path, to) {\n        assert(!path.isEmpty(), 'Cannot set field for empty path on ObjectValue');\n        if (path.length === 1) {\n            return this.setChild(path.firstSegment(), to);\n        }\n        else {\n            var child = this.child(path.firstSegment());\n            if (!(child instanceof ObjectValue)) {\n                child = ObjectValue.EMPTY;\n            }\n            var newChild = child.set(path.popFirst(), to);\n            return this.setChild(path.firstSegment(), newChild);\n        }\n    };\n    ObjectValue.prototype.delete = function (path) {\n        assert(!path.isEmpty(), 'Cannot delete field for empty path on ObjectValue');\n        if (path.length === 1) {\n            return new ObjectValue(this.internalValue.remove(path.firstSegment()));\n        }\n        else {\n            // nested field\n            var child = this.child(path.firstSegment());\n            if (child instanceof ObjectValue) {\n                var newChild = child.delete(path.popFirst());\n                return new ObjectValue(this.internalValue.insert(path.firstSegment(), newChild));\n            }\n            else {\n                // Don't actually change a primitive value to an object for a delete\n                return this;\n            }\n        }\n    };\n    ObjectValue.prototype.contains = function (path) {\n        return this.field(path) !== undefined;\n    };\n    ObjectValue.prototype.field = function (path) {\n        assert(!path.isEmpty(), \"Can't get field of empty path\");\n        var field = this;\n        path.forEach(function (pathSegment) {\n            if (field instanceof ObjectValue) {\n                field = field.internalValue.get(pathSegment) || undefined;\n            }\n            else {\n                field = undefined;\n            }\n        });\n        return field;\n    };\n    ObjectValue.prototype.toString = function () {\n        return JSON.stringify(this.value());\n    };\n    ObjectValue.prototype.child = function (childName) {\n        return this.internalValue.get(childName) || undefined;\n    };\n    ObjectValue.prototype.setChild = function (childName, value) {\n        return new ObjectValue(this.internalValue.insert(childName, value));\n    };\n    ObjectValue.EMPTY = new ObjectValue(new sorted_map_SortedMap(primitiveComparator));\n    return ObjectValue;\n}(field_value_FieldValue));\n\nvar field_value_ArrayValue = /** @class */ (function (_super) {\n    field_value___extends(ArrayValue, _super);\n    function ArrayValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.ArrayValue;\n        return _this;\n    }\n    ArrayValue.prototype.value = function () {\n        return this.internalValue.map(function (v) { return v.value(); });\n    };\n    ArrayValue.prototype.forEach = function (action) {\n        this.internalValue.forEach(action);\n    };\n    ArrayValue.prototype.equals = function (other) {\n        if (other instanceof ArrayValue) {\n            if (this.internalValue.length !== other.internalValue.length) {\n                return false;\n            }\n            for (var i = 0; i < this.internalValue.length; i++) {\n                if (!this.internalValue[i].equals(other.internalValue[i])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    };\n    ArrayValue.prototype.compareTo = function (other) {\n        if (other instanceof ArrayValue) {\n            var minLength = Math.min(this.internalValue.length, other.internalValue.length);\n            for (var i = 0; i < minLength; i++) {\n                var cmp = this.internalValue[i].compareTo(other.internalValue[i]);\n                if (cmp) {\n                    return cmp;\n                }\n            }\n            return primitiveComparator(this.internalValue.length, other.internalValue.length);\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ArrayValue.prototype.toString = function () {\n        return JSON.stringify(this.value());\n    };\n    return ArrayValue;\n}(field_value_FieldValue));\n\n\n//# sourceMappingURL=field_value.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/types.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Untyped Number alias we can use to check for ES6 methods / properties.\n// tslint:disable-next-line:no-any variable-name\nvar NumberAsAny = Number;\n/**\n * Minimum safe integer in Javascript because of floating point precision.\n * Added to not rely on ES6 features.\n */\nvar MIN_SAFE_INTEGER = NumberAsAny.MIN_SAFE_INTEGER || -(Math.pow(2, 53) - 1);\n/**\n * Maximum safe integer in Javascript because of floating point precision.\n * Added to not rely on ES6 features.\n */\nvar MAX_SAFE_INTEGER = NumberAsAny.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n/**\n * Returns whether an number is an integer, uses native implementation if\n * available.\n * Added to not rely on ES6 features.\n * @param value The value to test for being an integer\n */\nvar isInteger = NumberAsAny.isInteger ||\n    (function (value) {\n        return typeof value === 'number' &&\n            isFinite(value) &&\n            Math.floor(value) === value;\n    });\n/**\n * Returns whether a variable is either undefined or null.\n */\nfunction isNullOrUndefined(value) {\n    return value === null || value === undefined;\n}\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value The value to test for being an integer and in the safe range\n */\nfunction isSafeInteger(value) {\n    return (isInteger(value) &&\n        value <= MAX_SAFE_INTEGER &&\n        value >= MIN_SAFE_INTEGER);\n}\n/**\n * Safely checks if the number is NaN.\n */\nfunction safeIsNaN(value) {\n    if (NumberAsAny.IsNaN) {\n        return NumberAsAny.IsNaN(value);\n    }\n    else {\n        return typeof value === 'number' && isNaN(value);\n    }\n}\n\n//# sourceMappingURL=types.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/query.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\nvar query_Query = /** @class */ (function () {\n    function Query(path, explicitOrderBy, filters, limit, startAt, endAt) {\n        if (explicitOrderBy === void 0) { explicitOrderBy = []; }\n        if (filters === void 0) { filters = []; }\n        if (limit === void 0) { limit = null; }\n        if (startAt === void 0) { startAt = null; }\n        if (endAt === void 0) { endAt = null; }\n        this.path = path;\n        this.explicitOrderBy = explicitOrderBy;\n        this.filters = filters;\n        this.limit = limit;\n        this.startAt = startAt;\n        this.endAt = endAt;\n        this.memoizedCanonicalId = null;\n        this.memoizedOrderBy = null;\n        if (this.startAt) {\n            this.assertValidBound(this.startAt);\n        }\n        if (this.endAt) {\n            this.assertValidBound(this.endAt);\n        }\n    }\n    Query.atPath = function (path) {\n        return new Query(path);\n    };\n    Object.defineProperty(Query.prototype, \"orderBy\", {\n        get: function () {\n            if (this.memoizedOrderBy === null) {\n                var inequalityField = this.getInequalityFilterField();\n                var firstOrderByField = this.getFirstOrderByField();\n                if (inequalityField !== null && firstOrderByField === null) {\n                    // In order to implicitly add key ordering, we must also add the\n                    // inequality filter field for it to be a valid query.\n                    // Note that the default inequality field and key ordering is ascending.\n                    if (inequalityField.isKeyField()) {\n                        this.memoizedOrderBy = [KEY_ORDERING_ASC];\n                    }\n                    else {\n                        this.memoizedOrderBy = [\n                            new query_OrderBy(inequalityField),\n                            KEY_ORDERING_ASC\n                        ];\n                    }\n                }\n                else {\n                    assert(inequalityField === null ||\n                        (firstOrderByField !== null &&\n                            inequalityField.equals(firstOrderByField)), 'First orderBy should match inequality field.');\n                    this.memoizedOrderBy = [];\n                    var foundKeyOrdering = false;\n                    for (var _i = 0, _a = this.explicitOrderBy; _i < _a.length; _i++) {\n                        var orderBy = _a[_i];\n                        this.memoizedOrderBy.push(orderBy);\n                        if (orderBy.field.isKeyField()) {\n                            foundKeyOrdering = true;\n                        }\n                    }\n                    if (!foundKeyOrdering) {\n                        // The order of the implicit key ordering always matches the last\n                        // explicit order by\n                        var lastDirection = this.explicitOrderBy.length > 0\n                            ? this.explicitOrderBy[this.explicitOrderBy.length - 1].dir\n                            : Direction.ASCENDING;\n                        this.memoizedOrderBy.push(lastDirection === Direction.ASCENDING\n                            ? KEY_ORDERING_ASC\n                            : KEY_ORDERING_DESC);\n                    }\n                }\n            }\n            return this.memoizedOrderBy;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Query.prototype.addFilter = function (filter) {\n        assert(this.getInequalityFilterField() == null ||\n            !(filter instanceof query_RelationFilter) ||\n            !filter.isInequality() ||\n            filter.field.equals(this.getInequalityFilterField()), 'Query must only have one inequality field.');\n        assert(!document_key_DocumentKey.isDocumentKey(this.path), 'No filtering allowed for document query');\n        var newFilters = this.filters.concat([filter]);\n        return new Query(this.path, this.explicitOrderBy.slice(), newFilters, this.limit, this.startAt, this.endAt);\n    };\n    Query.prototype.addOrderBy = function (orderBy) {\n        assert(!document_key_DocumentKey.isDocumentKey(this.path), 'No ordering allowed for document query');\n        assert(!this.startAt && !this.endAt, 'Bounds must be set after orderBy');\n        // TODO(dimond): validate that orderBy does not list the same key twice.\n        var newOrderBy = this.explicitOrderBy.concat([orderBy]);\n        return new Query(this.path, newOrderBy, this.filters.slice(), this.limit, this.startAt, this.endAt);\n    };\n    Query.prototype.withLimit = function (limit) {\n        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), limit, this.startAt, this.endAt);\n    };\n    Query.prototype.withStartAt = function (bound) {\n        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), this.limit, bound, this.endAt);\n    };\n    Query.prototype.withEndAt = function (bound) {\n        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), this.limit, this.startAt, bound);\n    };\n    // TODO(b/29183165): This is used to get a unique string from a query to, for\n    // example, use as a dictionary key, but the implementation is subject to\n    // collisions. Make it collision-free.\n    Query.prototype.canonicalId = function () {\n        if (this.memoizedCanonicalId === null) {\n            var canonicalId = this.path.canonicalString();\n            canonicalId += '|f:';\n            for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {\n                var filter = _a[_i];\n                canonicalId += filter.canonicalId();\n                canonicalId += ',';\n            }\n            canonicalId += '|ob:';\n            // TODO(dimond): make this collision resistant\n            for (var _b = 0, _c = this.orderBy; _b < _c.length; _b++) {\n                var orderBy = _c[_b];\n                canonicalId += orderBy.canonicalId();\n                canonicalId += ',';\n            }\n            if (!isNullOrUndefined(this.limit)) {\n                canonicalId += '|l:';\n                canonicalId += this.limit;\n            }\n            if (this.startAt) {\n                canonicalId += '|lb:';\n                canonicalId += this.startAt.canonicalId();\n            }\n            if (this.endAt) {\n                canonicalId += '|ub:';\n                canonicalId += this.endAt.canonicalId();\n            }\n            this.memoizedCanonicalId = canonicalId;\n        }\n        return this.memoizedCanonicalId;\n    };\n    Query.prototype.toString = function () {\n        var str = 'Query(' + this.path.canonicalString();\n        if (this.filters.length > 0) {\n            str += \", filters: [\" + this.filters.join(', ') + \"]\";\n        }\n        if (!isNullOrUndefined(this.limit)) {\n            str += ', limit: ' + this.limit;\n        }\n        if (this.explicitOrderBy.length > 0) {\n            str += \", orderBy: [\" + this.explicitOrderBy.join(', ') + \"]\";\n        }\n        if (this.startAt) {\n            str += ', startAt: ' + this.startAt.canonicalId();\n        }\n        if (this.endAt) {\n            str += ', endAt: ' + this.endAt.canonicalId();\n        }\n        return str + ')';\n    };\n    Query.prototype.equals = function (other) {\n        if (this.limit !== other.limit) {\n            return false;\n        }\n        if (this.orderBy.length !== other.orderBy.length) {\n            return false;\n        }\n        for (var i = 0; i < this.orderBy.length; i++) {\n            if (!this.orderBy[i].equals(other.orderBy[i])) {\n                return false;\n            }\n        }\n        if (this.filters.length !== other.filters.length) {\n            return false;\n        }\n        for (var i = 0; i < this.filters.length; i++) {\n            if (!this.filters[i].equals(other.filters[i])) {\n                return false;\n            }\n        }\n        if (!this.path.equals(other.path)) {\n            return false;\n        }\n        if (this.startAt !== null\n            ? !this.startAt.equals(other.startAt)\n            : other.startAt !== null) {\n            return false;\n        }\n        return this.endAt !== null\n            ? this.endAt.equals(other.endAt)\n            : other.endAt === null;\n    };\n    Query.prototype.docComparator = function (d1, d2) {\n        var comparedOnKeyField = false;\n        for (var _i = 0, _a = this.orderBy; _i < _a.length; _i++) {\n            var orderBy = _a[_i];\n            var comp = orderBy.compare(d1, d2);\n            if (comp !== 0)\n                return comp;\n            comparedOnKeyField = comparedOnKeyField || orderBy.field.isKeyField();\n        }\n        // Assert that we actually compared by key\n        assert(comparedOnKeyField, \"orderBy used that doesn't compare on key field\");\n        return 0;\n    };\n    Query.prototype.matches = function (doc) {\n        return (this.matchesAncestor(doc) &&\n            this.matchesOrderBy(doc) &&\n            this.matchesFilters(doc) &&\n            this.matchesBounds(doc));\n    };\n    Query.prototype.hasLimit = function () {\n        return !isNullOrUndefined(this.limit);\n    };\n    Query.prototype.getFirstOrderByField = function () {\n        return this.explicitOrderBy.length > 0\n            ? this.explicitOrderBy[0].field\n            : null;\n    };\n    Query.prototype.getInequalityFilterField = function () {\n        for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {\n            var filter = _a[_i];\n            if (filter instanceof query_RelationFilter && filter.isInequality()) {\n                return filter.field;\n            }\n        }\n        return null;\n    };\n    Query.prototype.isDocumentQuery = function () {\n        return document_key_DocumentKey.isDocumentKey(this.path) && this.filters.length === 0;\n    };\n    Query.prototype.matchesAncestor = function (doc) {\n        var docPath = doc.key.path;\n        if (document_key_DocumentKey.isDocumentKey(this.path)) {\n            // exact match for document queries\n            return this.path.equals(docPath);\n        }\n        else {\n            // shallow ancestor queries by default\n            return (this.path.isPrefixOf(docPath) && this.path.length === docPath.length - 1);\n        }\n    };\n    /**\n     * A document must have a value for every ordering clause in order to show up\n     * in the results.\n     */\n    Query.prototype.matchesOrderBy = function (doc) {\n        for (var _i = 0, _a = this.explicitOrderBy; _i < _a.length; _i++) {\n            var orderBy = _a[_i];\n            // order by key always matches\n            if (!orderBy.field.isKeyField() &&\n                doc.field(orderBy.field) === undefined) {\n                return false;\n            }\n        }\n        return true;\n    };\n    Query.prototype.matchesFilters = function (doc) {\n        for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {\n            var filter = _a[_i];\n            if (!filter.matches(doc)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * Makes sure a document is within the bounds, if provided.\n     */\n    Query.prototype.matchesBounds = function (doc) {\n        if (this.startAt && !this.startAt.sortsBeforeDocument(this.orderBy, doc)) {\n            return false;\n        }\n        if (this.endAt && this.endAt.sortsBeforeDocument(this.orderBy, doc)) {\n            return false;\n        }\n        return true;\n    };\n    Query.prototype.assertValidBound = function (bound) {\n        assert(bound.position.length <= this.orderBy.length, 'Bound is longer than orderBy');\n    };\n    return Query;\n}());\n\nvar query_RelationOp = /** @class */ (function () {\n    function RelationOp(name) {\n        this.name = name;\n    }\n    RelationOp.fromString = function (op) {\n        switch (op) {\n            case '<':\n                return RelationOp.LESS_THAN;\n            case '<=':\n                return RelationOp.LESS_THAN_OR_EQUAL;\n            case '==':\n                return RelationOp.EQUAL;\n            case '>=':\n                return RelationOp.GREATER_THAN_OR_EQUAL;\n            case '>':\n                return RelationOp.GREATER_THAN;\n            default:\n                return fail('Unknown relation: ' + op);\n        }\n    };\n    RelationOp.prototype.toString = function () {\n        return this.name;\n    };\n    RelationOp.prototype.equals = function (other) {\n        return this.name === other.name;\n    };\n    RelationOp.LESS_THAN = new RelationOp('<');\n    RelationOp.LESS_THAN_OR_EQUAL = new RelationOp('<=');\n    RelationOp.EQUAL = new RelationOp('==');\n    RelationOp.GREATER_THAN = new RelationOp('>');\n    RelationOp.GREATER_THAN_OR_EQUAL = new RelationOp('>=');\n    return RelationOp;\n}());\n\nvar query_RelationFilter = /** @class */ (function () {\n    function RelationFilter(field, op, value) {\n        this.field = field;\n        this.op = op;\n        this.value = value;\n    }\n    RelationFilter.prototype.matches = function (doc) {\n        if (this.field.isKeyField()) {\n            assert(this.value instanceof field_value_RefValue, 'Comparing on key, but filter value not a RefValue');\n            var refValue = this.value;\n            var comparison = document_key_DocumentKey.comparator(doc.key, refValue.key);\n            return this.matchesComparison(comparison);\n        }\n        else {\n            var val = doc.field(this.field);\n            return val !== undefined && this.matchesValue(val);\n        }\n    };\n    RelationFilter.prototype.matchesValue = function (value) {\n        // Only compare types with matching backend order (such as double and int).\n        if (this.value.typeOrder !== value.typeOrder) {\n            return false;\n        }\n        return this.matchesComparison(value.compareTo(this.value));\n    };\n    RelationFilter.prototype.matchesComparison = function (comparison) {\n        switch (this.op) {\n            case query_RelationOp.LESS_THAN:\n                return comparison < 0;\n            case query_RelationOp.LESS_THAN_OR_EQUAL:\n                return comparison <= 0;\n            case query_RelationOp.EQUAL:\n                return comparison === 0;\n            case query_RelationOp.GREATER_THAN:\n                return comparison > 0;\n            case query_RelationOp.GREATER_THAN_OR_EQUAL:\n                return comparison >= 0;\n            default:\n                return fail('Unknown relation op' + this.op);\n        }\n    };\n    RelationFilter.prototype.isInequality = function () {\n        return this.op !== query_RelationOp.EQUAL;\n    };\n    RelationFilter.prototype.canonicalId = function () {\n        // TODO(b/29183165): Technically, this won't be unique if two values have\n        // the same description, such as the int 3 and the string \"3\". So we should\n        // add the types in here somehow, too.\n        return (this.field.canonicalString() + this.op.toString() + this.value.toString());\n    };\n    RelationFilter.prototype.equals = function (other) {\n        if (other instanceof RelationFilter) {\n            return (this.op.equals(other.op) &&\n                this.field.equals(other.field) &&\n                this.value.equals(other.value));\n        }\n        else {\n            return false;\n        }\n    };\n    RelationFilter.prototype.toString = function () {\n        return this.field.canonicalString() + \" \" + this.op + \" \" + this.value.value();\n    };\n    return RelationFilter;\n}());\n\n/**\n * Filter that matches 'null' values.\n */\nvar NullFilter = /** @class */ (function () {\n    function NullFilter(field) {\n        this.field = field;\n    }\n    NullFilter.prototype.matches = function (doc) {\n        var val = doc.field(this.field);\n        return val !== undefined && val.value() === null;\n    };\n    NullFilter.prototype.canonicalId = function () {\n        return this.field.canonicalString() + ' IS null';\n    };\n    NullFilter.prototype.toString = function () {\n        return this.field.canonicalString() + \" IS null\";\n    };\n    NullFilter.prototype.equals = function (other) {\n        if (other instanceof NullFilter) {\n            return this.field.equals(other.field);\n        }\n        else {\n            return false;\n        }\n    };\n    return NullFilter;\n}());\n\n/**\n * Filter that matches 'NaN' values.\n */\nvar NanFilter = /** @class */ (function () {\n    function NanFilter(field) {\n        this.field = field;\n    }\n    NanFilter.prototype.matches = function (doc) {\n        var val = doc.field(this.field).value();\n        return typeof val === 'number' && isNaN(val);\n    };\n    NanFilter.prototype.canonicalId = function () {\n        return this.field.canonicalString() + ' IS NaN';\n    };\n    NanFilter.prototype.toString = function () {\n        return this.field.canonicalString() + \" IS NaN\";\n    };\n    NanFilter.prototype.equals = function (other) {\n        if (other instanceof NanFilter) {\n            return this.field.equals(other.field);\n        }\n        else {\n            return false;\n        }\n    };\n    return NanFilter;\n}());\n\n/**\n * Creates a filter based on the provided arguments.\n */\nfunction fieldFilter(field, op, value) {\n    if (value.equals(NullValue.INSTANCE)) {\n        if (op !== query_RelationOp.EQUAL) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You can only perform equals ' + 'comparisons on null.');\n        }\n        return new NullFilter(field);\n    }\n    else if (value.equals(DoubleValue.NAN)) {\n        if (op !== query_RelationOp.EQUAL) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You can only perform equals ' + 'comparisons on NaN.');\n        }\n        return new NanFilter(field);\n    }\n    else {\n        return new query_RelationFilter(field, op, value);\n    }\n}\n/**\n * The direction of sorting in an order by.\n */\nvar Direction = /** @class */ (function () {\n    function Direction(name) {\n        this.name = name;\n    }\n    Direction.prototype.toString = function () {\n        return this.name;\n    };\n    Direction.ASCENDING = new Direction('asc');\n    Direction.DESCENDING = new Direction('desc');\n    return Direction;\n}());\n\n/**\n * Represents a bound of a query.\n *\n * The bound is specified with the given components representing a position and\n * whether it's just before or just after the position (relative to whatever the\n * query order is).\n *\n * The position represents a logical index position for a query. It's a prefix\n * of values for the (potentially implicit) order by clauses of a query.\n *\n * Bound provides a function to determine whether a document comes before or\n * after a bound. This is influenced by whether the position is just before or\n * just after the provided values.\n */\nvar query_Bound = /** @class */ (function () {\n    function Bound(position, before) {\n        this.position = position;\n        this.before = before;\n    }\n    Bound.prototype.canonicalId = function () {\n        // TODO(b/29183165): Make this collision robust.\n        var canonicalId = this.before ? 'b:' : 'a:';\n        for (var _i = 0, _a = this.position; _i < _a.length; _i++) {\n            var component = _a[_i];\n            canonicalId += component.toString();\n        }\n        return canonicalId;\n    };\n    /**\n     * Returns true if a document sorts before a bound using the provided sort\n     * order.\n     */\n    Bound.prototype.sortsBeforeDocument = function (orderBy, doc) {\n        assert(this.position.length <= orderBy.length, \"Bound has more components than query's orderBy\");\n        var comparison = 0;\n        for (var i = 0; i < this.position.length; i++) {\n            var orderByComponent = orderBy[i];\n            var component = this.position[i];\n            if (orderByComponent.field.isKeyField()) {\n                assert(component instanceof field_value_RefValue, 'Bound has a non-key value where the key path is being used.');\n                comparison = document_key_DocumentKey.comparator(component.key, doc.key);\n            }\n            else {\n                var docValue = doc.field(orderByComponent.field);\n                assert(docValue !== undefined, 'Field should exist since document matched the orderBy already.');\n                comparison = component.compareTo(docValue);\n            }\n            if (orderByComponent.dir === Direction.DESCENDING) {\n                comparison = comparison * -1;\n            }\n            if (comparison !== 0) {\n                break;\n            }\n        }\n        return this.before ? comparison <= 0 : comparison < 0;\n    };\n    Bound.prototype.equals = function (other) {\n        if (other === null) {\n            return false;\n        }\n        if (this.before !== other.before ||\n            this.position.length !== other.position.length) {\n            return false;\n        }\n        for (var i = 0; i < this.position.length; i++) {\n            var thisPosition = this.position[i];\n            var otherPosition = other.position[i];\n            return thisPosition.equals(otherPosition);\n        }\n        return true;\n    };\n    return Bound;\n}());\n\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */\nvar query_OrderBy = /** @class */ (function () {\n    function OrderBy(field, dir) {\n        this.field = field;\n        if (dir === undefined) {\n            dir = Direction.ASCENDING;\n        }\n        this.dir = dir;\n        this.isKeyOrderBy = field.isKeyField();\n    }\n    OrderBy.prototype.compare = function (d1, d2) {\n        var comparison = this.isKeyOrderBy\n            ? document_Document.compareByKey(d1, d2)\n            : document_Document.compareByField(this.field, d1, d2);\n        switch (this.dir) {\n            case Direction.ASCENDING:\n                return comparison;\n            case Direction.DESCENDING:\n                return -1 * comparison;\n            default:\n                return fail('Unknown direction: ' + this.dir);\n        }\n    };\n    OrderBy.prototype.canonicalId = function () {\n        // TODO(b/29183165): Make this collision robust.\n        return this.field.canonicalString() + this.dir.toString();\n    };\n    OrderBy.prototype.toString = function () {\n        return this.field.canonicalString() + \" (\" + this.dir + \")\";\n    };\n    OrderBy.prototype.equals = function (other) {\n        return this.dir === other.dir && this.field.equals(other.field);\n    };\n    return OrderBy;\n}());\n\nvar KEY_ORDERING_ASC = new query_OrderBy(path_FieldPath.keyField(), Direction.ASCENDING);\nvar KEY_ORDERING_DESC = new query_OrderBy(path_FieldPath.keyField(), Direction.DESCENDING);\n\n//# sourceMappingURL=query.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/timestamp.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n// A RegExp matching ISO 8601 UTC timestamps with optional fraction.\nvar isoRegExp = new RegExp(/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/);\nvar timestamp_Timestamp = /** @class */ (function () {\n    function Timestamp(seconds, nanos) {\n        this.seconds = seconds;\n        this.nanos = nanos;\n        assert(nanos >= 0, 'timestamp nanoseconds out of range: ' + nanos);\n        assert(nanos < 1e9, 'timestamp nanoseconds out of range' + nanos);\n        // Midnight at the beginning of 1/1/1 is the earliest Firestore supports.\n        assert(seconds >= -62135596800, 'timestamp seconds out of range: ' + seconds);\n        // This will break in the year 10,000.\n        assert(seconds < 253402300800, 'timestamp seconds out of range' + seconds);\n    }\n    Timestamp.now = function () {\n        return Timestamp.fromEpochMilliseconds(Date.now());\n    };\n    Timestamp.fromDate = function (date) {\n        return Timestamp.fromEpochMilliseconds(date.getTime());\n    };\n    Timestamp.fromEpochMilliseconds = function (milliseconds) {\n        var seconds = Math.floor(milliseconds / 1000);\n        var nanos = (milliseconds - seconds * 1000) * 1e6;\n        return new Timestamp(seconds, nanos);\n    };\n    Timestamp.fromISOString = function (utc) {\n        // The date string can have higher precision (nanos) than the Date class\n        // (millis), so we do some custom parsing here.\n        // Parse the nanos right out of the string.\n        var nanos = 0;\n        var fraction = isoRegExp.exec(utc);\n        assert(!!fraction, 'invalid timestamp: ' + utc);\n        if (fraction[1]) {\n            // Pad the fraction out to 9 digits (nanos).\n            var nanoStr = fraction[1];\n            nanoStr = (nanoStr + '000000000').substr(0, 9);\n            nanos = parseInt(nanoStr, 10);\n        }\n        // Parse the date to get the seconds.\n        var date = new Date(utc);\n        var seconds = Math.floor(date.getTime() / 1000);\n        return new Timestamp(seconds, nanos);\n    };\n    Timestamp.prototype.toDate = function () {\n        return new Date(this.toEpochMilliseconds());\n    };\n    Timestamp.prototype.toEpochMilliseconds = function () {\n        return this.seconds * 1000 + this.nanos / 1e6;\n    };\n    Timestamp.prototype.compareTo = function (other) {\n        if (this.seconds === other.seconds) {\n            return primitiveComparator(this.nanos, other.nanos);\n        }\n        return primitiveComparator(this.seconds, other.seconds);\n    };\n    Timestamp.prototype.equals = function (other) {\n        return other.seconds === this.seconds && other.nanos === this.nanos;\n    };\n    Timestamp.prototype.toString = function () {\n        return 'Timestamp(seconds=' + this.seconds + ', nanos=' + this.nanos + ')';\n    };\n    return Timestamp;\n}());\n\n\n//# sourceMappingURL=timestamp.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/snapshot_version.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */\nvar snapshot_version_SnapshotVersion = /** @class */ (function () {\n    function SnapshotVersion(timestamp) {\n        this.timestamp = timestamp;\n    }\n    // TODO(b/34176344): Once we no longer need to use the old alpha protos,\n    // delete this constructor and use a timestamp-backed version everywhere.\n    SnapshotVersion.fromMicroseconds = function (value) {\n        var seconds = Math.floor(value / 1e6);\n        var nanos = (value % 1e6) * 1e3;\n        return new SnapshotVersion(new timestamp_Timestamp(seconds, nanos));\n    };\n    SnapshotVersion.fromTimestamp = function (value) {\n        return new SnapshotVersion(value);\n    };\n    SnapshotVersion.forDeletedDoc = function () {\n        return SnapshotVersion.MIN;\n    };\n    SnapshotVersion.prototype.compareTo = function (other) {\n        return this.timestamp.compareTo(other.timestamp);\n    };\n    SnapshotVersion.prototype.equals = function (other) {\n        return this.timestamp.equals(other.timestamp);\n    };\n    /** Returns a number representation of the version for use in spec tests. */\n    SnapshotVersion.prototype.toMicroseconds = function () {\n        // Convert to microseconds.\n        return this.timestamp.seconds * 1e6 + this.timestamp.nanos / 1000;\n    };\n    SnapshotVersion.prototype.toString = function () {\n        return 'SnapshotVersion(' + this.timestamp.toString() + ')';\n    };\n    SnapshotVersion.prototype.toTimestamp = function () {\n        return this.timestamp;\n    };\n    SnapshotVersion.MIN = new SnapshotVersion(new timestamp_Timestamp(0, 0));\n    return SnapshotVersion;\n}());\n\n\n//# sourceMappingURL=snapshot_version.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/query_data.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/** An enumeration of the different purposes we have for queries. */\nvar QueryPurpose;\n(function (QueryPurpose) {\n    /** A regular, normal query. */\n    QueryPurpose[QueryPurpose[\"Listen\"] = 0] = \"Listen\";\n    /**\n     * The query was used to refill a query after an existence filter mismatch.\n     */\n    QueryPurpose[QueryPurpose[\"ExistenceFilterMismatch\"] = 1] = \"ExistenceFilterMismatch\";\n    /** The query was used to resolve a limbo document. */\n    QueryPurpose[QueryPurpose[\"LimboResolution\"] = 2] = \"LimboResolution\";\n})(QueryPurpose = QueryPurpose || (QueryPurpose = {}));\n/**\n * An immutable set of metadata that the local store tracks for each query.\n */\nvar query_data_QueryData = /** @class */ (function () {\n    function QueryData(\n        /** The query being listened to. */\n        query, \n        /**\n         * The target ID to which the query corresponds; Assigned by the\n         * LocalStore for user listens and by the SyncEngine for limbo watches.\n         */\n        targetId, \n        /** The purpose of the query. */\n        purpose, \n        /** The latest snapshot version seen for this target. */\n        snapshotVersion, \n        /**\n         * An opaque, server-assigned token that allows watching a query to be\n         * resumed after disconnecting without retransmitting all the data that\n         * matches the query. The resume token essentially identifies a point in\n         * time from which the server should resume sending results.\n         */\n        resumeToken) {\n        if (snapshotVersion === void 0) { snapshotVersion = snapshot_version_SnapshotVersion.MIN; }\n        if (resumeToken === void 0) { resumeToken = emptyByteString(); }\n        this.query = query;\n        this.targetId = targetId;\n        this.purpose = purpose;\n        this.snapshotVersion = snapshotVersion;\n        this.resumeToken = resumeToken;\n    }\n    /**\n     * Creates a new query data instance with an updated snapshot version and\n     * resume token.\n     */\n    QueryData.prototype.update = function (updated) {\n        return new QueryData(this.query, this.targetId, this.purpose, updated.snapshotVersion, updated.resumeToken);\n    };\n    QueryData.prototype.equals = function (other) {\n        return (this.targetId === other.targetId &&\n            this.purpose === other.purpose &&\n            this.snapshotVersion.equals(other.snapshotVersion) &&\n            this.resumeToken === other.resumeToken &&\n            this.query.equals(other.query));\n    };\n    return QueryData;\n}());\n\n\n//# sourceMappingURL=query_data.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/mutation.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar mutation___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */\nvar mutation_FieldMask = /** @class */ (function () {\n    function FieldMask(fields) {\n        this.fields = fields;\n        // TODO(dimond): validation of FieldMask\n    }\n    FieldMask.prototype.equals = function (other) {\n        return arrayEquals(this.fields, other.fields);\n    };\n    return FieldMask;\n}());\n\n/** Transforms a value into a server-generated timestamp. */\nvar ServerTimestampTransform = /** @class */ (function () {\n    function ServerTimestampTransform() {\n    }\n    ServerTimestampTransform.prototype.equals = function (other) {\n        return other instanceof ServerTimestampTransform;\n    };\n    ServerTimestampTransform.instance = new ServerTimestampTransform();\n    return ServerTimestampTransform;\n}());\n\n/** A field path and the TransformOperation to perform upon it. */\nvar FieldTransform = /** @class */ (function () {\n    function FieldTransform(field, transform) {\n        this.field = field;\n        this.transform = transform;\n    }\n    FieldTransform.prototype.equals = function (other) {\n        return (this.field.equals(other.field) && this.transform.equals(other.transform));\n    };\n    return FieldTransform;\n}());\n\n/** The result of successfully applying a mutation to the backend. */\nvar MutationResult = /** @class */ (function () {\n    function MutationResult(\n        /**\n           * The version at which the mutation was committed or null for a delete.\n           */\n        version, \n        /**\n           * The resulting fields returned from the backend after a\n           * TransformMutation has been committed. Contains one FieldValue for each\n           * FieldTransform that was in the mutation.\n           *\n           * Will be null if the mutation was not a TransformMutation.\n           */\n        transformResults) {\n        this.version = version;\n        this.transformResults = transformResults;\n    }\n    return MutationResult;\n}());\n\nvar MutationType;\n(function (MutationType) {\n    MutationType[MutationType[\"Set\"] = 0] = \"Set\";\n    MutationType[MutationType[\"Patch\"] = 1] = \"Patch\";\n    MutationType[MutationType[\"Transform\"] = 2] = \"Transform\";\n    MutationType[MutationType[\"Delete\"] = 3] = \"Delete\";\n})(MutationType = MutationType || (MutationType = {}));\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */\nvar mutation_Precondition = /** @class */ (function () {\n    function Precondition(updateTime, exists) {\n        this.updateTime = updateTime;\n        this.exists = exists;\n        assert(updateTime === undefined || exists === undefined, 'Precondition can specify \"exists\" or \"updateTime\" but not both');\n    }\n    /** Creates a new Precondition with an exists flag. */\n    Precondition.exists = function (exists) {\n        return new Precondition(undefined, exists);\n    };\n    /** Creates a new Precondition based on a version a document exists at. */\n    Precondition.updateTime = function (version) {\n        return new Precondition(version);\n    };\n    Object.defineProperty(Precondition.prototype, \"isNone\", {\n        /** Returns whether this Precondition is empty. */\n        get: function () {\n            return this.updateTime === undefined && this.exists === undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns true if the preconditions is valid for the given document\n     * (or null if no document is available).\n     */\n    Precondition.prototype.isValidFor = function (maybeDoc) {\n        if (this.updateTime !== undefined) {\n            return (maybeDoc instanceof document_Document && maybeDoc.version.equals(this.updateTime));\n        }\n        else if (this.exists !== undefined) {\n            if (this.exists) {\n                return maybeDoc instanceof document_Document;\n            }\n            else {\n                return maybeDoc === null || maybeDoc instanceof document_NoDocument;\n            }\n        }\n        else {\n            assert(this.isNone, 'Precondition should be empty');\n            return true;\n        }\n    };\n    Precondition.prototype.equals = function (other) {\n        return (equals(this.updateTime, other.updateTime) &&\n            this.exists === other.exists);\n    };\n    Precondition.NONE = new Precondition();\n    return Precondition;\n}());\n\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also it version.\n * In the case of Set, Patch, and Transform mutations we preserve the existing\n * version. In the case of Delete mutations, we reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        null                  Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      null                  null\n * TransformMutation  Document(v3)          Document(v3)\n * TransformMutation  NoDocument(v3)        NoDocument(v3)\n * TransformMutation  null                  null\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     null                  NoDocument(v0)\n *\n * Note that TransformMutations don't create Documents (in the case of being\n * applied to a NoDocument), even though they would on the backend. This is\n * because the client always combines the TransformMutation with a SetMutation\n * or PatchMutation and we only want to apply the transform if the prior\n * mutation resulted in a Document (always true for a SetMutation, but not\n * necessarily for a PatchMutation).\n *\n * ## Subclassing Notes\n *\n * Subclasses of Mutation need to implement applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document.\n */\nvar mutation_Mutation = /** @class */ (function () {\n    function Mutation() {\n    }\n    Mutation.prototype.verifyKeyMatches = function (maybeDoc) {\n        if (maybeDoc != null) {\n            assert(maybeDoc.key.equals(this.key), 'Can only apply a mutation to a document with the same key');\n        }\n    };\n    /**\n     * Returns the version from the given document for use as the result of a\n     * mutation. Mutations are defined to return the version of the base document\n     * only if it is an existing document. Deleted and unknown documents have a\n     * post-mutation version of SnapshotVersion.MIN.\n     */\n    Mutation.getPostMutationVersion = function (maybeDoc) {\n        if (maybeDoc instanceof document_Document) {\n            return maybeDoc.version;\n        }\n        else {\n            return snapshot_version_SnapshotVersion.MIN;\n        }\n    };\n    return Mutation;\n}());\n\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */\nvar mutation_SetMutation = /** @class */ (function (_super) {\n    mutation___extends(SetMutation, _super);\n    function SetMutation(key, value, precondition) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.value = value;\n        _this.precondition = precondition;\n        _this.type = MutationType.Set;\n        return _this;\n    }\n    SetMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults == null, 'Transform results received by SetMutation.');\n        // Unlike applyToLocalView, if we're applying a mutation to a remote\n        // document the server has accepted the mutation so the precondition must\n        // have held.\n        var version = mutation_Mutation.getPostMutationVersion(maybeDoc);\n        return new document_Document(this.key, version, this.value, {\n            hasLocalMutations: false\n        });\n    };\n    SetMutation.prototype.applyToLocalView = function (maybeDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var version = mutation_Mutation.getPostMutationVersion(maybeDoc);\n        return new document_Document(this.key, version, this.value, {\n            hasLocalMutations: true\n        });\n    };\n    SetMutation.prototype.equals = function (other) {\n        return (other instanceof SetMutation &&\n            this.key.equals(other.key) &&\n            this.value.equals(other.value) &&\n            this.precondition.equals(other.precondition));\n    };\n    return SetMutation;\n}(mutation_Mutation));\n\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */\nvar mutation_PatchMutation = /** @class */ (function (_super) {\n    mutation___extends(PatchMutation, _super);\n    function PatchMutation(key, data, fieldMask, precondition) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.data = data;\n        _this.fieldMask = fieldMask;\n        _this.precondition = precondition;\n        _this.type = MutationType.Patch;\n        return _this;\n    }\n    PatchMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults == null, 'Transform results received by PatchMutation.');\n        // TODO(mcg): Relax enforcement of this precondition\n        //\n        // We shouldn't actually enforce the precondition since it already passed on\n        // the backend, but we may not have a local version of the document to\n        // patch, so we use the precondition to prevent incorrectly putting a\n        // partial document into our cache.\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var version = mutation_Mutation.getPostMutationVersion(maybeDoc);\n        var newData = this.patchDocument(maybeDoc);\n        return new document_Document(this.key, version, newData, {\n            hasLocalMutations: false\n        });\n    };\n    PatchMutation.prototype.applyToLocalView = function (maybeDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var version = mutation_Mutation.getPostMutationVersion(maybeDoc);\n        var newData = this.patchDocument(maybeDoc);\n        return new document_Document(this.key, version, newData, {\n            hasLocalMutations: true\n        });\n    };\n    PatchMutation.prototype.equals = function (other) {\n        return (other instanceof PatchMutation &&\n            this.key.equals(other.key) &&\n            this.fieldMask.equals(other.fieldMask) &&\n            this.precondition.equals(other.precondition));\n    };\n    /**\n     * Patches the data of document if available or creates a new document. Note\n     * that this does not check whether or not the precondition of this patch\n     * holds.\n     */\n    PatchMutation.prototype.patchDocument = function (maybeDoc) {\n        var data;\n        if (maybeDoc instanceof document_Document) {\n            data = maybeDoc.data;\n        }\n        else {\n            data = field_value_ObjectValue.EMPTY;\n        }\n        return this.patchObject(data);\n    };\n    PatchMutation.prototype.patchObject = function (data) {\n        for (var _i = 0, _a = this.fieldMask.fields; _i < _a.length; _i++) {\n            var fieldPath = _a[_i];\n            var newValue = this.data.field(fieldPath);\n            if (newValue !== undefined) {\n                data = data.set(fieldPath, newValue);\n            }\n            else {\n                data = data.delete(fieldPath);\n            }\n        }\n        return data;\n    };\n    return PatchMutation;\n}(mutation_Mutation));\n\n/**\n * A mutation that modifies specific fields of the document with transform\n * operations. Currently the only supported transform is a server timestamp, but\n * IP Address, increment(n), etc. could be supported in the future.\n *\n * It is somewhat similar to a PatchMutation in that it patches specific fields\n * and has no effect when applied to a null or NoDocument (see comment on\n * Mutation for rationale).\n */\nvar mutation_TransformMutation = /** @class */ (function (_super) {\n    mutation___extends(TransformMutation, _super);\n    function TransformMutation(key, fieldTransforms) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.fieldTransforms = fieldTransforms;\n        _this.type = MutationType.Transform;\n        // NOTE: We set a precondition of exists: true as a safety-check, since we\n        // always combine TransformMutations with a SetMutation or PatchMutation which\n        // (if successful) should end up with an existing document.\n        _this.precondition = mutation_Precondition.exists(true);\n        return _this;\n    }\n    TransformMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults != null, 'Transform results missing for TransformMutation.');\n        var transformResults = mutationResult.transformResults;\n        // TODO(mcg): Relax enforcement of this precondition\n        //\n        // We shouldn't actually enforce the precondition since it already passed on\n        // the backend, but we may not have a local version of the document to\n        // patch, so we use the precondition to prevent incorrectly putting a\n        // partial document into our cache.\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var doc = this.requireDocument(maybeDoc);\n        var newData = this.transformObject(doc.data, transformResults);\n        return new document_Document(this.key, doc.version, newData, {\n            hasLocalMutations: false\n        });\n    };\n    TransformMutation.prototype.applyToLocalView = function (maybeDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var doc = this.requireDocument(maybeDoc);\n        var transformResults = this.localTransformResults(localWriteTime);\n        var newData = this.transformObject(doc.data, transformResults);\n        return new document_Document(this.key, doc.version, newData, {\n            hasLocalMutations: true\n        });\n    };\n    TransformMutation.prototype.equals = function (other) {\n        return (other instanceof TransformMutation &&\n            this.key.equals(other.key) &&\n            arrayEquals(this.fieldTransforms, other.fieldTransforms) &&\n            this.precondition.equals(other.precondition));\n    };\n    /**\n     * Asserts that the given MaybeDocument is actually a Document and verifies\n     * that it matches the key for this mutation. Since we only support\n     * transformations with precondition exists this method is guaranteed to be\n     * safe.\n     */\n    TransformMutation.prototype.requireDocument = function (maybeDoc) {\n        assert(maybeDoc instanceof document_Document, 'Unknown MaybeDocument type ' + maybeDoc);\n        var doc = maybeDoc;\n        assert(doc.key.equals(this.key), 'Can only transform a document with the same key');\n        return doc;\n    };\n    /**\n     * Creates a list of \"transform results\" (a transform result is a field value\n     * representing the result of applying a transform) for use when applying a\n     * TransformMutation locally.\n     *\n     * @param localWriteTime The local time of the transform mutation (used to\n     *     generate ServerTimestampValues).\n     * @return The transform results list.\n     */\n    TransformMutation.prototype.localTransformResults = function (localWriteTime) {\n        var transformResults = [];\n        for (var _i = 0, _a = this.fieldTransforms; _i < _a.length; _i++) {\n            var fieldTransform = _a[_i];\n            var transform = fieldTransform.transform;\n            if (transform instanceof ServerTimestampTransform) {\n                transformResults.push(new ServerTimestampValue(localWriteTime));\n            }\n            else {\n                return fail('Encountered unknown transform: ' + transform);\n            }\n        }\n        return transformResults;\n    };\n    TransformMutation.prototype.transformObject = function (data, transformResults) {\n        assert(transformResults.length === this.fieldTransforms.length, 'TransformResults length mismatch.');\n        for (var i = 0; i < this.fieldTransforms.length; i++) {\n            var fieldTransform = this.fieldTransforms[i];\n            var transform = fieldTransform.transform;\n            var fieldPath = fieldTransform.field;\n            if (transform instanceof ServerTimestampTransform) {\n                data = data.set(fieldPath, transformResults[i]);\n            }\n            else {\n                return fail('Encountered unknown transform: ' + transform);\n            }\n        }\n        return data;\n    };\n    return TransformMutation;\n}(mutation_Mutation));\n\n/** A mutation that deletes the document at the given key. */\nvar mutation_DeleteMutation = /** @class */ (function (_super) {\n    mutation___extends(DeleteMutation, _super);\n    function DeleteMutation(key, precondition) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.precondition = precondition;\n        _this.type = MutationType.Delete;\n        return _this;\n    }\n    DeleteMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults == null, 'Transform results received by DeleteMutation.');\n        // Unlike applyToLocalView, if we're applying a mutation to a remote\n        // document the server has accepted the mutation so the precondition must\n        // have held.\n        return new document_NoDocument(this.key, snapshot_version_SnapshotVersion.MIN);\n    };\n    DeleteMutation.prototype.applyToLocalView = function (maybeDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        if (maybeDoc) {\n            assert(maybeDoc.key.equals(this.key), 'Can only apply mutation to document with same key');\n        }\n        return new document_NoDocument(this.key, snapshot_version_SnapshotVersion.forDeletedDoc());\n    };\n    DeleteMutation.prototype.equals = function (other) {\n        return (other instanceof DeleteMutation &&\n            this.key.equals(other.key) &&\n            this.precondition.equals(other.precondition));\n    };\n    return DeleteMutation;\n}(mutation_Mutation));\n\n\n//# sourceMappingURL=mutation.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/existence_filter.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar ExistenceFilter = /** @class */ (function () {\n    // TODO(b/33078163): just use simplest form of existence filter for now\n    function ExistenceFilter(count) {\n        this.count = count;\n    }\n    ExistenceFilter.prototype.equals = function (other) {\n        return other && other.count === this.count;\n    };\n    return ExistenceFilter;\n}());\n\n\n//# sourceMappingURL=existence_filter.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/rpc_error.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers.\n */\nvar RpcCode;\n(function (RpcCode) {\n    RpcCode[RpcCode[\"OK\"] = 0] = \"OK\";\n    RpcCode[RpcCode[\"CANCELLED\"] = 1] = \"CANCELLED\";\n    RpcCode[RpcCode[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n    RpcCode[RpcCode[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n    RpcCode[RpcCode[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n    RpcCode[RpcCode[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n    RpcCode[RpcCode[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n    RpcCode[RpcCode[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n    RpcCode[RpcCode[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n    RpcCode[RpcCode[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n    RpcCode[RpcCode[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n    RpcCode[RpcCode[\"ABORTED\"] = 10] = \"ABORTED\";\n    RpcCode[RpcCode[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n    RpcCode[RpcCode[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n    RpcCode[RpcCode[\"INTERNAL\"] = 13] = \"INTERNAL\";\n    RpcCode[RpcCode[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n    RpcCode[RpcCode[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n})(RpcCode || (RpcCode = {}));\nfunction isPermanentError(code) {\n    switch (code) {\n        case Code.OK:\n            return fail('Treated status OK as error');\n        case Code.CANCELLED:\n        case Code.UNKNOWN:\n        case Code.DEADLINE_EXCEEDED:\n        case Code.RESOURCE_EXHAUSTED:\n        case Code.INTERNAL:\n        case Code.UNAVAILABLE:\n        // Unauthenticated means something went wrong with our token and we need\n        // to retry with new credentials which will happen automatically.\n        // TODO(b/37325376): Give up after second unauthenticated error.\n        case Code.UNAUTHENTICATED:\n            return false;\n        case Code.INVALID_ARGUMENT:\n        case Code.NOT_FOUND:\n        case Code.ALREADY_EXISTS:\n        case Code.PERMISSION_DENIED:\n        case Code.FAILED_PRECONDITION:\n        // Aborted might be retried in some scenarios, but that is dependant on\n        // the context and should handled individually by the calling code.\n        // See https://cloud.google.com/apis/design/errors.\n        case Code.ABORTED:\n        case Code.OUT_OF_RANGE:\n        case Code.UNIMPLEMENTED:\n        case Code.DATA_LOSS:\n            return true;\n        default:\n            return fail('Unknown status code: ' + code);\n    }\n}\n/**\n * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.\n *\n * @returns The Code equivalent to the given status string or undefined if\n *     there is no match.\n */\nfunction mapCodeFromRpcStatus(status) {\n    // tslint:disable-next-line:no-any lookup by string\n    var code = RpcCode[status];\n    if (code === undefined) {\n        return undefined;\n    }\n    return mapCodeFromRpcCode(code);\n}\n/**\n * Maps an error Code from GRPC status code number, like 0, 1, or 14. These\n * are not the same as HTTP status codes.\n *\n * @returns The Code equivalent to the given GRPC status code. Fails if there\n *     is no match.\n */\nfunction mapCodeFromRpcCode(code) {\n    switch (code) {\n        case RpcCode.OK:\n            return Code.OK;\n        case RpcCode.CANCELLED:\n            return Code.CANCELLED;\n        case RpcCode.UNKNOWN:\n            return Code.UNKNOWN;\n        case RpcCode.DEADLINE_EXCEEDED:\n            return Code.DEADLINE_EXCEEDED;\n        case RpcCode.RESOURCE_EXHAUSTED:\n            return Code.RESOURCE_EXHAUSTED;\n        case RpcCode.INTERNAL:\n            return Code.INTERNAL;\n        case RpcCode.UNAVAILABLE:\n            return Code.UNAVAILABLE;\n        case RpcCode.UNAUTHENTICATED:\n            return Code.UNAUTHENTICATED;\n        case RpcCode.INVALID_ARGUMENT:\n            return Code.INVALID_ARGUMENT;\n        case RpcCode.NOT_FOUND:\n            return Code.NOT_FOUND;\n        case RpcCode.ALREADY_EXISTS:\n            return Code.ALREADY_EXISTS;\n        case RpcCode.PERMISSION_DENIED:\n            return Code.PERMISSION_DENIED;\n        case RpcCode.FAILED_PRECONDITION:\n            return Code.FAILED_PRECONDITION;\n        case RpcCode.ABORTED:\n            return Code.ABORTED;\n        case RpcCode.OUT_OF_RANGE:\n            return Code.OUT_OF_RANGE;\n        case RpcCode.UNIMPLEMENTED:\n            return Code.UNIMPLEMENTED;\n        case RpcCode.DATA_LOSS:\n            return Code.DATA_LOSS;\n        default:\n            return fail('Unknown status code: ' + code);\n    }\n}\n/**\n * Maps an RPC code from a Code. This is the reverse operation from\n * mapCodeFromRpcCode and should really only be used in tests.\n */\nfunction mapRpcCodeFromCode(code) {\n    if (code === undefined) {\n        return RpcCode.OK;\n    }\n    switch (code) {\n        case Code.OK:\n            return RpcCode.OK;\n        case Code.CANCELLED:\n            return RpcCode.CANCELLED;\n        case Code.UNKNOWN:\n            return RpcCode.UNKNOWN;\n        case Code.DEADLINE_EXCEEDED:\n            return RpcCode.DEADLINE_EXCEEDED;\n        case Code.RESOURCE_EXHAUSTED:\n            return RpcCode.RESOURCE_EXHAUSTED;\n        case Code.INTERNAL:\n            return RpcCode.INTERNAL;\n        case Code.UNAVAILABLE:\n            return RpcCode.UNAVAILABLE;\n        case Code.UNAUTHENTICATED:\n            return RpcCode.UNAUTHENTICATED;\n        case Code.INVALID_ARGUMENT:\n            return RpcCode.INVALID_ARGUMENT;\n        case Code.NOT_FOUND:\n            return RpcCode.NOT_FOUND;\n        case Code.ALREADY_EXISTS:\n            return RpcCode.ALREADY_EXISTS;\n        case Code.PERMISSION_DENIED:\n            return RpcCode.PERMISSION_DENIED;\n        case Code.FAILED_PRECONDITION:\n            return RpcCode.FAILED_PRECONDITION;\n        case Code.ABORTED:\n            return RpcCode.ABORTED;\n        case Code.OUT_OF_RANGE:\n            return RpcCode.OUT_OF_RANGE;\n        case Code.UNIMPLEMENTED:\n            return RpcCode.UNIMPLEMENTED;\n        case Code.DATA_LOSS:\n            return RpcCode.DATA_LOSS;\n        default:\n            return fail('Unknown status code: ' + code);\n    }\n}\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nfunction mapCodeFromHttpStatus(status) {\n    // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n    // status codes but the mapping is not bijective. In each case of ambiguity\n    // this function chooses a primary error.\n    //\n    // [1]\n    // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n    switch (status) {\n        case 200:// OK\n            return Code.OK;\n        case 400:// Bad Request\n            return Code.INVALID_ARGUMENT;\n        // Other possibilities based on the forward mapping\n        // return Code.FAILED_PRECONDITION;\n        // return Code.OUT_OF_RANGE;\n        case 401:// Unauthorized\n            return Code.UNAUTHENTICATED;\n        case 403:// Forbidden\n            return Code.PERMISSION_DENIED;\n        case 404:// Not Found\n            return Code.NOT_FOUND;\n        case 409:// Conflict\n            return Code.ABORTED;\n        // Other possibilities:\n        // return Code.ALREADY_EXISTS;\n        case 416:// Range Not Satisfiable\n            return Code.OUT_OF_RANGE;\n        case 429:// Too Many Requests\n            return Code.RESOURCE_EXHAUSTED;\n        case 499:// Client Closed Request\n            return Code.CANCELLED;\n        case 500:// Internal Server Error\n            return Code.UNKNOWN;\n        // Other possibilities:\n        // return Code.INTERNAL;\n        // return Code.DATA_LOSS;\n        case 501:// Unimplemented\n            return Code.UNIMPLEMENTED;\n        case 503:// Service Unavailable\n            return Code.UNAVAILABLE;\n        case 504:// Gateway Timeout\n            return Code.DEADLINE_EXCEEDED;\n        default:\n            if (status >= 200 && status < 300)\n                return Code.OK;\n            if (status >= 400 && status < 500)\n                return Code.FAILED_PRECONDITION;\n            if (status >= 500 && status < 600)\n                return Code.INTERNAL;\n            return Code.UNKNOWN;\n    }\n}\n\n//# sourceMappingURL=rpc_error.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/sorted_set.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nvar sorted_set_SortedSet = /** @class */ (function () {\n    function SortedSet(comparator) {\n        this.comparator = comparator;\n        this.data = new sorted_map_SortedMap(this.comparator);\n    }\n    /**\n     * Creates a SortedSet from the keys of the map.\n     * This is currently implemented as an O(n) copy.\n     */\n    SortedSet.fromMapKeys = function (map) {\n        var keys = new SortedSet(map.comparator);\n        map.forEach(function (key) {\n            keys = keys.add(key);\n        });\n        return keys;\n    };\n    SortedSet.prototype.has = function (elem) {\n        return this.data.get(elem) !== null;\n    };\n    SortedSet.prototype.first = function () {\n        return this.data.minKey();\n    };\n    SortedSet.prototype.last = function () {\n        return this.data.maxKey();\n    };\n    Object.defineProperty(SortedSet.prototype, \"size\", {\n        get: function () {\n            return this.data.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SortedSet.prototype.indexOf = function (elem) {\n        return this.data.indexOf(elem);\n    };\n    /** Iterates elements in order defined by \"comparator\" */\n    SortedSet.prototype.forEach = function (cb) {\n        this.data.inorderTraversal(function (k, v) {\n            cb(k);\n            return false;\n        });\n    };\n    /** Iterates over `elem`s such that: range[0] <= elem < range[1]. */\n    SortedSet.prototype.forEachInRange = function (range, cb) {\n        var iter = this.data.getIteratorFrom(range[0]);\n        while (iter.hasNext()) {\n            var elem = iter.getNext();\n            if (this.comparator(elem.key, range[1]) >= 0)\n                return;\n            cb(elem.key);\n        }\n    };\n    /**\n     * Iterates over `elem`s such that: start <= elem until false is returned.\n     */\n    SortedSet.prototype.forEachWhile = function (cb, start) {\n        var iter;\n        if (start !== undefined) {\n            iter = this.data.getIteratorFrom(start);\n        }\n        else {\n            iter = this.data.getIterator();\n        }\n        while (iter.hasNext()) {\n            var elem = iter.getNext();\n            var result = cb(elem.key);\n            if (!result)\n                return;\n        }\n    };\n    /** Finds the least element greater than or equal to `elem`. */\n    SortedSet.prototype.firstAfterOrEqual = function (elem) {\n        var iter = this.data.getIteratorFrom(elem);\n        return iter.hasNext() ? iter.getNext().key : null;\n    };\n    /** Inserts or updates an element */\n    SortedSet.prototype.add = function (elem) {\n        return this.copy(this.data.remove(elem).insert(elem, true));\n    };\n    /** Deletes an element */\n    SortedSet.prototype.delete = function (elem) {\n        if (!this.has(elem))\n            return this;\n        return this.copy(this.data.remove(elem));\n    };\n    SortedSet.prototype.isEmpty = function () {\n        return this.data.isEmpty();\n    };\n    SortedSet.prototype.unionWith = function (other) {\n        var result = this;\n        other.forEach(function (elem) {\n            result = result.add(elem);\n        });\n        return result;\n    };\n    SortedSet.prototype.equals = function (other) {\n        if (!(other instanceof SortedSet))\n            return false;\n        if (this.size !== other.size)\n            return false;\n        var thisIt = this.data.getIterator();\n        var otherIt = other.data.getIterator();\n        while (thisIt.hasNext()) {\n            var thisElem = thisIt.getNext().key;\n            var otherElem = otherIt.getNext().key;\n            if (this.comparator(thisElem, otherElem) !== 0)\n                return false;\n        }\n        return true;\n    };\n    SortedSet.prototype.toString = function () {\n        var result = [];\n        this.forEach(function (elem) { return result.push(elem); });\n        return 'SortedSet(' + result.toString() + ')';\n    };\n    SortedSet.prototype.copy = function (data) {\n        var result = new SortedSet(this.comparator);\n        result.data = data;\n        return result;\n    };\n    return SortedSet;\n}());\n\n\n//# sourceMappingURL=sorted_set.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/collections.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar EMPTY_MAYBE_DOCUMENT_MAP = new sorted_map_SortedMap(document_key_DocumentKey.comparator);\nfunction maybeDocumentMap() {\n    return EMPTY_MAYBE_DOCUMENT_MAP;\n}\nvar EMPTY_DOCUMENT_MAP = new sorted_map_SortedMap(document_key_DocumentKey.comparator);\nfunction documentMap() {\n    return EMPTY_DOCUMENT_MAP;\n}\nvar EMPTY_DOCUMENT_VERSION_MAP = new sorted_map_SortedMap(document_key_DocumentKey.comparator);\nfunction documentVersionMap() {\n    return EMPTY_DOCUMENT_VERSION_MAP;\n}\nvar EMPTY_DOCUMENT_KEY_SET = new sorted_set_SortedSet(document_key_DocumentKey.comparator);\nfunction documentKeySet() {\n    return EMPTY_DOCUMENT_KEY_SET;\n}\n\n//# sourceMappingURL=collections.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/remote_event.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * An event from the RemoteStore. It is split into targetChanges (changes to the\n * state or the set of documents in our watched targets) and documentUpdates\n * (changes to the actual documents).\n */\nvar remote_event_RemoteEvent = /** @class */ (function () {\n    function RemoteEvent(\n        /**\n           * The snapshot version this event brings us up to, or MIN if not set.\n           */\n        snapshotVersion, \n        /**\n           * A map from target to changes to the target. See TargetChange.\n           */\n        targetChanges, \n        /**\n           * A set of which documents have changed or been deleted, along with the\n           * doc's new values (if not deleted).\n           */\n        documentUpdates) {\n        this.snapshotVersion = snapshotVersion;\n        this.targetChanges = targetChanges;\n        this.documentUpdates = documentUpdates;\n    }\n    RemoteEvent.prototype.addDocumentUpdate = function (doc) {\n        this.documentUpdates = this.documentUpdates.insert(doc.key, doc);\n    };\n    RemoteEvent.prototype.handleExistenceFilterMismatch = function (targetId) {\n        /*\n         * An existence filter mismatch will reset the query and we need to reset\n         * the mapping to contain no documents and an empty resume token.\n         *\n         * Note:\n         *   * The reset mapping is empty, specifically forcing the consumer of the\n         *     change to forget all keys for this targetID;\n         *   * The resume snapshot for this target must be reset\n         *   * The target must be unacked because unwatching and rewatching\n         *     introduces a race for changes.\n         */\n        this.targetChanges[targetId] = {\n            mapping: new ResetMapping(),\n            snapshotVersion: snapshot_version_SnapshotVersion.MIN,\n            currentStatusUpdate: CurrentStatusUpdate.MarkNotCurrent,\n            resumeToken: emptyByteString()\n        };\n    };\n    return RemoteEvent;\n}());\n\n/**\n * Represents an update to the current status of a target, either explicitly\n * having no new state, or the new value to set. Note \"current\" has special\n * meaning for in the RPC protocol that implies that a target is both up-to-date\n * and consistent with the rest of the watch stream.\n */\nvar CurrentStatusUpdate;\n(function (CurrentStatusUpdate) {\n    /** The current status is not affected and should not be modified. */\n    CurrentStatusUpdate[CurrentStatusUpdate[\"None\"] = 0] = \"None\";\n    /** The target must be marked as no longer \"current\". */\n    CurrentStatusUpdate[CurrentStatusUpdate[\"MarkNotCurrent\"] = 1] = \"MarkNotCurrent\";\n    /** The target must be marked as \"current\". */\n    CurrentStatusUpdate[CurrentStatusUpdate[\"MarkCurrent\"] = 2] = \"MarkCurrent\";\n})(CurrentStatusUpdate = CurrentStatusUpdate || (CurrentStatusUpdate = {}));\nvar EMPTY_KEY_SET = documentKeySet();\nvar ResetMapping = /** @class */ (function () {\n    function ResetMapping() {\n        this.docs = EMPTY_KEY_SET;\n    }\n    Object.defineProperty(ResetMapping.prototype, \"documents\", {\n        get: function () {\n            return this.docs;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ResetMapping.prototype.add = function (key) {\n        this.docs = this.docs.add(key);\n    };\n    ResetMapping.prototype.delete = function (key) {\n        this.docs = this.docs.delete(key);\n    };\n    ResetMapping.prototype.equals = function (other) {\n        return other !== null && this.docs.equals(other.docs);\n    };\n    return ResetMapping;\n}());\n\nvar UpdateMapping = /** @class */ (function () {\n    function UpdateMapping() {\n        this.addedDocuments = EMPTY_KEY_SET;\n        this.removedDocuments = EMPTY_KEY_SET;\n    }\n    UpdateMapping.prototype.applyToKeySet = function (keys) {\n        var result = keys;\n        this.addedDocuments.forEach(function (key) { return (result = result.add(key)); });\n        this.removedDocuments.forEach(function (key) { return (result = result.delete(key)); });\n        return result;\n    };\n    UpdateMapping.prototype.add = function (key) {\n        this.addedDocuments = this.addedDocuments.add(key);\n        this.removedDocuments = this.removedDocuments.delete(key);\n    };\n    UpdateMapping.prototype.delete = function (key) {\n        this.addedDocuments = this.addedDocuments.delete(key);\n        this.removedDocuments = this.removedDocuments.add(key);\n    };\n    UpdateMapping.prototype.equals = function (other) {\n        return (other !== null &&\n            this.addedDocuments.equals(other.addedDocuments) &&\n            this.removedDocuments.equals(other.removedDocuments));\n    };\n    return UpdateMapping;\n}());\n\n\n//# sourceMappingURL=remote_event.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/watch_change.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/**\n * Represents a changed document and a list of target ids to which this change\n * applies.\n *\n * If document has been deleted NoDocument will be provided.\n */\nvar DocumentWatchChange = /** @class */ (function () {\n    function DocumentWatchChange(\n        /** The new document applies to all of these targets. */\n        updatedTargetIds, \n        /** The new document is removed from all of these targets. */\n        removedTargetIds, \n        /** The key of the document for this change. */\n        key, \n        /**\n           * The new document or NoDocument if it was deleted. Is null if the\n           * document went out of view without the server sending a new document.\n           */\n        newDoc) {\n        this.updatedTargetIds = updatedTargetIds;\n        this.removedTargetIds = removedTargetIds;\n        this.key = key;\n        this.newDoc = newDoc;\n    }\n    return DocumentWatchChange;\n}());\n\nvar ExistenceFilterChange = /** @class */ (function () {\n    function ExistenceFilterChange(targetId, existenceFilter) {\n        this.targetId = targetId;\n        this.existenceFilter = existenceFilter;\n    }\n    return ExistenceFilterChange;\n}());\n\nvar WatchTargetChangeState;\n(function (WatchTargetChangeState) {\n    WatchTargetChangeState[WatchTargetChangeState[\"NoChange\"] = 0] = \"NoChange\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Added\"] = 1] = \"Added\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Removed\"] = 2] = \"Removed\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Current\"] = 3] = \"Current\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Reset\"] = 4] = \"Reset\";\n})(WatchTargetChangeState = WatchTargetChangeState || (WatchTargetChangeState = {}));\nvar watch_change_WatchTargetChange = /** @class */ (function () {\n    function WatchTargetChange(\n        /** What kind of change occurred to the watch target. */\n        state, \n        /** The target IDs that were added/removed/set. */\n        targetIds, \n        /**\n           * An opaque, server-assigned token that allows watching a query to be\n           * resumed after disconnecting without retransmitting all the data that\n           * matches the query. The resume token essentially identifies a point in\n           * time from which the server should resume sending results.\n           */\n        resumeToken, \n        /** An RPC error indicating why the watch failed. */\n        cause) {\n        if (resumeToken === void 0) { resumeToken = emptyByteString(); }\n        if (cause === void 0) { cause = null; }\n        this.state = state;\n        this.targetIds = targetIds;\n        this.resumeToken = resumeToken;\n        this.cause = cause;\n    }\n    return WatchTargetChange;\n}());\n\n/**\n * A helper class to accumulate watch changes into a RemoteEvent and other\n * target information.\n */\nvar watch_change_WatchChangeAggregator = /** @class */ (function () {\n    function WatchChangeAggregator(snapshotVersion, listenTargets, pendingTargetResponses) {\n        this.snapshotVersion = snapshotVersion;\n        this.listenTargets = listenTargets;\n        /** The existence filter - if any - for the given target IDs. */\n        this.existenceFilters = {};\n        /** Keeps track of the current target mappings */\n        this.targetChanges = {};\n        /** Keeps track of document to update */\n        this.documentUpdates = maybeDocumentMap();\n        /** Whether this aggregator was frozen and can no longer be modified */\n        this.frozen = false;\n        this.pendingTargetResponses = shallowCopy(pendingTargetResponses);\n    }\n    /** Aggregates a watch change into the current state */\n    WatchChangeAggregator.prototype.add = function (watchChange) {\n        assert(!this.frozen, 'Trying to modify frozen WatchChangeAggregator.');\n        if (watchChange instanceof DocumentWatchChange) {\n            this.addDocumentChange(watchChange);\n        }\n        else if (watchChange instanceof watch_change_WatchTargetChange) {\n            this.addTargetChange(watchChange);\n        }\n        else if (watchChange instanceof ExistenceFilterChange) {\n            this.addExistenceFilterChange(watchChange);\n        }\n        else {\n            fail('Unknown watch change: ' + watchChange);\n        }\n    };\n    /** Aggregates all provided watch changes to the current state in order */\n    WatchChangeAggregator.prototype.addChanges = function (watchChanges) {\n        var _this = this;\n        assert(!this.frozen, 'Trying to modify frozen WatchChangeAggregator.');\n        watchChanges.forEach(function (change) { return _this.add(change); });\n    };\n    /**\n     * Converts the current state into a remote event with the snapshot version\n     * provided via the constructor.\n     */\n    WatchChangeAggregator.prototype.createRemoteEvent = function () {\n        var _this = this;\n        var targetChanges = this.targetChanges;\n        // Remove all the non-active targets from the remote event.\n        forEachNumber(this.targetChanges, function (targetId) {\n            if (!_this.isActiveTarget(targetId)) {\n                delete targetChanges[targetId];\n            }\n        });\n        // Mark this aggregator as frozen so no further modifications are made\n        this.frozen = true;\n        return new remote_event_RemoteEvent(this.snapshotVersion, targetChanges, this.documentUpdates);\n    };\n    WatchChangeAggregator.prototype.ensureTargetChange = function (targetId) {\n        var change = this.targetChanges[targetId];\n        if (!change) {\n            // Create an UpdateMapping by default, since resets are always explicit.\n            change = {\n                currentStatusUpdate: CurrentStatusUpdate.None,\n                snapshotVersion: this.snapshotVersion,\n                mapping: new UpdateMapping(),\n                resumeToken: emptyByteString()\n            };\n            this.targetChanges[targetId] = change;\n        }\n        return change;\n    };\n    /**\n     * We need to wait for watch to ack targets before we process those events,\n     * so to know if a target is active, there must be no pending acks we're\n     * waiting for and it must be in the current list of targets that the client\n     * cares about.\n     *\n     * This method is visible for testing.\n     */\n    WatchChangeAggregator.prototype.isActiveTarget = function (targetId) {\n        return (!contains(this.pendingTargetResponses, targetId) &&\n            contains(this.listenTargets, targetId));\n    };\n    WatchChangeAggregator.prototype.addDocumentChange = function (docChange) {\n        var relevant = false;\n        for (var _i = 0, _a = docChange.updatedTargetIds; _i < _a.length; _i++) {\n            var targetId = _a[_i];\n            if (this.isActiveTarget(targetId)) {\n                var change = this.ensureTargetChange(targetId);\n                change.mapping.add(docChange.key);\n                relevant = true;\n            }\n        }\n        for (var _b = 0, _c = docChange.removedTargetIds; _b < _c.length; _b++) {\n            var targetId = _c[_b];\n            if (this.isActiveTarget(targetId)) {\n                var change = this.ensureTargetChange(targetId);\n                change.mapping.delete(docChange.key);\n                relevant = true;\n            }\n        }\n        // Only update the document if there is a new document to replace to an\n        // active target that is being listened to, this might be just a target\n        // update instead.\n        if (docChange.newDoc && relevant) {\n            this.documentUpdates = this.documentUpdates.insert(docChange.key, docChange.newDoc);\n        }\n    };\n    WatchChangeAggregator.prototype.addTargetChange = function (targetChange) {\n        var _this = this;\n        targetChange.targetIds.forEach(function (targetId) {\n            var change = _this.ensureTargetChange(targetId);\n            switch (targetChange.state) {\n                case WatchTargetChangeState.NoChange:\n                    if (_this.isActiveTarget(targetId)) {\n                        // Creating the change above satisfies the semantics of no-change.\n                        applyResumeToken(change, targetChange.resumeToken);\n                    }\n                    break;\n                case WatchTargetChangeState.Added:\n                    // We need to decrement the number of pending acks needed from watch\n                    // for this targetId.\n                    _this.recordTargetResponse(targetId);\n                    if (!contains(_this.pendingTargetResponses, targetId)) {\n                        // We have a freshly added target, so we need to reset any state\n                        // that we had previously This can happen e.g. when remove and add\n                        // back a target for existence filter mismatches.\n                        change.mapping = new UpdateMapping();\n                        change.currentStatusUpdate = CurrentStatusUpdate.None;\n                        delete _this.existenceFilters[targetId];\n                    }\n                    applyResumeToken(change, targetChange.resumeToken);\n                    break;\n                case WatchTargetChangeState.Removed:\n                    // We need to keep track of removed targets to we can\n                    // post-filter and remove any target changes.\n                    // We need to decrement the number of pending acks needed from watch\n                    // for this targetId.\n                    _this.recordTargetResponse(targetId);\n                    assert(!targetChange.cause, 'WatchChangeAggregator does not handle errored targets');\n                    break;\n                case WatchTargetChangeState.Current:\n                    if (_this.isActiveTarget(targetId)) {\n                        change.currentStatusUpdate = CurrentStatusUpdate.MarkCurrent;\n                        applyResumeToken(change, targetChange.resumeToken);\n                    }\n                    break;\n                case WatchTargetChangeState.Reset:\n                    if (_this.isActiveTarget(targetId)) {\n                        // Overwrite any existing target mapping with a reset\n                        // mapping. Every subsequent update will modify the reset\n                        // mapping, not an update mapping.\n                        change.mapping = new ResetMapping();\n                        applyResumeToken(change, targetChange.resumeToken);\n                    }\n                    break;\n                default:\n                    fail('Unknown target watch change state: ' + targetChange.state);\n            }\n        });\n    };\n    /**\n     * Record that we get a watch target add/remove by decrementing the number of\n     * pending target responses that we have.\n     */\n    WatchChangeAggregator.prototype.recordTargetResponse = function (targetId) {\n        var newCount = (this.pendingTargetResponses[targetId] || 0) - 1;\n        if (newCount === 0) {\n            delete this.pendingTargetResponses[targetId];\n        }\n        else {\n            this.pendingTargetResponses[targetId] = newCount;\n        }\n    };\n    WatchChangeAggregator.prototype.addExistenceFilterChange = function (change) {\n        if (this.isActiveTarget(change.targetId)) {\n            this.existenceFilters[change.targetId] = change.existenceFilter;\n        }\n    };\n    return WatchChangeAggregator;\n}());\n\n/**\n * Applies the resume token to the TargetChange, but only when it has a new\n * value. null and empty resumeTokens are discarded.\n */\nfunction applyResumeToken(change, resumeToken) {\n    if (resumeToken.length > 0) {\n        change.resumeToken = resumeToken;\n    }\n}\n\n//# sourceMappingURL=watch_change.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/serializer.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar DIRECTIONS = (function () {\n    var dirs = {};\n    dirs[Direction.ASCENDING.name] = 'ASCENDING';\n    dirs[Direction.DESCENDING.name] = 'DESCENDING';\n    return dirs;\n})();\nvar OPERATORS = (function () {\n    var ops = {};\n    ops[query_RelationOp.LESS_THAN.name] = 'LESS_THAN';\n    ops[query_RelationOp.LESS_THAN_OR_EQUAL.name] = 'LESS_THAN_OR_EQUAL';\n    ops[query_RelationOp.GREATER_THAN.name] = 'GREATER_THAN';\n    ops[query_RelationOp.GREATER_THAN_OR_EQUAL.name] = 'GREATER_THAN_OR_EQUAL';\n    ops[query_RelationOp.EQUAL.name] = 'EQUAL';\n    return ops;\n})();\nfunction assertPresent(value, description) {\n    assert(!isNullOrUndefined(value), description + ' is missing');\n}\nfunction parseInt64(value) {\n    // TODO(bjornick): Handle int64 greater than 53 bits.\n    if (typeof value === 'number') {\n        return value;\n    }\n    else if (typeof value === 'string') {\n        return parseInt(value, 10);\n    }\n    else {\n        return fail(\"can't parse \" + value);\n    }\n}\n/**\n * Generates JsonObject values for the Datastore API suitable for sending to\n * either GRPC stub methods or via the JSON/HTTP REST API.\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\nvar serializer_JsonProtoSerializer = /** @class */ (function () {\n    function JsonProtoSerializer(databaseId, options) {\n        this.databaseId = databaseId;\n        this.options = options;\n    }\n    JsonProtoSerializer.prototype.emptyByteString = function () {\n        if (this.options.useProto3Json) {\n            return '';\n        }\n        else {\n            return new Uint8Array(0);\n        }\n    };\n    JsonProtoSerializer.prototype.unsafeCastProtoByteString = function (byteString) {\n        // byteStrings can be either string or UInt8Array, but the typings say\n        // it's always a string. Cast as string to avoid type check failing\n        return byteString;\n    };\n    JsonProtoSerializer.prototype.fromRpcStatus = function (status) {\n        var code = status.code === undefined\n            ? Code.UNKNOWN\n            : mapCodeFromRpcCode(status.code);\n        return new FirestoreError(code, status.message || '');\n    };\n    /**\n     * Returns a value for a Date that's appropriate to put into a proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as returning \"string\" because that's what\n     * our generated proto interfaces say dates must be. But it's easier and safer\n     * to actually return a Timestamp proto.\n     */\n    JsonProtoSerializer.prototype.toTimestamp = function (timestamp) {\n        return {\n            seconds: timestamp.seconds,\n            nanos: timestamp.nanos\n            // tslint:disable-next-line:no-any\n        };\n    };\n    JsonProtoSerializer.prototype.fromTimestamp = function (date) {\n        // The json interface (for the browser) will return an iso timestamp string,\n        // while the proto js library (for node) will return a\n        // google.protobuf.Timestamp instance.\n        if (typeof date === 'string') {\n            // TODO(b/37282237): Use strings for Proto3 timestamps\n            // assert(this.options.useProto3Json,\n            //   'The timestamp string format requires Proto3.');\n            return timestamp_Timestamp.fromISOString(date);\n        }\n        else {\n            assert(!!date, 'Cannot deserialize null or undefined timestamp.');\n            // TODO(b/37282237): Use strings for Proto3 timestamps\n            // assert(!this.options.useProto3Json,\n            //   'The timestamp instance format requires Proto JS.');\n            var seconds = parseInt64(date.seconds || '0');\n            var nanos = date.nanos || 0;\n            return new timestamp_Timestamp(seconds, nanos);\n        }\n    };\n    /**\n     * Returns a value for bytes that's appropriate to put in a proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as returning \"string\" because that's what\n     * our generated proto interfaces say bytes must be. But it should return\n     * an Uint8Array in Node.\n     */\n    JsonProtoSerializer.prototype.toBytes = function (bytes) {\n        if (this.options.useProto3Json) {\n            return bytes.toBase64();\n        }\n        else {\n            // The typings say it's a string, but it needs to be a Uint8Array in Node.\n            return this.unsafeCastProtoByteString(bytes.toUint8Array());\n        }\n    };\n    /**\n     * Parse the blob from the protos into the internal Blob class. Note that the\n     * typings assume all blobs are strings, but they are actually Uint8Arrays\n     * on Node.\n     */\n    JsonProtoSerializer.prototype.fromBlob = function (blob) {\n        if (typeof blob === 'string') {\n            assert(this.options.useProto3Json, 'Expected bytes to be passed in as Uint8Array, but got a string instead.');\n            return blob_Blob.fromBase64String(blob);\n        }\n        else {\n            assert(!this.options.useProto3Json, 'Expected bytes to be passed in as string, but got something else instead.');\n            return blob_Blob.fromUint8Array(blob);\n        }\n    };\n    JsonProtoSerializer.prototype.toVersion = function (version) {\n        return this.toTimestamp(version.toTimestamp());\n    };\n    JsonProtoSerializer.prototype.fromVersion = function (version) {\n        assert(!!version, \"Trying to deserialize version that isn't set\");\n        return snapshot_version_SnapshotVersion.fromTimestamp(this.fromTimestamp(version));\n    };\n    JsonProtoSerializer.prototype.toResourceName = function (databaseId, path) {\n        return this.fullyQualifiedPrefixPath(databaseId)\n            .child('documents')\n            .child(path)\n            .canonicalString();\n    };\n    JsonProtoSerializer.prototype.fromResourceName = function (name) {\n        var resource = path_ResourcePath.fromString(name);\n        assert(this.isValidResourceName(resource), 'Tried to deserialize invalid key ' + resource.toString());\n        return resource;\n    };\n    JsonProtoSerializer.prototype.toName = function (key) {\n        return this.toResourceName(this.databaseId, key.path);\n    };\n    JsonProtoSerializer.prototype.fromName = function (name) {\n        var resource = this.fromResourceName(name);\n        assert(resource.get(1) === this.databaseId.projectId, 'Tried to deserialize key from different project: ' +\n            resource.get(1) +\n            ' vs ' +\n            this.databaseId.projectId);\n        assert((!resource.get(3) && !this.databaseId.database) ||\n            resource.get(3) === this.databaseId.database, 'Tried to deserialize key from different database: ' +\n            resource.get(3) +\n            ' vs ' +\n            this.databaseId.database);\n        return new document_key_DocumentKey(this.extractLocalPathFromResourceName(resource));\n    };\n    JsonProtoSerializer.prototype.toQueryPath = function (path) {\n        if (path.length === 0) {\n            // If the path is empty, the backend requires we leave off the /documents\n            // at the end.\n            return this.encodedDatabaseId;\n        }\n        return this.toResourceName(this.databaseId, path);\n    };\n    JsonProtoSerializer.prototype.fromQueryPath = function (name) {\n        var resourceName = this.fromResourceName(name);\n        if (resourceName.length === 4) {\n            return path_ResourcePath.EMPTY_PATH;\n        }\n        return this.extractLocalPathFromResourceName(resourceName);\n    };\n    Object.defineProperty(JsonProtoSerializer.prototype, \"encodedDatabaseId\", {\n        get: function () {\n            var path = new path_ResourcePath([\n                'projects',\n                this.databaseId.projectId,\n                'databases',\n                this.databaseId.database\n            ]);\n            return path.canonicalString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    JsonProtoSerializer.prototype.fullyQualifiedPrefixPath = function (databaseId) {\n        return new path_ResourcePath([\n            'projects',\n            databaseId.projectId,\n            'databases',\n            databaseId.database\n        ]);\n    };\n    JsonProtoSerializer.prototype.extractLocalPathFromResourceName = function (resourceName) {\n        assert(resourceName.length > 4 && resourceName.get(4) === 'documents', 'tried to deserialize invalid key ' + resourceName.toString());\n        return resourceName.popFirst(5);\n    };\n    JsonProtoSerializer.prototype.isValidResourceName = function (path) {\n        // Resource names have at least 4 components (project ID, database ID)\n        return (path.length >= 4 &&\n            path.get(0) === 'projects' &&\n            path.get(2) === 'databases');\n    };\n    JsonProtoSerializer.prototype.toValue = function (val) {\n        if (val instanceof NullValue) {\n            return { nullValue: 'NULL_VALUE' };\n        }\n        else if (val instanceof field_value_BooleanValue) {\n            return { booleanValue: val.value() };\n        }\n        else if (val instanceof IntegerValue) {\n            return { integerValue: '' + val.value() };\n        }\n        else if (val instanceof DoubleValue) {\n            var doubleValue = val.value();\n            if (this.options.useProto3Json) {\n                // Proto 3 let's us encode NaN and Infinity as string values as\n                // expected by the backend. This is currently not checked by our unit\n                // tests because they rely on protobuf.js.\n                if (isNaN(doubleValue)) {\n                    return { doubleValue: 'NaN' };\n                }\n                else if (doubleValue === Infinity) {\n                    return { doubleValue: 'Infinity' };\n                }\n                else if (doubleValue === -Infinity) {\n                    return { doubleValue: '-Infinity' };\n                }\n            }\n            return { doubleValue: val.value() };\n        }\n        else if (val instanceof field_value_StringValue) {\n            return { stringValue: val.value() };\n        }\n        else if (val instanceof field_value_ObjectValue) {\n            return { mapValue: this.toMapValue(val) };\n        }\n        else if (val instanceof field_value_ArrayValue) {\n            return { arrayValue: this.toArrayValue(val) };\n        }\n        else if (val instanceof TimestampValue) {\n            return {\n                timestampValue: this.toTimestamp(val.internalValue)\n            };\n        }\n        else if (val instanceof GeoPointValue) {\n            return {\n                geoPointValue: {\n                    latitude: val.value().latitude,\n                    longitude: val.value().longitude\n                }\n            };\n        }\n        else if (val instanceof BlobValue) {\n            return {\n                bytesValue: this.toBytes(val.value())\n            };\n        }\n        else if (val instanceof field_value_RefValue) {\n            return {\n                referenceValue: this.toResourceName(val.databaseId, val.key.path)\n            };\n        }\n        else {\n            return fail('Unknown FieldValue ' + JSON.stringify(val));\n        }\n    };\n    JsonProtoSerializer.prototype.fromValue = function (obj) {\n        var _this = this;\n        // tslint:disable-next-line:no-any\n        var type = obj['value_type'];\n        if (hasTag(obj, type, 'nullValue')) {\n            return NullValue.INSTANCE;\n        }\n        else if (hasTag(obj, type, 'booleanValue')) {\n            return field_value_BooleanValue.of(obj.booleanValue);\n        }\n        else if (hasTag(obj, type, 'integerValue')) {\n            return new IntegerValue(parseInt64(obj.integerValue));\n        }\n        else if (hasTag(obj, type, 'doubleValue')) {\n            if (this.options.useProto3Json) {\n                // Proto 3 uses the string values 'NaN' and 'Infinity'.\n                if (obj.doubleValue === 'NaN') {\n                    return DoubleValue.NAN;\n                }\n                else if (obj.doubleValue === 'Infinity') {\n                    return DoubleValue.POSITIVE_INFINITY;\n                }\n                else if (obj.doubleValue === '-Infinity') {\n                    return DoubleValue.NEGATIVE_INFINITY;\n                }\n            }\n            return new DoubleValue(obj.doubleValue);\n        }\n        else if (hasTag(obj, type, 'stringValue')) {\n            return new field_value_StringValue(obj.stringValue);\n        }\n        else if (hasTag(obj, type, 'mapValue')) {\n            return this.fromFields(obj.mapValue.fields || {});\n        }\n        else if (hasTag(obj, type, 'arrayValue')) {\n            // \"values\" is not present if the array is empty\n            assertPresent(obj.arrayValue, 'arrayValue');\n            var values = obj.arrayValue.values || [];\n            return new field_value_ArrayValue(values.map(function (v) { return _this.fromValue(v); }));\n        }\n        else if (hasTag(obj, type, 'timestampValue')) {\n            assertPresent(obj.timestampValue, 'timestampValue');\n            return new TimestampValue(this.fromTimestamp(obj.timestampValue));\n        }\n        else if (hasTag(obj, type, 'geoPointValue')) {\n            assertPresent(obj.geoPointValue, 'geoPointValue');\n            var latitude = obj.geoPointValue.latitude || 0;\n            var longitude = obj.geoPointValue.longitude || 0;\n            return new GeoPointValue(new geo_point_GeoPoint(latitude, longitude));\n        }\n        else if (hasTag(obj, type, 'bytesValue')) {\n            assertPresent(obj.bytesValue, 'bytesValue');\n            var blob = this.fromBlob(obj.bytesValue);\n            return new BlobValue(blob);\n        }\n        else if (hasTag(obj, type, 'referenceValue')) {\n            assertPresent(obj.referenceValue, 'referenceValue');\n            var resourceName = this.fromResourceName(obj.referenceValue);\n            var dbId = new database_info_DatabaseId(resourceName.get(1), resourceName.get(3));\n            var key = new document_key_DocumentKey(this.extractLocalPathFromResourceName(resourceName));\n            return new field_value_RefValue(dbId, key);\n        }\n        else {\n            return fail('Unknown Value proto ' + JSON.stringify(obj));\n        }\n    };\n    /** Creates an api.Document from key and fields (but no create/update time) */\n    JsonProtoSerializer.prototype.toMutationDocument = function (key, fields) {\n        return {\n            name: this.toName(key),\n            fields: this.toFields(fields)\n        };\n    };\n    JsonProtoSerializer.prototype.toDocument = function (document) {\n        assert(!document.hasLocalMutations, \"Can't serialize documents with mutations.\");\n        return {\n            name: this.toName(document.key),\n            fields: this.toFields(document.data),\n            updateTime: this.toTimestamp(document.version.toTimestamp())\n        };\n    };\n    JsonProtoSerializer.prototype.fromDocument = function (document) {\n        return new document_Document(this.fromName(document.name), this.fromVersion(document.updateTime), this.fromFields(document.fields || {}), { hasLocalMutations: false });\n    };\n    JsonProtoSerializer.prototype.toFields = function (fields) {\n        var _this = this;\n        var result = {};\n        fields.forEach(function (key, value) {\n            result[key] = _this.toValue(value);\n        });\n        return result;\n    };\n    JsonProtoSerializer.prototype.fromFields = function (object) {\n        var _this = this;\n        // Proto map<string, Value> gets mapped to Object, so cast it.\n        var map = object;\n        var result = field_value_ObjectValue.EMPTY;\n        forEach(map, function (key, value) {\n            result = result.set(new path_FieldPath([key]), _this.fromValue(value));\n        });\n        return result;\n    };\n    JsonProtoSerializer.prototype.toMapValue = function (map) {\n        return {\n            fields: this.toFields(map)\n        };\n    };\n    JsonProtoSerializer.prototype.toArrayValue = function (array) {\n        var _this = this;\n        var result = [];\n        array.forEach(function (value) {\n            result.push(_this.toValue(value));\n        });\n        return { values: result };\n    };\n    JsonProtoSerializer.prototype.fromFound = function (doc) {\n        assert(!!doc.found, 'Tried to deserialize a found document from a missing document.');\n        assertPresent(doc.found.name, 'doc.found.name');\n        assertPresent(doc.found.updateTime, 'doc.found.updateTime');\n        var key = this.fromName(doc.found.name);\n        var version = this.fromVersion(doc.found.updateTime);\n        var fields = this.fromFields(doc.found.fields || {});\n        return new document_Document(key, version, fields, { hasLocalMutations: false });\n    };\n    JsonProtoSerializer.prototype.fromMissing = function (result) {\n        assert(!!result.missing, 'Tried to deserialize a missing document from a found document.');\n        assert(!!result.readTime, 'Tried to deserialize a missing document without a read time.');\n        var key = this.fromName(result.missing);\n        var version = this.fromVersion(result.readTime);\n        return new document_NoDocument(key, version);\n    };\n    JsonProtoSerializer.prototype.fromMaybeDocument = function (result) {\n        // tslint:disable-next-line:no-any\n        var type = result['result_type'];\n        if (hasTag(result, type, 'found')) {\n            return this.fromFound(result);\n        }\n        else if (hasTag(result, type, 'missing')) {\n            return this.fromMissing(result);\n        }\n        return fail('invalid batch get response: ' + JSON.stringify(result));\n    };\n    JsonProtoSerializer.prototype.toWatchTargetChangeState = function (state) {\n        switch (state) {\n            case WatchTargetChangeState.Added:\n                return 'ADD';\n            case WatchTargetChangeState.Current:\n                return 'CURRENT';\n            case WatchTargetChangeState.NoChange:\n                return 'NO_CHANGE';\n            case WatchTargetChangeState.Removed:\n                return 'REMOVE';\n            case WatchTargetChangeState.Reset:\n                return 'RESET';\n            default:\n                return fail('Unknown WatchTargetChangeState: ' + state);\n        }\n    };\n    JsonProtoSerializer.prototype.toTestWatchChange = function (watchChange) {\n        if (watchChange instanceof ExistenceFilterChange) {\n            return {\n                filter: {\n                    count: watchChange.existenceFilter.count,\n                    targetId: watchChange.targetId\n                }\n            };\n        }\n        if (watchChange instanceof DocumentWatchChange) {\n            if (watchChange.newDoc instanceof document_Document) {\n                var doc = watchChange.newDoc;\n                return {\n                    documentChange: {\n                        document: {\n                            name: this.toName(doc.key),\n                            fields: this.toFields(doc.data),\n                            updateTime: this.toVersion(doc.version)\n                        },\n                        targetIds: watchChange.updatedTargetIds,\n                        removedTargetIds: watchChange.removedTargetIds\n                    }\n                };\n            }\n            else if (watchChange.newDoc instanceof document_NoDocument) {\n                var doc = watchChange.newDoc;\n                return {\n                    documentDelete: {\n                        document: this.toName(doc.key),\n                        readTime: this.toVersion(doc.version),\n                        removedTargetIds: watchChange.removedTargetIds\n                    }\n                };\n            }\n            else if (watchChange.newDoc === null) {\n                return {\n                    documentRemove: {\n                        document: this.toName(watchChange.key),\n                        removedTargetIds: watchChange.removedTargetIds\n                    }\n                };\n            }\n        }\n        if (watchChange instanceof watch_change_WatchTargetChange) {\n            var cause = undefined;\n            if (watchChange.cause) {\n                cause = {\n                    code: mapRpcCodeFromCode(watchChange.cause.code),\n                    message: watchChange.cause.message\n                };\n            }\n            return {\n                targetChange: {\n                    targetChangeType: this.toWatchTargetChangeState(watchChange.state),\n                    targetIds: watchChange.targetIds,\n                    resumeToken: this.unsafeCastProtoByteString(watchChange.resumeToken),\n                    cause: cause\n                }\n            };\n        }\n        return fail('Unrecognized watch change: ' + JSON.stringify(watchChange));\n    };\n    JsonProtoSerializer.prototype.fromWatchChange = function (change) {\n        // tslint:disable-next-line:no-any\n        var type = change['change_type'];\n        var watchChange;\n        if (hasTag(change, type, 'targetChange')) {\n            assertPresent(change.targetChange, 'targetChange');\n            // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'\n            // if unset\n            var state = this.fromWatchTargetChangeState(change.targetChange.targetChangeType || 'NO_CHANGE');\n            var targetIds = change.targetChange.targetIds || [];\n            var resumeToken = change.targetChange.resumeToken || this.emptyByteString();\n            var causeProto = change.targetChange.cause;\n            var cause = causeProto && this.fromRpcStatus(causeProto);\n            watchChange = new watch_change_WatchTargetChange(state, targetIds, resumeToken, cause || null);\n        }\n        else if (hasTag(change, type, 'documentChange')) {\n            assertPresent(change.documentChange, 'documentChange');\n            assertPresent(change.documentChange.document, 'documentChange.name');\n            assertPresent(change.documentChange.document.name, 'documentChange.document.name');\n            assertPresent(change.documentChange.document.updateTime, 'documentChange.document.updateTime');\n            var entityChange = change.documentChange;\n            var key = this.fromName(entityChange.document.name);\n            var version = this.fromVersion(entityChange.document.updateTime);\n            var fields = this.fromFields(entityChange.document.fields || {});\n            var doc = new document_Document(key, version, fields, {\n                hasLocalMutations: false\n            });\n            var updatedTargetIds = entityChange.targetIds || [];\n            var removedTargetIds = entityChange.removedTargetIds || [];\n            watchChange = new DocumentWatchChange(updatedTargetIds, removedTargetIds, doc.key, doc);\n        }\n        else if (hasTag(change, type, 'documentDelete')) {\n            assertPresent(change.documentDelete, 'documentDelete');\n            assertPresent(change.documentDelete.document, 'documentDelete.document');\n            var docDelete = change.documentDelete;\n            var key = this.fromName(docDelete.document);\n            var version = docDelete.readTime\n                ? this.fromVersion(docDelete.readTime)\n                : snapshot_version_SnapshotVersion.forDeletedDoc();\n            var doc = new document_NoDocument(key, version);\n            var removedTargetIds = docDelete.removedTargetIds || [];\n            watchChange = new DocumentWatchChange([], removedTargetIds, doc.key, doc);\n        }\n        else if (hasTag(change, type, 'documentRemove')) {\n            assertPresent(change.documentRemove, 'documentRemove');\n            assertPresent(change.documentRemove.document, 'documentRemove');\n            var docRemove = change.documentRemove;\n            var key = this.fromName(docRemove.document);\n            var removedTargetIds = docRemove.removedTargetIds || [];\n            watchChange = new DocumentWatchChange([], removedTargetIds, key, null);\n        }\n        else if (hasTag(change, type, 'filter')) {\n            // TODO(dimond): implement existence filter parsing with strategy.\n            assertPresent(change.filter, 'filter');\n            assertPresent(change.filter.targetId, 'filter.targetId');\n            var filter = change.filter;\n            var count = filter.count || 0;\n            var existenceFilter = new ExistenceFilter(count);\n            var targetId = filter.targetId;\n            watchChange = new ExistenceFilterChange(targetId, existenceFilter);\n        }\n        else {\n            return fail('Unknown change type ' + JSON.stringify(change));\n        }\n        return watchChange;\n    };\n    JsonProtoSerializer.prototype.fromWatchTargetChangeState = function (state) {\n        if (state === 'NO_CHANGE') {\n            return WatchTargetChangeState.NoChange;\n        }\n        else if (state === 'ADD') {\n            return WatchTargetChangeState.Added;\n        }\n        else if (state === 'REMOVE') {\n            return WatchTargetChangeState.Removed;\n        }\n        else if (state === 'CURRENT') {\n            return WatchTargetChangeState.Current;\n        }\n        else if (state === 'RESET') {\n            return WatchTargetChangeState.Reset;\n        }\n        else {\n            return fail('Got unexpected TargetChange.state: ' + state);\n        }\n    };\n    JsonProtoSerializer.prototype.versionFromListenResponse = function (change) {\n        // We have only reached a consistent snapshot for the entire stream if there\n        // is a read_time set and it applies to all targets (i.e. the list of\n        // targets is empty). The backend is guaranteed to send such responses.\n        // tslint:disable-next-line:no-any\n        var type = change['response_type'];\n        if (!hasTag(change, type, 'targetChange')) {\n            return snapshot_version_SnapshotVersion.MIN;\n        }\n        var targetChange = change.targetChange;\n        if (targetChange.targetIds && targetChange.targetIds.length) {\n            return snapshot_version_SnapshotVersion.MIN;\n        }\n        if (!targetChange.readTime) {\n            return snapshot_version_SnapshotVersion.MIN;\n        }\n        return this.fromVersion(targetChange.readTime);\n    };\n    JsonProtoSerializer.prototype.toMutation = function (mutation) {\n        var _this = this;\n        var result;\n        if (mutation instanceof mutation_SetMutation) {\n            result = {\n                update: this.toMutationDocument(mutation.key, mutation.value)\n            };\n        }\n        else if (mutation instanceof mutation_DeleteMutation) {\n            result = { delete: this.toName(mutation.key) };\n        }\n        else if (mutation instanceof mutation_PatchMutation) {\n            result = {\n                update: this.toMutationDocument(mutation.key, mutation.data),\n                updateMask: this.toDocumentMask(mutation.fieldMask)\n            };\n        }\n        else if (mutation instanceof mutation_TransformMutation) {\n            result = {\n                transform: {\n                    document: this.toName(mutation.key),\n                    fieldTransforms: mutation.fieldTransforms.map(function (transform) {\n                        return _this.toFieldTransform(transform);\n                    })\n                }\n            };\n        }\n        else {\n            return fail('Unknown mutation type ' + mutation.type);\n        }\n        if (!mutation.precondition.isNone) {\n            result.currentDocument = this.toPrecondition(mutation.precondition);\n        }\n        return result;\n    };\n    JsonProtoSerializer.prototype.fromMutation = function (proto) {\n        var _this = this;\n        var precondition = proto.currentDocument\n            ? this.fromPrecondition(proto.currentDocument)\n            : mutation_Precondition.NONE;\n        if (proto.update) {\n            assertPresent(proto.update.name, 'name');\n            var key = this.fromName(proto.update.name);\n            var value = this.fromFields(proto.update.fields || {});\n            if (proto.updateMask) {\n                var fieldMask = this.fromDocumentMask(proto.updateMask);\n                return new mutation_PatchMutation(key, value, fieldMask, precondition);\n            }\n            else {\n                return new mutation_SetMutation(key, value, precondition);\n            }\n        }\n        else if (proto.delete) {\n            var key = this.fromName(proto.delete);\n            return new mutation_DeleteMutation(key, precondition);\n        }\n        else if (proto.transform) {\n            var key = this.fromName(proto.transform.document);\n            var fieldTransforms = proto.transform.fieldTransforms.map(function (transform) {\n                return _this.fromFieldTransform(transform);\n            });\n            assert(precondition.exists === true, 'Transforms only support precondition \"exists == true\"');\n            return new mutation_TransformMutation(key, fieldTransforms);\n        }\n        else {\n            return fail('unknown mutation proto: ' + JSON.stringify(proto));\n        }\n    };\n    JsonProtoSerializer.prototype.toPrecondition = function (precondition) {\n        assert(!precondition.isNone, \"Can't serialize an empty precondition\");\n        if (precondition.updateTime !== undefined) {\n            return {\n                updateTime: this.toVersion(precondition.updateTime)\n            };\n        }\n        else if (precondition.exists !== undefined) {\n            return { exists: precondition.exists };\n        }\n        else {\n            return fail('Unknown precondition');\n        }\n    };\n    JsonProtoSerializer.prototype.fromPrecondition = function (precondition) {\n        if (precondition.updateTime !== undefined) {\n            return mutation_Precondition.updateTime(this.fromVersion(precondition.updateTime));\n        }\n        else if (precondition.exists !== undefined) {\n            return mutation_Precondition.exists(precondition.exists);\n        }\n        else {\n            return mutation_Precondition.NONE;\n        }\n    };\n    JsonProtoSerializer.prototype.fromWriteResult = function (proto) {\n        var _this = this;\n        // NOTE: Deletes don't have an updateTime.\n        var version = proto.updateTime\n            ? this.fromVersion(proto.updateTime)\n            : null;\n        var transformResults = null;\n        if (proto.transformResults) {\n            transformResults = proto.transformResults.map(function (result) {\n                return _this.fromValue(result);\n            });\n        }\n        return new MutationResult(version, transformResults);\n    };\n    JsonProtoSerializer.prototype.fromWriteResults = function (protos) {\n        var _this = this;\n        return (protos || []).map(function (proto) { return _this.fromWriteResult(proto); });\n    };\n    JsonProtoSerializer.prototype.toFieldTransform = function (fieldTransform) {\n        assert(fieldTransform.transform instanceof ServerTimestampTransform, 'Unknown transform: ' + fieldTransform.transform);\n        return {\n            fieldPath: fieldTransform.field.canonicalString(),\n            setToServerValue: 'REQUEST_TIME'\n        };\n    };\n    JsonProtoSerializer.prototype.fromFieldTransform = function (proto) {\n        assert(proto.setToServerValue === 'REQUEST_TIME', 'Unknown transform proto: ' + JSON.stringify(proto));\n        var fieldPath = path_FieldPath.fromServerFormat(proto.fieldPath);\n        return new FieldTransform(fieldPath, ServerTimestampTransform.instance);\n    };\n    JsonProtoSerializer.prototype.toDocumentsTarget = function (query) {\n        return { documents: [this.toQueryPath(query.path)] };\n    };\n    JsonProtoSerializer.prototype.fromDocumentsTarget = function (documentsTarget) {\n        var count = documentsTarget.documents.length;\n        assert(count === 1, 'DocumentsTarget contained other than 1 document: ' + count);\n        var name = documentsTarget.documents[0];\n        return query_Query.atPath(this.fromQueryPath(name));\n    };\n    JsonProtoSerializer.prototype.toQueryTarget = function (query) {\n        // Dissect the path into parent, collectionId, and optional key filter.\n        var result = { structuredQuery: {} };\n        if (query.path.isEmpty()) {\n            result.parent = this.toQueryPath(path_ResourcePath.EMPTY_PATH);\n        }\n        else {\n            var path = query.path;\n            assert(path.length % 2 !== 0, 'Document queries with filters are not supported.');\n            result.parent = this.toQueryPath(path.popLast());\n            result.structuredQuery.from = [{ collectionId: path.lastSegment() }];\n        }\n        var where = this.toFilter(query.filters);\n        if (where) {\n            result.structuredQuery.where = where;\n        }\n        var orderBy = this.toOrder(query.orderBy);\n        if (orderBy) {\n            result.structuredQuery.orderBy = orderBy;\n        }\n        var limit = this.toLimit(query.limit);\n        if (limit !== undefined) {\n            result.structuredQuery.limit = limit;\n        }\n        if (query.startAt) {\n            result.structuredQuery.startAt = this.toCursor(query.startAt);\n        }\n        if (query.endAt) {\n            result.structuredQuery.endAt = this.toCursor(query.endAt);\n        }\n        return result;\n    };\n    JsonProtoSerializer.prototype.fromQueryTarget = function (target) {\n        var path = this.fromQueryPath(target.parent);\n        var query = target.structuredQuery;\n        var fromCount = query.from ? query.from.length : 0;\n        if (fromCount > 0) {\n            assert(fromCount === 1, 'StructuredQuery.from with more than one collection is not supported.');\n            var from = query.from[0];\n            path = path.child(from.collectionId);\n        }\n        var filterBy = [];\n        if (query.where) {\n            filterBy = this.fromFilter(query.where);\n        }\n        var orderBy = [];\n        if (query.orderBy) {\n            orderBy = this.fromOrder(query.orderBy);\n        }\n        var limit = null;\n        if (query.limit) {\n            limit = query.limit;\n        }\n        var startAt = null;\n        if (query.startAt) {\n            startAt = this.fromCursor(query.startAt);\n        }\n        var endAt = null;\n        if (query.endAt) {\n            endAt = this.fromCursor(query.endAt);\n        }\n        return new query_Query(path, orderBy, filterBy, limit, startAt, endAt);\n    };\n    JsonProtoSerializer.prototype.toListenRequestLabels = function (queryData) {\n        var value = this.toLabel(queryData.purpose);\n        if (value == null) {\n            return null;\n        }\n        else {\n            return {\n                'goog-listen-tags': value\n            };\n        }\n    };\n    JsonProtoSerializer.prototype.toLabel = function (purpose) {\n        switch (purpose) {\n            case QueryPurpose.Listen:\n                return null;\n            case QueryPurpose.ExistenceFilterMismatch:\n                return 'existence-filter-mismatch';\n            case QueryPurpose.LimboResolution:\n                return 'limbo-document';\n            default:\n                return fail('Unrecognized query purpose: ' + purpose);\n        }\n    };\n    JsonProtoSerializer.prototype.toTarget = function (queryData) {\n        var result;\n        var query = queryData.query;\n        if (query.isDocumentQuery()) {\n            result = { documents: this.toDocumentsTarget(query) };\n        }\n        else {\n            result = { query: this.toQueryTarget(query) };\n        }\n        result.targetId = queryData.targetId;\n        if (queryData.resumeToken.length > 0) {\n            result.resumeToken = this.unsafeCastProtoByteString(queryData.resumeToken);\n        }\n        return result;\n    };\n    JsonProtoSerializer.prototype.toFilter = function (filters) {\n        var _this = this;\n        if (filters.length === 0)\n            return;\n        var protos = filters.map(function (filter) {\n            return filter instanceof query_RelationFilter\n                ? _this.toRelationFilter(filter)\n                : _this.toUnaryFilter(filter);\n        });\n        if (protos.length === 1) {\n            return protos[0];\n        }\n        return { compositeFilter: { op: 'AND', filters: protos } };\n    };\n    JsonProtoSerializer.prototype.fromFilter = function (filter) {\n        var _this = this;\n        if (!filter) {\n            return [];\n        }\n        else if (filter.unaryFilter !== undefined) {\n            return [this.fromUnaryFilter(filter)];\n        }\n        else if (filter.fieldFilter !== undefined) {\n            return [this.fromRelationFilter(filter)];\n        }\n        else if (filter.compositeFilter !== undefined) {\n            return filter.compositeFilter.filters\n                .map(function (f) { return _this.fromFilter(f); })\n                .reduce(function (accum, current) { return accum.concat(current); });\n        }\n        else {\n            return fail('Unknown filter: ' + JSON.stringify(filter));\n        }\n    };\n    JsonProtoSerializer.prototype.toOrder = function (orderBys) {\n        var _this = this;\n        if (orderBys.length === 0)\n            return;\n        return orderBys.map(function (order) { return _this.toPropertyOrder(order); });\n    };\n    JsonProtoSerializer.prototype.fromOrder = function (orderBys) {\n        var _this = this;\n        return orderBys.map(function (order) { return _this.fromPropertyOrder(order); });\n    };\n    JsonProtoSerializer.prototype.toLimit = function (limit) {\n        if (!isNullOrUndefined(limit)) {\n            return limit;\n        }\n        return;\n    };\n    JsonProtoSerializer.prototype.toCursor = function (cursor) {\n        var _this = this;\n        return {\n            before: cursor.before,\n            values: cursor.position.map(function (component) { return _this.toValue(component); })\n        };\n    };\n    JsonProtoSerializer.prototype.fromCursor = function (cursor) {\n        var _this = this;\n        var before = !!cursor.before;\n        var position = cursor.values.map(function (component) { return _this.fromValue(component); });\n        return new query_Bound(position, before);\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toDirection = function (dir) {\n        return DIRECTIONS[dir.name];\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.fromDirection = function (dir) {\n        switch (dir) {\n            case 'ASCENDING':\n                return Direction.ASCENDING;\n            case 'DESCENDING':\n                return Direction.DESCENDING;\n            default:\n                return undefined;\n        }\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toOperatorName = function (op) {\n        return OPERATORS[op.name];\n    };\n    JsonProtoSerializer.prototype.fromOperatorName = function (op) {\n        switch (op) {\n            case 'EQUAL':\n                return query_RelationOp.EQUAL;\n            case 'GREATER_THAN':\n                return query_RelationOp.GREATER_THAN;\n            case 'GREATER_THAN_OR_EQUAL':\n                return query_RelationOp.GREATER_THAN_OR_EQUAL;\n            case 'LESS_THAN':\n                return query_RelationOp.LESS_THAN;\n            case 'LESS_THAN_OR_EQUAL':\n                return query_RelationOp.LESS_THAN_OR_EQUAL;\n            case 'OPERATOR_UNSPECIFIED':\n                return fail('Unspecified relation');\n            default:\n                return fail('Unknown relation');\n        }\n    };\n    JsonProtoSerializer.prototype.toFieldPathReference = function (path) {\n        return { fieldPath: path.canonicalString() };\n    };\n    JsonProtoSerializer.prototype.fromFieldPathReference = function (fieldReference) {\n        return path_FieldPath.fromServerFormat(fieldReference.fieldPath);\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toPropertyOrder = function (orderBy) {\n        return {\n            field: this.toFieldPathReference(orderBy.field),\n            direction: this.toDirection(orderBy.dir)\n        };\n    };\n    JsonProtoSerializer.prototype.fromPropertyOrder = function (orderBy) {\n        return new query_OrderBy(this.fromFieldPathReference(orderBy.field), this.fromDirection(orderBy.direction));\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toRelationFilter = function (filter) {\n        if (filter instanceof query_RelationFilter) {\n            return {\n                fieldFilter: {\n                    field: this.toFieldPathReference(filter.field),\n                    op: this.toOperatorName(filter.op),\n                    value: this.toValue(filter.value)\n                }\n            };\n        }\n        else {\n            return fail('Unrecognized filter: ' + JSON.stringify(filter));\n        }\n    };\n    JsonProtoSerializer.prototype.fromRelationFilter = function (filter) {\n        return new query_RelationFilter(this.fromFieldPathReference(filter.fieldFilter.field), this.fromOperatorName(filter.fieldFilter.op), this.fromValue(filter.fieldFilter.value));\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toUnaryFilter = function (filter) {\n        if (filter instanceof NanFilter) {\n            return {\n                unaryFilter: {\n                    field: this.toFieldPathReference(filter.field),\n                    op: 'IS_NAN'\n                }\n            };\n        }\n        else if (filter instanceof NullFilter) {\n            return {\n                unaryFilter: {\n                    field: this.toFieldPathReference(filter.field),\n                    op: 'IS_NULL'\n                }\n            };\n        }\n        else {\n            return fail('Unrecognized filter: ' + JSON.stringify(filter));\n        }\n    };\n    JsonProtoSerializer.prototype.fromUnaryFilter = function (filter) {\n        switch (filter.unaryFilter.op) {\n            case 'IS_NAN':\n                var nanField = this.fromFieldPathReference(filter.unaryFilter.field);\n                return new NanFilter(nanField);\n            case 'IS_NULL':\n                var nullField = this.fromFieldPathReference(filter.unaryFilter.field);\n                return new NullFilter(nullField);\n            case 'OPERATOR_UNSPECIFIED':\n                return fail('Unspecified filter');\n            default:\n                return fail('Unknown filter');\n        }\n    };\n    JsonProtoSerializer.prototype.toDocumentMask = function (fieldMask) {\n        return {\n            fieldPaths: fieldMask.fields.map(function (field) { return field.canonicalString(); })\n        };\n    };\n    JsonProtoSerializer.prototype.fromDocumentMask = function (proto) {\n        var paths = proto.fieldPaths || [];\n        var fields = paths.map(function (path) { return path_FieldPath.fromServerFormat(path); });\n        return new mutation_FieldMask(fields);\n    };\n    return JsonProtoSerializer;\n}());\n\n/**\n * Checks for a specific oneof tag in a protocol buffer message.\n *\n * This intentionally accommodates two distinct cases:\n *\n * 1) Messages containing a type tag: these are the format produced by GRPC in\n * return values. These may contain default-value mappings for all tags in the\n * oneof but the type tag specifies which one was actually set.\n *\n * 2) Messages that don't contain a type tag: these are the format required by\n * GRPC as inputs. If we emitted objects with type tags, ProtoBuf.js would\n * choke claiming that the tags aren't fields in the Message.\n *\n * Allowing both formats here makes the serializer able to consume the outputs\n * it produces: for all messages it supports, fromX(toX(value)) == value.\n *\n * Note that case 2 suffers from ambiguity: if multiple tags are present\n * without a type tag then the callers are structured in such a way that the\n * first invocation will win. Since we only parse in this mode when parsing\n * the output of a serialize method this works, but it's not a general\n * solution.\n *\n * Unfortunately there is no general solution here because proto3 makes it\n * impossible to distinguish unset from explicitly set fields: both have the\n * default value for the type. Without the type tag but multiple value tags\n * it's possible to have default values for each tag in the oneof and not be\n * able to know which was actually in effect.\n */\nfunction hasTag(obj, type, tag) {\n    return type === tag || (!type && tag in obj);\n}\n\n//# sourceMappingURL=serializer.js.map\n\n// EXTERNAL MODULE: ../webchannel-wrapper/dist/index.js\nvar dist = __webpack_require__(115);\nvar dist_default = /*#__PURE__*/__webpack_require__.n(dist);\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/stream_bridge.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Provides a simple helper class that implements the Stream interface to\n * bridge to other implementations that are streams but do not implement the\n * interface. The stream callbacks are invoked with the callOn... methods.\n */\nvar stream_bridge_StreamBridge = /** @class */ (function () {\n    function StreamBridge(args) {\n        this.wrappedOnOpen = null;\n        this.wrappedOnClose = null;\n        this.wrappedOnMessage = null;\n        this.sendFn = args.sendFn;\n        this.closeFn = args.closeFn;\n    }\n    StreamBridge.prototype.onOpen = function (callback) {\n        assert(!this.wrappedOnOpen, 'Called onOpen on stream twice!');\n        this.wrappedOnOpen = callback;\n    };\n    StreamBridge.prototype.onClose = function (callback) {\n        assert(!this.wrappedOnClose, 'Called onClose on stream twice!');\n        this.wrappedOnClose = callback;\n    };\n    StreamBridge.prototype.onMessage = function (callback) {\n        assert(!this.wrappedOnMessage, 'Called onMessage on stream twice!');\n        this.wrappedOnMessage = callback;\n    };\n    StreamBridge.prototype.close = function () {\n        this.closeFn();\n    };\n    StreamBridge.prototype.send = function (msg) {\n        this.sendFn(msg);\n    };\n    StreamBridge.prototype.callOnOpen = function () {\n        assert(this.wrappedOnOpen !== null, 'Cannot call onOpen because no callback ' + 'was set');\n        this.wrappedOnOpen();\n    };\n    StreamBridge.prototype.callOnClose = function (err) {\n        assert(this.wrappedOnClose !== null, 'Cannot call onClose because no ' + 'callback was set');\n        this.wrappedOnClose(err);\n    };\n    StreamBridge.prototype.callOnMessage = function (msg) {\n        assert(this.wrappedOnMessage !== null, 'Cannot call onMessage because no ' + 'callback was set');\n        this.wrappedOnMessage(msg);\n    };\n    return StreamBridge;\n}());\n\n\n//# sourceMappingURL=stream_bridge.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/platform_browser/webchannel_connection.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\nvar LOG_TAG = 'Connection';\nvar RPC_URL_VERSION = 'v1beta1';\n// TODO(b/38203344): The SDK_VERSION is set independently from Firebase because\n// we are doing out-of-band releases. Once we release as part of Firebase, we\n// should use the Firebase version instead.\nvar X_GOOG_API_CLIENT_VALUE = 'gl-js/ fire/' + SDK_VERSION;\nvar XHR_TIMEOUT_SECS = 15;\nvar webchannel_connection_WebChannelConnection = /** @class */ (function () {\n    function WebChannelConnection(info) {\n        this.databaseId = info.databaseId;\n        this.pool = new dist[\"XhrIoPool\"]();\n        var proto = info.ssl ? 'https' : 'http';\n        this.baseUrl = proto + '://' + info.host;\n    }\n    /**\n     * Modifies the headers for a request, adding any authorization token if\n     * present and any additional headers for the request.\n     */\n    WebChannelConnection.prototype.modifyHeadersForRequest = function (headers, token) {\n        if (token) {\n            for (var header in token.authHeaders) {\n                if (token.authHeaders.hasOwnProperty(header)) {\n                    headers[header] = token.authHeaders[header];\n                }\n            }\n        }\n        headers['X-Goog-Api-Client'] = X_GOOG_API_CLIENT_VALUE;\n        // This header is used to improve routing and project isolation by the\n        // backend.\n        headers['google-cloud-resource-prefix'] =\n            \"projects/\" + this.databaseId.projectId + \"/\" +\n                (\"databases/\" + this.databaseId.database);\n    };\n    WebChannelConnection.prototype.invoke = function (rpcName, request, token) {\n        var _this = this;\n        var url = this.makeUrl(rpcName);\n        return new Promise(function (resolve, reject) {\n            _this.pool.getObject(function (xhr) {\n                xhr.listenOnce(dist[\"EventType\"].COMPLETE, function () {\n                    try {\n                        switch (xhr.getLastErrorCode()) {\n                            case dist[\"ErrorCode\"].NO_ERROR:\n                                var json = xhr.getResponseJson();\n                                debug(LOG_TAG, 'XHR received:', JSON.stringify(json));\n                                resolve(json);\n                                break;\n                            case dist[\"ErrorCode\"].TIMEOUT:\n                                log_error('RPC \"' + rpcName + '\" timed out, retrying.');\n                                reject(new FirestoreError(Code.DEADLINE_EXCEEDED, 'Request time out'));\n                                break;\n                            case dist[\"ErrorCode\"].HTTP_ERROR:\n                                var status_1 = xhr.getStatus();\n                                log_error('RPC \"' + rpcName + '\" failed with status:', status_1, 'response text:', xhr.getResponseText());\n                                if (status_1 > 0) {\n                                    reject(new FirestoreError(mapCodeFromHttpStatus(status_1), 'Server responded with status ' + xhr.getStatusText()));\n                                }\n                                else {\n                                    // If we received an HTTP_ERROR but there's no status code,\n                                    // it's most probably a connection issue, let's retry.\n                                    log_error(LOG_TAG, 'RPC \"' + rpcName + '\" failed, retrying.');\n                                    reject(new FirestoreError(Code.UNAVAILABLE, 'Connection failed.'));\n                                }\n                                break;\n                            default:\n                                fail('RPC \"' +\n                                    rpcName +\n                                    '\" failed with unanticipated ' +\n                                    'webchannel error ' +\n                                    xhr.getLastErrorCode() +\n                                    ': ' +\n                                    xhr.getLastError() +\n                                    ', giving up.');\n                        }\n                    }\n                    finally {\n                        debug(LOG_TAG, 'RPC \"' + rpcName + '\" completed.');\n                        _this.pool.releaseObject(xhr);\n                    }\n                });\n                var requestString = JSON.stringify(request);\n                debug(LOG_TAG, 'XHR sending: ', url + ' ' + requestString);\n                // Content-Type: text/plain will avoid preflight requests which might\n                // mess with CORS and redirects by proxies. If we add custom headers\n                // we will need to change this code to potentially use the\n                // $httpOverwrite parameter supported by ESF to avoid\n                // triggering preflight requests.\n                var headers = { 'Content-Type': 'text/plain' };\n                _this.modifyHeadersForRequest(headers, token);\n                xhr.send(url, 'POST', requestString, headers, XHR_TIMEOUT_SECS);\n            });\n        });\n    };\n    WebChannelConnection.prototype.openStream = function (rpcName, token) {\n        var rpcService = WebChannelConnection.RPC_STREAM_SERVICE_MAPPING[rpcName];\n        var rpcUrlName = WebChannelConnection.RPC_STREAM_NAME_MAPPING[rpcName];\n        if (!rpcService || !rpcUrlName) {\n            fail('Unknown RPC name: ' + rpcName);\n        }\n        var urlParts = [\n            this.baseUrl,\n            '/',\n            rpcService,\n            '/',\n            rpcUrlName,\n            '/channel'\n        ];\n        var webchannelTransport = Object(dist[\"createWebChannelTransport\"])();\n        var request = {\n            // Background channel test avoids the initial two test calls and decreases\n            // initial cold start time.\n            // TODO(dimond): wenboz@ mentioned this might affect use with proxies and\n            // we should monitor closely for any reports.\n            backgroundChannelTest: true,\n            // Required for backend stickiness, routing behavior is based on this\n            // parameter.\n            httpSessionIdParam: 'gsessionid',\n            initMessageHeaders: {},\n            sendRawJson: true,\n            supportsCrossDomainXhr: true\n        };\n        this.modifyHeadersForRequest(request.initMessageHeaders, token);\n        var url = urlParts.join('');\n        debug(LOG_TAG, 'Creating WebChannel: ' + url + ' ' + request);\n        // tslint:disable-next-line:no-any Because listen isn't defined on it.\n        var channel = webchannelTransport.createWebChannel(url, request);\n        // WebChannel supports sending the first message with the handshake - saving\n        // a network round trip. However, it will have to call send in the same\n        // JS event loop as open. In order to enforce this, we delay actually\n        // opening the WebChannel until send is called. Whether we have called\n        // open is tracked with this variable.\n        var opened = false;\n        // A flag to determine whether the stream was closed (by us or through an\n        // error/close event) to avoid delivering multiple close events or sending\n        // on a closed stream\n        var closed = false;\n        // tslint:disable-next-line:no-any\n        var streamBridge = new stream_bridge_StreamBridge({\n            sendFn: function (msg) {\n                if (!closed) {\n                    if (!opened) {\n                        debug(LOG_TAG, 'Opening WebChannel transport.');\n                        channel.open();\n                        opened = true;\n                    }\n                    debug(LOG_TAG, 'WebChannel sending:', msg);\n                    channel.send(msg);\n                }\n                else {\n                    debug(LOG_TAG, 'Not sending because WebChannel is closed:', msg);\n                }\n            },\n            closeFn: function () { return channel.close(); }\n        });\n        // Closure events are guarded and exceptions are swallowed, so catch any\n        // exception and rethrow using a setTimeout so they become visible again.\n        // Note that eventually this function could go away if we are confident\n        // enough the code is exception free.\n        var unguardedEventListen = function (type, fn) {\n            // TODO(dimond): closure typing seems broken because WebChannel does\n            // not implement goog.events.Listenable\n            channel.listen(type, function (param) {\n                try {\n                    fn(param);\n                }\n                catch (e) {\n                    setTimeout(function () {\n                        throw e;\n                    }, 0);\n                }\n            });\n        };\n        unguardedEventListen(dist[\"WebChannel\"].EventType.OPEN, function () {\n            if (!closed) {\n                debug(LOG_TAG, 'WebChannel transport opened.');\n            }\n        });\n        unguardedEventListen(dist[\"WebChannel\"].EventType.CLOSE, function () {\n            if (!closed) {\n                closed = true;\n                debug(LOG_TAG, 'WebChannel transport closed');\n                streamBridge.callOnClose();\n            }\n        });\n        unguardedEventListen(dist[\"WebChannel\"].EventType.ERROR, function (err) {\n            if (!closed) {\n                closed = true;\n                debug(LOG_TAG, 'WebChannel transport errored:', err);\n                streamBridge.callOnClose(new FirestoreError(Code.UNAVAILABLE, 'The operation could not be completed'));\n            }\n        });\n        unguardedEventListen(dist[\"WebChannel\"].EventType.MESSAGE, function (msg) {\n            if (!closed) {\n                // WebChannel delivers message events as array. If batching\n                // is not enabled (it's off by default) each message will be\n                // delivered alone, resulting in a single element array.\n                var msgData = msg.data[0];\n                assert(!!msgData, 'Got a webchannel message without data.');\n                // TODO(b/35143891): There is a bug in One Platform that caused errors\n                // (and only errors) to be wrapped in an extra array. To be forward\n                // compatible with the bug we need to check either condition. The latter\n                // can be removed once the fix has been rolled out.\n                var error = msgData.error || (msgData[0] && msgData[0].error);\n                if (error) {\n                    debug(LOG_TAG, 'WebChannel received error:', error);\n                    // error.status will be a string like 'OK' or 'NOT_FOUND'.\n                    var status_2 = error.status;\n                    var code = mapCodeFromRpcStatus(status_2);\n                    var message = error.message;\n                    if (code === undefined) {\n                        code = Code.INTERNAL;\n                        message =\n                            'Unknown error status: ' +\n                                status_2 +\n                                ' with message ' +\n                                error.message;\n                    }\n                    // Mark closed so no further events are propagated\n                    closed = true;\n                    streamBridge.callOnClose(new FirestoreError(code, message));\n                    channel.close();\n                }\n                else {\n                    debug(LOG_TAG, 'WebChannel received:', msgData);\n                    streamBridge.callOnMessage(msgData);\n                }\n            }\n        });\n        setTimeout(function () {\n            // Technically we could/should wait for the WebChannel opened event,\n            // but because we want to send the first message with the WebChannel\n            // handshake we pretend the channel opened here (asynchronously), and\n            // then delay the actual open until the first message is sent.\n            streamBridge.callOnOpen();\n        }, 0);\n        return streamBridge;\n    };\n    // visible for testing\n    WebChannelConnection.prototype.makeUrl = function (rpcName) {\n        var url = [this.baseUrl, '/', RPC_URL_VERSION];\n        url.push('/projects/');\n        url.push(this.databaseId.projectId);\n        url.push('/databases/');\n        url.push(this.databaseId.database);\n        url.push('/documents');\n        url.push(':');\n        url.push(rpcName);\n        return url.join('');\n    };\n    /**\n     * Mapping from RPC name to service providing the RPC.\n     * For streaming RPCs only.\n     */\n    WebChannelConnection.RPC_STREAM_SERVICE_MAPPING = {\n        Write: 'google.firestore.v1beta1.Firestore',\n        Listen: 'google.firestore.v1beta1.Firestore'\n    };\n    /**\n     * Mapping from RPC name to actual RPC name in URLs.\n     * For streaming RPCs only.\n     */\n    WebChannelConnection.RPC_STREAM_NAME_MAPPING = {\n        Write: 'Write',\n        Listen: 'Listen'\n    };\n    return WebChannelConnection;\n}());\n\n\n//# sourceMappingURL=webchannel_connection.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/platform_browser/browser_platform.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar browser_platform_BrowserPlatform = /** @class */ (function () {\n    function BrowserPlatform() {\n        this.emptyByteString = '';\n        this.base64Available = typeof atob !== 'undefined';\n    }\n    BrowserPlatform.prototype.loadConnection = function (databaseInfo) {\n        return Promise.resolve(new webchannel_connection_WebChannelConnection(databaseInfo));\n    };\n    BrowserPlatform.prototype.newSerializer = function (databaseId) {\n        return new serializer_JsonProtoSerializer(databaseId, { useProto3Json: true });\n    };\n    BrowserPlatform.prototype.atob = function (encoded) {\n        return atob(encoded);\n    };\n    BrowserPlatform.prototype.btoa = function (raw) {\n        return btoa(raw);\n    };\n    return BrowserPlatform;\n}());\n\n\n//# sourceMappingURL=browser_platform.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/platform_browser/browser_init.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * This code needs to run before Firestore is used. This can be achieved in\n * several ways:\n *   1) Through the JSCompiler compiling this code and then (automatically)\n *      executing it before exporting the Firestore symbols.\n *   2) Through importing this module first in a Firestore main module\n */\nplatform_PlatformSupport.setPlatform(new browser_platform_BrowserPlatform());\n\n//# sourceMappingURL=browser_init.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/field_path.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n// tslint:disable:strip-private-property-underscore\n/**\n * A FieldPath refers to a field in a document. The path may consist of a single\n * field name (referring to a top-level field in the document), or a list of\n * field names (referring to a nested field in the document).\n */\nvar field_path_FieldPath = /** @class */ (function () {\n    /**\n     * Creates a FieldPath from the provided field names. If more than one field\n     * name is provided, the path will point to a nested field in a document.\n     *\n     * @param fieldNames A list of field names.\n     */\n    function FieldPath() {\n        var fieldNames = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            fieldNames[_i] = arguments[_i];\n        }\n        validateNamedArrayAtLeastNumberOfElements('FieldPath', fieldNames, 'fieldNames', 1);\n        for (var i = 0; i < fieldNames.length; ++i) {\n            validateArgType('FieldPath', 'string', i, fieldNames[i]);\n            if (fieldNames[i].length === 0) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field name at argument $(i + 1). \" +\n                    'Field names must not be empty.');\n            }\n        }\n        this._internalPath = new path_FieldPath(fieldNames);\n    }\n    FieldPath.documentId = function () {\n        return FieldPath._DOCUMENT_ID;\n    };\n    /**\n     * Internal Note: The backend doesn't technically support querying by\n     * document ID. Instead it queries by the entire document name (full path\n     * included), but in the cases we currently support documentId(), the net\n     * effect is the same.\n     */\n    FieldPath._DOCUMENT_ID = new FieldPath(path_FieldPath.keyField().canonicalString());\n    return FieldPath;\n}());\n\n/**\n * Matches any characters in a field path string that are reserved.\n */\nvar RESERVED = new RegExp('[~\\\\*/\\\\[\\\\]]');\n/**\n * Parses a field path string into a FieldPath, treating dots as separators.\n */\nfunction fromDotSeparatedString(path) {\n    var found = path.search(RESERVED);\n    if (found >= 0) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not contain \" +\n            \"'~', '*', '/', '[', or ']'\");\n    }\n    try {\n        return new (field_path_FieldPath.bind.apply(field_path_FieldPath, [void 0].concat(path.split('.'))))();\n    }\n    catch (e) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not be empty, \" +\n            \"begin with '.', end with '.', or contain '..'\");\n    }\n}\n\n//# sourceMappingURL=field_path.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/types.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Describes the online state of the Firestore client */\nvar OnlineState;\n(function (OnlineState) {\n    /**\n     * The Firestore client is in an unknown online state. This means the client\n     * is either not actively trying to establish a connection or it was\n     * previously in an unknown state and is trying to establish a connection.\n     */\n    OnlineState[OnlineState[\"Unknown\"] = 0] = \"Unknown\";\n    /**\n     * The client is connected and the connections are healthy. This state is\n     * reached after a successful connection and there has been at least one\n     * succesful message received from the backends.\n     */\n    OnlineState[OnlineState[\"Healthy\"] = 1] = \"Healthy\";\n    /**\n     * The client has tried to establish a connection but has failed.\n     * This state is reached after either a connection attempt failed or a\n     * healthy stream was closed for unexpected reasons.\n     */\n    OnlineState[OnlineState[\"Failed\"] = 2] = \"Failed\";\n})(OnlineState = OnlineState || (OnlineState = {}));\n\n//# sourceMappingURL=types.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/view_snapshot.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar ChangeType;\n(function (ChangeType) {\n    ChangeType[ChangeType[\"Added\"] = 0] = \"Added\";\n    ChangeType[ChangeType[\"Removed\"] = 1] = \"Removed\";\n    ChangeType[ChangeType[\"Modified\"] = 2] = \"Modified\";\n    ChangeType[ChangeType[\"Metadata\"] = 3] = \"Metadata\";\n})(ChangeType = ChangeType || (ChangeType = {}));\nvar SyncState;\n(function (SyncState) {\n    SyncState[SyncState[\"Local\"] = 0] = \"Local\";\n    SyncState[SyncState[\"Synced\"] = 1] = \"Synced\";\n})(SyncState = SyncState || (SyncState = {}));\n/**\n * DocumentChangeSet keeps track of a set of changes to docs in a query, merging\n * duplicate events for the same doc.\n */\nvar view_snapshot_DocumentChangeSet = /** @class */ (function () {\n    function DocumentChangeSet() {\n        this.changeMap = new sorted_map_SortedMap(document_key_DocumentKey.comparator);\n    }\n    DocumentChangeSet.prototype.track = function (change) {\n        var key = change.doc.key;\n        var oldChange = this.changeMap.get(key);\n        if (!oldChange) {\n            this.changeMap = this.changeMap.insert(key, change);\n            return;\n        }\n        // Merge the new change with the existing change.\n        if (change.type !== ChangeType.Added &&\n            oldChange.type === ChangeType.Metadata) {\n            this.changeMap = this.changeMap.insert(key, change);\n        }\n        else if (change.type === ChangeType.Metadata &&\n            oldChange.type !== ChangeType.Removed) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: oldChange.type,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Modified &&\n            oldChange.type === ChangeType.Modified) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Modified,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Modified &&\n            oldChange.type === ChangeType.Added) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Added,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Removed &&\n            oldChange.type === ChangeType.Added) {\n            this.changeMap = this.changeMap.remove(key);\n        }\n        else if (change.type === ChangeType.Removed &&\n            oldChange.type === ChangeType.Modified) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Removed,\n                doc: oldChange.doc\n            });\n        }\n        else if (change.type === ChangeType.Added &&\n            oldChange.type === ChangeType.Removed) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Modified,\n                doc: change.doc\n            });\n        }\n        else {\n            // This includes these cases, which don't make sense:\n            // Added->Added\n            // Removed->Removed\n            // Modified->Added\n            // Removed->Modified\n            // Metadata->Added\n            // Removed->Metadata\n            fail('unsupported combination of changes: ' +\n                JSON.stringify(change) +\n                ' after ' +\n                JSON.stringify(oldChange));\n        }\n    };\n    DocumentChangeSet.prototype.getChanges = function () {\n        var changes = [];\n        this.changeMap.inorderTraversal(function (key, change) {\n            changes.push(change);\n        });\n        return changes;\n    };\n    return DocumentChangeSet;\n}());\n\n\n//# sourceMappingURL=view_snapshot.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/document_set.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n/**\n * DocumentSet is an immutable (copy-on-write) collection that holds documents\n * in order specified by the provided comparator. We always add a document key\n * comparator on top of what is provided to guarantee document equality based on\n * the key.\n */\nvar document_set_DocumentSet = /** @class */ (function () {\n    /** The default ordering is by key if the comparator is omitted */\n    function DocumentSet(comp) {\n        // We are adding document key comparator to the end as it's the only\n        // guaranteed unique property of a document.\n        if (comp) {\n            this.comparator = function (d1, d2) {\n                return comp(d1, d2) || document_key_DocumentKey.comparator(d1.key, d2.key);\n            };\n        }\n        else {\n            this.comparator = function (d1, d2) {\n                return document_key_DocumentKey.comparator(d1.key, d2.key);\n            };\n        }\n        this.keyedMap = documentMap();\n        this.sortedSet = new sorted_map_SortedMap(this.comparator);\n    }\n    /**\n     * Returns an empty copy of the existing DocumentSet, using the same\n     * comparator.\n     */\n    DocumentSet.emptySet = function (oldSet) {\n        return new DocumentSet(oldSet.comparator);\n    };\n    DocumentSet.prototype.has = function (key) {\n        return this.keyedMap.get(key) != null;\n    };\n    DocumentSet.prototype.get = function (key) {\n        return this.keyedMap.get(key);\n    };\n    DocumentSet.prototype.first = function () {\n        return this.sortedSet.minKey();\n    };\n    DocumentSet.prototype.last = function () {\n        return this.sortedSet.maxKey();\n    };\n    DocumentSet.prototype.isEmpty = function () {\n        return this.sortedSet.isEmpty();\n    };\n    /**\n     * Returns previous document or null if it's a first doc.\n     *\n     * @param key A key that MUST be present in the DocumentSet.\n     */\n    DocumentSet.prototype.prevDoc = function (key) {\n        assert(this.has(key), 'Trying to get a previous document to non-existing key: ' + key);\n        var doc = this.keyedMap.get(key);\n        return this.sortedSet.getPredecessorKey(doc);\n    };\n    /**\n     * Returns the index of the provided key in the document set, or -1 if the\n     * document key is not present in the set;\n     */\n    DocumentSet.prototype.indexOf = function (key) {\n        var doc = this.keyedMap.get(key);\n        return doc ? this.sortedSet.indexOf(doc) : -1;\n    };\n    Object.defineProperty(DocumentSet.prototype, \"size\", {\n        get: function () {\n            return this.sortedSet.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Iterates documents in order defined by \"comparator\" */\n    DocumentSet.prototype.forEach = function (cb) {\n        this.sortedSet.inorderTraversal(function (k, v) {\n            cb(k);\n            return false;\n        });\n    };\n    /** Inserts or updates a document with the same key */\n    DocumentSet.prototype.add = function (doc) {\n        // First remove the element if we have it.\n        var set = this.delete(doc.key);\n        return set.copy(set.keyedMap.insert(doc.key, doc), set.sortedSet.insert(doc, null));\n    };\n    /** Deletes a document with a given key */\n    DocumentSet.prototype.delete = function (key) {\n        var doc = this.get(key);\n        if (!doc) {\n            return this;\n        }\n        return this.copy(this.keyedMap.remove(key), this.sortedSet.remove(doc));\n    };\n    DocumentSet.prototype.equals = function (other) {\n        if (!(other instanceof DocumentSet))\n            return false;\n        if (this.size !== other.size)\n            return false;\n        var thisIt = this.sortedSet.getIterator();\n        var otherIt = other.sortedSet.getIterator();\n        while (thisIt.hasNext()) {\n            var thisDoc = thisIt.getNext().key;\n            var otherDoc = otherIt.getNext().key;\n            if (!thisDoc.equals(otherDoc))\n                return false;\n        }\n        return true;\n    };\n    DocumentSet.prototype.toString = function () {\n        var docStrings = [];\n        this.forEach(function (doc) {\n            docStrings.push(doc.toString());\n        });\n        if (docStrings.length === 0) {\n            return 'DocumentSet ()';\n        }\n        else {\n            return 'DocumentSet (\\n  ' + docStrings.join('  \\n') + '\\n)';\n        }\n    };\n    DocumentSet.prototype.copy = function (keyedMap, sortedSet) {\n        var newSet = new DocumentSet();\n        newSet.comparator = this.comparator;\n        newSet.keyedMap = keyedMap;\n        newSet.sortedSet = sortedSet;\n        return newSet;\n    };\n    return DocumentSet;\n}());\n\n\n//# sourceMappingURL=document_set.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/obj_map.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A map implementation that uses objects as keys. Objects must implement the\n * Equatable interface and must be immutable. Entries in the map are stored\n * together with the key being produced from the mapKeyFn. This map\n * automatically handles collisions of keys.\n */\nvar obj_map_ObjectMap = /** @class */ (function () {\n    function ObjectMap(mapKeyFn) {\n        this.mapKeyFn = mapKeyFn;\n        /**\n         * The inner map for a key -> value pair. Due to the possibility of\n         * collisions we keep a list of entries that we do a linear search through\n         * to find an actual match. Note that collisions should be rare, so we still\n         * expect near constant time lookups in practice.\n         */\n        this.inner = {};\n    }\n    /** Get a value for this key, or undefined if it does not exist. */\n    ObjectMap.prototype.get = function (key) {\n        var id = this.mapKeyFn(key);\n        var matches = this.inner[id];\n        if (matches === undefined) {\n            return undefined;\n        }\n        for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {\n            var _a = matches_1[_i], otherKey = _a[0], value = _a[1];\n            if (otherKey.equals(key)) {\n                return value;\n            }\n        }\n        return undefined;\n    };\n    ObjectMap.prototype.has = function (key) {\n        return this.get(key) !== undefined;\n    };\n    /** Put this key and value in the map. */\n    ObjectMap.prototype.set = function (key, value) {\n        var id = this.mapKeyFn(key);\n        var matches = this.inner[id];\n        if (matches === undefined) {\n            this.inner[id] = [[key, value]];\n            return;\n        }\n        for (var i = 0; i < matches.length; i++) {\n            if (matches[i][0].equals(key)) {\n                matches[i] = [key, value];\n                return;\n            }\n        }\n        matches.push([key, value]);\n    };\n    /**\n     * Remove this key from the map. Returns a boolean if anything was deleted.\n     */\n    ObjectMap.prototype.delete = function (key) {\n        var id = this.mapKeyFn(key);\n        var matches = this.inner[id];\n        if (matches === undefined) {\n            return false;\n        }\n        for (var i = 0; i < matches.length; i++) {\n            if (matches[i][0].equals(key)) {\n                if (matches.length === 1) {\n                    delete this.inner[id];\n                }\n                else {\n                    matches.splice(i, 1);\n                }\n                return true;\n            }\n        }\n        return false;\n    };\n    ObjectMap.prototype.forEach = function (fn) {\n        forEach(this.inner, function (_, entries) {\n            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n                var _a = entries_1[_i], k = _a[0], v = _a[1];\n                fn(k, v);\n            }\n        });\n    };\n    ObjectMap.prototype.isEmpty = function () {\n        return isEmpty(this.inner);\n    };\n    return ObjectMap;\n}());\n\n\n//# sourceMappingURL=obj_map.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/event_manager.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/**\n * Holds the listeners and the last received ViewSnapshot for a query being\n * tracked by EventManager.\n */\nvar QueryListenersInfo = /** @class */ (function () {\n    function QueryListenersInfo() {\n        this.listeners = [];\n    }\n    return QueryListenersInfo;\n}());\n/**\n * EventManager is responsible for mapping queries to query event emitters.\n * It handles \"fan-out\". -- Identical queries will re-use the same watch on the\n * backend.\n */\nvar event_manager_EventManager = /** @class */ (function () {\n    function EventManager(syncEngine) {\n        this.syncEngine = syncEngine;\n        this.queries = new obj_map_ObjectMap(function (q) {\n            return q.canonicalId();\n        });\n        this.onlineState = OnlineState.Unknown;\n        this.syncEngine.subscribe(this.onChange.bind(this), this.onError.bind(this));\n    }\n    EventManager.prototype.listen = function (listener) {\n        var query = listener.query;\n        var firstListen = false;\n        var queryInfo = this.queries.get(query);\n        if (!queryInfo) {\n            firstListen = true;\n            queryInfo = new QueryListenersInfo();\n            this.queries.set(query, queryInfo);\n        }\n        queryInfo.listeners.push(listener);\n        listener.onOnlineStateChanged(this.onlineState);\n        if (queryInfo.viewSnap)\n            listener.onViewSnapshot(queryInfo.viewSnap);\n        if (firstListen) {\n            return this.syncEngine.listen(query).then(function (targetId) {\n                queryInfo.targetId = targetId;\n                return targetId;\n            });\n        }\n        else {\n            return Promise.resolve(queryInfo.targetId);\n        }\n    };\n    EventManager.prototype.unlisten = function (listener) {\n        var query = listener.query;\n        var lastListen = false;\n        var queryInfo = this.queries.get(query);\n        if (queryInfo) {\n            var i = queryInfo.listeners.indexOf(listener);\n            if (i >= 0) {\n                queryInfo.listeners.splice(i, 1);\n                lastListen = queryInfo.listeners.length === 0;\n            }\n        }\n        if (lastListen) {\n            this.queries.delete(query);\n            return this.syncEngine.unlisten(query);\n        }\n        else {\n            return Promise.resolve();\n        }\n    };\n    EventManager.prototype.onChange = function (viewSnaps) {\n        for (var _i = 0, viewSnaps_1 = viewSnaps; _i < viewSnaps_1.length; _i++) {\n            var viewSnap = viewSnaps_1[_i];\n            var query = viewSnap.query;\n            var queryInfo = this.queries.get(query);\n            if (queryInfo) {\n                for (var _a = 0, _b = queryInfo.listeners; _a < _b.length; _a++) {\n                    var listener = _b[_a];\n                    listener.onViewSnapshot(viewSnap);\n                }\n                queryInfo.viewSnap = viewSnap;\n            }\n        }\n    };\n    EventManager.prototype.onError = function (query, error) {\n        var queryInfo = this.queries.get(query);\n        if (queryInfo) {\n            for (var _i = 0, _a = queryInfo.listeners; _i < _a.length; _i++) {\n                var listener = _a[_i];\n                listener.onError(error);\n            }\n        }\n        // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()\n        // after an error.\n        this.queries.delete(query);\n    };\n    EventManager.prototype.onOnlineStateChanged = function (onlineState) {\n        this.onlineState = onlineState;\n        this.queries.forEach(function (_, queryInfo) {\n            for (var _i = 0, _a = queryInfo.listeners; _i < _a.length; _i++) {\n                var listener = _a[_i];\n                listener.onOnlineStateChanged(onlineState);\n            }\n        });\n    };\n    return EventManager;\n}());\n\n/**\n * QueryListener takes a series of internal view snapshots and determines\n * when to raise the event.\n *\n * It uses an Observer to dispatch events.\n */\nvar event_manager_QueryListener = /** @class */ (function () {\n    function QueryListener(query, queryObserver, options) {\n        this.query = query;\n        this.queryObserver = queryObserver;\n        /**\n         * Initial snapshots (e.g. from cache) may not be propagated to the wrapped\n         * observer. This flag is set to true once we've actually raised an event.\n         */\n        this.raisedInitialEvent = false;\n        this.onlineState = OnlineState.Unknown;\n        this.options = options || {};\n    }\n    QueryListener.prototype.onViewSnapshot = function (snap) {\n        assert(snap.docChanges.length > 0 || snap.syncStateChanged, 'We got a new snapshot with no changes?');\n        if (!this.options.includeDocumentMetadataChanges) {\n            // Remove the metadata only changes.\n            var docChanges = [];\n            for (var _i = 0, _a = snap.docChanges; _i < _a.length; _i++) {\n                var docChange = _a[_i];\n                if (docChange.type !== ChangeType.Metadata) {\n                    docChanges.push(docChange);\n                }\n            }\n            snap = {\n                query: snap.query,\n                docs: snap.docs,\n                oldDocs: snap.oldDocs,\n                docChanges: docChanges,\n                fromCache: snap.fromCache,\n                hasPendingWrites: snap.hasPendingWrites,\n                syncStateChanged: snap.syncStateChanged\n            };\n        }\n        if (!this.raisedInitialEvent) {\n            if (this.shouldRaiseInitialEvent(snap, this.onlineState)) {\n                this.raiseInitialEvent(snap);\n            }\n        }\n        else if (this.shouldRaiseEvent(snap)) {\n            this.queryObserver.next(snap);\n        }\n        this.snap = snap;\n    };\n    QueryListener.prototype.onError = function (error) {\n        this.queryObserver.error(error);\n    };\n    QueryListener.prototype.onOnlineStateChanged = function (onlineState) {\n        this.onlineState = onlineState;\n        if (this.snap &&\n            !this.raisedInitialEvent &&\n            this.shouldRaiseInitialEvent(this.snap, onlineState)) {\n            this.raiseInitialEvent(this.snap);\n        }\n    };\n    QueryListener.prototype.shouldRaiseInitialEvent = function (snap, onlineState) {\n        assert(!this.raisedInitialEvent, 'Determining whether to raise first event but already had first event');\n        // Always raise the first event when we're synced\n        if (!snap.fromCache) {\n            return true;\n        }\n        // NOTE: We consider OnlineState.Unknown as online (it should become Failed\n        // or Online if we wait long enough).\n        var maybeOnline = onlineState !== OnlineState.Failed;\n        // Don't raise the event if we're online, aren't synced yet (checked\n        // above) and are waiting for a sync.\n        if (this.options.waitForSyncWhenOnline && maybeOnline) {\n            assert(snap.fromCache, 'Waiting for sync, but snapshot is not from cache');\n            return false;\n        }\n        // Raise data from cache if we have any documents or we are offline\n        return !snap.docs.isEmpty() || onlineState === OnlineState.Failed;\n    };\n    QueryListener.prototype.shouldRaiseEvent = function (snap) {\n        // We don't need to handle includeDocumentMetadataChanges here because\n        // the Metadata only changes have already been stripped out if needed.\n        // At this point the only changes we will see are the ones we should\n        // propagate.\n        if (snap.docChanges.length > 0) {\n            return true;\n        }\n        var hasPendingWritesChanged = this.snap && this.snap.hasPendingWrites !== snap.hasPendingWrites;\n        if (snap.syncStateChanged || hasPendingWritesChanged) {\n            return this.options.includeQueryMetadataChanges === true;\n        }\n        // Generally we should have hit one of the cases above, but it's possible\n        // to get here if there were only metadata docChanges and they got\n        // stripped out.\n        return false;\n    };\n    QueryListener.prototype.raiseInitialEvent = function (snap) {\n        assert(!this.raisedInitialEvent, 'Trying to raise initial events for second time');\n        snap = {\n            query: snap.query,\n            docs: snap.docs,\n            oldDocs: document_set_DocumentSet.emptySet(snap.docs),\n            docChanges: QueryListener.getInitialViewChanges(snap),\n            fromCache: snap.fromCache,\n            hasPendingWrites: snap.hasPendingWrites,\n            syncStateChanged: true\n        };\n        this.raisedInitialEvent = true;\n        this.queryObserver.next(snap);\n    };\n    /** Returns changes as if all documents in the snap were added. */\n    QueryListener.getInitialViewChanges = function (snap) {\n        var result = [];\n        snap.docs.forEach(function (doc) {\n            result.push({ type: ChangeType.Added, doc: doc });\n        });\n        return result;\n    };\n    return QueryListener;\n}());\n\n\n//# sourceMappingURL=event_manager.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/persistence_promise.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * PersistencePromise<> is essentially a re-implementation of Promise<> except\n * it has a .next() method instead of .then() and .next() and .catch() callbacks\n * are executed synchronously when a PersistencePromise resolves rather than\n * asynchronously (Promise<> implementations use setImmediate() or similar).\n *\n * This is necessary to interoperate with IndexedDB which will automatically\n * commit transactions if control is returned to the event loop without\n * synchronously initiating another operation on the transaction.\n *\n * NOTE: .then() and .catch() only allow a single consumer, unlike normal\n * Promises.\n */\nvar persistence_promise_PersistencePromise = /** @class */ (function () {\n    function PersistencePromise(callback) {\n        var _this = this;\n        // NOTE: next/catchCallback will always point to our own wrapper functions,\n        // not the user's raw next() or catch() callbacks.\n        this.nextCallback = null;\n        this.catchCallback = null;\n        // When the operation resolves, we'll set result or error and mark isDone.\n        this.result = undefined;\n        this.error = null;\n        this.isDone = false;\n        // Set to true when .then() or .catch() are called and prevents additional\n        // chaining.\n        this.callbackAttached = false;\n        callback(function (value) {\n            _this.isDone = true;\n            _this.result = value;\n            if (_this.nextCallback) {\n                // value should be defined unless T is Void, but we can't express\n                // that in the type system.\n                _this.nextCallback(value);\n            }\n        }, function (error) {\n            _this.isDone = true;\n            _this.error = error;\n            if (_this.catchCallback) {\n                _this.catchCallback(error);\n            }\n        });\n    }\n    PersistencePromise.prototype.catch = function (fn) {\n        return this.next(undefined, fn);\n    };\n    PersistencePromise.prototype.next = function (nextFn, catchFn) {\n        var _this = this;\n        if (this.callbackAttached) {\n            fail('Called next() or catch() twice for PersistencePromise');\n        }\n        this.callbackAttached = true;\n        if (this.isDone) {\n            if (!this.error) {\n                return this.wrapSuccess(nextFn, this.result);\n            }\n            else {\n                return this.wrapFailure(catchFn, this.error);\n            }\n        }\n        else {\n            return new PersistencePromise(function (resolve, reject) {\n                _this.nextCallback = function (value) {\n                    _this.wrapSuccess(nextFn, value).next(resolve, reject);\n                };\n                _this.catchCallback = function (error) {\n                    _this.wrapFailure(catchFn, error).next(resolve, reject);\n                };\n            });\n        }\n    };\n    PersistencePromise.prototype.toPromise = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.next(resolve, reject);\n        });\n    };\n    PersistencePromise.prototype.wrapUserFunction = function (fn) {\n        try {\n            var result = fn();\n            if (result instanceof PersistencePromise) {\n                return result;\n            }\n            else {\n                return PersistencePromise.resolve(result);\n            }\n        }\n        catch (e) {\n            return PersistencePromise.reject(e);\n        }\n    };\n    PersistencePromise.prototype.wrapSuccess = function (nextFn, value) {\n        if (nextFn) {\n            return this.wrapUserFunction(function () { return nextFn(value); });\n        }\n        else {\n            // If there's no nextFn, then R must be the same as T but we\n            // can't express that in the type system.\n            return PersistencePromise.resolve(value);\n        }\n    };\n    PersistencePromise.prototype.wrapFailure = function (catchFn, error) {\n        if (catchFn) {\n            return this.wrapUserFunction(function () { return catchFn(error); });\n        }\n        else {\n            return PersistencePromise.reject(error);\n        }\n    };\n    PersistencePromise.resolve = function (result) {\n        return new PersistencePromise(function (resolve, reject) {\n            resolve(result);\n        });\n    };\n    PersistencePromise.reject = function (error) {\n        return new PersistencePromise(function (resolve, reject) {\n            reject(error);\n        });\n    };\n    PersistencePromise.waitFor = function (all) {\n        return all.reduce(function (promise, nextPromise, idx) {\n            return promise.next(function () {\n                return nextPromise;\n            });\n        }, PersistencePromise.resolve());\n    };\n    PersistencePromise.map = function (all) {\n        var results = [];\n        var first = true;\n        // initial is ignored, so we can cheat on the type.\n        var initial = PersistencePromise.resolve(null);\n        return all\n            .reduce(function (promise, nextPromise) {\n            return promise.next(function (result) {\n                if (!first) {\n                    results.push(result);\n                }\n                first = false;\n                return nextPromise;\n            });\n        }, initial)\n            .next(function (result) {\n            results.push(result);\n            return results;\n        });\n    };\n    return PersistencePromise;\n}());\n\n\n//# sourceMappingURL=persistence_promise.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/eager_garbage_collector.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A garbage collector implementation that eagerly collects documents as soon as\n * they're no longer referenced in any of its registered GarbageSources.\n *\n * This implementation keeps track of a set of keys that are potentially garbage\n * without keeping an exact reference count. During collectGarbage, the\n * collector verifies that all potential garbage keys actually have no\n * references by consulting its list of garbage sources.\n */\nvar eager_garbage_collector_EagerGarbageCollector = /** @class */ (function () {\n    function EagerGarbageCollector() {\n        this.isEager = true;\n        /**\n         * The garbage collectible sources to double-check during garbage collection.\n         */\n        this.sources = [];\n        /**\n         * A set of potentially garbage keys.\n         * PORTING NOTE: This would be a mutable set if Javascript had one.\n         */\n        this.potentialGarbage = documentKeySet();\n    }\n    EagerGarbageCollector.prototype.addGarbageSource = function (garbageSource) {\n        this.sources.push(garbageSource);\n        garbageSource.setGarbageCollector(this);\n    };\n    EagerGarbageCollector.prototype.removeGarbageSource = function (garbageSource) {\n        this.sources.splice(this.sources.indexOf(garbageSource), 1);\n        garbageSource.setGarbageCollector(null);\n    };\n    EagerGarbageCollector.prototype.addPotentialGarbageKey = function (key) {\n        this.potentialGarbage = this.potentialGarbage.add(key);\n    };\n    EagerGarbageCollector.prototype.collectGarbage = function (txn) {\n        var _this = this;\n        var promises = [];\n        var garbageKeys = documentKeySet();\n        this.potentialGarbage.forEach(function (key) {\n            var hasRefsPromise = _this.documentHasAnyReferences(txn, key);\n            promises.push(hasRefsPromise.next(function (hasRefs) {\n                // If there are no references, get the key.\n                if (!hasRefs) {\n                    garbageKeys = garbageKeys.add(key);\n                }\n                return persistence_promise_PersistencePromise.resolve();\n            }));\n        });\n        // Clear locally retained potential keys and returned confirmed garbage.\n        this.potentialGarbage = documentKeySet();\n        return persistence_promise_PersistencePromise.waitFor(promises).next(function () { return garbageKeys; });\n    };\n    EagerGarbageCollector.prototype.documentHasAnyReferences = function (txn, key) {\n        var initial = persistence_promise_PersistencePromise.resolve(false);\n        return this.sources\n            .map(function (source) { return function () { return source.containsKey(txn, key); }; })\n            .reduce(function (promise, nextPromise) {\n            return promise.next(function (result) {\n                if (result) {\n                    return persistence_promise_PersistencePromise.resolve(true);\n                }\n                else {\n                    return nextPromise();\n                }\n            });\n        }, initial);\n    };\n    return EagerGarbageCollector;\n}());\n\n\n//# sourceMappingURL=eager_garbage_collector.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/local_view_changes.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A set of changes to what documents are currently in view and out of view for\n * a given query. These changes are sent to the LocalStore by the View (via\n * the SyncEngine) and are used to pin / unpin documents as appropriate.\n */\nvar local_view_changes_LocalViewChanges = /** @class */ (function () {\n    function LocalViewChanges(query, addedKeys, removedKeys) {\n        this.query = query;\n        this.addedKeys = addedKeys;\n        this.removedKeys = removedKeys;\n    }\n    LocalViewChanges.fromSnapshot = function (viewSnapshot) {\n        var addedKeys = documentKeySet();\n        var removedKeys = documentKeySet();\n        for (var _i = 0, _a = viewSnapshot.docChanges; _i < _a.length; _i++) {\n            var docChange = _a[_i];\n            switch (docChange.type) {\n                case ChangeType.Added:\n                    addedKeys = addedKeys.add(docChange.doc.key);\n                    break;\n                case ChangeType.Removed:\n                    removedKeys = removedKeys.add(docChange.doc.key);\n                    break;\n                default:\n            }\n        }\n        return new LocalViewChanges(viewSnapshot.query, addedKeys, removedKeys);\n    };\n    return LocalViewChanges;\n}());\n\n\n//# sourceMappingURL=local_view_changes.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/reference_set.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/**\n * A collection of references to a document from some kind of numbered entity\n * (either a target ID or batch ID). As references are added to or removed from\n * the set corresponding events are emitted to a registered garbage collector.\n *\n * Each reference is represented by a DocumentReference object. Each of them\n * contains enough information to uniquely identify the reference. They are all\n * stored primarily in a set sorted by key. A document is considered garbage if\n * there's no references in that set (this can be efficiently checked thanks to\n * sorting by key).\n *\n * ReferenceSet also keeps a secondary set that contains references sorted by\n * IDs. This one is used to efficiently implement removal of all references by\n * some target ID.\n */\nvar reference_set_ReferenceSet = /** @class */ (function () {\n    function ReferenceSet() {\n        // A set of outstanding references to a document sorted by key.\n        this.refsByKey = new sorted_set_SortedSet(reference_set_DocReference.compareByKey);\n        // A set of outstanding references to a document sorted by target id.\n        this.refsByTarget = new sorted_set_SortedSet(reference_set_DocReference.compareByTargetId);\n        /** Keeps track of keys that have references */\n        this.garbageCollector = null;\n    }\n    /** Returns true if the reference set contains no references. */\n    ReferenceSet.prototype.isEmpty = function () {\n        return this.refsByKey.isEmpty();\n    };\n    /** Adds a reference to the given document key for the given ID. */\n    ReferenceSet.prototype.addReference = function (key, id) {\n        var ref = new reference_set_DocReference(key, id);\n        this.refsByKey = this.refsByKey.add(ref);\n        this.refsByTarget = this.refsByTarget.add(ref);\n    };\n    /** Add references to the given document keys for the given ID. */\n    ReferenceSet.prototype.addReferences = function (keys, id) {\n        var _this = this;\n        keys.forEach(function (key) { return _this.addReference(key, id); });\n    };\n    /**\n     * Removes a reference to the given document key for the given\n     * ID.\n     */\n    ReferenceSet.prototype.removeReference = function (key, id) {\n        this.removeRef(new reference_set_DocReference(key, id));\n    };\n    ReferenceSet.prototype.removeReferences = function (keys, id) {\n        var _this = this;\n        keys.forEach(function (key) { return _this.removeReference(key, id); });\n    };\n    /**\n     * Clears all references with a given ID. Calls removeRef() for each key\n     * removed.\n     */\n    ReferenceSet.prototype.removeReferencesForId = function (id) {\n        var _this = this;\n        var emptyKey = document_key_DocumentKey.EMPTY;\n        var startRef = new reference_set_DocReference(emptyKey, id);\n        var endRef = new reference_set_DocReference(emptyKey, id + 1);\n        this.refsByTarget.forEachInRange([startRef, endRef], function (ref) {\n            _this.removeRef(ref);\n        });\n    };\n    ReferenceSet.prototype.removeAllReferences = function () {\n        var _this = this;\n        this.refsByKey.forEach(function (ref) { return _this.removeRef(ref); });\n    };\n    ReferenceSet.prototype.removeRef = function (ref) {\n        this.refsByKey = this.refsByKey.delete(ref);\n        this.refsByTarget = this.refsByTarget.delete(ref);\n        if (this.garbageCollector !== null) {\n            this.garbageCollector.addPotentialGarbageKey(ref.key);\n        }\n    };\n    ReferenceSet.prototype.referencesForId = function (id) {\n        var emptyKey = document_key_DocumentKey.EMPTY;\n        var startRef = new reference_set_DocReference(emptyKey, id);\n        var endRef = new reference_set_DocReference(emptyKey, id + 1);\n        var keys = documentKeySet();\n        this.refsByTarget.forEachInRange([startRef, endRef], function (ref) {\n            keys = keys.add(ref.key);\n        });\n        return keys;\n    };\n    ReferenceSet.prototype.setGarbageCollector = function (garbageCollector) {\n        this.garbageCollector = garbageCollector;\n    };\n    ReferenceSet.prototype.containsKey = function (txn, key) {\n        var ref = new reference_set_DocReference(key, 0);\n        var firstRef = this.refsByKey.firstAfterOrEqual(ref);\n        return persistence_promise_PersistencePromise.resolve(firstRef !== null && key.equals(firstRef.key));\n    };\n    return ReferenceSet;\n}());\n\nvar reference_set_DocReference = /** @class */ (function () {\n    function DocReference(key, targetOrBatchId) {\n        this.key = key;\n        this.targetOrBatchId = targetOrBatchId;\n    }\n    /** Compare by key then by ID */\n    DocReference.compareByKey = function (left, right) {\n        return (document_key_DocumentKey.comparator(left.key, right.key) ||\n            primitiveComparator(left.targetOrBatchId, right.targetOrBatchId));\n    };\n    /** Compare by ID then by key */\n    DocReference.compareByTargetId = function (left, right) {\n        return (primitiveComparator(left.targetOrBatchId, right.targetOrBatchId) ||\n            document_key_DocumentKey.comparator(left.key, right.key));\n    };\n    return DocReference;\n}());\n\n\n//# sourceMappingURL=reference_set.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/target_id_generator.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar RESERVED_BITS = 1;\nvar GeneratorIds;\n(function (GeneratorIds) {\n    GeneratorIds[GeneratorIds[\"LocalStore\"] = 0] = \"LocalStore\";\n    GeneratorIds[GeneratorIds[\"SyncEngine\"] = 1] = \"SyncEngine\";\n})(GeneratorIds || (GeneratorIds = {}));\n/**\n * TargetIdGenerator generates monotonically increasing integer IDs. There are\n * separate generators for different scopes. While these generators will operate\n * independently of each other, they are scoped, such that no two generators\n * will ever produce the same ID. This is useful, because sometimes the backend\n * may group IDs from separate parts of the client into the same ID space.\n */\nvar TargetIdGenerator = /** @class */ (function () {\n    function TargetIdGenerator(generatorId, initAfter) {\n        if (initAfter === void 0) { initAfter = 0; }\n        this.generatorId = generatorId;\n        // Replace the generator part of initAfter with this generator's ID.\n        var afterWithoutGenerator = (initAfter >> RESERVED_BITS) << RESERVED_BITS;\n        var afterGenerator = initAfter - afterWithoutGenerator;\n        if (afterGenerator >= generatorId) {\n            // For example, if:\n            //   this.generatorId = 0b0000\n            //   after = 0b1011\n            //   afterGenerator = 0b0001\n            // Then:\n            //   previous = 0b1010\n            //   next = 0b1100\n            this.previousId = afterWithoutGenerator | this.generatorId;\n        }\n        else {\n            // For example, if:\n            //   this.generatorId = 0b0001\n            //   after = 0b1010\n            //   afterGenerator = 0b0000\n            // Then:\n            //   previous = 0b1001\n            //   next = 0b1011\n            this.previousId =\n                (afterWithoutGenerator | this.generatorId) - (1 << RESERVED_BITS);\n        }\n    }\n    TargetIdGenerator.prototype.next = function () {\n        this.previousId += 1 << RESERVED_BITS;\n        return this.previousId;\n    };\n    TargetIdGenerator.forLocalStore = function (initAfter) {\n        if (initAfter === void 0) { initAfter = 0; }\n        return new TargetIdGenerator(GeneratorIds.LocalStore, initAfter);\n    };\n    TargetIdGenerator.forSyncEngine = function () {\n        return new TargetIdGenerator(GeneratorIds.SyncEngine);\n    };\n    return TargetIdGenerator;\n}());\n\n\n//# sourceMappingURL=target_id_generator.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/view.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\nvar AddedLimboDocument = /** @class */ (function () {\n    function AddedLimboDocument(key) {\n        this.key = key;\n    }\n    return AddedLimboDocument;\n}());\n\nvar RemovedLimboDocument = /** @class */ (function () {\n    function RemovedLimboDocument(key) {\n        this.key = key;\n    }\n    return RemovedLimboDocument;\n}());\n\n/**\n * View is responsible for computing the final merged truth of what docs are in\n * a query. It gets notified of local and remote changes to docs, and applies\n * the query filters and limits to determine the most correct possible results.\n */\nvar view_View = /** @class */ (function () {\n    function View(query, \n        /** Documents included in the remote target */\n        syncedDocuments) {\n        this.query = query;\n        this.syncedDocuments = syncedDocuments;\n        this.syncState = null;\n        /**\n         * A flag whether the view is current with the backend. A view is considered\n         * current after it has seen the current flag from the backend and did not\n         * lose consistency within the watch stream (e.g. because of an existence\n         * filter mismatch).\n         */\n        this.current = false;\n        /** Documents in the view but not in the remote target */\n        this.limboDocuments = documentKeySet();\n        /** Document Keys that have local changes */\n        this.mutatedKeys = documentKeySet();\n        this.documentSet = new document_set_DocumentSet(query.docComparator.bind(query));\n    }\n    /**\n     * Iterates over a set of doc changes, applies the query limit, and computes\n     * what the new results should be, what the changes were, and whether we may\n     * need to go back to the local cache for more results. Does not make any\n     * changes to the view.\n     * @param docChanges The doc changes to apply to this view.\n     * @param previousChanges If this is being called with a refill, then start\n     *        with this set of docs and changes instead of the current view.\n     * @return a new set of docs, changes, and refill flag.\n     */\n    View.prototype.computeDocChanges = function (docChanges, previousChanges) {\n        var _this = this;\n        var changeSet = previousChanges\n            ? previousChanges.changeSet\n            : new view_snapshot_DocumentChangeSet();\n        var oldDocumentSet = previousChanges\n            ? previousChanges.documentSet\n            : this.documentSet;\n        var newMutatedKeys = previousChanges\n            ? previousChanges.mutatedKeys\n            : this.mutatedKeys;\n        var newDocumentSet = oldDocumentSet;\n        var needsRefill = false;\n        // Track the last doc in a (full) limit. This is necessary, because some\n        // update (a delete, or an update moving a doc past the old limit) might\n        // mean there is some other document in the local cache that either should\n        // come (1) between the old last limit doc and the new last document, in the\n        // case of updates, or (2) after the new last document, in the case of\n        // deletes. So we keep this doc at the old limit to compare the updates to.\n        //\n        // Note that this should never get used in a refill (when previousChanges is\n        // set), because there will only be adds -- no deletes or updates.\n        var lastDocInLimit = this.query.hasLimit() && oldDocumentSet.size === this.query.limit\n            ? oldDocumentSet.last()\n            : null;\n        docChanges.inorderTraversal(function (key, newMaybeDoc) {\n            var oldDoc = oldDocumentSet.get(key);\n            var newDoc = newMaybeDoc instanceof document_Document ? newMaybeDoc : null;\n            if (newDoc) {\n                assert(key.equals(newDoc.key), 'Mismatching keys found in document changes: ' +\n                    key +\n                    ' != ' +\n                    newDoc.key);\n                newDoc = _this.query.matches(newDoc) ? newDoc : null;\n            }\n            if (newDoc) {\n                newDocumentSet = newDocumentSet.add(newDoc);\n                if (newDoc.hasLocalMutations) {\n                    newMutatedKeys = newMutatedKeys.add(key);\n                }\n                else {\n                    newMutatedKeys = newMutatedKeys.delete(key);\n                }\n            }\n            else {\n                newDocumentSet = newDocumentSet.delete(key);\n                newMutatedKeys = newMutatedKeys.delete(key);\n            }\n            // Calculate change\n            if (oldDoc && newDoc) {\n                var docsEqual = oldDoc.data.equals(newDoc.data);\n                if (!docsEqual ||\n                    oldDoc.hasLocalMutations !== newDoc.hasLocalMutations) {\n                    // only report a change if document actually changed\n                    if (docsEqual) {\n                        changeSet.track({ type: ChangeType.Metadata, doc: newDoc });\n                    }\n                    else {\n                        changeSet.track({ type: ChangeType.Modified, doc: newDoc });\n                    }\n                    if (lastDocInLimit &&\n                        _this.query.docComparator(newDoc, lastDocInLimit) > 0) {\n                        // This doc moved from inside the limit to after the limit.\n                        // That means there may be some doc in the local cache that's\n                        // actually less than this one.\n                        needsRefill = true;\n                    }\n                }\n            }\n            else if (!oldDoc && newDoc) {\n                changeSet.track({ type: ChangeType.Added, doc: newDoc });\n            }\n            else if (oldDoc && !newDoc) {\n                changeSet.track({ type: ChangeType.Removed, doc: oldDoc });\n                if (lastDocInLimit) {\n                    // A doc was removed from a full limit query. We'll need to\n                    // requery from the local cache to see if we know about some other\n                    // doc that should be in the results.\n                    needsRefill = true;\n                }\n            }\n        });\n        if (this.query.hasLimit()) {\n            // TODO(klimt): Make DocumentSet size be constant time.\n            while (newDocumentSet.size > this.query.limit) {\n                var oldDoc = newDocumentSet.last();\n                newDocumentSet = newDocumentSet.delete(oldDoc.key);\n                changeSet.track({ type: ChangeType.Removed, doc: oldDoc });\n            }\n        }\n        assert(!needsRefill || !previousChanges, 'View was refilled using docs that themselves needed refilling.');\n        return {\n            documentSet: newDocumentSet,\n            changeSet: changeSet,\n            needsRefill: needsRefill,\n            mutatedKeys: newMutatedKeys\n        };\n    };\n    /**\n     * Updates the view with the given ViewDocumentChanges and updates limbo docs\n     * and sync state from the given (optional) target change.\n     * @param docChanges The set of changes to make to the view's docs.\n     * @param targetChange A target change to apply for computing limbo docs and\n     *        sync state.\n     * @return A new ViewChange with the given docs, changes, and sync state.\n     */\n    View.prototype.applyChanges = function (docChanges, targetChange) {\n        var _this = this;\n        assert(!docChanges.needsRefill, 'Cannot apply changes that need a refill');\n        var oldDocs = this.documentSet;\n        this.documentSet = docChanges.documentSet;\n        this.mutatedKeys = docChanges.mutatedKeys;\n        // Sort changes based on type and query comparator\n        var changes = docChanges.changeSet.getChanges();\n        changes.sort(function (c1, c2) {\n            return (compareChangeType(c1.type, c2.type) ||\n                _this.query.docComparator(c1.doc, c2.doc));\n        });\n        var limboChanges = this.applyTargetChange(targetChange);\n        var synced = this.limboDocuments.size === 0 && this.current;\n        var newSyncState = synced ? SyncState.Synced : SyncState.Local;\n        var syncStateChanged = newSyncState !== this.syncState;\n        this.syncState = newSyncState;\n        if (changes.length === 0 && !syncStateChanged) {\n            // no changes\n            return { limboChanges: limboChanges };\n        }\n        else {\n            return {\n                snapshot: {\n                    query: this.query,\n                    docs: docChanges.documentSet,\n                    oldDocs: oldDocs,\n                    docChanges: changes,\n                    fromCache: newSyncState === SyncState.Local,\n                    syncStateChanged: syncStateChanged,\n                    hasPendingWrites: !docChanges.mutatedKeys.isEmpty()\n                },\n                limboChanges: limboChanges\n            };\n        }\n    };\n    /**\n     * Returns whether the doc for the given key should be in limbo.\n     */\n    View.prototype.shouldBeInLimbo = function (key) {\n        // If the remote end says it's part of this query, it's not in limbo.\n        if (this.syncedDocuments.has(key)) {\n            return false;\n        }\n        // The local store doesn't think it's a result, so it shouldn't be in limbo.\n        if (!this.documentSet.has(key)) {\n            return false;\n        }\n        // If there are local changes to the doc, they might explain why the server\n        // doesn't know that it's part of the query. So don't put it in limbo.\n        // TODO(klimt): Ideally, we would only consider changes that might actually\n        // affect this specific query.\n        if (this.documentSet.get(key).hasLocalMutations) {\n            return false;\n        }\n        // Everything else is in limbo.\n        return true;\n    };\n    /**\n     * Updates syncedDocuments, current, and limbo docs based on the given change.\n     * Returns the list of changes to which docs are in limbo.\n     */\n    View.prototype.applyTargetChange = function (targetChange) {\n        var _this = this;\n        if (targetChange) {\n            var targetMapping = targetChange.mapping;\n            if (targetMapping instanceof ResetMapping) {\n                this.syncedDocuments = targetMapping.documents;\n            }\n            else if (targetMapping instanceof UpdateMapping) {\n                this.syncedDocuments = targetMapping.applyToKeySet(this.syncedDocuments);\n            }\n            switch (targetChange.currentStatusUpdate) {\n                case CurrentStatusUpdate.MarkCurrent:\n                    this.current = true;\n                    break;\n                case CurrentStatusUpdate.MarkNotCurrent:\n                    this.current = false;\n                    break;\n                case CurrentStatusUpdate.None:\n                    break;\n                default:\n                    fail('Unknown current status update: ' + targetChange.currentStatusUpdate);\n            }\n        }\n        // Recompute the set of limbo docs.\n        // TODO(klimt): Do this incrementally so that it's not quadratic when\n        // updating many documents.\n        var oldLimboDocuments = this.limboDocuments;\n        this.limboDocuments = documentKeySet();\n        if (this.current) {\n            this.documentSet.forEach(function (doc) {\n                if (_this.shouldBeInLimbo(doc.key)) {\n                    _this.limboDocuments = _this.limboDocuments.add(doc.key);\n                }\n            });\n        }\n        // Diff the new limbo docs with the old limbo docs.\n        var changes = [];\n        oldLimboDocuments.forEach(function (key) {\n            if (!_this.limboDocuments.has(key)) {\n                changes.push(new RemovedLimboDocument(key));\n            }\n        });\n        this.limboDocuments.forEach(function (key) {\n            if (!oldLimboDocuments.has(key)) {\n                changes.push(new AddedLimboDocument(key));\n            }\n        });\n        return changes;\n    };\n    return View;\n}());\n\nfunction compareChangeType(c1, c2) {\n    var order = function (change) {\n        switch (change) {\n            case ChangeType.Added:\n                return 1;\n            case ChangeType.Modified:\n                return 2;\n            case ChangeType.Metadata:\n                // A metadata change is converted to a modified change at the public\n                // api layer.  Since we sort by document key and then change type,\n                // metadata and modified changes must be sorted equivalently.\n                return 2;\n            case ChangeType.Removed:\n                return 0;\n            default:\n                return fail('Unknown ChangeType: ' + change);\n        }\n    };\n    return order(c1) - order(c2);\n}\n\n//# sourceMappingURL=view.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/sync_engine.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar sync_engine_LOG_TAG = 'SyncEngine';\n/**\n * QueryView contains all of the data that SyncEngine needs to keep track of for\n * a particular query.\n */\nvar QueryView = /** @class */ (function () {\n    function QueryView(\n        /**\n         * The query itself.\n         */\n        query, \n        /**\n         * The target number created by the client that is used in the watch\n         * stream to identify this query.\n         */\n        targetId, \n        /**\n         * An identifier from the datastore backend that indicates the last state\n         * of the results that was received. This can be used to indicate where\n         * to continue receiving new doc changes for the query.\n         */\n        resumeToken, \n        /**\n         * The view is responsible for computing the final merged truth of what\n         * docs are in the query. It gets notified of local and remote changes,\n         * and applies the query filters and limits to determine the most correct\n         * possible results.\n         */\n        view) {\n        this.query = query;\n        this.targetId = targetId;\n        this.resumeToken = resumeToken;\n        this.view = view;\n    }\n    return QueryView;\n}());\n/**\n * SyncEngine is the central controller in the client SDK architecture. It is\n * the glue code between the EventManager, LocalStore, and RemoteStore. Some of\n * SyncEngine's responsibilities include:\n * 1. Coordinating client requests and remote events between the EventManager\n *    and the local and remote data stores.\n * 2. Managing a View object for each query, providing the unified view between\n *    the local and remote data stores.\n * 3. Notifying the RemoteStore when the LocalStore has new mutations in its\n *    queue that need sending to the backend.\n *\n * The SyncEngine’s methods should only ever be called by methods running in the\n * global async queue.\n */\nvar sync_engine_SyncEngine = /** @class */ (function () {\n    function SyncEngine(localStore, remoteStore, currentUser) {\n        this.localStore = localStore;\n        this.remoteStore = remoteStore;\n        this.currentUser = currentUser;\n        this.viewHandler = null;\n        this.errorHandler = null;\n        this.queryViewsByQuery = new obj_map_ObjectMap(function (q) {\n            return q.canonicalId();\n        });\n        this.queryViewsByTarget = {};\n        this.limboTargetsByKey = new sorted_map_SortedMap(document_key_DocumentKey.comparator);\n        this.limboKeysByTarget = {};\n        this.limboDocumentRefs = new reference_set_ReferenceSet();\n        this.limboCollector = new eager_garbage_collector_EagerGarbageCollector();\n        /** Stores user completion handlers, indexed by User and BatchId. */\n        this.mutationUserCallbacks = {};\n        this.targetIdGenerator = TargetIdGenerator.forSyncEngine();\n    }\n    /** Subscribes view and error handler. Can be called only once. */\n    SyncEngine.prototype.subscribe = function (viewHandler, errorHandler) {\n        assert(viewHandler !== null && errorHandler !== null, 'View and error handlers cannot be null');\n        assert(this.viewHandler === null && this.errorHandler === null, 'SyncEngine already has a subscriber.');\n        this.viewHandler = viewHandler;\n        this.errorHandler = errorHandler;\n        this.limboCollector.addGarbageSource(this.limboDocumentRefs);\n    };\n    /**\n     * Initiates the new listen, resolves promise when listen enqueued to the\n     * server. All the subsequent view snapshots or errors are sent to the\n     * subscribed handlers. Returns the targetId of the query.\n     */\n    SyncEngine.prototype.listen = function (query) {\n        var _this = this;\n        this.assertSubscribed('listen()');\n        assert(!this.queryViewsByQuery.has(query), 'We already listen to the query: ' + query);\n        return this.localStore.allocateQuery(query).then(function (queryData) {\n            return _this.localStore\n                .executeQuery(query)\n                .then(function (docs) {\n                return _this.localStore\n                    .remoteDocumentKeys(queryData.targetId)\n                    .then(function (remoteKeys) {\n                    var view = new view_View(query, remoteKeys);\n                    var viewDocChanges = view.computeDocChanges(docs);\n                    var viewChange = view.applyChanges(viewDocChanges);\n                    assert(viewChange.limboChanges.length === 0, 'View returned limbo docs before target ack from the server.');\n                    assert(!!viewChange.snapshot, 'applyChanges for new view should always return a snapshot');\n                    var data = new QueryView(query, queryData.targetId, queryData.resumeToken, view);\n                    _this.queryViewsByQuery.set(query, data);\n                    _this.queryViewsByTarget[queryData.targetId] = data;\n                    _this.viewHandler([viewChange.snapshot]);\n                    _this.remoteStore.listen(queryData);\n                });\n            })\n                .then(function () {\n                return queryData.targetId;\n            });\n        });\n    };\n    /** Stops listening to the query. */\n    SyncEngine.prototype.unlisten = function (query) {\n        var _this = this;\n        this.assertSubscribed('unlisten()');\n        var queryView = this.queryViewsByQuery.get(query);\n        assert(!!queryView, 'Trying to unlisten on query not found:' + query);\n        return this.localStore.releaseQuery(query).then(function () {\n            _this.remoteStore.unlisten(queryView.targetId);\n            return _this.removeAndCleanupQuery(queryView).then(function () {\n                return _this.localStore.collectGarbage();\n            });\n        });\n    };\n    /**\n     * Initiates the write of local mutation batch which involves adding the\n     * writes to the mutation queue, notifying the remote store about new\n     * mutations and raising events for any changes this write caused.\n     *\n     * The promise returned by this call is resolved when the above steps\n     * have completed, *not* when the write was acked by the backend. The\n     * userCallback is resolved once the write was acked/rejected by the\n     * backend (or failed locally for any other reason).\n     */\n    SyncEngine.prototype.write = function (batch, userCallback) {\n        var _this = this;\n        this.assertSubscribed('write()');\n        return this.localStore\n            .localWrite(batch)\n            .then(function (result) {\n            _this.addMutationCallback(result.batchId, userCallback);\n            return _this.emitNewSnapsAndNotifyLocalStore(result.changes);\n        })\n            .then(function () {\n            return _this.remoteStore.fillWritePipeline();\n        });\n    };\n    // TODO(klimt): Wrap the given error in a standard Firestore error object.\n    SyncEngine.prototype.wrapUpdateFunctionError = function (error) {\n        return error;\n    };\n    /**\n     * Takes an updateFunction in which a set of reads and writes can be performed\n     * atomically. In the updateFunction, the client can read and write values\n     * using the supplied transaction object. After the updateFunction, all\n     * changes will be committed. If some other client has changed any of the data\n     * referenced, then the updateFunction will be called again. If the\n     * updateFunction still fails after the given number of retries, then the\n     * transaction will be rejection.\n     *\n     * The transaction object passed to the updateFunction contains methods for\n     * accessing documents and collections. Unlike other datastore access, data\n     * accessed with the transaction will not reflect local changes that have not\n     * been committed. For this reason, it is required that all reads are\n     * performed before any writes. Transactions must be performed while online.\n     *\n     * The promise returned is resolved when the transaction is fully committed.\n     */\n    SyncEngine.prototype.runTransaction = function (updateFunction, retries) {\n        var _this = this;\n        if (retries === void 0) { retries = 5; }\n        assert(retries >= 0, 'Got negative number of retries for transaction.');\n        var transaction = this.remoteStore.createTransaction();\n        var wrappedUpdateFunction = function () {\n            try {\n                var userPromise = updateFunction(transaction);\n                if (isNullOrUndefined(userPromise) ||\n                    !userPromise.catch ||\n                    !userPromise.then) {\n                    return Promise.reject(Error('Transaction callback must return a Promise'));\n                }\n                return userPromise.catch(function (e) {\n                    return Promise.reject(_this.wrapUpdateFunctionError(e));\n                });\n            }\n            catch (e) {\n                return Promise.reject(_this.wrapUpdateFunctionError(e));\n            }\n        };\n        return wrappedUpdateFunction().then(function (result) {\n            return transaction\n                .commit()\n                .then(function () {\n                return result;\n            })\n                .catch(function (error) {\n                if (retries === 0) {\n                    return Promise.reject(error);\n                }\n                // TODO(klimt): Put in a retry delay?\n                return _this.runTransaction(updateFunction, retries - 1);\n            });\n        });\n    };\n    SyncEngine.prototype.applyRemoteEvent = function (remoteEvent) {\n        var _this = this;\n        this.assertSubscribed('applyRemoteEvent()');\n        // Make sure limbo documents are deleted if there were no results\n        forEachNumber(remoteEvent.targetChanges, function (targetId, targetChange) {\n            var limboKey = _this.limboKeysByTarget[targetId];\n            if (limboKey &&\n                targetChange.currentStatusUpdate ===\n                    CurrentStatusUpdate.MarkCurrent &&\n                !remoteEvent.documentUpdates.get(limboKey)) {\n                // When listening to a query the server responds with a snapshot\n                // containing documents matching the query and a current marker\n                // telling us we're now in sync. It's possible for these to arrive\n                // as separate remote events or as a single remote event.\n                // For a document query, there will be no documents sent in the\n                // response if the document doesn't exist.\n                //\n                // If the snapshot arrives separately from the current marker,\n                // we handle it normally and updateTrackedLimbos will resolve the\n                // limbo status of the document, removing it from limboDocumentRefs.\n                // This works because clients only initiate limbo resolution when\n                // a target is current and because all current targets are\n                // always at a consistent snapshot.\n                //\n                // However, if the document doesn't exist and the current marker\n                // arrives, the document is not present in the snapshot and our\n                // normal view handling would consider the document to remain in\n                // limbo indefinitely because there are no updates to the document.\n                // To avoid this, we specially handle this just this case here:\n                // synthesizing a delete.\n                //\n                // TODO(dimond): Ideally we would have an explicit lookup query\n                // instead resulting in an explicit delete message and we could\n                // remove this special logic.\n                remoteEvent.addDocumentUpdate(new document_NoDocument(limboKey, remoteEvent.snapshotVersion));\n            }\n        });\n        return this.localStore.applyRemoteEvent(remoteEvent).then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes, remoteEvent);\n        });\n    };\n    SyncEngine.prototype.rejectListen = function (targetId, err) {\n        var _this = this;\n        this.assertSubscribed('rejectListens()');\n        var limboKey = this.limboKeysByTarget[targetId];\n        if (limboKey) {\n            // Since this query failed, we won't want to manually unlisten to it.\n            // So go ahead and remove it from bookkeeping.\n            this.limboTargetsByKey = this.limboTargetsByKey.remove(limboKey);\n            delete this.limboKeysByTarget[targetId];\n            // TODO(klimt): We really only should do the following on permission\n            // denied errors, but we don't have the cause code here.\n            // It's a limbo doc. Create a synthetic event saying it was deleted.\n            // This is kind of a hack. Ideally, we would have a method in the local\n            // store to purge a document. However, it would be tricky to keep all of\n            // the local store's invariants with another method.\n            var docMap = new sorted_map_SortedMap(document_key_DocumentKey.comparator);\n            docMap = docMap.insert(limboKey, new document_NoDocument(limboKey, snapshot_version_SnapshotVersion.forDeletedDoc()));\n            var event_1 = new remote_event_RemoteEvent(snapshot_version_SnapshotVersion.MIN, {}, docMap);\n            return this.applyRemoteEvent(event_1);\n        }\n        else {\n            var queryView_1 = this.queryViewsByTarget[targetId];\n            assert(!!queryView_1, 'Unknown targetId: ' + targetId);\n            return this.localStore.releaseQuery(queryView_1.query).then(function () {\n                return _this.removeAndCleanupQuery(queryView_1).then(function () {\n                    _this.errorHandler(queryView_1.query, err);\n                });\n            });\n        }\n    };\n    SyncEngine.prototype.applySuccessfulWrite = function (mutationBatchResult) {\n        var _this = this;\n        this.assertSubscribed('applySuccessfulWrite()');\n        // The local store may or may not be able to apply the write result and\n        // raise events immediately (depending on whether the watcher is caught\n        // up), so we raise user callbacks first so that they consistently happen\n        // before listen events.\n        this.processUserCallback(mutationBatchResult.batch.batchId, \n        /*error=*/ null);\n        return this.localStore\n            .acknowledgeBatch(mutationBatchResult)\n            .then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes);\n        });\n    };\n    SyncEngine.prototype.rejectFailedWrite = function (batchId, error) {\n        var _this = this;\n        this.assertSubscribed('rejectFailedWrite()');\n        // The local store may or may not be able to apply the write result and\n        // raise events immediately (depending on whether the watcher is caught up),\n        // so we raise user callbacks first so that they consistently happen before\n        // listen events.\n        this.processUserCallback(batchId, error);\n        return this.localStore.rejectBatch(batchId).then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes);\n        });\n    };\n    SyncEngine.prototype.addMutationCallback = function (batchId, callback) {\n        var newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];\n        if (!newCallbacks) {\n            newCallbacks = new sorted_map_SortedMap(primitiveComparator);\n        }\n        newCallbacks = newCallbacks.insert(batchId, callback);\n        this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;\n    };\n    /**\n     * Resolves or rejects the user callback for the given batch and then discards\n     * it.\n     */\n    SyncEngine.prototype.processUserCallback = function (batchId, error) {\n        var newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];\n        // NOTE: Mutations restored from persistence won't have callbacks, so it's\n        // okay for there to be no callback for this ID.\n        if (newCallbacks) {\n            var callback = newCallbacks.get(batchId);\n            if (callback) {\n                assert(batchId === newCallbacks.minKey(), 'Mutation callbacks processed out-of-order?');\n                if (error) {\n                    callback.reject(error);\n                }\n                else {\n                    callback.resolve();\n                }\n                newCallbacks = newCallbacks.remove(batchId);\n            }\n            this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;\n        }\n    };\n    SyncEngine.prototype.removeAndCleanupQuery = function (queryView) {\n        this.queryViewsByQuery.delete(queryView.query);\n        delete this.queryViewsByTarget[queryView.targetId];\n        this.limboDocumentRefs.removeReferencesForId(queryView.targetId);\n        return this.gcLimboDocuments();\n    };\n    SyncEngine.prototype.updateTrackedLimbos = function (targetId, limboChanges) {\n        for (var _i = 0, limboChanges_1 = limboChanges; _i < limboChanges_1.length; _i++) {\n            var limboChange = limboChanges_1[_i];\n            if (limboChange instanceof AddedLimboDocument) {\n                this.limboDocumentRefs.addReference(limboChange.key, targetId);\n                this.trackLimboChange(limboChange);\n            }\n            else if (limboChange instanceof RemovedLimboDocument) {\n                debug(sync_engine_LOG_TAG, 'Document no longer in limbo: ' + limboChange.key);\n                this.limboDocumentRefs.removeReference(limboChange.key, targetId);\n            }\n            else {\n                fail('Unknown limbo change: ' + JSON.stringify(limboChange));\n            }\n        }\n        return this.gcLimboDocuments();\n    };\n    SyncEngine.prototype.trackLimboChange = function (limboChange) {\n        var key = limboChange.key;\n        if (!this.limboTargetsByKey.get(key)) {\n            debug(sync_engine_LOG_TAG, 'New document in limbo: ' + key);\n            var limboTargetId = this.targetIdGenerator.next();\n            var query = query_Query.atPath(key.path);\n            this.limboKeysByTarget[limboTargetId] = key;\n            this.remoteStore.listen(new query_data_QueryData(query, limboTargetId, QueryPurpose.Listen));\n            this.limboTargetsByKey = this.limboTargetsByKey.insert(key, limboTargetId);\n        }\n    };\n    SyncEngine.prototype.gcLimboDocuments = function () {\n        var _this = this;\n        // HACK: We can use a null transaction here, because we know that the\n        // reference set is entirely within memory and doesn't need a store engine.\n        return this.limboCollector\n            .collectGarbage(null)\n            .next(function (keys) {\n            keys.forEach(function (key) {\n                var limboTargetId = _this.limboTargetsByKey.get(key);\n                if (limboTargetId === null) {\n                    // This target already got removed, because the query failed.\n                    return;\n                }\n                _this.remoteStore.unlisten(limboTargetId);\n                _this.limboTargetsByKey = _this.limboTargetsByKey.remove(key);\n                delete _this.limboKeysByTarget[limboTargetId];\n            });\n        })\n            .toPromise();\n    };\n    // Visible for testing\n    SyncEngine.prototype.currentLimboDocs = function () {\n        return this.limboTargetsByKey;\n    };\n    SyncEngine.prototype.emitNewSnapsAndNotifyLocalStore = function (changes, remoteEvent) {\n        var _this = this;\n        var newSnaps = [];\n        var docChangesInAllViews = [];\n        var queriesProcessed = [];\n        this.queryViewsByQuery.forEach(function (_, queryView) {\n            queriesProcessed.push(Promise.resolve()\n                .then(function () {\n                var viewDocChanges = queryView.view.computeDocChanges(changes);\n                if (!viewDocChanges.needsRefill) {\n                    return viewDocChanges;\n                }\n                // The query has a limit and some docs were removed, so we need\n                // to re-run the query against the local store to make sure we\n                // didn't lose any good docs that had been past the limit.\n                return _this.localStore.executeQuery(queryView.query).then(function (docs) {\n                    return queryView.view.computeDocChanges(docs, viewDocChanges);\n                });\n            })\n                .then(function (viewDocChanges) {\n                var targetChange = remoteEvent && remoteEvent.targetChanges[queryView.targetId];\n                var viewChange = queryView.view.applyChanges(viewDocChanges, targetChange);\n                return _this.updateTrackedLimbos(queryView.targetId, viewChange.limboChanges).then(function () {\n                    if (viewChange.snapshot) {\n                        newSnaps.push(viewChange.snapshot);\n                        var docChanges = local_view_changes_LocalViewChanges.fromSnapshot(viewChange.snapshot);\n                        docChangesInAllViews.push(docChanges);\n                    }\n                });\n            }));\n        });\n        return Promise.all(queriesProcessed)\n            .then(function () {\n            _this.viewHandler(newSnaps);\n            return _this.localStore.notifyLocalViewChanges(docChangesInAllViews);\n        })\n            .then(function () {\n            return _this.localStore.collectGarbage();\n        });\n    };\n    SyncEngine.prototype.assertSubscribed = function (fnName) {\n        assert(this.viewHandler !== null && this.errorHandler !== null, 'Trying to call ' + fnName + ' before calling subscribe().');\n    };\n    SyncEngine.prototype.handleUserChange = function (user) {\n        var _this = this;\n        this.currentUser = user;\n        return this.localStore\n            .handleUserChange(user)\n            .then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes);\n        })\n            .then(function () {\n            return _this.remoteStore.handleUserChange(user);\n        });\n    };\n    return SyncEngine;\n}());\n\n\n//# sourceMappingURL=sync_engine.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/mutation_batch.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar BATCHID_UNKNOWN = -1;\n/**\n * A batch of mutations that will be sent as one unit to the backend.\n */\nvar mutation_batch_MutationBatch = /** @class */ (function () {\n    function MutationBatch(batchId, localWriteTime, mutations) {\n        this.batchId = batchId;\n        this.localWriteTime = localWriteTime;\n        this.mutations = mutations;\n    }\n    /**\n     * Applies all the mutations in this MutationBatch to the specified document\n     * to create a new remote document\n     *\n     * @param docKey The key of the document to apply mutations to.\n     * @param maybeDoc The document to apply mutations to.\n     * @param batchResult The result of applying the MutationBatch to the\n     * backend.\n     */\n    MutationBatch.prototype.applyToRemoteDocument = function (docKey, maybeDoc, batchResult) {\n        if (maybeDoc) {\n            assert(maybeDoc.key.equals(docKey), \"applyToRemoteDocument: key \" + docKey + \" should match maybeDoc key\\n        \" + maybeDoc.key);\n        }\n        var mutationResults = batchResult.mutationResults;\n        assert(mutationResults.length === this.mutations.length, \"Mismatch between mutations length\\n      (\" + this.mutations.length + \") and mutation results length\\n      (\" + mutationResults.length + \").\");\n        for (var i = 0; i < this.mutations.length; i++) {\n            var mutation = this.mutations[i];\n            if (mutation.key.equals(docKey)) {\n                var mutationResult = mutationResults[i];\n                maybeDoc = mutation.applyToRemoteDocument(maybeDoc, mutationResult);\n            }\n        }\n        return maybeDoc;\n    };\n    /**\n     * Computes the local view of a document given all the mutations in this\n     * batch.\n     *\n     * @param docKey The key of the document to apply mutations to.\n     * @param maybeDoc The document to apply mutations to.\n     */\n    MutationBatch.prototype.applyToLocalView = function (docKey, maybeDoc) {\n        if (maybeDoc) {\n            assert(maybeDoc.key.equals(docKey), \"applyToLocalDocument: key \" + docKey + \" should match maybeDoc key\\n        \" + maybeDoc.key);\n        }\n        for (var i = 0; i < this.mutations.length; i++) {\n            var mutation = this.mutations[i];\n            if (mutation.key.equals(docKey)) {\n                maybeDoc = mutation.applyToLocalView(maybeDoc, this.localWriteTime);\n            }\n        }\n        return maybeDoc;\n    };\n    MutationBatch.prototype.keys = function () {\n        var keySet = documentKeySet();\n        for (var _i = 0, _a = this.mutations; _i < _a.length; _i++) {\n            var mutation = _a[_i];\n            keySet = keySet.add(mutation.key);\n        }\n        return keySet;\n    };\n    MutationBatch.prototype.equals = function (other) {\n        return (this.batchId === other.batchId &&\n            arrayEquals(this.mutations, other.mutations));\n    };\n    /**\n     * Returns true if this mutation batch has already been removed from the\n     * mutation queue.\n     *\n     * Note that not all implementations of the MutationQueue necessarily use\n     * tombstones as part of their implementation and generally speaking no code\n     * outside the mutation queues should really care about this.\n     */\n    MutationBatch.prototype.isTombstone = function () {\n        return this.mutations.length === 0;\n    };\n    /** Converts this batch into a tombstone */\n    MutationBatch.prototype.toTombstone = function () {\n        return new MutationBatch(this.batchId, this.localWriteTime, []);\n    };\n    return MutationBatch;\n}());\n\n/** The result of applying a mutation batch to the backend. */\nvar mutation_batch_MutationBatchResult = /** @class */ (function () {\n    function MutationBatchResult(batch, commitVersion, mutationResults, streamToken, \n        /**\n         * A pre-computed mapping from each mutated document to the resulting\n         * version.\n         */\n        docVersions) {\n        this.batch = batch;\n        this.commitVersion = commitVersion;\n        this.mutationResults = mutationResults;\n        this.streamToken = streamToken;\n        this.docVersions = docVersions;\n    }\n    /**\n     * Creates a new MutationBatchResult for the given batch and results. There\n     * must be one result for each mutation in the batch. This static factory\n     * caches a document=>version mapping (docVersions).\n     */\n    MutationBatchResult.from = function (batch, commitVersion, results, streamToken) {\n        assert(batch.mutations.length === results.length, 'Mutations sent ' +\n            batch.mutations.length +\n            ' must equal results received ' +\n            results.length);\n        var versionMap = documentVersionMap();\n        var mutations = batch.mutations;\n        for (var i = 0; i < mutations.length; i++) {\n            var version = results[i].version;\n            if (version === null) {\n                // deletes don't have a version, so we substitute the commitVersion\n                // of the entire batch.\n                version = commitVersion;\n            }\n            versionMap = versionMap.insert(mutations[i].key, version);\n        }\n        return new MutationBatchResult(batch, commitVersion, results, streamToken, versionMap);\n    };\n    return MutationBatchResult;\n}());\n\n\n//# sourceMappingURL=mutation_batch.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/encoded_resource_path.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar escapeChar = '\\u0001';\nvar encodedSeparatorChar = '\\u0001';\nvar encodedNul = '\\u0010';\nvar encodedEscape = '\\u0011';\n/**\n * Encodes a resource path into a IndexedDb-compatible string form.\n */\nfunction encode(path) {\n    var result = '';\n    for (var i = 0; i < path.length; i++) {\n        if (result.length > 0) {\n            result = encodeSeparator(result);\n        }\n        result = encodeSegment(path.get(i), result);\n    }\n    return encodeSeparator(result);\n}\n/** Encodes a single segment of a resource path into the given result */\nfunction encodeSegment(segment, resultBuf) {\n    var result = resultBuf;\n    var length = segment.length;\n    for (var i = 0; i < length; i++) {\n        var c = segment.charAt(i);\n        switch (c) {\n            case '\\0':\n                result += escapeChar + encodedNul;\n                break;\n            case escapeChar:\n                result += escapeChar + encodedEscape;\n                break;\n            default:\n                result += c;\n        }\n    }\n    return result;\n}\n/** Encodes a path separator into the given result */\nfunction encodeSeparator(result) {\n    return result + escapeChar + encodedSeparatorChar;\n}\n/**\n * Decodes the given IndexedDb-compatible string form of a resource path into\n * a ResourcePath instance. Note that this method is not suitable for use with\n * decoding resource names from the server; those are One Platform format\n * strings.\n */\nfunction decode(path) {\n    // Event the empty path must encode as a path of at least length 2. A path\n    // with exactly 2 must be the empty path.\n    var length = path.length;\n    assert(length >= 2, 'Invalid path ' + path);\n    if (length === 2) {\n        assert(path.charAt(0) === escapeChar && path.charAt(1) === encodedSeparatorChar, 'Non-empty path ' + path + ' had length 2');\n        return path_ResourcePath.EMPTY_PATH;\n    }\n    // Escape characters cannot exist past the second-to-last position in the\n    // source value.\n    var lastReasonableEscapeIndex = length - 2;\n    var segments = [];\n    var segmentBuilder = '';\n    for (var start = 0; start < length;) {\n        // The last two characters of a valid encoded path must be a separator, so\n        // there must be an end to this segment.\n        var end = path.indexOf(escapeChar, start);\n        if (end < 0 || end > lastReasonableEscapeIndex) {\n            fail('Invalid encoded resource path: \"' + path + '\"');\n        }\n        var next = path.charAt(end + 1);\n        switch (next) {\n            case encodedSeparatorChar:\n                var currentPiece = path.substring(start, end);\n                var segment = void 0;\n                if (segmentBuilder.length === 0) {\n                    // Avoid copying for the common case of a segment that excludes \\0\n                    // and \\001\n                    segment = currentPiece;\n                }\n                else {\n                    segmentBuilder += currentPiece;\n                    segment = segmentBuilder;\n                    segmentBuilder = '';\n                }\n                segments.push(segment);\n                break;\n            case encodedNul:\n                segmentBuilder += path.substring(start, end);\n                segmentBuilder += '\\0';\n                break;\n            case encodedEscape:\n                // The escape character can be used in the output to encode itself.\n                segmentBuilder += path.substring(start, end + 1);\n                break;\n            default:\n                fail('Invalid encoded resource path: \"' + path + '\"');\n        }\n        start = end + 2;\n    }\n    return new path_ResourcePath(segments);\n}\n/**\n * Computes the prefix successor of the given path, computed by encode above.\n * A prefix successor is the first key that cannot be prefixed by the given\n * path. It's useful for defining the end of a prefix scan such that all keys\n * in the scan have the same prefix.\n *\n * Note that this is not a general prefix successor implementation, which is\n * tricky to get right with Strings, given that they encode down to UTF-8.\n * Instead this relies on the fact that all paths encoded by this class are\n * always terminated with a separator, and so a successor can always be\n * cheaply computed by incrementing the last character of the path.\n */\nfunction prefixSuccessor(path) {\n    var c = path.charCodeAt(path.length - 1);\n    // TODO(mcg): this really should be a general thing, but not worth it right\n    // now\n    assert(c === 1, 'successor may only operate on paths generated by encode');\n    return path.substring(0, path.length - 1) + String.fromCharCode(c + 1);\n}\n\n//# sourceMappingURL=encoded_resource_path.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/indexeddb_schema.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar SCHEMA_VERSION = 1;\n/** Performs database creation and (in the future) upgrades between versions. */\nfunction createOrUpgradeDb(db, oldVersion) {\n    assert(oldVersion === 0, 'Unexpected upgrade from version ' + oldVersion);\n    db.createObjectStore(DbMutationQueue.store, {\n        keyPath: DbMutationQueue.keyPath\n    });\n    // TODO(mikelehen): Get rid of \"as any\" if/when TypeScript fixes their\n    // types. https://github.com/Microsoft/TypeScript/issues/14322\n    db.createObjectStore(\n    // tslint:disable-next-line:no-any\n    DbMutationBatch.store, { keyPath: DbMutationBatch.keyPath });\n    var targetDocumentsStore = db.createObjectStore(\n    // tslint:disable-next-line:no-any\n    DbTargetDocument.store, { keyPath: DbTargetDocument.keyPath });\n    targetDocumentsStore.createIndex(DbTargetDocument.documentTargetsIndex, DbTargetDocument.documentTargetsKeyPath, { unique: true });\n    var targetStore = db.createObjectStore(DbTarget.store, {\n        keyPath: DbTarget.keyPath\n    });\n    // NOTE: This is unique only because the TargetId is the suffix.\n    targetStore.createIndex(DbTarget.queryTargetsIndexName, DbTarget.queryTargetsKeyPath, { unique: true });\n    // NOTE: keys for these stores are specified explicitly rather than using a\n    // keyPath.\n    db.createObjectStore(indexeddb_schema_DbDocumentMutation.store);\n    db.createObjectStore(DbRemoteDocument.store);\n    db.createObjectStore(DbOwner.store);\n    db.createObjectStore(DbTargetGlobal.store);\n}\n/**\n * Wrapper class to store timestamps (seconds and nanos) in IndexedDb objects.\n */\nvar DbTimestamp = /** @class */ (function () {\n    function DbTimestamp(seconds, nanos) {\n        this.seconds = seconds;\n        this.nanos = nanos;\n    }\n    return DbTimestamp;\n}());\n\n/**\n * A singleton object to be stored in the 'owner' store in IndexedDb.\n *\n * A given database can be owned by a single tab at a given time. That tab\n * must validate that it is still the owner before every write operation and\n * should regularly write an updated timestamp to prevent other tabs from\n * \"stealing\" ownership of the db.\n */\nvar DbOwner = /** @class */ (function () {\n    function DbOwner(ownerId, leaseTimestampMs) {\n        this.ownerId = ownerId;\n        this.leaseTimestampMs = leaseTimestampMs;\n    }\n    /** Name of the IndexedDb object store. */\n    DbOwner.store = 'owner';\n    return DbOwner;\n}());\n\n/**\n * An object to be stored in the 'mutationQueues' store in IndexedDb.\n *\n * Each user gets a single queue of MutationBatches to apply to the server.\n * DbMutationQueue tracks the metadata about the queue.\n */\nvar DbMutationQueue = /** @class */ (function () {\n    function DbMutationQueue(\n        /**\n           * The normalized user ID to which this queue belongs.\n           */\n        userId, \n        /**\n           * An identifier for the highest numbered batch that has been acknowledged\n           * by the server. All MutationBatches in this queue with batchIds less\n           * than or equal to this value are considered to have been acknowledged by\n           * the server.\n           */\n        lastAcknowledgedBatchId, \n        /**\n           * A stream token that was previously sent by the server.\n           *\n           * See StreamingWriteRequest in datastore.proto for more details about\n           * usage.\n           *\n           * After sending this token, earlier tokens may not be used anymore so\n           * only a single stream token is retained.\n           */\n        lastStreamToken) {\n        this.userId = userId;\n        this.lastAcknowledgedBatchId = lastAcknowledgedBatchId;\n        this.lastStreamToken = lastStreamToken;\n    }\n    /** Name of the IndexedDb object store.  */\n    DbMutationQueue.store = 'mutationQueues';\n    /** Keys are automatically assigned via the userId property. */\n    DbMutationQueue.keyPath = 'userId';\n    return DbMutationQueue;\n}());\n\n/**\n * An object to be stored in the 'mutations' store in IndexedDb.\n *\n * Represents a batch of user-level mutations intended to be sent to the server\n * in a single write. Each user-level batch gets a separate DbMutationBatch\n * with a new batchId.\n */\nvar DbMutationBatch = /** @class */ (function () {\n    function DbMutationBatch(\n        /**\n           * The normalized user ID to which this batch belongs.\n           */\n        userId, \n        /**\n           * An identifier for this batch, allocated by the mutation queue in a\n           * monotonically increasing manner.\n           */\n        batchId, \n        /**\n           * The local write time of the batch, stored as milliseconds since the\n           * epoch.\n           */\n        localWriteTimeMs, \n        /**\n           * A list of mutations to apply. All mutations will be applied atomically.\n           *\n           * Mutations are serialized via JsonProtoSerializer.toMutation().\n           */\n        mutations) {\n        this.userId = userId;\n        this.batchId = batchId;\n        this.localWriteTimeMs = localWriteTimeMs;\n        this.mutations = mutations;\n    }\n    /** Name of the IndexedDb object store.  */\n    DbMutationBatch.store = 'mutations';\n    /** Keys are automatically assigned via the userId, batchId properties. */\n    DbMutationBatch.keyPath = ['userId', 'batchId'];\n    return DbMutationBatch;\n}());\n\n/**\n * An object to be stored in the 'documentMutations' store in IndexedDb.\n *\n * A manually maintained index of all the mutation batches that affect a given\n * document key. The rows in this table are references based on the contents of\n * DbMutationBatch.mutations.\n */\nvar indexeddb_schema_DbDocumentMutation = /** @class */ (function () {\n    function DbDocumentMutation() {\n    }\n    /**\n     * Creates a [userId] key for use in the DbDocumentMutations index to iterate\n     * over all of a user's document mutations.\n     */\n    DbDocumentMutation.prefixForUser = function (userId) {\n        return [userId];\n    };\n    /**\n     * Creates a [userId, encodedPath] key for use in the DbDocumentMutations\n     * index to iterate over all at document mutations for a given path or lower.\n     */\n    DbDocumentMutation.prefixForPath = function (userId, path) {\n        return [userId, encode(path)];\n    };\n    /**\n     * Creates a full index key of [userId, encodedPath, batchId] for inserting\n     * and deleting into the DbDocumentMutations index.\n     */\n    DbDocumentMutation.key = function (userId, path, batchId) {\n        return [userId, encode(path), batchId];\n    };\n    DbDocumentMutation.store = 'documentMutations';\n    /**\n     * Because we store all the useful information for this store in the key,\n     * there is no useful information to store as the value. The raw (unencoded)\n     * path cannot be stored because IndexedDb doesn't store prototype\n     * information.\n     */\n    DbDocumentMutation.PLACEHOLDER = new DbDocumentMutation();\n    return DbDocumentMutation;\n}());\n\n/**\n * Represents the known absence of a document at a particular version.\n * Stored in IndexedDb as part of a DbRemoteDocument object.\n */\nvar DbNoDocument = /** @class */ (function () {\n    function DbNoDocument(path, readTime) {\n        this.path = path;\n        this.readTime = readTime;\n    }\n    return DbNoDocument;\n}());\n\n/**\n * An object to be stored in the 'remoteDocuments' store in IndexedDb. It\n * represents either a cached document (if it exists) or a cached \"no-document\"\n * (if it is known to not exist).\n *\n * Note: This is the persisted equivalent of a MaybeDocument and could perhaps\n * be made more general if necessary.\n */\nvar DbRemoteDocument = /** @class */ (function () {\n    function DbRemoteDocument(\n        /**\n           * Set to an instance of a DbNoDocument if it is known that no document\n           * exists.\n           */\n        noDocument, \n        /**\n           * Set to an instance of a Document if there's a cached version of the\n           * document.\n           */\n        document) {\n        this.noDocument = noDocument;\n        this.document = document;\n    }\n    DbRemoteDocument.store = 'remoteDocuments';\n    return DbRemoteDocument;\n}());\n\n/**\n * An object to be stored in the 'targets' store in IndexedDb.\n *\n * This is based on and should be kept in sync with the proto used in the iOS\n * client.\n *\n * Each query the client listens to against the server is tracked on disk so\n * that the query can be efficiently resumed on restart.\n */\nvar DbTarget = /** @class */ (function () {\n    function DbTarget(\n        /**\n           * An auto-generated sequential numeric identifier for the query.\n           *\n           * Queries are stored using their canonicalId as the key, but these\n           * canonicalIds can be quite long so we additionally assign a unique\n           * queryId which can be used by referenced data structures (e.g.\n           * indexes) to minimize the on-disk cost.\n           */\n        targetId, \n        /**\n           * The canonical string representing this query. This is not unique.\n           */\n        canonicalId, \n        /**\n           * The last readTime received from the Watch Service for this query.\n           *\n           * This is the same value as TargetChange.read_time in the protos.\n           */\n        readTime, \n        /**\n           * An opaque, server-assigned token that allows watching a query to be\n           * resumed after disconnecting without retransmitting all the data\n           * that matches the query. The resume token essentially identifies a\n           * point in time from which the server should resume sending results.\n           *\n           * This is related to the snapshotVersion in that the resumeToken\n           * effectively also encodes that value, but the resumeToken is opaque\n           * and sometimes encodes additional information.\n           *\n           * A consequence of this is that the resumeToken should be used when\n           * asking the server to reason about where this client is in the watch\n           * stream, but the client should use the snapshotVersion for its own\n           * purposes.\n           *\n           * This is the same value as TargetChange.resume_token in the protos.\n           */\n        resumeToken, \n        /**\n           * A sequence number representing the last time this query was\n           * listened to, used for garbage collection purposes.\n           *\n           * Conventionally this would be a timestamp value, but device-local\n           * clocks are unreliable and they must be able to create new listens\n           * even while disconnected. Instead this should be a monotonically\n           * increasing number that's incremented on each listen call.\n           *\n           * This is different from the queryId since the queryId is an\n           * immutable identifier assigned to the Query on first use while\n           * lastListenSequenceNumber is updated every time the query is\n           * listened to.\n           */\n        lastListenSequenceNumber, \n        /**\n           * The query for this target.\n           *\n           * Because canonical ids are not unique we must store the actual query. We\n           * use the proto to have an object we can persist without having to\n           * duplicate translation logic to and from a `Query` object.\n           */\n        query) {\n        this.targetId = targetId;\n        this.canonicalId = canonicalId;\n        this.readTime = readTime;\n        this.resumeToken = resumeToken;\n        this.lastListenSequenceNumber = lastListenSequenceNumber;\n        this.query = query;\n    }\n    DbTarget.store = 'targets';\n    /** Keys are automatically assigned via the targetId property. */\n    DbTarget.keyPath = 'targetId';\n    /** The name of the queryTargets index. */\n    DbTarget.queryTargetsIndexName = 'queryTargetsIndex';\n    /**\n     * The index of all canonicalIds to the targets that they match. This is not\n     * a unique mapping because canonicalId does not promise a unique name for all\n     * possible queries, so we append the targetId to make the mapping unique.\n     */\n    DbTarget.queryTargetsKeyPath = ['canonicalId', 'targetId'];\n    return DbTarget;\n}());\n\n/**\n * An object representing an association between a target and a document.\n * Stored in the targetDocument object store to store the documents tracked by a\n * particular target.\n */\nvar DbTargetDocument = /** @class */ (function () {\n    function DbTargetDocument(\n        /**\n           * The targetId identifying a target.\n           */\n        targetId, \n        /**\n           * The path to the document, as encoded in the key.\n           */\n        path) {\n        this.targetId = targetId;\n        this.path = path;\n    }\n    /** Name of the IndexedDb object store.  */\n    DbTargetDocument.store = 'targetDocuments';\n    /** Keys are automatically assigned via the targetId, path properties. */\n    DbTargetDocument.keyPath = ['targetId', 'path'];\n    /** The index name for the reverse index. */\n    DbTargetDocument.documentTargetsIndex = 'documentTargetsIndex';\n    /** We also need to create the reverse index for these properties. */\n    DbTargetDocument.documentTargetsKeyPath = ['path', 'targetId'];\n    return DbTargetDocument;\n}());\n\n/**\n * A record of global state tracked across all Targets, tracked separately\n * to avoid the need for extra indexes.\n *\n * This should be kept in-sync with the proto used in the iOS client.\n */\nvar DbTargetGlobal = /** @class */ (function () {\n    function DbTargetGlobal(\n        /**\n           * The highest numbered target id across all targets.\n           *\n           * See DbTarget.targetId.\n           */\n        highestTargetId, \n        /**\n           * The highest numbered lastListenSequenceNumber across all targets.\n           *\n           * See DbTarget.lastListenSequenceNumber.\n           */\n        highestListenSequenceNumber, \n        /**\n           * A global snapshot version representing the last consistent snapshot we\n           * received from the backend. This is monotonically increasing and any\n           * snapshots received from the backend prior to this version (e.g. for\n           * targets resumed with a resumeToken) should be suppressed (buffered)\n           * until the backend has caught up to this snapshot version again. This\n           * prevents our cache from ever going backwards in time.\n           */\n        lastRemoteSnapshotVersion) {\n        this.highestTargetId = highestTargetId;\n        this.highestListenSequenceNumber = highestListenSequenceNumber;\n        this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;\n    }\n    /**\n     * The key string used for the single object that exists in the\n     * DbTargetGlobal store.\n     */\n    DbTargetGlobal.key = 'targetGlobalKey';\n    DbTargetGlobal.store = 'targetGlobal';\n    return DbTargetGlobal;\n}());\n\n/**\n * The list of all IndexedDB stored used by the SDK. This is used when creating\n * transactions so that access across all stores is done atomically.\n */\nvar ALL_STORES = [\n    DbMutationQueue.store,\n    DbMutationBatch.store,\n    indexeddb_schema_DbDocumentMutation.store,\n    DbRemoteDocument.store,\n    DbTarget.store,\n    DbOwner.store,\n    DbTargetGlobal.store,\n    DbTargetDocument.store\n];\n\n//# sourceMappingURL=indexeddb_schema.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/simple_db.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar simple_db_LOG_TAG = 'SimpleDb';\n/**\n * Provides a wrapper around IndexedDb with a simplified interface that uses\n * Promise-like return values to chain operations. Real promises cannot be used\n * since .then() continuations are executed asynchronously (e.g. via\n * .setImmediate), which would cause IndexedDB to end the transaction.\n * See PersistencePromise for more details.\n */\nvar simple_db_SimpleDb = /** @class */ (function () {\n    function SimpleDb(db) {\n        this.db = db;\n    }\n    /** Opens the specified database, creating or upgrading it if necessary. */\n    SimpleDb.openOrCreate = function (name, version, runUpgrade) {\n        assert(SimpleDb.isAvailable(), 'IndexedDB not supported in current environment.');\n        debug(simple_db_LOG_TAG, 'Opening database:', name);\n        return new persistence_promise_PersistencePromise(function (resolve, reject) {\n            // TODO(mikelehen): Investigate browser compatibility.\n            // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB\n            // suggests IE9 and older WebKit browsers handle upgrade\n            // differently.\n            var request = window.indexedDB.open(name, version);\n            request.onsuccess = function (event) {\n                var db = event.target.result;\n                resolve(new SimpleDb(db));\n            };\n            request.onerror = function (event) {\n                reject(event.target.error);\n            };\n            request.onupgradeneeded = function (event) {\n                debug(simple_db_LOG_TAG, 'Database \"' + name + '\" requires upgrade from version:', event.oldVersion);\n                // TODO(mikelehen): If/when we need to do an actual data\n                // migration, we'll want to wrap db in a SimpleDb and have the\n                // runUpgrade function return a PersistencePromise, since we'll\n                // likely need to do async reads and writes. For now we're\n                // cheating and just passing the raw IndexedDB in, since\n                // createObjectStore(), etc. are synchronous.\n                var db = event.target.result;\n                runUpgrade(db, event.oldVersion);\n            };\n        }).toPromise();\n    };\n    /** Deletes the specified database. */\n    SimpleDb.delete = function (name) {\n        debug(simple_db_LOG_TAG, 'Removing database:', name);\n        return wrapRequest(window.indexedDB.deleteDatabase(name)).toPromise();\n    };\n    /** Returns true if IndexedDB is available in the current environment. */\n    SimpleDb.isAvailable = function () {\n        if (typeof window === 'undefined' || window.indexedDB == null) {\n            return false;\n        }\n        // We extensively use indexed array values and compound keys,\n        // which IE and Edge do not support. However, they still have indexedDB\n        // defined on the window, so we need to check for them here and make sure\n        // to return that persistence is not enabled for those browsers.\n        // For tracking support of this feature, see here:\n        // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/\n        // Check the UA string to find out the browser.\n        var ua = window.navigator.userAgent;\n        // IE 10\n        // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n        // IE 11\n        // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n        // Edge\n        // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,\n        // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n        if (ua.indexOf('MSIE ') > 0 ||\n            ua.indexOf('Trident/') > 0 ||\n            ua.indexOf('Edge/') > 0) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    };\n    SimpleDb.prototype.runTransaction = function (mode, objectStores, transactionFn) {\n        var transaction = new simple_db_SimpleDbTransaction(this.db, mode, objectStores);\n        var transactionFnResult = transactionFn(transaction)\n            .catch(function (error) {\n            // Abort the transaction if there was an\n            // error.\n            transaction.abort();\n            return persistence_promise_PersistencePromise.reject(error);\n        })\n            .toPromise();\n        // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to\n        // fire), but still return the original transactionFnResult back to the\n        // caller.\n        return transaction.completionPromise.then(function () { return transactionFnResult; });\n    };\n    SimpleDb.prototype.close = function () {\n        this.db.close();\n    };\n    return SimpleDb;\n}());\n\n/**\n * A controller for iterating over a key range or index. It allows an iterate\n * callback to delete the currently-referenced object, or jump to a new key\n * within the key range or index.\n */\nvar IterationController = /** @class */ (function () {\n    function IterationController(dbCursor) {\n        this.dbCursor = dbCursor;\n        this.shouldStop = false;\n        this.nextKey = null;\n    }\n    Object.defineProperty(IterationController.prototype, \"isDone\", {\n        get: function () {\n            return this.shouldStop;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IterationController.prototype, \"skipToKey\", {\n        get: function () {\n            return this.nextKey;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IterationController.prototype, \"cursor\", {\n        set: function (value) {\n            this.dbCursor = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This function can be called to stop iteration at any point.\n     */\n    IterationController.prototype.done = function () {\n        this.shouldStop = true;\n    };\n    /**\n     * This function can be called to skip to that next key, which could be\n     * an index or a primary key.\n     */\n    IterationController.prototype.skip = function (key) {\n        this.nextKey = key;\n    };\n    /**\n     * Delete the current cursor value from the object store.\n     *\n     * NOTE: You CANNOT do this with a keysOnly query.\n     */\n    IterationController.prototype.delete = function () {\n        return wrapRequest(this.dbCursor.delete());\n    };\n    return IterationController;\n}());\n\n/**\n * Wraps an IDBTransaction and exposes a store() method to get a handle to a\n * specific object store.\n */\nvar simple_db_SimpleDbTransaction = /** @class */ (function () {\n    function SimpleDbTransaction(db, mode, objectStoresNames) {\n        var _this = this;\n        this.aborted = false;\n        this.transaction = db.transaction(objectStoresNames, mode);\n        this.completionPromise = new Promise(function (resolve, reject) {\n            // We consider aborting to be \"normal\" and just resolve the promise.\n            // May need to revisit if/when we actually need to abort transactions.\n            _this.transaction.onabort = _this.transaction.oncomplete = function (event) {\n                resolve();\n            };\n            _this.transaction.onerror = function (event) {\n                reject(event.target.error);\n            };\n        });\n    }\n    SimpleDbTransaction.prototype.abort = function () {\n        if (!this.aborted) {\n            debug(simple_db_LOG_TAG, 'Aborting transaction.');\n            this.aborted = true;\n            this.transaction.abort();\n        }\n    };\n    /**\n     * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All\n     * operations performed on the SimpleDbStore happen within the context of this\n     * transaction and it cannot be used anymore once the transaction is\n     * completed.\n     *\n     * Note that we can't actually enforce that the KeyType and ValueType are\n     * correct, but they allow type safety through the rest of the consuming code.\n     */\n    SimpleDbTransaction.prototype.store = function (storeName) {\n        var store = this.transaction.objectStore(storeName);\n        assert(!!store, 'Object store not part of transaction: ' + storeName);\n        return new simple_db_SimpleDbStore(store);\n    };\n    return SimpleDbTransaction;\n}());\n\n/**\n * A wrapper around an IDBObjectStore providing an API that:\n *\n * 1) Has generic KeyType / ValueType parameters to provide strongly-typed\n * methods for acting against the object store.\n * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every\n * method return a PersistencePromise instead.\n * 3) Provides a higher-level API to avoid needing to do excessive wrapping of\n * intermediate IndexedDB types (IDBCursorWithValue, etc.)\n */\nvar simple_db_SimpleDbStore = /** @class */ (function () {\n    function SimpleDbStore(store) {\n        this.store = store;\n    }\n    SimpleDbStore.prototype.put = function (keyOrValue, value) {\n        var request;\n        if (value !== undefined) {\n            debug(simple_db_LOG_TAG, 'PUT', this.store.name, keyOrValue, value);\n            request = this.store.put(value, keyOrValue);\n        }\n        else {\n            debug(simple_db_LOG_TAG, 'PUT', this.store.name, '<auto-key>', keyOrValue);\n            request = this.store.put(keyOrValue);\n        }\n        return wrapRequest(request);\n    };\n    /**\n     * Gets the object with the specified key from the specified store, or null\n     * if no object exists with the specified key.\n     *\n     * @key The key of the object to get.\n     * @return The object with the specified key or null if no object exists.\n     */\n    SimpleDbStore.prototype.get = function (key) {\n        var _this = this;\n        var request = this.store.get(key);\n        // tslint:disable-next-line:no-any We're doing an unsafe cast to ValueType.\n        return wrapRequest(request).next(function (result) {\n            // Normalize nonexistence to null.\n            if (result === undefined) {\n                result = null;\n            }\n            debug(simple_db_LOG_TAG, 'GET', _this.store.name, key, result);\n            return result;\n        });\n    };\n    SimpleDbStore.prototype.delete = function (key) {\n        debug(simple_db_LOG_TAG, 'DELETE', this.store.name, key);\n        var request = this.store.delete(key);\n        return wrapRequest(request);\n    };\n    SimpleDbStore.prototype.loadAll = function (indexOrRange, range) {\n        var cursor = this.cursor(this.options(indexOrRange, range));\n        var results = [];\n        return this.iterateCursor(cursor, function (key, value) {\n            results.push(value);\n        }).next(function () {\n            return results;\n        });\n    };\n    SimpleDbStore.prototype.deleteAll = function (indexOrRange, range) {\n        debug(simple_db_LOG_TAG, 'DELETE ALL', this.store.name);\n        var options = this.options(indexOrRange, range);\n        options.keysOnly = false;\n        var cursor = this.cursor(options);\n        return this.iterateCursor(cursor, function (key, value, control) {\n            // NOTE: Calling delete() on a cursor is documented as more efficient than\n            // calling delete() on an object store with a single key\n            // (https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete),\n            // however, this requires us *not* to use a keysOnly cursor\n            // (https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/delete). We\n            // may want to compare the performance of each method.\n            return control.delete();\n        });\n    };\n    SimpleDbStore.prototype.iterate = function (optionsOrCallback, callback) {\n        var options;\n        if (!callback) {\n            options = {};\n            callback = optionsOrCallback;\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        var cursor = this.cursor(options);\n        return this.iterateCursor(cursor, callback);\n    };\n    SimpleDbStore.prototype.iterateCursor = function (cursorRequest, fn) {\n        var results = [];\n        return new persistence_promise_PersistencePromise(function (resolve, reject) {\n            cursorRequest.onerror = function (event) {\n                reject(event.target.error);\n            };\n            cursorRequest.onsuccess = function (event) {\n                var cursor = event.target.result;\n                if (!cursor) {\n                    resolve();\n                    return;\n                }\n                var controller = new IterationController(cursor);\n                var userResult = fn(cursor.primaryKey, cursor.value, controller);\n                if (userResult instanceof persistence_promise_PersistencePromise) {\n                    results.push(userResult);\n                }\n                if (controller.isDone) {\n                    resolve();\n                }\n                else if (controller.skipToKey === null) {\n                    cursor.continue();\n                }\n                else {\n                    cursor.continue(controller.skipToKey);\n                }\n            };\n        }).next(function () {\n            return persistence_promise_PersistencePromise.waitFor(results);\n        });\n    };\n    SimpleDbStore.prototype.options = function (indexOrRange, range) {\n        var indexName = undefined;\n        if (indexOrRange !== undefined) {\n            if (typeof indexOrRange === 'string') {\n                indexName = indexOrRange;\n            }\n            else {\n                assert(range === undefined, '3rd argument must not be defined if 2nd is a range.');\n                range = indexOrRange;\n            }\n        }\n        return { index: indexName, range: range };\n    };\n    SimpleDbStore.prototype.cursor = function (options) {\n        var direction = 'next';\n        if (options.reverse) {\n            direction = 'prev';\n        }\n        if (options.index) {\n            var index = this.store.index(options.index);\n            if (options.keysOnly) {\n                return index.openKeyCursor(options.range, direction);\n            }\n            else {\n                return index.openCursor(options.range, direction);\n            }\n        }\n        else {\n            return this.store.openCursor(options.range, direction);\n        }\n    };\n    return SimpleDbStore;\n}());\n\n/**\n * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror\n * handlers to resolve / reject the PersistencePromise as appropriate.\n */\nfunction wrapRequest(request) {\n    return new persistence_promise_PersistencePromise(function (resolve, reject) {\n        request.onsuccess = function (event) {\n            var result = event.target.result;\n            resolve(result);\n        };\n        request.onerror = function (event) {\n            reject(event.target.error);\n        };\n    });\n}\n\n//# sourceMappingURL=simple_db.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/indexeddb_mutation_queue.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n/** A mutation queue for a specific user, backed by IndexedDB. */\nvar indexeddb_mutation_queue_IndexedDbMutationQueue = /** @class */ (function () {\n    function IndexedDbMutationQueue(\n        /**\n           * The normalized userId (e.g. null UID => \"\" userId) used to store /\n           * retrieve mutations.\n           */\n        userId, serializer) {\n        this.userId = userId;\n        this.serializer = serializer;\n        this.garbageCollector = null;\n    }\n    /**\n     * Creates a new mutation queue for the given user.\n     * @param user The user for which to create a mutation queue.\n     * @param serializer The serializer to use when persisting to IndexedDb.\n     */\n    IndexedDbMutationQueue.forUser = function (user, serializer) {\n        // TODO(mcg): Figure out what constraints there are on userIDs\n        // In particular, are there any reserved characters? are empty ids allowed?\n        // For the moment store these together in the same mutations table assuming\n        // that empty userIDs aren't allowed.\n        assert(user.uid !== '', 'UserID must not be an empty string.');\n        var userId = user.isUnauthenticated() ? '' : user.uid;\n        return new IndexedDbMutationQueue(userId, serializer);\n    };\n    IndexedDbMutationQueue.prototype.start = function (transaction) {\n        var _this = this;\n        return IndexedDbMutationQueue.loadNextBatchIdFromDb(transaction)\n            .next(function (nextBatchId) {\n            _this.nextBatchId = nextBatchId;\n            return mutationQueuesStore(transaction).get(_this.userId);\n        })\n            .next(function (metadata) {\n            if (!metadata) {\n                metadata = new DbMutationQueue(_this.userId, BATCHID_UNKNOWN, \n                /*lastStreamToken=*/ '');\n            }\n            _this.metadata = metadata;\n            // On restart, nextBatchId may end up lower than\n            // lastAcknowledgedBatchId since it's computed from the queue\n            // contents, and there may be no mutations in the queue. In this\n            // case, we need to reset lastAcknowledgedBatchId (which is safe\n            // since the queue must be empty).\n            if (_this.metadata.lastAcknowledgedBatchId >= _this.nextBatchId) {\n                return _this.checkEmpty(transaction).next(function (empty) {\n                    assert(empty, 'Reset nextBatchID is only possible when the queue is empty');\n                    _this.metadata.lastAcknowledgedBatchId = BATCHID_UNKNOWN;\n                    return mutationQueuesStore(transaction).put(_this.metadata);\n                });\n            }\n            else {\n                return persistence_promise_PersistencePromise.resolve();\n            }\n        });\n    };\n    /**\n     * Returns one larger than the largest batch ID that has been stored. If there\n     * are no mutations returns 0. Note that batch IDs are global.\n     */\n    IndexedDbMutationQueue.loadNextBatchIdFromDb = function (txn) {\n        var maxBatchId = BATCHID_UNKNOWN;\n        return mutationsStore(txn)\n            .iterate({ reverse: true }, function (key, batch, control) {\n            var userId = key[0], batchId = key[1];\n            if (batchId > maxBatchId) {\n                maxBatchId = batch.batchId;\n            }\n            if (userId === '') {\n                // We can't compute a predecessor for the empty string, since it\n                // is lexographically first. That also means that no other\n                // userIds can come before this one, so we can just exit early.\n                control.done();\n            }\n            else {\n                var nextUser = immediatePredecessor(userId);\n                control.skip([nextUser]);\n            }\n        })\n            .next(function () { return maxBatchId + 1; });\n    };\n    IndexedDbMutationQueue.prototype.checkEmpty = function (transaction) {\n        var empty = true;\n        var range = IDBKeyRange.bound(this.keyForBatchId(Number.NEGATIVE_INFINITY), this.keyForBatchId(Number.POSITIVE_INFINITY));\n        return mutationsStore(transaction)\n            .iterate({ range: range }, function (key, value, control) {\n            empty = false;\n            control.done();\n        })\n            .next(function () { return empty; });\n    };\n    IndexedDbMutationQueue.prototype.getNextBatchId = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.nextBatchId);\n    };\n    IndexedDbMutationQueue.prototype.getHighestAcknowledgedBatchId = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.metadata.lastAcknowledgedBatchId);\n    };\n    IndexedDbMutationQueue.prototype.acknowledgeBatch = function (transaction, batch, streamToken) {\n        var batchId = batch.batchId;\n        assert(batchId > this.metadata.lastAcknowledgedBatchId, 'Mutation batchIDs must be acknowledged in order');\n        this.metadata.lastAcknowledgedBatchId = batchId;\n        this.metadata.lastStreamToken = validateStreamToken(streamToken);\n        return mutationQueuesStore(transaction).put(this.metadata);\n    };\n    IndexedDbMutationQueue.prototype.getLastStreamToken = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.metadata.lastStreamToken);\n    };\n    IndexedDbMutationQueue.prototype.setLastStreamToken = function (transaction, streamToken) {\n        this.metadata.lastStreamToken = validateStreamToken(streamToken);\n        return mutationQueuesStore(transaction).put(this.metadata);\n    };\n    IndexedDbMutationQueue.prototype.addMutationBatch = function (transaction, localWriteTime, mutations) {\n        var _this = this;\n        var batchId = this.nextBatchId;\n        this.nextBatchId++;\n        var batch = new mutation_batch_MutationBatch(batchId, localWriteTime, mutations);\n        var dbBatch = this.serializer.toDbMutationBatch(this.userId, batch);\n        return mutationsStore(transaction)\n            .put(dbBatch)\n            .next(function () {\n            var promises = [];\n            for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {\n                var mutation = mutations_1[_i];\n                var encodedPath = encode(mutation.key.path);\n                var indexKey = indexeddb_schema_DbDocumentMutation.key(_this.userId, mutation.key.path, batchId);\n                documentMutationsStore(transaction).put(indexKey, indexeddb_schema_DbDocumentMutation.PLACEHOLDER);\n            }\n            return persistence_promise_PersistencePromise.waitFor(promises);\n        })\n            .next(function () {\n            return batch;\n        });\n    };\n    IndexedDbMutationQueue.prototype.lookupMutationBatch = function (transaction, batchId) {\n        var _this = this;\n        return mutationsStore(transaction)\n            .get(this.keyForBatchId(batchId))\n            .next(function (dbBatch) {\n            return dbBatch ? _this.serializer.fromDbMutationBatch(dbBatch) : null;\n        });\n    };\n    IndexedDbMutationQueue.prototype.getNextMutationBatchAfterBatchId = function (transaction, batchId) {\n        var _this = this;\n        var range = IDBKeyRange.lowerBound(this.keyForBatchId(batchId + 1));\n        var foundBatch = null;\n        return mutationsStore(transaction)\n            .iterate({ range: range }, function (key, dbBatch, control) {\n            if (dbBatch.userId === _this.userId) {\n                assert(dbBatch.batchId > batchId, 'Should have found mutation after ' + batchId);\n                foundBatch = _this.serializer.fromDbMutationBatch(dbBatch);\n            }\n            control.done();\n        })\n            .next(function () { return foundBatch; });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatches = function (transaction) {\n        var _this = this;\n        var range = IDBKeyRange.bound(this.keyForBatchId(BATCHID_UNKNOWN), this.keyForBatchId(Number.POSITIVE_INFINITY));\n        return mutationsStore(transaction)\n            .loadAll(range)\n            .next(function (dbBatches) {\n            return dbBatches.map(function (dbBatch) { return _this.serializer.fromDbMutationBatch(dbBatch); });\n        });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesThroughBatchId = function (transaction, batchId) {\n        var _this = this;\n        var range = IDBKeyRange.bound(this.keyForBatchId(BATCHID_UNKNOWN), this.keyForBatchId(batchId));\n        return mutationsStore(transaction)\n            .loadAll(range)\n            .next(function (dbBatches) {\n            return dbBatches.map(function (dbBatch) { return _this.serializer.fromDbMutationBatch(dbBatch); });\n        });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey = function (transaction, documentKey) {\n        var _this = this;\n        // Scan the document-mutation index starting with a prefix starting with\n        // the given documentKey.\n        var indexPrefix = indexeddb_schema_DbDocumentMutation.prefixForPath(this.userId, documentKey.path);\n        var indexStart = IDBKeyRange.lowerBound(indexPrefix);\n        var results = [];\n        return documentMutationsStore(transaction)\n            .iterate({ range: indexStart }, function (indexKey, _, control) {\n            var userID = indexKey[0], encodedPath = indexKey[1], batchID = indexKey[2];\n            // Only consider rows matching exactly the specific key of\n            // interest. Note that because we order by path first, and we\n            // order terminators before path separators, we'll encounter all\n            // the index rows for documentKey contiguously. In particular, all\n            // the rows for documentKey will occur before any rows for\n            // documents nested in a subcollection beneath documentKey so we\n            // can stop as soon as we hit any such row.\n            var path = decode(encodedPath);\n            if (userID !== _this.userId || !documentKey.path.equals(path)) {\n                control.done();\n                return;\n            }\n            var mutationKey = _this.keyForBatchId(batchID);\n            // Look up the mutation batch in the store.\n            // PORTING NOTE: because iteration is callback driven in the web,\n            // we just look up the key instead of keeping an open iterator\n            // like iOS.\n            return mutationsStore(transaction)\n                .get(mutationKey)\n                .next(function (dbBatch) {\n                if (dbBatch === null) {\n                    fail('Dangling document-mutation reference found: ' +\n                        indexKey +\n                        ' which points to ' +\n                        mutationKey);\n                }\n                results.push(_this.serializer.fromDbMutationBatch(dbBatch));\n            });\n        })\n            .next(function () { return results; });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingQuery = function (transaction, query) {\n        var _this = this;\n        assert(!query.isDocumentQuery(), \"Document queries shouldn't go down this path\");\n        var queryPath = query.path;\n        var immediateChildrenLength = queryPath.length + 1;\n        // TODO(mcg): Actually implement a single-collection query\n        //\n        // This is actually executing an ancestor query, traversing the whole\n        // subtree below the collection which can be horrifically inefficient for\n        // some structures. The right way to solve this is to implement the full\n        // value index, but that's not in the cards in the near future so this is\n        // the best we can do for the moment.\n        //\n        // Since we don't yet index the actual properties in the mutations, our\n        // current approach is to just return all mutation batches that affect\n        // documents in the collection being queried.\n        var indexPrefix = indexeddb_schema_DbDocumentMutation.prefixForPath(this.userId, queryPath);\n        var encodedQueryPath = indexPrefix[1];\n        var indexStart = IDBKeyRange.lowerBound(indexPrefix);\n        // Collect up unique batchIDs encountered during a scan of the index. Use a\n        // SortedSet to accumulate batch IDs so they can be traversed in order in a\n        // scan of the main table.\n        var uniqueBatchIDs = new sorted_set_SortedSet(primitiveComparator);\n        return documentMutationsStore(transaction)\n            .iterate({ range: indexStart }, function (indexKey, _, control) {\n            var userID = indexKey[0], encodedPath = indexKey[1], batchID = indexKey[2];\n            var path = decode(encodedPath);\n            if (userID !== _this.userId || !queryPath.isPrefixOf(path)) {\n                control.done();\n                return;\n            }\n            // Rows with document keys more than one segment longer than the\n            // query path can't be matches. For example, a query on 'rooms'\n            // can't match the document /rooms/abc/messages/xyx.\n            // TODO(mcg): we'll need a different scanner when we implement\n            // ancestor queries.\n            if (path.length !== immediateChildrenLength) {\n                return;\n            }\n            uniqueBatchIDs = uniqueBatchIDs.add(batchID);\n        })\n            .next(function () {\n            var results = [];\n            var promises = [];\n            // TODO(rockwood): Implement this using iterate.\n            uniqueBatchIDs.forEach(function (batchID) {\n                var mutationKey = _this.keyForBatchId(batchID);\n                promises.push(mutationsStore(transaction)\n                    .get(mutationKey)\n                    .next(function (mutation) {\n                    if (mutation === null) {\n                        fail('Dangling document-mutation reference found, ' +\n                            'which points to ' +\n                            mutationKey);\n                    }\n                    results.push(_this.serializer.fromDbMutationBatch(mutation));\n                }));\n            });\n            return persistence_promise_PersistencePromise.waitFor(promises).next(function () { return results; });\n        });\n    };\n    IndexedDbMutationQueue.prototype.removeMutationBatches = function (transaction, batches) {\n        var txn = mutationsStore(transaction);\n        var indexTxn = documentMutationsStore(transaction);\n        var promises = [];\n        var _loop_1 = function (batch) {\n            var range = IDBKeyRange.only(this_1.keyForBatchId(batch.batchId));\n            var numDeleted = 0;\n            var removePromise = txn.iterate({ range: range }, function (key, value, control) {\n                numDeleted++;\n                return control.delete();\n            });\n            promises.push(removePromise.next(function () {\n                assert(numDeleted === 1, 'Dangling document-mutation reference found: Missing batch ' +\n                    batch.batchId);\n            }));\n            for (var _i = 0, _a = batch.mutations; _i < _a.length; _i++) {\n                var mutation = _a[_i];\n                var indexKey = indexeddb_schema_DbDocumentMutation.key(this_1.userId, mutation.key.path, batch.batchId);\n                promises.push(indexTxn.delete(indexKey));\n                if (this_1.garbageCollector !== null) {\n                    this_1.garbageCollector.addPotentialGarbageKey(mutation.key);\n                }\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\n            var batch = batches_1[_i];\n            _loop_1(batch);\n        }\n        return persistence_promise_PersistencePromise.waitFor(promises);\n    };\n    IndexedDbMutationQueue.prototype.performConsistencyCheck = function (txn) {\n        var _this = this;\n        return this.checkEmpty(txn).next(function (empty) {\n            if (!empty) {\n                return persistence_promise_PersistencePromise.resolve();\n            }\n            // Verify that there are no entries in the documentMutations index if\n            // the queue is empty.\n            var startRange = IDBKeyRange.lowerBound(indexeddb_schema_DbDocumentMutation.prefixForUser(_this.userId));\n            var danglingMutationReferences = [];\n            return documentMutationsStore(txn)\n                .iterate({ range: startRange }, function (key, _, control) {\n                var userID = key[0];\n                if (userID !== _this.userId) {\n                    control.done();\n                    return;\n                }\n                else {\n                    var path = decode(key[1]);\n                    danglingMutationReferences.push(path);\n                }\n            })\n                .next(function () {\n                assert(danglingMutationReferences.length === 0, 'Document leak -- detected dangling mutation references when queue is empty. Dangling keys: ' +\n                    danglingMutationReferences.map(function (p) { return p.canonicalString(); }));\n            });\n        });\n    };\n    IndexedDbMutationQueue.prototype.setGarbageCollector = function (gc) {\n        this.garbageCollector = gc;\n    };\n    IndexedDbMutationQueue.prototype.containsKey = function (txn, key) {\n        var _this = this;\n        var indexKey = indexeddb_schema_DbDocumentMutation.prefixForPath(this.userId, key.path);\n        var encodedPath = indexKey[1];\n        var startRange = IDBKeyRange.lowerBound(indexKey);\n        var containsKey = false;\n        return documentMutationsStore(txn)\n            .iterate({ range: startRange, keysOnly: true }, function (key, _, control) {\n            var userID = key[0], keyPath = key[1], batchID = key[2];\n            if (userID === _this.userId && keyPath === encodedPath) {\n                containsKey = true;\n            }\n            control.done();\n        })\n            .next(function () { return containsKey; });\n    };\n    /**\n     * Creates a [userId, batchId] key for use with the DbMutationQueue object\n     * store.\n     */\n    IndexedDbMutationQueue.prototype.keyForBatchId = function (batchId) {\n        return [this.userId, batchId];\n    };\n    return IndexedDbMutationQueue;\n}());\n\nfunction validateStreamToken(token) {\n    assert(typeof token === 'string', 'Persisting non-string stream token not supported.');\n    return token;\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutations object store.\n */\nfunction mutationsStore(txn) {\n    return getStore(txn, DbMutationBatch.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\n */\nfunction documentMutationsStore(txn) {\n    return getStore(txn, indexeddb_schema_DbDocumentMutation.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\n */\nfunction mutationQueuesStore(txn) {\n    return getStore(txn, DbMutationQueue.store);\n}\n/**\n * Helper to get a typed SimpleDbStore from a transaction.\n */\nfunction getStore(txn, store) {\n    if (txn instanceof simple_db_SimpleDbTransaction) {\n        return txn.store(store);\n    }\n    else {\n        return fail('Invalid transaction object provided!');\n    }\n}\n\n//# sourceMappingURL=indexeddb_mutation_queue.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/indexeddb_query_cache.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\nvar indexeddb_query_cache_IndexedDbQueryCache = /** @class */ (function () {\n    function IndexedDbQueryCache(serializer) {\n        this.serializer = serializer;\n        /**\n         * The last received snapshot version. We store this seperately from the\n         * metadata to avoid the extra conversion to/from DbTimestamp.\n         */\n        this.lastRemoteSnapshotVersion = snapshot_version_SnapshotVersion.MIN;\n        /**\n         * A cached copy of the metadata for the query cache.\n         */\n        this.metadata = new DbTargetGlobal(\n        /*highestTargetId=*/ 0, \n        /*lastListenSequenceNumber=*/ 0, snapshot_version_SnapshotVersion.MIN.toTimestamp());\n        /** The garbage collector to notify about potential garbage keys. */\n        this.garbageCollector = null;\n    }\n    IndexedDbQueryCache.prototype.start = function (transaction) {\n        var _this = this;\n        return globalTargetStore(transaction)\n            .get(DbTargetGlobal.key)\n            .next(function (metadata) {\n            if (metadata !== null) {\n                _this.metadata = metadata;\n                var lastSavedVersion = metadata.lastRemoteSnapshotVersion;\n                _this.lastRemoteSnapshotVersion = snapshot_version_SnapshotVersion.fromTimestamp(new timestamp_Timestamp(lastSavedVersion.seconds, lastSavedVersion.nanos));\n            }\n            return persistence_promise_PersistencePromise.resolve();\n        });\n    };\n    IndexedDbQueryCache.prototype.getHighestTargetId = function () {\n        return this.metadata.highestTargetId;\n    };\n    IndexedDbQueryCache.prototype.getLastRemoteSnapshotVersion = function () {\n        return this.lastRemoteSnapshotVersion;\n    };\n    IndexedDbQueryCache.prototype.setLastRemoteSnapshotVersion = function (transaction, snapshotVersion) {\n        this.lastRemoteSnapshotVersion = snapshotVersion;\n        this.metadata.lastRemoteSnapshotVersion = snapshotVersion.toTimestamp();\n        return globalTargetStore(transaction).put(DbTargetGlobal.key, this.metadata);\n    };\n    IndexedDbQueryCache.prototype.addQueryData = function (transaction, queryData) {\n        var _this = this;\n        var targetId = queryData.targetId;\n        var addedQueryPromise = targetsStore(transaction).put(this.serializer.toDbTarget(queryData));\n        if (targetId > this.metadata.highestTargetId) {\n            this.metadata.highestTargetId = targetId;\n            return addedQueryPromise.next(function () {\n                return globalTargetStore(transaction).put(DbTargetGlobal.key, _this.metadata);\n            });\n        }\n        else {\n            return addedQueryPromise;\n        }\n    };\n    IndexedDbQueryCache.prototype.removeQueryData = function (transaction, queryData) {\n        return this.removeMatchingKeysForTargetId(transaction, queryData.targetId).next(function () {\n            targetsStore(transaction).delete(queryData.targetId);\n        });\n    };\n    IndexedDbQueryCache.prototype.getQueryData = function (transaction, query) {\n        var _this = this;\n        // Iterating by the canonicalId may yield more than one result because\n        // canonicalId values are not required to be unique per target. This query\n        // depends on the queryTargets index to be efficent.\n        var canonicalId = query.canonicalId();\n        var range = IDBKeyRange.bound([canonicalId, Number.NEGATIVE_INFINITY], [canonicalId, Number.POSITIVE_INFINITY]);\n        var result = null;\n        return targetsStore(transaction)\n            .iterate({ range: range, index: DbTarget.queryTargetsIndexName }, function (key, value, control) {\n            var found = _this.serializer.fromDbTarget(value);\n            // After finding a potential match, check that the query is\n            // actually equal to the requested query.\n            if (query.equals(found.query)) {\n                result = found;\n                control.done();\n            }\n        })\n            .next(function () { return result; });\n    };\n    IndexedDbQueryCache.prototype.addMatchingKeys = function (txn, keys, targetId) {\n        // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n        // Indexeddb.\n        var promises = [];\n        var store = documentTargetStore(txn);\n        keys.forEach(function (key) {\n            var path = encode(key.path);\n            promises.push(store.put(new DbTargetDocument(targetId, path)));\n        });\n        return persistence_promise_PersistencePromise.waitFor(promises);\n    };\n    IndexedDbQueryCache.prototype.removeMatchingKeys = function (txn, keys, targetId) {\n        var _this = this;\n        // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n        // IndexedDb.\n        var promises = [];\n        var store = documentTargetStore(txn);\n        keys.forEach(function (key) {\n            var path = encode(key.path);\n            promises.push(store.delete([targetId, path]));\n            if (_this.garbageCollector !== null) {\n                _this.garbageCollector.addPotentialGarbageKey(key);\n            }\n        });\n        return persistence_promise_PersistencePromise.waitFor(promises);\n    };\n    IndexedDbQueryCache.prototype.removeMatchingKeysForTargetId = function (txn, targetId) {\n        var store = documentTargetStore(txn);\n        var range = IDBKeyRange.bound([targetId], [targetId + 1], \n        /*lowerOpen=*/ false, \n        /*upperOpen=*/ true);\n        return this.notifyGCForRemovedKeys(txn, range).next(function () {\n            return store.delete(range);\n        });\n    };\n    IndexedDbQueryCache.prototype.notifyGCForRemovedKeys = function (txn, range) {\n        var _this = this;\n        var store = documentTargetStore(txn);\n        if (this.garbageCollector !== null && this.garbageCollector.isEager) {\n            // In order to generate garbage events properly, we need to read these\n            // keys before deleting.\n            return store.iterate({ range: range, keysOnly: true }, function (key, _, control) {\n                var path = decode(key[1]);\n                var docKey = new document_key_DocumentKey(path);\n                // Paranoid assertion in case the the collector is set to null\n                // during the iteration.\n                assert(_this.garbageCollector !== null, 'GarbageCollector for query cache set to null during key removal.');\n                _this.garbageCollector.addPotentialGarbageKey(docKey);\n            });\n        }\n        else {\n            return persistence_promise_PersistencePromise.resolve();\n        }\n    };\n    IndexedDbQueryCache.prototype.getMatchingKeysForTargetId = function (txn, targetId) {\n        var promises = [];\n        var range = IDBKeyRange.bound([targetId], [targetId + 1], \n        /*lowerOpen=*/ false, \n        /*upperOpen=*/ true);\n        var store = documentTargetStore(txn);\n        var result = documentKeySet();\n        return store\n            .iterate({ range: range, keysOnly: true }, function (key, _, control) {\n            var path = decode(key[1]);\n            var docKey = new document_key_DocumentKey(path);\n            result = result.add(docKey);\n        })\n            .next(function () { return result; });\n    };\n    IndexedDbQueryCache.prototype.setGarbageCollector = function (gc) {\n        this.garbageCollector = gc;\n    };\n    IndexedDbQueryCache.prototype.containsKey = function (txn, key) {\n        assert(txn !== null, 'Persistence Transaction cannot be null for query cache containsKey');\n        var path = encode(key.path);\n        var range = IDBKeyRange.bound([path], [immediateSuccessor(path)], \n        /*lowerOpen=*/ false, \n        /*upperOpen=*/ true);\n        var count = 0;\n        return documentTargetStore(txn)\n            .iterate({\n            index: DbTargetDocument.documentTargetsIndex,\n            keysOnly: true,\n            range: range\n        }, function (key, _, control) {\n            count++;\n            control.done();\n        })\n            .next(function () { return count > 0; });\n    };\n    return IndexedDbQueryCache;\n}());\n\n/**\n * Helper to get a typed SimpleDbStore for the queries object store.\n */\nfunction targetsStore(txn) {\n    return indexeddb_query_cache_getStore(txn, DbTarget.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the target globals object store.\n */\nfunction globalTargetStore(txn) {\n    return indexeddb_query_cache_getStore(txn, DbTargetGlobal.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the document target object store.\n */\nfunction documentTargetStore(txn) {\n    return indexeddb_query_cache_getStore(txn, DbTargetDocument.store);\n}\n/**\n * Helper to get a typed SimpleDbStore from a transaction.\n */\nfunction indexeddb_query_cache_getStore(txn, store) {\n    if (txn instanceof simple_db_SimpleDbTransaction) {\n        return txn.store(store);\n    }\n    else {\n        return fail('Invalid transaction object provided!');\n    }\n}\n\n//# sourceMappingURL=indexeddb_query_cache.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/indexeddb_remote_document_cache.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\nvar indexeddb_remote_document_cache_IndexedDbRemoteDocumentCache = /** @class */ (function () {\n    function IndexedDbRemoteDocumentCache(serializer) {\n        this.serializer = serializer;\n    }\n    IndexedDbRemoteDocumentCache.prototype.addEntry = function (transaction, maybeDocument) {\n        return remoteDocumentsStore(transaction).put(dbKey(maybeDocument.key), this.serializer.toDbRemoteDocument(maybeDocument));\n    };\n    IndexedDbRemoteDocumentCache.prototype.removeEntry = function (transaction, documentKey) {\n        return remoteDocumentsStore(transaction).delete(dbKey(documentKey));\n    };\n    IndexedDbRemoteDocumentCache.prototype.getEntry = function (transaction, documentKey) {\n        var _this = this;\n        return remoteDocumentsStore(transaction)\n            .get(dbKey(documentKey))\n            .next(function (dbRemoteDoc) {\n            return dbRemoteDoc\n                ? _this.serializer.fromDbRemoteDocument(dbRemoteDoc)\n                : null;\n        });\n    };\n    IndexedDbRemoteDocumentCache.prototype.getDocumentsMatchingQuery = function (transaction, query) {\n        var _this = this;\n        var results = documentMap();\n        // Documents are ordered by key, so we can use a prefix scan to narrow down\n        // the documents we need to match the query against.\n        var startKey = query.path.toArray();\n        var range = IDBKeyRange.lowerBound(startKey);\n        return remoteDocumentsStore(transaction)\n            .iterate({ range: range }, function (key, dbRemoteDoc, control) {\n            var maybeDoc = _this.serializer.fromDbRemoteDocument(dbRemoteDoc);\n            if (!query.path.isPrefixOf(maybeDoc.key.path)) {\n                control.done();\n            }\n            else if (maybeDoc instanceof document_Document && query.matches(maybeDoc)) {\n                results = results.insert(maybeDoc.key, maybeDoc);\n            }\n        })\n            .next(function () { return results; });\n    };\n    return IndexedDbRemoteDocumentCache;\n}());\n\n/**\n * Helper to get a typed SimpleDbStore for the remoteDocuments object store.\n */\nfunction remoteDocumentsStore(txn) {\n    if (txn instanceof simple_db_SimpleDbTransaction) {\n        return txn.store(DbRemoteDocument.store);\n    }\n    else {\n        return fail('Invalid transaction object provided!');\n    }\n}\nfunction dbKey(docKey) {\n    return docKey.path.toArray();\n}\n\n//# sourceMappingURL=indexeddb_remote_document_cache.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/local_serializer.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n/** Serializer for values stored in the LocalStore. */\nvar local_serializer_LocalSerializer = /** @class */ (function () {\n    function LocalSerializer(remoteSerializer) {\n        this.remoteSerializer = remoteSerializer;\n    }\n    /** Decodes a remote document from storage locally to a Document. */\n    LocalSerializer.prototype.fromDbRemoteDocument = function (remoteDoc) {\n        if (remoteDoc.document) {\n            return this.remoteSerializer.fromDocument(remoteDoc.document);\n        }\n        else if (remoteDoc.noDocument) {\n            var key = document_key_DocumentKey.fromSegments(remoteDoc.noDocument.path);\n            var readTime = remoteDoc.noDocument.readTime;\n            var timestamp = new timestamp_Timestamp(readTime.seconds, readTime.nanos);\n            return new document_NoDocument(key, snapshot_version_SnapshotVersion.fromTimestamp(timestamp));\n        }\n        else {\n            return fail('Unexpected DbRemoteDocument');\n        }\n    };\n    /** Encodes a document for storage locally. */\n    LocalSerializer.prototype.toDbRemoteDocument = function (maybeDoc) {\n        if (maybeDoc instanceof document_Document) {\n            var doc = this.remoteSerializer.toDocument(maybeDoc);\n            return new DbRemoteDocument(null, doc);\n        }\n        else {\n            var path = maybeDoc.key.path.toArray();\n            var timestamp = maybeDoc.version.toTimestamp();\n            var readTime = new DbTimestamp(timestamp.seconds, timestamp.nanos);\n            return new DbRemoteDocument(new DbNoDocument(path, readTime), null);\n        }\n    };\n    /** Encodes a batch of mutations into a DbMutationBatch for local storage. */\n    LocalSerializer.prototype.toDbMutationBatch = function (userId, batch) {\n        var _this = this;\n        var serializedMutations = batch.mutations.map(function (m) {\n            return _this.remoteSerializer.toMutation(m);\n        });\n        return new DbMutationBatch(userId, batch.batchId, batch.localWriteTime.toEpochMilliseconds(), serializedMutations);\n    };\n    /** Decodes a DbMutationBatch into a MutationBatch */\n    LocalSerializer.prototype.fromDbMutationBatch = function (dbBatch) {\n        var _this = this;\n        var mutations = dbBatch.mutations.map(function (m) {\n            return _this.remoteSerializer.fromMutation(m);\n        });\n        var timestamp = timestamp_Timestamp.fromEpochMilliseconds(dbBatch.localWriteTimeMs);\n        return new mutation_batch_MutationBatch(dbBatch.batchId, timestamp, mutations);\n    };\n    /** Decodes a DbTarget into QueryData */\n    LocalSerializer.prototype.fromDbTarget = function (dbTarget) {\n        var readTime = new timestamp_Timestamp(dbTarget.readTime.seconds, dbTarget.readTime.nanos);\n        var version = snapshot_version_SnapshotVersion.fromTimestamp(readTime);\n        var query;\n        if (isDocumentQuery(dbTarget.query)) {\n            query = this.remoteSerializer.fromDocumentsTarget(dbTarget.query);\n        }\n        else {\n            query = this.remoteSerializer.fromQueryTarget(dbTarget.query);\n        }\n        return new query_data_QueryData(query, dbTarget.targetId, QueryPurpose.Listen, version, dbTarget.resumeToken);\n    };\n    /** Encodes QueryData into a DbTarget for storage locally. */\n    LocalSerializer.prototype.toDbTarget = function (queryData) {\n        assert(QueryPurpose.Listen === queryData.purpose, 'Only queries with purpose ' +\n            QueryPurpose.Listen +\n            ' may be stored, got ' +\n            queryData.purpose);\n        var timestamp = queryData.snapshotVersion.toTimestamp();\n        var dbTimestamp = new DbTimestamp(timestamp.seconds, timestamp.nanos);\n        var queryProto;\n        if (queryData.query.isDocumentQuery()) {\n            queryProto = this.remoteSerializer.toDocumentsTarget(queryData.query);\n        }\n        else {\n            queryProto = this.remoteSerializer.toQueryTarget(queryData.query);\n        }\n        assert(typeof queryData.resumeToken === 'string', 'Persisting non-string resume token not supported.');\n        var resumeToken = queryData.resumeToken;\n        // lastListenSequenceNumber is always 0 until we do real GC.\n        return new DbTarget(queryData.targetId, queryData.query.canonicalId(), dbTimestamp, resumeToken, 0, queryProto);\n    };\n    return LocalSerializer;\n}());\n\n/**\n * A helper function for figuring out what kind of query has been stored.\n */\nfunction isDocumentQuery(dbQuery) {\n    return dbQuery.documents !== undefined;\n}\n\n//# sourceMappingURL=local_serializer.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/indexeddb_persistence.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\nvar indexeddb_persistence_LOG_TAG = 'IndexedDbPersistence';\n/** If the owner lease is older than 5 seconds, try to take ownership. */\nvar OWNER_LEASE_MAX_AGE_MS = 5000;\n/** Refresh the owner lease every 4 seconds while owner. */\nvar OWNER_LEASE_REFRESH_INTERVAL_MS = 4000;\n/** LocalStorage location to indicate a zombied ownerId (see class comment). */\nvar ZOMBIE_OWNER_LOCALSTORAGE_SUFFIX = 'zombiedOwnerId';\n/** Error when the owner lease cannot be acquired or is lost. */\nvar EXISTING_OWNER_ERROR_MSG = 'There is another tab open with offline' +\n    ' persistence enabled. Only one such tab is allowed at a time. The' +\n    ' other tab must be closed or persistence must be disabled.';\nvar UNSUPPORTED_PLATFORM_ERROR_MSG = 'This platform is either missing' +\n    ' IndexedDB or is known to have an incomplete implementation. Offline' +\n    ' persistence has been disabled.';\n/**\n * An IndexedDB-backed instance of Persistence. Data is stored persistently\n * across sessions.\n *\n * Currently the Firestore SDK only supports a single consumer of the database,\n * but browsers obviously support multiple tabs. IndexedDbPersistence ensures a\n * single consumer of the database via an \"owner lease\" stored in the database.\n *\n * On startup, IndexedDbPersistence assigns itself a random \"ownerId\" and writes\n * it to a special \"owner\" object in the database (if no entry exists already or\n * the current entry is expired). This owner lease is then verified inside every\n * transaction to ensure the lease has not been lost.\n *\n * If a tab opts not to acquire the owner lease (because there's an existing\n * non-expired owner) or loses the owner lease, IndexedDbPersistence enters a\n * failed state and all subsequent operations will automatically fail.\n *\n * The current owner regularly refreshes the owner lease with new timestamps to\n * prevent newly-opened tabs from taking over ownership.\n *\n * Additionally there is an optimization so that when a tab is closed, the owner\n * lease is released immediately (this is especially important to make sure that\n * a refreshed tab is able to immediately re-acquire the owner lease).\n * Unfortunately, IndexedDB cannot be reliably used in window.unload since it is\n * an asynchronous API. So in addition to attempting to give up the lease,\n * the owner writes its ownerId to a \"zombiedOwnerId\" entry in LocalStorage\n * which acts as an indicator that another tab should go ahead and take the\n * owner lease immediately regardless of the current lease timestamp.\n */\nvar indexeddb_persistence_IndexedDbPersistence = /** @class */ (function () {\n    function IndexedDbPersistence(prefix, serializer) {\n        this.ownerId = this.generateOwnerId();\n        this.dbName = prefix + IndexedDbPersistence.MAIN_DATABASE;\n        this.serializer = new local_serializer_LocalSerializer(serializer);\n        this.localStoragePrefix = prefix;\n    }\n    IndexedDbPersistence.prototype.start = function () {\n        var _this = this;\n        if (!IndexedDbPersistence.isAvailable()) {\n            this.persistenceError = new FirestoreError(Code.UNIMPLEMENTED, UNSUPPORTED_PLATFORM_ERROR_MSG);\n            return Promise.reject(this.persistenceError);\n        }\n        assert(!this.started, 'IndexedDbPersistence double-started!');\n        this.started = true;\n        return simple_db_SimpleDb.openOrCreate(this.dbName, SCHEMA_VERSION, createOrUpgradeDb)\n            .then(function (db) {\n            _this.simpleDb = db;\n        })\n            .then(function () { return _this.tryAcquireOwnerLease(); })\n            .then(function () {\n            _this.scheduleOwnerLeaseRefreshes();\n            _this.attachWindowUnloadHook();\n        });\n    };\n    IndexedDbPersistence.prototype.shutdown = function () {\n        var _this = this;\n        assert(this.started, 'IndexedDbPersistence shutdown without start!');\n        this.started = false;\n        this.detachWindowUnloadHook();\n        this.stopOwnerLeaseRefreshes();\n        return this.releaseOwnerLease().then(function () {\n            _this.simpleDb.close();\n        });\n    };\n    IndexedDbPersistence.prototype.getMutationQueue = function (user) {\n        return indexeddb_mutation_queue_IndexedDbMutationQueue.forUser(user, this.serializer);\n    };\n    IndexedDbPersistence.prototype.getQueryCache = function () {\n        return new indexeddb_query_cache_IndexedDbQueryCache(this.serializer);\n    };\n    IndexedDbPersistence.prototype.getRemoteDocumentCache = function () {\n        return new indexeddb_remote_document_cache_IndexedDbRemoteDocumentCache(this.serializer);\n    };\n    IndexedDbPersistence.prototype.runTransaction = function (action, operation) {\n        var _this = this;\n        if (this.persistenceError) {\n            return Promise.reject(this.persistenceError);\n        }\n        debug(indexeddb_persistence_LOG_TAG, 'Starting transaction:', action);\n        // Do all transactions as readwrite against all object stores, since we\n        // are the only reader/writer.\n        return this.simpleDb.runTransaction('readwrite', ALL_STORES, function (txn) {\n            // Verify that we still have the owner lease as part of every transaction.\n            return _this.ensureOwnerLease(txn).next(function () { return operation(txn); });\n        });\n    };\n    IndexedDbPersistence.isAvailable = function () {\n        return simple_db_SimpleDb.isAvailable();\n    };\n    /**\n     * Generates a string used as a prefix when storing data in IndexedDB and\n     * LocalStorage.\n     */\n    IndexedDbPersistence.buildStoragePrefix = function (databaseInfo) {\n        // Use two different prefix formats:\n        //\n        //   * firestore / persistenceKey / projectID . databaseID / ...\n        //   * firestore / persistenceKey / projectID / ...\n        //\n        // projectIDs are DNS-compatible names and cannot contain dots\n        // so there's no danger of collisions.\n        var database = databaseInfo.databaseId.projectId;\n        if (!databaseInfo.databaseId.isDefaultDatabase) {\n            database += '.' + databaseInfo.databaseId.database;\n        }\n        return 'firestore/' + databaseInfo.persistenceKey + '/' + database + '/';\n    };\n    /**\n     * Acquires the owner lease if there's no valid owner. Else returns a rejected\n     * promise.\n     */\n    IndexedDbPersistence.prototype.tryAcquireOwnerLease = function () {\n        var _this = this;\n        // NOTE: Don't use this.runTransaction, since it requires us to already\n        // have the lease.\n        return this.simpleDb.runTransaction('readwrite', [DbOwner.store], function (txn) {\n            var store = txn.store(DbOwner.store);\n            return store.get('owner').next(function (dbOwner) {\n                if (!_this.validOwner(dbOwner)) {\n                    var newDbOwner = new DbOwner(_this.ownerId, Date.now());\n                    debug(indexeddb_persistence_LOG_TAG, 'No valid owner. Acquiring owner lease. Current owner:', dbOwner, 'New owner:', newDbOwner);\n                    return store.put('owner', newDbOwner);\n                }\n                else {\n                    debug(indexeddb_persistence_LOG_TAG, 'Valid owner already. Failing. Current owner:', dbOwner);\n                    _this.persistenceError = new FirestoreError(Code.FAILED_PRECONDITION, EXISTING_OWNER_ERROR_MSG);\n                    return persistence_promise_PersistencePromise.reject(_this.persistenceError);\n                }\n            });\n        });\n    };\n    /** Checks the owner lease and deletes it if we are the current owner. */\n    IndexedDbPersistence.prototype.releaseOwnerLease = function () {\n        var _this = this;\n        // NOTE: Don't use this.runTransaction, since it requires us to already\n        // have the lease.\n        return this.simpleDb.runTransaction('readwrite', [DbOwner.store], function (txn) {\n            var store = txn.store(DbOwner.store);\n            return store.get('owner').next(function (dbOwner) {\n                if (dbOwner !== null && dbOwner.ownerId === _this.ownerId) {\n                    debug(indexeddb_persistence_LOG_TAG, 'Releasing owner lease.');\n                    return store.delete('owner');\n                }\n                else {\n                    return persistence_promise_PersistencePromise.resolve();\n                }\n            });\n        });\n    };\n    /**\n     * Checks the owner lease and returns a rejected promise if we are not the\n     * current owner. This should be included in every transaction to guard\n     * against losing the owner lease.\n     */\n    IndexedDbPersistence.prototype.ensureOwnerLease = function (txn) {\n        var _this = this;\n        var store = txn.store(DbOwner.store);\n        return store.get('owner').next(function (dbOwner) {\n            if (dbOwner === null || dbOwner.ownerId !== _this.ownerId) {\n                _this.persistenceError = new FirestoreError(Code.FAILED_PRECONDITION, EXISTING_OWNER_ERROR_MSG);\n                return persistence_promise_PersistencePromise.reject(_this.persistenceError);\n            }\n            else {\n                return persistence_promise_PersistencePromise.resolve();\n            }\n        });\n    };\n    /**\n     * Returns true if the provided owner exists, has a recent timestamp, and\n     * isn't zombied.\n     *\n     * NOTE: To determine if the owner is zombied, this method reads from\n     * LocalStorage which could be mildly expensive.\n     */\n    IndexedDbPersistence.prototype.validOwner = function (dbOwner) {\n        var now = Date.now();\n        var minAcceptable = now - OWNER_LEASE_MAX_AGE_MS;\n        var maxAcceptable = now;\n        if (dbOwner === null) {\n            return false; // no owner.\n        }\n        else if (dbOwner.leaseTimestampMs < minAcceptable) {\n            return false; // owner lease has expired.\n        }\n        else if (dbOwner.leaseTimestampMs > maxAcceptable) {\n            log_error('Persistence owner-lease is in the future. Discarding.', dbOwner);\n            return false;\n        }\n        else if (dbOwner.ownerId === this.getZombiedOwnerId()) {\n            return false; // owner's tab closed.\n        }\n        else {\n            return true;\n        }\n    };\n    /**\n     * Schedules a recurring timer to update the owner lease timestamp to prevent\n     * other tabs from taking the lease.\n     */\n    IndexedDbPersistence.prototype.scheduleOwnerLeaseRefreshes = function () {\n        var _this = this;\n        // NOTE: This doesn't need to be scheduled on the async queue and doing so\n        // would increase the chances of us not refreshing on time if the queue is\n        // backed up for some reason.\n        this.ownerLeaseRefreshHandle = setInterval(function () {\n            var txResult = _this.runTransaction('Refresh owner timestamp', function (txn) {\n                // NOTE: We don't need to validate the current owner contents, since\n                // runTransaction does that automatically.\n                var store = txn.store(DbOwner.store);\n                return store.put('owner', new DbOwner(_this.ownerId, Date.now()));\n            });\n            txResult.catch(function (reason) {\n                // Probably means we lost the lease. Report the error and stop trying to\n                // refresh the lease.\n                log_error(reason);\n                _this.stopOwnerLeaseRefreshes();\n            });\n        }, OWNER_LEASE_REFRESH_INTERVAL_MS);\n    };\n    IndexedDbPersistence.prototype.stopOwnerLeaseRefreshes = function () {\n        if (this.ownerLeaseRefreshHandle) {\n            clearInterval(this.ownerLeaseRefreshHandle);\n            this.ownerLeaseRefreshHandle = null;\n        }\n    };\n    /**\n     * Attaches a window.unload handler that will synchronously write our\n     * ownerId to a \"zombie owner id\" location in localstorage. This can be used\n     * by tabs trying to acquire the lease to determine that the lease should be\n     * acquired immediately even if the timestamp is recent. This is particularly\n     * important for the refresh case (so the tab correctly re-acquires the owner\n     * lease). LocalStorage is used for this rather than IndexedDb because it is\n     * a synchronous API and so can be used reliably from an unload handler.\n     */\n    IndexedDbPersistence.prototype.attachWindowUnloadHook = function () {\n        var _this = this;\n        this.windowUnloadHandler = function () {\n            // Record that we're zombied.\n            _this.setZombiedOwnerId(_this.ownerId);\n            // Attempt graceful shutdown (including releasing our owner lease), but\n            // there's no guarantee it will complete.\n            _this.shutdown();\n        };\n        window.addEventListener('unload', this.windowUnloadHandler);\n    };\n    IndexedDbPersistence.prototype.detachWindowUnloadHook = function () {\n        if (this.windowUnloadHandler) {\n            window.removeEventListener('unload', this.windowUnloadHandler);\n            this.windowUnloadHandler = null;\n        }\n    };\n    /**\n     * Returns any recorded \"zombied owner\" (i.e. a previous owner that became\n     * zombied due to their tab closing) from LocalStorage, or null if no such\n     * record exists.\n     */\n    IndexedDbPersistence.prototype.getZombiedOwnerId = function () {\n        try {\n            var zombiedOwnerId = window.localStorage.getItem(this.zombiedOwnerLocalStorageKey());\n            debug(indexeddb_persistence_LOG_TAG, 'Zombied ownerID from LocalStorage:', zombiedOwnerId);\n            return zombiedOwnerId;\n        }\n        catch (e) {\n            // Gracefully handle if LocalStorage isn't available / working.\n            log_error(indexeddb_persistence_LOG_TAG, 'Failed to get zombie owner id.', e);\n            return null;\n        }\n    };\n    /**\n     * Records a zombied owner (an owner that had its tab closed) in LocalStorage\n     * or, if passed null, deletes any recorded zombied owner.\n     */\n    IndexedDbPersistence.prototype.setZombiedOwnerId = function (zombieOwnerId) {\n        try {\n            if (zombieOwnerId === null) {\n                window.localStorage.removeItem(this.zombiedOwnerLocalStorageKey());\n            }\n            else {\n                window.localStorage.setItem(this.zombiedOwnerLocalStorageKey(), zombieOwnerId);\n            }\n        }\n        catch (e) {\n            // Gracefully handle if LocalStorage isn't available / working.\n            log_error(indexeddb_persistence_LOG_TAG, 'Failed to set zombie owner id.', e);\n        }\n    };\n    IndexedDbPersistence.prototype.zombiedOwnerLocalStorageKey = function () {\n        return this.localStoragePrefix + ZOMBIE_OWNER_LOCALSTORAGE_SUFFIX;\n    };\n    IndexedDbPersistence.prototype.generateOwnerId = function () {\n        // For convenience, just use an AutoId.\n        return misc_AutoId.newId();\n    };\n    /**\n     * The name of the main (and currently only) IndexedDB database. this name is\n     * appended to the prefix provided to the IndexedDbPersistence constructor.\n     */\n    IndexedDbPersistence.MAIN_DATABASE = 'main';\n    return IndexedDbPersistence;\n}());\n\n\n//# sourceMappingURL=indexeddb_persistence.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/local_documents_view.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n/**\n * A readonly view of the local state of all documents we're tracking (i.e. we\n * have a cached version in remoteDocumentCache or local mutations for the\n * document). The view is computed by applying the mutations in the\n * MutationQueue to the RemoteDocumentCache.\n */\nvar local_documents_view_LocalDocumentsView = /** @class */ (function () {\n    function LocalDocumentsView(remoteDocumentCache, mutationQueue) {\n        this.remoteDocumentCache = remoteDocumentCache;\n        this.mutationQueue = mutationQueue;\n    }\n    /**\n     * Get the local view of the document identified by `key`.\n     *\n     * @return Local view of the document or null if we don't have any cached\n     * state for it.\n     */\n    LocalDocumentsView.prototype.getDocument = function (transaction, key) {\n        var _this = this;\n        return this.remoteDocumentCache\n            .getEntry(transaction, key)\n            .next(function (remoteDoc) {\n            return _this.computeLocalDocument(transaction, key, remoteDoc);\n        });\n    };\n    /**\n     * Gets the local view of the documents identified by `keys`.\n     *\n     * If we don't have cached state for a document in `keys`, a NoDocument will\n     * be stored for that key in the resulting set.\n     */\n    LocalDocumentsView.prototype.getDocuments = function (transaction, keys) {\n        var _this = this;\n        var promises = [];\n        var results = maybeDocumentMap();\n        keys.forEach(function (key) {\n            promises.push(_this.getDocument(transaction, key).next(function (maybeDoc) {\n                // TODO(http://b/32275378): Don't conflate missing / deleted.\n                if (!maybeDoc) {\n                    maybeDoc = new document_NoDocument(key, snapshot_version_SnapshotVersion.forDeletedDoc());\n                }\n                results = results.insert(key, maybeDoc);\n            }));\n        });\n        return persistence_promise_PersistencePromise.waitFor(promises).next(function () { return results; });\n    };\n    /** Performs a query against the local view of all documents. */\n    LocalDocumentsView.prototype.getDocumentsMatchingQuery = function (transaction, query) {\n        if (document_key_DocumentKey.isDocumentKey(query.path)) {\n            return this.getDocumentsMatchingDocumentQuery(transaction, query.path);\n        }\n        else {\n            return this.getDocumentsMatchingCollectionQuery(transaction, query);\n        }\n    };\n    LocalDocumentsView.prototype.getDocumentsMatchingDocumentQuery = function (transaction, docPath) {\n        // Just do a simple document lookup.\n        return this.getDocument(transaction, new document_key_DocumentKey(docPath)).next(function (maybeDoc) {\n            var result = documentMap();\n            if (maybeDoc instanceof document_Document) {\n                result = result.insert(maybeDoc.key, maybeDoc);\n            }\n            return result;\n        });\n    };\n    LocalDocumentsView.prototype.getDocumentsMatchingCollectionQuery = function (transaction, query) {\n        var _this = this;\n        // Query the remote documents and overlay mutations.\n        // TODO(mikelehen): There may be significant overlap between the mutations\n        // affecting these remote documents and the\n        // getAllMutationBatchesAffectingQuery() mutations. Consider optimizing.\n        var results;\n        return this.remoteDocumentCache\n            .getDocumentsMatchingQuery(transaction, query)\n            .next(function (queryResults) {\n            return _this.computeLocalDocuments(transaction, queryResults);\n        })\n            .next(function (promisedResults) {\n            results = promisedResults;\n            // Now use the mutation queue to discover any other documents that may\n            // match the query after applying mutations.\n            return _this.mutationQueue.getAllMutationBatchesAffectingQuery(transaction, query);\n        })\n            .next(function (matchingMutationBatches) {\n            var matchingKeys = documentKeySet();\n            for (var _i = 0, matchingMutationBatches_1 = matchingMutationBatches; _i < matchingMutationBatches_1.length; _i++) {\n                var batch = matchingMutationBatches_1[_i];\n                for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {\n                    var mutation = _b[_a];\n                    // TODO(mikelehen): PERF: Check if this mutation actually\n                    // affects the query to reduce work.\n                    if (!results.get(mutation.key)) {\n                        matchingKeys = matchingKeys.add(mutation.key);\n                    }\n                }\n            }\n            // Now add in the results for the matchingKeys.\n            var promises = [];\n            matchingKeys.forEach(function (key) {\n                promises.push(_this.getDocument(transaction, key).next(function (doc) {\n                    if (doc instanceof document_Document) {\n                        results = results.insert(doc.key, doc);\n                    }\n                }));\n            });\n            return persistence_promise_PersistencePromise.waitFor(promises);\n        })\n            .next(function () {\n            // Finally, filter out any documents that don't actually match\n            // the query.\n            results.forEach(function (key, doc) {\n                if (!query.matches(doc)) {\n                    results = results.remove(key);\n                }\n            });\n            return results;\n        });\n    };\n    /**\n     * Takes a remote document and applies local mutations to generate the local\n     * view of the document.\n     * @param transaction The transaction in which to perform any persistence\n     *     operations.\n     * @param documentKey The key of the document (necessary when remoteDocument\n     *     is null).\n     * @param document The base remote document to apply mutations to or null.\n     */\n    LocalDocumentsView.prototype.computeLocalDocument = function (transaction, documentKey, document) {\n        return this.mutationQueue\n            .getAllMutationBatchesAffectingDocumentKey(transaction, documentKey)\n            .next(function (batches) {\n            for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\n                var batch = batches_1[_i];\n                document = batch.applyToLocalView(documentKey, document);\n            }\n            return document;\n        });\n    };\n    /**\n     * Takes a set of remote documents and applies local mutations to generate the\n     * local view of the documents.\n     * @param transaction The transaction in which to perform any persistence\n     *     operations.\n     * @param documents The base remote documents to apply mutations to.\n     * @return The local view of the documents.\n     */\n    LocalDocumentsView.prototype.computeLocalDocuments = function (transaction, documents) {\n        var _this = this;\n        var promises = [];\n        documents.forEach(function (key, doc) {\n            promises.push(_this.computeLocalDocument(transaction, key, doc).next(function (mutatedDoc) {\n                if (mutatedDoc instanceof document_Document) {\n                    documents = documents.insert(mutatedDoc.key, mutatedDoc);\n                }\n                else if (mutatedDoc instanceof document_NoDocument) {\n                    documents = documents.remove(mutatedDoc.key);\n                }\n                else {\n                    fail('Unknown MaybeDocument: ' + mutatedDoc);\n                }\n            }));\n        });\n        return persistence_promise_PersistencePromise.waitFor(promises).next(function () { return documents; });\n    };\n    return LocalDocumentsView;\n}());\n\n\n//# sourceMappingURL=local_documents_view.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/remote_document_change_buffer.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * An in-memory buffer of entries to be written to a RemoteDocumentCache.\n * It can be used to batch up a set of changes to be written to the cache, but\n * additionally supports reading entries back with the `getEntry()` method,\n * falling back to the underlying RemoteDocumentCache if no entry is\n * buffered.\n *\n * NOTE: This class was introduced in iOS to work around a limitation in\n * LevelDB. Given IndexedDb has full transaction support with\n * read-your-own-writes capability, this class is not technically needed, but\n * has been preserved as a convenience and to aid portability.\n */\nvar remote_document_change_buffer_RemoteDocumentChangeBuffer = /** @class */ (function () {\n    function RemoteDocumentChangeBuffer(remoteDocumentCache) {\n        this.remoteDocumentCache = remoteDocumentCache;\n        this.changes = maybeDocumentMap();\n    }\n    /** Buffers a `RemoteDocumentCache.addEntry()` call. */\n    RemoteDocumentChangeBuffer.prototype.addEntry = function (maybeDocument) {\n        var changes = this.assertChanges();\n        this.changes = changes.insert(maybeDocument.key, maybeDocument);\n    };\n    // NOTE: removeEntry() is not presently necessary and so is omitted.\n    /**\n     * Looks up an entry in the cache. The buffered changes will first be checked,\n     * and if no buffered change applies, this will forward to\n     * `RemoteDocumentCache.getEntry()`.\n     *\n     * @param transaction The transaction in which to perform any persistence\n     *     operations.\n     * @param documentKey The key of the entry to look up.\n     * @return The cached Document or NoDocument entry, or null if we have nothing\n     * cached.\n     */\n    RemoteDocumentChangeBuffer.prototype.getEntry = function (transaction, documentKey) {\n        var changes = this.assertChanges();\n        var bufferedEntry = changes.get(documentKey);\n        if (bufferedEntry) {\n            return persistence_promise_PersistencePromise.resolve(bufferedEntry);\n        }\n        else {\n            return this.remoteDocumentCache.getEntry(transaction, documentKey);\n        }\n    };\n    /**\n     * Applies buffered changes to the underlying RemoteDocumentCache, using\n     * the provided transaction.\n     */\n    RemoteDocumentChangeBuffer.prototype.apply = function (transaction) {\n        var _this = this;\n        var changes = this.assertChanges();\n        var promises = [];\n        changes.forEach(function (key, maybeDoc) {\n            promises.push(_this.remoteDocumentCache.addEntry(transaction, maybeDoc));\n        });\n        // We should not be used to buffer any more changes.\n        this.changes = null;\n        return persistence_promise_PersistencePromise.waitFor(promises);\n    };\n    /** Helper to assert this.changes is not null and return it. */\n    RemoteDocumentChangeBuffer.prototype.assertChanges = function () {\n        assert(this.changes !== null, 'Changes have already been applied.');\n        return this.changes;\n    };\n    return RemoteDocumentChangeBuffer;\n}());\n\n\n//# sourceMappingURL=remote_document_change_buffer.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/local_store.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar local_store_LOG_TAG = 'LocalStore';\n/**\n * Local storage in the Firestore client. Coordinates persistence components\n * like the mutation queue and remote document cache to present a\n * latency-compensated view of stored data.\n *\n * The LocalStore is responsible for accepting mutations from the Sync Engine.\n * Writes from the client are put into a queue as provisional Mutations until\n * they are processed by the RemoteStore and confirmed as having been written\n * to the server.\n *\n * The local store provides the local version of documents that have been\n * modified locally. It maintains the constraint:\n *\n *   LocalDocument = RemoteDocument + Active(LocalMutations)\n *\n * (Active mutations are those that are enqueued and have not been previously\n * acknowledged or rejected).\n *\n * The RemoteDocument (\"ground truth\") state is provided via the\n * applyChangeBatch method. It will be some version of a server-provided\n * document OR will be a server-provided document PLUS acknowledged mutations:\n *\n *   RemoteDocument' = RemoteDocument + Acknowledged(LocalMutations)\n *\n * Note that this \"dirty\" version of a RemoteDocument will not be identical to a\n * server base version, since it has LocalMutations added to it pending getting\n * an authoritative copy from the server.\n *\n * Since LocalMutations can be rejected by the server, we have to be able to\n * revert a LocalMutation that has already been applied to the LocalDocument\n * (typically done by replaying all remaining LocalMutations to the\n * RemoteDocument to re-apply).\n *\n * The LocalStore is responsible for the garbage collection of the documents it\n * contains. For now, it every doc referenced by a view, the mutation queue, or\n * the RemoteStore.\n *\n * It also maintains the persistence of mapping queries to resume tokens and\n * target ids. It needs to know this data about queries to properly know what\n * docs it would be allowed to garbage collect.\n *\n * The LocalStore must be able to efficiently execute queries against its local\n * cache of the documents, to provide the initial set of results before any\n * remote changes have been received.\n *\n * Note: In TypeScript, most methods return Promises since the implementation\n * may rely on fetching data from IndexedDB which is async.\n * These Promises will only be rejected on an I/O error or other internal\n * (unexpected) failure (e.g. failed assert) and always represent an\n * unrecoverable error (should be caught / reported by the async_queue).\n */\nvar local_store_LocalStore = /** @class */ (function () {\n    function LocalStore(\n        /** Manages our in-memory or durable persistence. */\n        persistence, initialUser, \n        /**\n           * The garbage collector collects documents that should no longer be\n           * cached (e.g. if they are no longer retained by the above reference sets\n           * and the garbage collector is performing eager collection).\n           */\n        garbageCollector) {\n        this.persistence = persistence;\n        this.garbageCollector = garbageCollector;\n        /**\n         * The set of document references maintained by any local views.\n         */\n        this.localViewReferences = new reference_set_ReferenceSet();\n        /** Maps a targetID to data about its query. */\n        this.targetIds = {};\n        /** Used to generate targetIDs for queries tracked locally. */\n        this.targetIdGenerator = TargetIdGenerator.forLocalStore();\n        /**\n         * A heldBatchResult is a mutation batch result (from a write acknowledgement)\n         * that arrived before the watch stream got notified of a snapshot that\n         * includes the write. So we \"hold\" it until the watch stream catches up. It\n         * ensures that the local write remains visible (latency compensation) and\n         * doesn't temporarily appear reverted because the watch stream is slower than\n         * the write stream and so wasn't reflecting it.\n         *\n         * NOTE: Eventually we want to move this functionality into the remote store.\n         */\n        this.heldBatchResults = [];\n        this.mutationQueue = persistence.getMutationQueue(initialUser);\n        this.remoteDocuments = persistence.getRemoteDocumentCache();\n        this.queryCache = persistence.getQueryCache();\n        this.localDocuments = new local_documents_view_LocalDocumentsView(this.remoteDocuments, this.mutationQueue);\n        this.garbageCollector.addGarbageSource(this.localViewReferences);\n        this.garbageCollector.addGarbageSource(this.queryCache);\n        this.garbageCollector.addGarbageSource(this.mutationQueue);\n    }\n    /** Performs any initial startup actions required by the local store. */\n    LocalStore.prototype.start = function () {\n        var _this = this;\n        return this.persistence.runTransaction('Start LocalStore', function (txn) {\n            return _this.startMutationQueue(txn).next(function () { return _this.startQueryCache(txn); });\n        });\n    };\n    /**\n     * Tells the LocalStore that the currently authenticated user has changed.\n     *\n     * In response the local store switches the mutation queue to the new user and\n     * returns any resulting document changes.\n     */\n    LocalStore.prototype.handleUserChange = function (user) {\n        var _this = this;\n        return this.persistence.runTransaction('Handle user change', function (txn) {\n            // Swap out the mutation queue, grabbing the pending mutation batches\n            // before and after.\n            var oldBatches;\n            return _this.mutationQueue\n                .getAllMutationBatches(txn)\n                .next(function (promisedOldBatches) {\n                oldBatches = promisedOldBatches;\n                _this.garbageCollector.removeGarbageSource(_this.mutationQueue);\n                _this.mutationQueue = _this.persistence.getMutationQueue(user);\n                _this.garbageCollector.addGarbageSource(_this.mutationQueue);\n                return _this.startMutationQueue(txn);\n            })\n                .next(function () {\n                // Recreate our LocalDocumentsView using the new\n                // MutationQueue.\n                _this.localDocuments = new local_documents_view_LocalDocumentsView(_this.remoteDocuments, _this.mutationQueue);\n                return _this.mutationQueue.getAllMutationBatches(txn);\n            })\n                .next(function (newBatches) {\n                // Union the old/new changed keys.\n                var changedKeys = documentKeySet();\n                for (var _i = 0, _a = [oldBatches, newBatches]; _i < _a.length; _i++) {\n                    var batches = _a[_i];\n                    for (var _b = 0, batches_1 = batches; _b < batches_1.length; _b++) {\n                        var batch = batches_1[_b];\n                        for (var _c = 0, _d = batch.mutations; _c < _d.length; _c++) {\n                            var mutation = _d[_c];\n                            changedKeys = changedKeys.add(mutation.key);\n                        }\n                    }\n                }\n                // Return the set of all (potentially) changed documents as the\n                // result of the user change.\n                return _this.localDocuments.getDocuments(txn, changedKeys);\n            });\n        });\n    };\n    LocalStore.prototype.startQueryCache = function (txn) {\n        var _this = this;\n        return this.queryCache.start(txn).next(function () {\n            var targetId = _this.queryCache.getHighestTargetId();\n            _this.targetIdGenerator = TargetIdGenerator.forLocalStore(targetId);\n        });\n    };\n    LocalStore.prototype.startMutationQueue = function (txn) {\n        var _this = this;\n        return this.mutationQueue\n            .start(txn)\n            .next(function () {\n            // If we have any leftover mutation batch results from a prior run,\n            // just drop them.\n            // TODO(http://b/33446471): We probably need to repopulate\n            // heldBatchResults or similar instead, but that is not\n            // straightforward since we're not persisting the write ack versions.\n            _this.heldBatchResults = [];\n            return _this.mutationQueue.getHighestAcknowledgedBatchId(txn);\n        })\n            .next(function (highestAck) {\n            // TODO(mikelehen): This is the only usage of\n            // getAllMutationBatchesThroughBatchId(). Consider removing it in\n            // favor of a getAcknowledgedBatches() method.\n            if (highestAck !== BATCHID_UNKNOWN) {\n                return _this.mutationQueue.getAllMutationBatchesThroughBatchId(txn, highestAck);\n            }\n            else {\n                return persistence_promise_PersistencePromise.resolve([]);\n            }\n        })\n            .next(function (ackedBatches) {\n            if (ackedBatches.length > 0) {\n                return _this.mutationQueue.removeMutationBatches(txn, ackedBatches);\n            }\n            else {\n                return persistence_promise_PersistencePromise.resolve();\n            }\n        });\n    };\n    /* Accept locally generated Mutations and commit them to storage. */\n    LocalStore.prototype.localWrite = function (mutations) {\n        var _this = this;\n        return this.persistence.runTransaction('Locally write mutations', function (txn) {\n            var batch;\n            var localWriteTime = timestamp_Timestamp.now();\n            return _this.mutationQueue\n                .addMutationBatch(txn, localWriteTime, mutations)\n                .next(function (promisedBatch) {\n                batch = promisedBatch;\n                // TODO(koss): This is doing an N^2 update by replaying ALL the\n                // mutations on each document (instead of just the ones added) in\n                // this batch.\n                var keys = batch.keys();\n                return _this.localDocuments.getDocuments(txn, keys);\n            })\n                .next(function (changedDocuments) {\n                return { batchId: batch.batchId, changes: changedDocuments };\n            });\n        });\n    };\n    /**\n     * Acknowledge the given batch.\n     *\n     * On the happy path when a batch is acknowledged, the local store will\n     *\n     *  + remove the batch from the mutation queue;\n     *  + apply the changes to the remote document cache;\n     *  + recalculate the latency compensated view implied by those changes (there\n     *    may be mutations in the queue that affect the documents but haven't been\n     *    acknowledged yet); and\n     *  + give the changed documents back the sync engine\n     *\n     * @returns The resulting (modified) documents.\n     */\n    LocalStore.prototype.acknowledgeBatch = function (batchResult) {\n        var _this = this;\n        return this.persistence.runTransaction('Acknowledge batch', function (txn) {\n            var affected;\n            return _this.mutationQueue\n                .acknowledgeBatch(txn, batchResult.batch, batchResult.streamToken)\n                .next(function () {\n                if (_this.shouldHoldBatchResult(batchResult.commitVersion)) {\n                    _this.heldBatchResults.push(batchResult);\n                    affected = documentKeySet();\n                    return persistence_promise_PersistencePromise.resolve();\n                }\n                else {\n                    var documentBuffer_1 = new remote_document_change_buffer_RemoteDocumentChangeBuffer(_this.remoteDocuments);\n                    return _this.releaseBatchResults(txn, [batchResult], documentBuffer_1).next(function (promisedAffectedKeys) {\n                        affected = promisedAffectedKeys;\n                        return documentBuffer_1.apply(txn);\n                    });\n                }\n            })\n                .next(function () {\n                return _this.mutationQueue.performConsistencyCheck(txn);\n            })\n                .next(function () {\n                return _this.localDocuments.getDocuments(txn, affected);\n            });\n        });\n    };\n    /**\n     * Remove mutations from the MutationQueue for the specified batch;\n     * LocalDocuments will be recalculated.\n     *\n     * @returns The resulting modified documents.\n     */\n    LocalStore.prototype.rejectBatch = function (batchId) {\n        var _this = this;\n        return this.persistence.runTransaction('Reject batch', function (txn) {\n            var toReject;\n            var affectedKeys;\n            return _this.mutationQueue\n                .lookupMutationBatch(txn, batchId)\n                .next(function (promisedToReject) {\n                assert(promisedToReject != null, 'Attempt to reject nonexistent batch!');\n                toReject = promisedToReject;\n                return _this.mutationQueue\n                    .getHighestAcknowledgedBatchId(txn)\n                    .next(function (lastAcked) {\n                    assert(batchId > lastAcked, \"Acknowledged batches can't be rejected.\");\n                    return toReject;\n                });\n            })\n                .next(function () {\n                return _this.removeMutationBatch(txn, toReject);\n            })\n                .next(function (promisedAffectedKeys) {\n                affectedKeys = promisedAffectedKeys;\n                return _this.mutationQueue.performConsistencyCheck(txn);\n            })\n                .next(function () {\n                return _this.localDocuments.getDocuments(txn, affectedKeys);\n            });\n        });\n    };\n    /** Returns the last recorded stream token for the current user. */\n    LocalStore.prototype.getLastStreamToken = function () {\n        var _this = this;\n        return this.persistence.runTransaction('Get last stream token', function (txn) {\n            return _this.mutationQueue.getLastStreamToken(txn);\n        });\n    };\n    /**\n     * Sets the stream token for the current user without acknowledging any\n     * mutation batch. This is usually only useful after a stream handshake or in\n     * response to an error that requires clearing the stream token.\n     */\n    LocalStore.prototype.setLastStreamToken = function (streamToken) {\n        var _this = this;\n        return this.persistence.runTransaction('Set last stream token', function (txn) {\n            return _this.mutationQueue.setLastStreamToken(txn, streamToken);\n        });\n    };\n    /**\n     * Returns the last consistent snapshot processed (used by the RemoteStore to\n     * determine whether to buffer incoming snapshots from the backend).\n     */\n    LocalStore.prototype.getLastRemoteSnapshotVersion = function () {\n        return this.queryCache.getLastRemoteSnapshotVersion();\n    };\n    /**\n     * Update the \"ground-state\" (remote) documents. We assume that the remote\n     * event reflects any write batches that have been acknowledged or rejected\n     * (i.e. we do not re-apply local mutations to updates from this event).\n     *\n     * LocalDocuments are re-calculated if there are remaining mutations in the\n     * queue.\n     */\n    LocalStore.prototype.applyRemoteEvent = function (remoteEvent) {\n        var _this = this;\n        var documentBuffer = new remote_document_change_buffer_RemoteDocumentChangeBuffer(this.remoteDocuments);\n        return this.persistence.runTransaction('Apply remote event', function (txn) {\n            var promises = [];\n            forEachNumber(remoteEvent.targetChanges, function (targetId, change) {\n                // Do not ref/unref unassigned targetIds - it may lead to leaks.\n                var queryData = _this.targetIds[targetId];\n                if (!queryData)\n                    return;\n                var mapping = change.mapping;\n                if (mapping) {\n                    // First make sure that all references are deleted\n                    if (mapping instanceof ResetMapping) {\n                        promises.push(_this.queryCache\n                            .removeMatchingKeysForTargetId(txn, targetId)\n                            .next(function () {\n                            return _this.queryCache.addMatchingKeys(txn, mapping.documents, targetId);\n                        }));\n                    }\n                    else if (mapping instanceof UpdateMapping) {\n                        promises.push(_this.queryCache\n                            .removeMatchingKeys(txn, mapping.removedDocuments, targetId)\n                            .next(function () {\n                            return _this.queryCache.addMatchingKeys(txn, mapping.addedDocuments, targetId);\n                        }));\n                    }\n                    else {\n                        return fail('Unknown mapping type: ' + JSON.stringify(mapping));\n                    }\n                }\n                // Update the resume token if the change includes one. Don't clear\n                // any preexisting value.\n                var resumeToken = change.resumeToken;\n                if (resumeToken.length > 0) {\n                    queryData = queryData.update({\n                        resumeToken: resumeToken,\n                        snapshotVersion: change.snapshotVersion\n                    });\n                    _this.targetIds[targetId] = queryData;\n                    promises.push(_this.queryCache.addQueryData(txn, queryData));\n                }\n            });\n            var changedDocKeys = documentKeySet();\n            remoteEvent.documentUpdates.forEach(function (key, doc) {\n                changedDocKeys = changedDocKeys.add(key);\n                promises.push(documentBuffer.getEntry(txn, key).next(function (existingDoc) {\n                    // Make sure we don't apply an old document version to the remote\n                    // cache, though we make an exception for SnapshotVersion.MIN which\n                    // can happen for manufactured events (e.g. in the case of a limbo\n                    // document resolution failing).\n                    if (existingDoc == null ||\n                        doc.version.equals(snapshot_version_SnapshotVersion.MIN) ||\n                        doc.version.compareTo(existingDoc.version) >= 0) {\n                        documentBuffer.addEntry(doc);\n                    }\n                    else {\n                        debug(local_store_LOG_TAG, 'Ignoring outdated watch update for ', key, '. Current version:', existingDoc.version, ' Watch version:', doc.version);\n                    }\n                    // The document might be garbage because it was unreferenced by\n                    // everything. Make sure to mark it as garbage if it is...\n                    _this.garbageCollector.addPotentialGarbageKey(key);\n                }));\n            });\n            // HACK: The only reason we allow a null snapshot version is so that we\n            // can synthesize remote events when we get permission denied errors while\n            // trying to resolve the state of a locally cached document that is in\n            // limbo.\n            var lastRemoteVersion = _this.queryCache.getLastRemoteSnapshotVersion();\n            var remoteVersion = remoteEvent.snapshotVersion;\n            if (!remoteVersion.equals(snapshot_version_SnapshotVersion.MIN)) {\n                assert(remoteVersion.compareTo(lastRemoteVersion) >= 0, 'Watch stream reverted to previous snapshot?? ' +\n                    remoteVersion +\n                    ' < ' +\n                    lastRemoteVersion);\n                promises.push(_this.queryCache.setLastRemoteSnapshotVersion(txn, remoteVersion));\n            }\n            var releasedWriteKeys;\n            return persistence_promise_PersistencePromise.waitFor(promises)\n                .next(function () { return _this.releaseHeldBatchResults(txn, documentBuffer); })\n                .next(function (promisedReleasedWriteKeys) {\n                releasedWriteKeys = promisedReleasedWriteKeys;\n                return documentBuffer.apply(txn);\n            })\n                .next(function () {\n                return _this.localDocuments.getDocuments(txn, changedDocKeys.unionWith(releasedWriteKeys));\n            });\n        });\n    };\n    /**\n     * Notify local store of the changed views to locally pin documents.\n     */\n    LocalStore.prototype.notifyLocalViewChanges = function (viewChanges) {\n        var _this = this;\n        return this.persistence.runTransaction('Notify local view changes', function (txn) {\n            var promises = [];\n            var _loop_1 = function (view) {\n                promises.push(_this.queryCache\n                    .getQueryData(txn, view.query)\n                    .next(function (queryData) {\n                    assert(queryData !== null, 'Local view changes contain unallocated query.');\n                    var targetId = queryData.targetId;\n                    _this.localViewReferences.addReferences(view.addedKeys, targetId);\n                    _this.localViewReferences.removeReferences(view.removedKeys, targetId);\n                }));\n            };\n            for (var _i = 0, viewChanges_1 = viewChanges; _i < viewChanges_1.length; _i++) {\n                var view = viewChanges_1[_i];\n                _loop_1(view);\n            }\n            return persistence_promise_PersistencePromise.waitFor(promises);\n        });\n    };\n    /**\n     * Gets the mutation batch after the passed in batchId in the mutation queue\n     *  or null if empty.\n     *  @param afterBatchId If provided, the batch to search after.\n     *  @returns The next mutation or null if there wasn't one.\n     */\n    LocalStore.prototype.nextMutationBatch = function (afterBatchId) {\n        var _this = this;\n        return this.persistence.runTransaction('Get next mutation batch', function (txn) {\n            if (afterBatchId === undefined) {\n                afterBatchId = BATCHID_UNKNOWN;\n            }\n            return _this.mutationQueue.getNextMutationBatchAfterBatchId(txn, afterBatchId);\n        });\n    };\n    /**\n     * Read the current value of a Document with a given key or null if not\n     * found - used for testing.\n     */\n    LocalStore.prototype.readDocument = function (key) {\n        var _this = this;\n        return this.persistence.runTransaction('read document', function (txn) {\n            return _this.localDocuments.getDocument(txn, key);\n        });\n    };\n    /**\n     * Assigns the given query an internal ID so that its results can be pinned so\n     * they don't get GC'd. A query must be allocated in the local store before\n     * the store can be used to manage its view.\n     */\n    LocalStore.prototype.allocateQuery = function (query) {\n        var _this = this;\n        return this.persistence.runTransaction('Allocate query', function (txn) {\n            var queryData;\n            return _this.queryCache\n                .getQueryData(txn, query)\n                .next(function (cached) {\n                if (cached) {\n                    // This query has been listened to previously, so reuse the\n                    // previous targetID.\n                    // TODO(mcg): freshen last accessed date?\n                    queryData = cached;\n                    return persistence_promise_PersistencePromise.resolve();\n                }\n                else {\n                    var targetId = _this.targetIdGenerator.next();\n                    queryData = new query_data_QueryData(query, targetId, QueryPurpose.Listen);\n                    return _this.queryCache.addQueryData(txn, queryData);\n                }\n            })\n                .next(function () {\n                assert(!_this.targetIds[queryData.targetId], 'Tried to allocate an already allocated query: ' + query);\n                _this.targetIds[queryData.targetId] = queryData;\n                return queryData;\n            });\n        });\n    };\n    /** Unpin all the documents associated with the given query. */\n    LocalStore.prototype.releaseQuery = function (query) {\n        var _this = this;\n        return this.persistence.runTransaction('Release query', function (txn) {\n            return _this.queryCache\n                .getQueryData(txn, query)\n                .next(function (queryData) {\n                assert(queryData != null, 'Tried to release nonexistent query: ' + query);\n                _this.localViewReferences.removeReferencesForId(queryData.targetId);\n                delete _this.targetIds[queryData.targetId];\n                if (_this.garbageCollector.isEager) {\n                    return _this.queryCache.removeQueryData(txn, queryData);\n                }\n                else {\n                    return persistence_promise_PersistencePromise.resolve();\n                }\n            })\n                .next(function () {\n                // If this was the last watch target, then we won't get any more\n                // watch snapshots, so we should release any held batch results.\n                if (isEmpty(_this.targetIds)) {\n                    var documentBuffer_2 = new remote_document_change_buffer_RemoteDocumentChangeBuffer(_this.remoteDocuments);\n                    return _this.releaseHeldBatchResults(txn, documentBuffer_2).next(function () {\n                        documentBuffer_2.apply(txn);\n                    });\n                }\n                else {\n                    return persistence_promise_PersistencePromise.resolve();\n                }\n            });\n        });\n    };\n    /**\n     * Runs the specified query against all the documents in the local store and\n     * returns the results.\n     */\n    LocalStore.prototype.executeQuery = function (query) {\n        var _this = this;\n        return this.persistence.runTransaction('Execute query', function (txn) {\n            return _this.localDocuments.getDocumentsMatchingQuery(txn, query);\n        });\n    };\n    /**\n     * Returns the keys of the documents that are associated with the given\n     * target id in the remote table.\n     */\n    LocalStore.prototype.remoteDocumentKeys = function (targetId) {\n        var _this = this;\n        return this.persistence.runTransaction('Remote document keys', function (txn) {\n            return _this.queryCache.getMatchingKeysForTargetId(txn, targetId);\n        });\n    };\n    /**\n     * Collect garbage if necessary.\n     * Should be called periodically by Sync Engine to recover resources. The\n     * implementation must guarantee that GC won't happen in other places than\n     * this method call.\n     */\n    LocalStore.prototype.collectGarbage = function () {\n        var _this = this;\n        // Call collectGarbage regardless of whether isGCEnabled so the referenceSet\n        // doesn't continue to accumulate the garbage keys.\n        return this.persistence.runTransaction('Garbage collection', function (txn) {\n            return _this.garbageCollector.collectGarbage(txn).next(function (garbage) {\n                var promises = [];\n                garbage.forEach(function (key) {\n                    promises.push(_this.remoteDocuments.removeEntry(txn, key));\n                });\n                return persistence_promise_PersistencePromise.waitFor(promises);\n            });\n        });\n    };\n    LocalStore.prototype.releaseHeldBatchResults = function (txn, documentBuffer) {\n        var toRelease = [];\n        for (var _i = 0, _a = this.heldBatchResults; _i < _a.length; _i++) {\n            var batchResult = _a[_i];\n            if (!this.isRemoteUpToVersion(batchResult.commitVersion)) {\n                break;\n            }\n            toRelease.push(batchResult);\n        }\n        if (toRelease.length === 0) {\n            return persistence_promise_PersistencePromise.resolve(documentKeySet());\n        }\n        else {\n            this.heldBatchResults.splice(0, toRelease.length);\n            return this.releaseBatchResults(txn, toRelease, documentBuffer);\n        }\n    };\n    LocalStore.prototype.isRemoteUpToVersion = function (version) {\n        // If there are no watch targets, then we won't get remote snapshots, and\n        // we are always \"up-to-date.\"\n        var lastRemoteVersion = this.queryCache.getLastRemoteSnapshotVersion();\n        return (version.compareTo(lastRemoteVersion) <= 0 ||\n            isEmpty(this.targetIds));\n    };\n    LocalStore.prototype.shouldHoldBatchResult = function (version) {\n        // Check if watcher isn't up to date or prior results are already held.\n        return (!this.isRemoteUpToVersion(version) || this.heldBatchResults.length > 0);\n    };\n    LocalStore.prototype.releaseBatchResults = function (txn, batchResults, documentBuffer) {\n        var _this = this;\n        var promiseChain = persistence_promise_PersistencePromise.resolve();\n        var _loop_2 = function (batchResult) {\n            promiseChain = promiseChain.next(function () {\n                return _this.applyWriteToRemoteDocuments(txn, batchResult, documentBuffer);\n            });\n        };\n        for (var _i = 0, batchResults_1 = batchResults; _i < batchResults_1.length; _i++) {\n            var batchResult = batchResults_1[_i];\n            _loop_2(batchResult);\n        }\n        return promiseChain.next(function () {\n            return _this.removeMutationBatches(txn, batchResults.map(function (result) { return result.batch; }));\n        });\n    };\n    LocalStore.prototype.removeMutationBatch = function (txn, batch) {\n        return this.removeMutationBatches(txn, [batch]);\n    };\n    /** Removes all the mutation batches named in the given array. */\n    LocalStore.prototype.removeMutationBatches = function (txn, batches) {\n        var affectedDocs = documentKeySet();\n        for (var _i = 0, batches_2 = batches; _i < batches_2.length; _i++) {\n            var batch = batches_2[_i];\n            for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {\n                var mutation = _b[_a];\n                var key = mutation.key;\n                affectedDocs = affectedDocs.add(key);\n            }\n        }\n        return this.mutationQueue\n            .removeMutationBatches(txn, batches)\n            .next(function () { return affectedDocs; });\n    };\n    LocalStore.prototype.applyWriteToRemoteDocuments = function (txn, batchResult, documentBuffer) {\n        var batch = batchResult.batch;\n        var docKeys = batch.keys();\n        var promiseChain = persistence_promise_PersistencePromise.resolve();\n        docKeys.forEach(function (docKey) {\n            promiseChain = promiseChain\n                .next(function () {\n                return documentBuffer.getEntry(txn, docKey);\n            })\n                .next(function (remoteDoc) {\n                var doc = remoteDoc;\n                var ackVersion = batchResult.docVersions.get(docKey);\n                assert(ackVersion !== null, 'ackVersions should contain every doc in the write.');\n                if (!doc || doc.version.compareTo(ackVersion) < 0) {\n                    doc = batch.applyToRemoteDocument(docKey, doc, batchResult);\n                    if (!doc) {\n                        assert(!remoteDoc, 'Mutation batch ' +\n                            batch +\n                            ' applied to document ' +\n                            remoteDoc +\n                            ' resulted in null');\n                    }\n                    else {\n                        documentBuffer.addEntry(doc);\n                    }\n                }\n            });\n        });\n        return promiseChain;\n    };\n    return LocalStore;\n}());\n\n\n//# sourceMappingURL=local_store.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/memory_mutation_queue.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\nvar memory_mutation_queue_MemoryMutationQueue = /** @class */ (function () {\n    function MemoryMutationQueue() {\n        /**\n         * The set of all mutations that have been sent but not yet been applied to\n         * the backend.\n         */\n        this.mutationQueue = [];\n        /** Next value to use when assigning sequential IDs to each mutation batch. */\n        this.nextBatchId = 1;\n        /** The highest acknowledged mutation in the queue. */\n        this.highestAcknowledgedBatchId = BATCHID_UNKNOWN;\n        /** The last received stream token from the server, used to acknowledge which\n         * responses the client has processed. Stream tokens are opaque checkpoint\n         * markers whose only real value is their inclusion in the next request.\n         */\n        this.lastStreamToken = emptyByteString();\n        /** The garbage collector to notify about potential garbage keys. */\n        this.garbageCollector = null;\n        /** An ordered mapping between documents and the mutations batch IDs. */\n        this.batchesByDocumentKey = new sorted_set_SortedSet(reference_set_DocReference.compareByKey);\n    }\n    MemoryMutationQueue.prototype.start = function (transaction) {\n        // NOTE: The queue may be shutdown / started multiple times, since we\n        // maintain the queue for the duration of the app session in case a user\n        // logs out / back in. To behave like the LevelDB-backed MutationQueue (and\n        // accommodate tests that expect as much), we reset nextBatchId and\n        // highestAcknowledgedBatchId if the queue is empty.\n        if (this.mutationQueue.length === 0) {\n            this.nextBatchId = 1;\n            this.highestAcknowledgedBatchId = BATCHID_UNKNOWN;\n        }\n        assert(this.highestAcknowledgedBatchId < this.nextBatchId, 'highestAcknowledgedBatchId must be less than the nextBatchId');\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.checkEmpty = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.mutationQueue.length === 0);\n    };\n    MemoryMutationQueue.prototype.getNextBatchId = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.nextBatchId);\n    };\n    MemoryMutationQueue.prototype.getHighestAcknowledgedBatchId = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.highestAcknowledgedBatchId);\n    };\n    MemoryMutationQueue.prototype.acknowledgeBatch = function (transaction, batch, streamToken) {\n        var batchId = batch.batchId;\n        assert(batchId > this.highestAcknowledgedBatchId, 'Mutation batchIDs must be acknowledged in order');\n        var batchIndex = this.indexOfExistingBatchId(batchId, 'acknowledged');\n        // Verify that the batch in the queue is the one to be acknowledged.\n        var check = this.mutationQueue[batchIndex];\n        assert(batchId === check.batchId, 'Queue ordering failure: expected batch ' +\n            batchId +\n            ', got batch ' +\n            check.batchId);\n        assert(!check.isTombstone(), \"Can't acknowledge a previously removed batch\");\n        this.highestAcknowledgedBatchId = batchId;\n        this.lastStreamToken = streamToken;\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.getLastStreamToken = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.lastStreamToken);\n    };\n    MemoryMutationQueue.prototype.setLastStreamToken = function (transaction, streamToken) {\n        this.lastStreamToken = streamToken;\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.addMutationBatch = function (transaction, localWriteTime, mutations) {\n        assert(mutations.length !== 0, 'Mutation batches should not be empty');\n        var batchId = this.nextBatchId;\n        this.nextBatchId++;\n        if (this.mutationQueue.length > 0) {\n            var prior = this.mutationQueue[this.mutationQueue.length - 1];\n            assert(prior.batchId < batchId, 'Mutation batchIDs must be monotonically increasing order');\n        }\n        var batch = new mutation_batch_MutationBatch(batchId, localWriteTime, mutations);\n        this.mutationQueue.push(batch);\n        // Track references by document key.\n        for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {\n            var mutation = mutations_1[_i];\n            this.batchesByDocumentKey = this.batchesByDocumentKey.add(new reference_set_DocReference(mutation.key, batchId));\n        }\n        return persistence_promise_PersistencePromise.resolve(batch);\n    };\n    MemoryMutationQueue.prototype.lookupMutationBatch = function (transaction, batchId) {\n        return persistence_promise_PersistencePromise.resolve(this.findMutationBatch(batchId));\n    };\n    MemoryMutationQueue.prototype.getNextMutationBatchAfterBatchId = function (transaction, batchId) {\n        var size = this.mutationQueue.length;\n        // All batches with batchId <= this.highestAcknowledgedBatchId have been\n        // acknowledged so the first unacknowledged batch after batchID will have a\n        // batchID larger than both of these values.\n        batchId = Math.max(batchId + 1, this.highestAcknowledgedBatchId);\n        // The requested batchId may still be out of range so normalize it to the\n        // start of the queue.\n        var rawIndex = this.indexOfBatchId(batchId);\n        var index = rawIndex < 0 ? 0 : rawIndex;\n        // Finally return the first non-tombstone batch.\n        for (; index < size; index++) {\n            var batch = this.mutationQueue[index];\n            if (!batch.isTombstone()) {\n                return persistence_promise_PersistencePromise.resolve(batch);\n            }\n        }\n        return persistence_promise_PersistencePromise.resolve(null);\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatches = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.getAllLiveMutationBatchesBeforeIndex(this.mutationQueue.length));\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatchesThroughBatchId = function (transaction, batchId) {\n        var count = this.mutationQueue.length;\n        var endIndex = this.indexOfBatchId(batchId);\n        if (endIndex < 0) {\n            endIndex = 0;\n        }\n        else if (endIndex >= count) {\n            endIndex = count;\n        }\n        else {\n            // The endIndex is in the queue so increment to pull everything in the\n            // queue including it.\n            endIndex++;\n        }\n        return persistence_promise_PersistencePromise.resolve(this.getAllLiveMutationBatchesBeforeIndex(endIndex));\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey = function (transaction, documentKey) {\n        var _this = this;\n        var start = new reference_set_DocReference(documentKey, 0);\n        var end = new reference_set_DocReference(documentKey, Number.POSITIVE_INFINITY);\n        var result = [];\n        this.batchesByDocumentKey.forEachInRange([start, end], function (ref) {\n            assert(documentKey.equals(ref.key), \"Should only iterate over a single key's batches\");\n            var batch = _this.findMutationBatch(ref.targetOrBatchId);\n            assert(batch !== null, 'Batches in the index must exist in the main table');\n            result.push(batch);\n        });\n        return persistence_promise_PersistencePromise.resolve(result);\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatchesAffectingQuery = function (transaction, query) {\n        var _this = this;\n        // Use the query path as a prefix for testing if a document matches the\n        // query.\n        var prefix = query.path;\n        var immediateChildrenPathLength = prefix.length + 1;\n        // Construct a document reference for actually scanning the index. Unlike\n        // the prefix the document key in this reference must have an even number of\n        // segments. The empty segment can be used a suffix of the query path\n        // because it precedes all other segments in an ordered traversal.\n        var startPath = prefix;\n        if (!document_key_DocumentKey.isDocumentKey(startPath)) {\n            startPath = startPath.child('');\n        }\n        var start = new reference_set_DocReference(new document_key_DocumentKey(startPath), 0);\n        // Find unique batchIDs referenced by all documents potentially matching the\n        // query.\n        var uniqueBatchIDs = new sorted_set_SortedSet(primitiveComparator);\n        this.batchesByDocumentKey.forEachWhile(function (ref) {\n            var rowKeyPath = ref.key.path;\n            if (!prefix.isPrefixOf(rowKeyPath)) {\n                return false;\n            }\n            else {\n                // Rows with document keys more than one segment longer than the query\n                // path can't be matches. For example, a query on 'rooms' can't match\n                // the document /rooms/abc/messages/xyx.\n                // TODO(mcg): we'll need a different scanner when we implement\n                // ancestor queries.\n                if (rowKeyPath.length === immediateChildrenPathLength) {\n                    uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\n                }\n                return true;\n            }\n        }, start);\n        // Construct an array of matching batches, sorted by batchID to ensure that\n        // multiple mutations affecting the same document key are applied in order.\n        var result = [];\n        uniqueBatchIDs.forEach(function (batchId) {\n            var batch = _this.findMutationBatch(batchId);\n            if (batch !== null) {\n                result.push(batch);\n            }\n        });\n        return persistence_promise_PersistencePromise.resolve(result);\n    };\n    MemoryMutationQueue.prototype.removeMutationBatches = function (transaction, batches) {\n        var batchCount = batches.length;\n        assert(batchCount > 0, 'Should not remove mutations when none exist.');\n        var firstBatchId = batches[0].batchId;\n        var queueCount = this.mutationQueue.length;\n        // Find the position of the first batch for removal. This need not be the\n        // first entry in the queue.\n        var startIndex = this.indexOfExistingBatchId(firstBatchId, 'removed');\n        assert(this.mutationQueue[startIndex].batchId === firstBatchId, 'Removed batches must exist in the queue');\n        // Check that removed batches are contiguous (while excluding tombstones).\n        var batchIndex = 1;\n        var queueIndex = startIndex + 1;\n        while (batchIndex < batchCount && queueIndex < queueCount) {\n            var batch = this.mutationQueue[queueIndex];\n            if (batch.isTombstone()) {\n                queueIndex++;\n                continue;\n            }\n            assert(batch.batchId === batches[batchIndex].batchId, 'Removed batches must be contiguous in the queue');\n            batchIndex++;\n            queueIndex++;\n        }\n        // Only actually remove batches if removing at the front of the queue.\n        // Previously rejected batches may have left tombstones in the queue, so\n        // expand the removal range to include any tombstones.\n        if (startIndex === 0) {\n            for (; queueIndex < queueCount; queueIndex++) {\n                var batch = this.mutationQueue[queueIndex];\n                if (!batch.isTombstone()) {\n                    break;\n                }\n            }\n            var length_1 = queueIndex - startIndex;\n            this.mutationQueue.splice(startIndex, length_1);\n        }\n        else {\n            // Mark the tombstones\n            for (var i = startIndex; i < queueIndex; i++) {\n                this.mutationQueue[i] = this.mutationQueue[i].toTombstone();\n            }\n        }\n        var references = this.batchesByDocumentKey;\n        for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\n            var batch = batches_1[_i];\n            var batchId = batch.batchId;\n            for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {\n                var mutation = _b[_a];\n                var key = mutation.key;\n                if (this.garbageCollector !== null) {\n                    this.garbageCollector.addPotentialGarbageKey(key);\n                }\n                var ref = new reference_set_DocReference(key, batchId);\n                references = references.delete(ref);\n            }\n        }\n        this.batchesByDocumentKey = references;\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.setGarbageCollector = function (garbageCollector) {\n        this.garbageCollector = garbageCollector;\n    };\n    MemoryMutationQueue.prototype.containsKey = function (txn, key) {\n        var ref = new reference_set_DocReference(key, 0);\n        var firstRef = this.batchesByDocumentKey.firstAfterOrEqual(ref);\n        return persistence_promise_PersistencePromise.resolve(key.equals(firstRef && firstRef.key));\n    };\n    MemoryMutationQueue.prototype.performConsistencyCheck = function (txn) {\n        if (this.mutationQueue.length === 0) {\n            assert(this.batchesByDocumentKey.isEmpty(), 'Document leak -- detected dangling mutation references when queue is empty.');\n        }\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    /**\n     * A private helper that collects all the mutations batches in the queue up to\n     * but not including the given endIndex. All tombstones in the queue are\n     * excluded.\n     */\n    MemoryMutationQueue.prototype.getAllLiveMutationBatchesBeforeIndex = function (endIndex) {\n        var result = [];\n        for (var i = 0; i < endIndex; i++) {\n            var batch = this.mutationQueue[i];\n            if (!batch.isTombstone()) {\n                result.push(batch);\n            }\n        }\n        return result;\n    };\n    /**\n     * Finds the index of the given batchId in the mutation queue and asserts that\n     * the resulting index is within the bounds of the queue.\n     *\n     * @param batchId The batchId to search for\n     * @param action A description of what the caller is doing, phrased in passive\n     * form (e.g. \"acknowledged\" in a routine that acknowledges batches).\n     */\n    MemoryMutationQueue.prototype.indexOfExistingBatchId = function (batchId, action) {\n        var index = this.indexOfBatchId(batchId);\n        assert(index >= 0 && index < this.mutationQueue.length, 'Batches must exist to be ' + action);\n        return index;\n    };\n    /**\n     * Finds the index of the given batchId in the mutation queue. This operation\n     * is O(1).\n     *\n     * @return The computed index of the batch with the given batchId, based on\n     * the state of the queue. Note this index can be negative if the requested\n     * batchId has already been remvoed from the queue or past the end of the\n     * queue if the batchId is larger than the last added batch.\n     */\n    MemoryMutationQueue.prototype.indexOfBatchId = function (batchId) {\n        if (this.mutationQueue.length === 0) {\n            // As an index this is past the end of the queue\n            return 0;\n        }\n        // Examine the front of the queue to figure out the difference between the\n        // batchId and indexes in the array. Note that since the queue is ordered\n        // by batchId, if the first batch has a larger batchId then the requested\n        // batchId doesn't exist in the queue.\n        var firstBatchId = this.mutationQueue[0].batchId;\n        return batchId - firstBatchId;\n    };\n    /**\n     * A version of lookupMutationBatch that doesn't return a promise, this makes\n     * other functions that uses this code easier to read and more efficent.\n     */\n    MemoryMutationQueue.prototype.findMutationBatch = function (batchId) {\n        var index = this.indexOfBatchId(batchId);\n        if (index < 0 || index >= this.mutationQueue.length) {\n            return null;\n        }\n        var batch = this.mutationQueue[index];\n        assert(batch.batchId === batchId, 'If found batch must match');\n        return batch.isTombstone() ? null : batch;\n    };\n    return MemoryMutationQueue;\n}());\n\n\n//# sourceMappingURL=memory_mutation_queue.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/memory_query_cache.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\nvar memory_query_cache_MemoryQueryCache = /** @class */ (function () {\n    function MemoryQueryCache() {\n        /**\n         * Maps a query to the data about that query\n         */\n        this.queries = new obj_map_ObjectMap(function (q) { return q.canonicalId(); });\n        /** The last received snapshot version. */\n        this.lastRemoteSnapshotVersion = snapshot_version_SnapshotVersion.MIN;\n        /** The highest numbered target ID encountered. */\n        this.highestTargetId = 0;\n        /**\n         * A ordered bidirectional mapping between documents and the remote target\n         * IDs.\n         */\n        this.references = new reference_set_ReferenceSet();\n    }\n    MemoryQueryCache.prototype.start = function (transaction) {\n        // Nothing to do.\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.getLastRemoteSnapshotVersion = function () {\n        return this.lastRemoteSnapshotVersion;\n    };\n    MemoryQueryCache.prototype.getHighestTargetId = function () {\n        return this.highestTargetId;\n    };\n    MemoryQueryCache.prototype.setLastRemoteSnapshotVersion = function (transaction, snapshotVersion) {\n        this.lastRemoteSnapshotVersion = snapshotVersion;\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.addQueryData = function (transaction, queryData) {\n        this.queries.set(queryData.query, queryData);\n        var targetId = queryData.targetId;\n        if (targetId > this.highestTargetId) {\n            this.highestTargetId = targetId;\n        }\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.removeQueryData = function (transaction, queryData) {\n        this.queries.delete(queryData.query);\n        this.references.removeReferencesForId(queryData.targetId);\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.getQueryData = function (transaction, query) {\n        var queryData = this.queries.get(query) || null;\n        return persistence_promise_PersistencePromise.resolve(queryData);\n    };\n    MemoryQueryCache.prototype.addMatchingKeys = function (txn, keys, targetId) {\n        this.references.addReferences(keys, targetId);\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.removeMatchingKeys = function (txn, keys, targetId) {\n        this.references.removeReferences(keys, targetId);\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.removeMatchingKeysForTargetId = function (txn, targetId) {\n        this.references.removeReferencesForId(targetId);\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.getMatchingKeysForTargetId = function (txn, targetId) {\n        var matchingKeys = this.references.referencesForId(targetId);\n        return persistence_promise_PersistencePromise.resolve(matchingKeys);\n    };\n    MemoryQueryCache.prototype.setGarbageCollector = function (gc) {\n        this.references.setGarbageCollector(gc);\n    };\n    MemoryQueryCache.prototype.containsKey = function (txn, key) {\n        return this.references.containsKey(txn, key);\n    };\n    return MemoryQueryCache;\n}());\n\n\n//# sourceMappingURL=memory_query_cache.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/memory_remote_document_cache.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\nvar memory_remote_document_cache_MemoryRemoteDocumentCache = /** @class */ (function () {\n    function MemoryRemoteDocumentCache() {\n        this.docs = maybeDocumentMap();\n    }\n    MemoryRemoteDocumentCache.prototype.addEntry = function (transaction, maybeDocument) {\n        this.docs = this.docs.insert(maybeDocument.key, maybeDocument);\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryRemoteDocumentCache.prototype.removeEntry = function (transaction, documentKey) {\n        this.docs = this.docs.remove(documentKey);\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryRemoteDocumentCache.prototype.getEntry = function (transaction, documentKey) {\n        return persistence_promise_PersistencePromise.resolve(this.docs.get(documentKey));\n    };\n    MemoryRemoteDocumentCache.prototype.getDocumentsMatchingQuery = function (transaction, query) {\n        var results = documentMap();\n        // Documents are ordered by key, so we can use a prefix scan to narrow down\n        // the documents we need to match the query against.\n        var prefix = new document_key_DocumentKey(query.path.child(''));\n        var iterator = this.docs.getIteratorFrom(prefix);\n        while (iterator.hasNext()) {\n            var _a = iterator.getNext(), key = _a.key, maybeDoc = _a.value;\n            if (!query.path.isPrefixOf(key.path)) {\n                break;\n            }\n            if (maybeDoc instanceof document_Document && query.matches(maybeDoc)) {\n                results = results.insert(maybeDoc.key, maybeDoc);\n            }\n        }\n        return persistence_promise_PersistencePromise.resolve(results);\n    };\n    return MemoryRemoteDocumentCache;\n}());\n\n\n//# sourceMappingURL=memory_remote_document_cache.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/memory_persistence.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\nvar memory_persistence_LOG_TAG = 'MemoryPersistence';\n/**\n * A memory-backed instance of Persistence. Data is stored only in RAM and\n * not persisted across sessions.\n */\nvar memory_persistence_MemoryPersistence = /** @class */ (function () {\n    function MemoryPersistence() {\n        /**\n         * Note that these are retained here to make it easier to write tests\n         * affecting both the in-memory and IndexedDB-backed persistence layers. Tests\n         * can create a new LocalStore wrapping this Persistence instance and this\n         * will make the in-memory persistence layer behave as if it were actually\n         * persisting values.\n         */\n        this.mutationQueues = {};\n        this.remoteDocumentCache = new memory_remote_document_cache_MemoryRemoteDocumentCache();\n        this.queryCache = new memory_query_cache_MemoryQueryCache();\n        this.started = false;\n    }\n    MemoryPersistence.prototype.start = function () {\n        assert(!this.started, 'MemoryPersistence double-started!');\n        this.started = true;\n        // No durable state to read on startup.\n        return Promise.resolve();\n    };\n    MemoryPersistence.prototype.shutdown = function () {\n        // No durable state to ensure is closed on shutdown.\n        assert(this.started, 'MemoryPersistence shutdown without start!');\n        this.started = false;\n        return Promise.resolve();\n    };\n    MemoryPersistence.prototype.getMutationQueue = function (user) {\n        var queue = this.mutationQueues[user.toKey()];\n        if (!queue) {\n            queue = new memory_mutation_queue_MemoryMutationQueue();\n            this.mutationQueues[user.toKey()] = queue;\n        }\n        return queue;\n    };\n    MemoryPersistence.prototype.getQueryCache = function () {\n        return this.queryCache;\n    };\n    MemoryPersistence.prototype.getRemoteDocumentCache = function () {\n        return this.remoteDocumentCache;\n    };\n    MemoryPersistence.prototype.runTransaction = function (action, operation) {\n        debug(memory_persistence_LOG_TAG, 'Starting transaction:', action);\n        return operation(new MemoryPersistenceTransaction()).toPromise();\n    };\n    return MemoryPersistence;\n}());\n\n/** Dummy class since memory persistence doesn't actually use transactions. */\nvar MemoryPersistenceTransaction = /** @class */ (function () {\n    function MemoryPersistenceTransaction() {\n    }\n    return MemoryPersistenceTransaction;\n}());\n\n//# sourceMappingURL=memory_persistence.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/no_op_garbage_collector.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A garbage collector implementation that does absolutely nothing. It ignores\n * all addGarbageSource and addPotentialGarbageKey messages and and never\n * produces any garbage.\n */\nvar no_op_garbage_collector_NoOpGarbageCollector = /** @class */ (function () {\n    function NoOpGarbageCollector() {\n        this.isEager = false;\n    }\n    NoOpGarbageCollector.prototype.addGarbageSource = function (garbageSource) {\n        // Not tracking garbage so don't track sources.\n    };\n    NoOpGarbageCollector.prototype.removeGarbageSource = function (garbageSource) {\n        // Not tracking garbage so don't track sources.\n    };\n    NoOpGarbageCollector.prototype.addPotentialGarbageKey = function (key) {\n        // Not tracking garbage so ignore.\n    };\n    NoOpGarbageCollector.prototype.collectGarbage = function (txn) {\n        return persistence_promise_PersistencePromise.resolve(documentKeySet());\n    };\n    return NoOpGarbageCollector;\n}());\n\n\n//# sourceMappingURL=no_op_garbage_collector.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/promise.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Deferred = /** @class */ (function () {\n    function Deferred() {\n        var _this = this;\n        this.promise = new Promise(function (resolve, reject) {\n            _this.resolve = resolve;\n            _this.reject = reject;\n        });\n    }\n    return Deferred;\n}());\n\n/**\n * Takes an array of values and sequences them using the promise (or value)\n * returned by the supplied callback. The callback for each item is called\n * after the promise is resolved for the previous item.\n * The function returns a promise which is resolved after the promise for\n * the last item is resolved.\n */\nfunction sequence(values, fn, initialValue) {\n    var result = Promise.resolve(initialValue);\n    values.forEach(function (value) {\n        result = result.then(function (lastResult) { return fn(value, lastResult); });\n    });\n    return result;\n}\n\n//# sourceMappingURL=promise.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/backoff.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar backoff_LOG_TAG = 'ExponentialBackoff';\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\nvar backoff_ExponentialBackoff = /** @class */ (function () {\n    function ExponentialBackoff(\n        /**\n           * The initial delay (used as the base delay on the first retry attempt).\n           * Note that jitter will still be applied, so the actual delay could be as\n           * little as 0.5*initialDelayMs.\n           */\n        initialDelayMs, \n        /**\n           * The multiplier to use to determine the extended base delay after each\n           * attempt.\n           */\n        backoffFactor, \n        /**\n           * The maximum base delay after which no further backoff is performed.\n           * Note that jitter will still be applied, so the actual delay could be as\n           * much as 1.5*maxDelayMs.\n           */\n        maxDelayMs) {\n        this.initialDelayMs = initialDelayMs;\n        this.backoffFactor = backoffFactor;\n        this.maxDelayMs = maxDelayMs;\n        this.reset();\n    }\n    /**\n     * Resets the backoff delay.\n     *\n     * The very next backoffAndWait() will have no delay. If it is called again\n     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n     * subsequent ones will increase according to the backoffFactor.\n     */\n    ExponentialBackoff.prototype.reset = function () {\n        this.currentBaseMs = 0;\n    };\n    /**\n     * Resets the backoff delay to the maximum delay (e.g. for use after a\n     * RESOURCE_EXHAUSTED error).\n     */\n    ExponentialBackoff.prototype.resetToMax = function () {\n        this.currentBaseMs = this.maxDelayMs;\n    };\n    /**\n     * Returns a promise that resolves after currentDelayMs, and increases the\n     * delay for any subsequent attempts.\n     */\n    ExponentialBackoff.prototype.backoffAndWait = function () {\n        var def = new Deferred();\n        // First schedule using the current base (which may be 0 and should be\n        // honored as such).\n        var delayWithJitterMs = this.currentBaseMs + this.jitterDelayMs();\n        if (this.currentBaseMs > 0) {\n            debug(backoff_LOG_TAG, \"Backing off for \" + delayWithJitterMs + \" ms \" +\n                (\"(base delay: \" + this.currentBaseMs + \" ms)\"));\n        }\n        setTimeout(function () {\n            def.resolve();\n        }, delayWithJitterMs);\n        // Apply backoff factor to determine next delay and ensure it is within\n        // bounds.\n        this.currentBaseMs *= this.backoffFactor;\n        if (this.currentBaseMs < this.initialDelayMs) {\n            this.currentBaseMs = this.initialDelayMs;\n        }\n        if (this.currentBaseMs > this.maxDelayMs) {\n            this.currentBaseMs = this.maxDelayMs;\n        }\n        return def.promise;\n    };\n    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */\n    ExponentialBackoff.prototype.jitterDelayMs = function () {\n        return (Math.random() - 0.5) * this.currentBaseMs;\n    };\n    return ExponentialBackoff;\n}());\n\n\n//# sourceMappingURL=backoff.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/persistent_stream.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar persistent_stream___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\nvar persistent_stream_LOG_TAG = 'PersistentStream';\nvar PersistentStreamState;\n(function (PersistentStreamState) {\n    /**\n     * The streaming RPC is not running and there's no error condition.\n     * Calling `start` will start the stream immediately without backoff.\n     * While in this state isStarted will return false.\n     */\n    PersistentStreamState[PersistentStreamState[\"Initial\"] = 0] = \"Initial\";\n    /**\n     * The stream is starting, and is waiting for an auth token to attach to\n     * the initial request. While in this state, isStarted will return\n     * true but isOpen will return false.\n     */\n    PersistentStreamState[PersistentStreamState[\"Auth\"] = 1] = \"Auth\";\n    /**\n     * The streaming RPC is up and running. Requests and responses can flow\n     * freely. Both isStarted and isOpen will return true.\n     */\n    PersistentStreamState[PersistentStreamState[\"Open\"] = 2] = \"Open\";\n    /**\n     * The stream encountered an error. The next start attempt will back off.\n     * While in this state isStarted() will return false.\n     *\n     */\n    PersistentStreamState[PersistentStreamState[\"Error\"] = 3] = \"Error\";\n    /**\n     * An in-between state after an error where the stream is waiting before\n     * re-starting. After\n     * waiting is complete, the stream will try to open. While in this\n     * state isStarted() will return YES but isOpen will return false.\n     */\n    PersistentStreamState[PersistentStreamState[\"Backoff\"] = 4] = \"Backoff\";\n    /**\n     * The stream has been explicitly stopped; no further events will be emitted.\n     */\n    PersistentStreamState[PersistentStreamState[\"Stopped\"] = 5] = \"Stopped\";\n})(PersistentStreamState || (PersistentStreamState = {}));\n/**\n * Initial backoff time in milliseconds after an error.\n * Set to 1s according to https://cloud.google.com/apis/design/errors.\n */\nvar BACKOFF_INITIAL_DELAY_MS = 1000;\n/** Maximum backoff time in milliseconds */\nvar BACKOFF_MAX_DELAY_MS = 60 * 1000;\nvar BACKOFF_FACTOR = 1.5;\n/**\n * A PersistentStream is an abstract base class that represents a streaming RPC\n * to the Firestore backend. It's built on top of the connections own support\n * for streaming RPCs, and adds several critical features for our clients:\n *\n *   - Exponential backoff on failure\n *   - Authentication via CredentialsProvider\n *   - Dispatching all callbacks into the shared worker queue\n *\n * Subclasses of PersistentStream implement serialization of models to and\n * from the JSON representation of the protocol buffers for a specific\n * streaming RPC.\n *\n * ## Starting and Stopping\n *\n * Streaming RPCs are stateful and need to be `start`ed before messages can\n * be sent and received. The PersistentStream will call the onOpen function\n * of the listener once the stream is ready to accept requests.\n *\n * Should a `start` fail, PersistentStream will call the registered\n * onClose with a FirestoreError indicating what went wrong.\n *\n * A PersistentStream can be started and stopped repeatedly.\n *\n * Generic types:\n *  SendType: The type of the outgoing message of the underlying\n *    connection stream\n *  ReceiveType: The type of the incoming message of the underlying\n *    connection stream\n *  ListenerType: The type of the listener that will be used for callbacks\n */\nvar persistent_stream_PersistentStream = /** @class */ (function () {\n    function PersistentStream(queue, connection, credentialsProvider, listener, \n        // Used for faster retries in testing\n        initialBackoffDelay) {\n        this.queue = queue;\n        this.connection = connection;\n        this.credentialsProvider = credentialsProvider;\n        this.stream = null;\n        this.listener = null;\n        this.backoff = new backoff_ExponentialBackoff(initialBackoffDelay ? initialBackoffDelay : BACKOFF_INITIAL_DELAY_MS, BACKOFF_FACTOR, BACKOFF_MAX_DELAY_MS);\n        this.state = PersistentStreamState.Initial;\n        this.listener = listener;\n    }\n    /**\n     * Returns true if `start` has been called and no error has occurred. True\n     * indicates the stream is open or in the process of opening (which\n     * encompasses respecting backoff, getting auth tokens, and starting the\n     * actual RPC). Use `isOpen` to determine if the stream is open and ready for\n     * outbound requests.\n     */\n    PersistentStream.prototype.isStarted = function () {\n        return (this.state === PersistentStreamState.Backoff ||\n            this.state === PersistentStreamState.Auth ||\n            this.state === PersistentStreamState.Open);\n    };\n    /**\n     * Returns true if the underlying RPC is open (the openHandler has been\n     * called) and the stream is ready for outbound requests.\n     */\n    PersistentStream.prototype.isOpen = function () {\n        return this.state === PersistentStreamState.Open;\n    };\n    /**\n     * Starts the RPC. Only allowed if isStarted returns false. The stream is\n     * not immediately ready for use: onOpen will be invoked when the RPC is ready\n     * for outbound requests, at which point isOpen will return true.\n     *\n     *  When start returns, isStarted will return true.\n     */\n    PersistentStream.prototype.start = function () {\n        if (this.state === PersistentStreamState.Error) {\n            this.performBackoff();\n            return;\n        }\n        assert(this.state === PersistentStreamState.Initial, 'Already started');\n        this.auth();\n    };\n    /**\n     * Stops the RPC. This call is idempotent and allowed regardless of the\n     * current isStarted state.\n     *\n     * When stop returns, isStarted and isOpen will both return false.\n     */\n    PersistentStream.prototype.stop = function () {\n        // Prevent any possible future restart of this stream\n        this.state = PersistentStreamState.Stopped;\n        // Clear the listener to avoid bleeding of events from the underlying\n        // streams\n        this.listener = null;\n        // Clean up the underlying stream because we are no longer interested in\n        // events\n        if (this.stream !== null) {\n            this.stream.close();\n            this.stream = null;\n        }\n    };\n    /**\n     * After an error the stream will usually back off on the next attempt to\n     * start it. If the error warrants an immediate restart of the stream, the\n     * sender can use this to indicate that the receiver should not back off.\n     *\n     * Each error will call the onClose function. That function can decide to\n     * inhibit backoff if required.\n     */\n    PersistentStream.prototype.inhibitBackoff = function () {\n        assert(!this.isStarted(), 'Can only inhibit backoff in a stopped state');\n        this.state = PersistentStreamState.Initial;\n        this.backoff.reset();\n    };\n    PersistentStream.prototype.auth = function () {\n        var _this = this;\n        assert(this.state === PersistentStreamState.Initial, 'Must be in initial state to auth');\n        this.state = PersistentStreamState.Auth;\n        this.credentialsProvider.getToken(/*forceRefresh=*/ false).then(function (token) {\n            // Normally we'd have to schedule the callback on the AsyncQueue.\n            // However, the following calls are safe to be called outside the\n            // AsyncQueue since they don't chain asynchronous calls\n            _this.startStream(token);\n        }, function (error) {\n            _this.queue.schedule(function () {\n                if (_this.state !== PersistentStreamState.Stopped) {\n                    // Stream can be stopped while waiting for authorization.\n                    var rpcError = new FirestoreError(Code.UNKNOWN, 'Fetching auth token failed: ' + error.message);\n                    return _this.handleStreamClose(rpcError);\n                }\n                else {\n                    return Promise.resolve();\n                }\n            });\n        });\n    };\n    PersistentStream.prototype.startStream = function (token) {\n        var _this = this;\n        if (this.state === PersistentStreamState.Stopped) {\n            // Stream can be stopped while waiting for authorization.\n            return;\n        }\n        assert(this.state === PersistentStreamState.Auth, 'Trying to start stream in a non-auth state');\n        // Helper function to dispatch to AsyncQueue and make sure that any\n        // close will seem instantaneous and events are prevented from being\n        // raised after the close call\n        var dispatchIfNotStopped = function (fn) {\n            _this.queue.schedule(function () {\n                // Only raise events if the listener has not changed\n                if (_this.state !== PersistentStreamState.Stopped) {\n                    return fn();\n                }\n                else {\n                    return Promise.resolve();\n                }\n            });\n        };\n        // Only start stream if listener has not changed\n        if (this.listener !== null) {\n            this.stream = this.startRpc(token);\n            this.stream.onOpen(function () {\n                dispatchIfNotStopped(function () {\n                    assert(_this.state === PersistentStreamState.Auth, 'Expected stream to be in state auth, but was ' + _this.state);\n                    _this.state = PersistentStreamState.Open;\n                    return _this.listener.onOpen();\n                });\n            });\n            this.stream.onClose(function (error) {\n                dispatchIfNotStopped(function () {\n                    return _this.handleStreamClose(error);\n                });\n            });\n            this.stream.onMessage(function (msg) {\n                dispatchIfNotStopped(function () {\n                    return _this.onMessage(msg);\n                });\n            });\n        }\n    };\n    PersistentStream.prototype.performBackoff = function () {\n        var _this = this;\n        assert(this.state === PersistentStreamState.Error, 'Should only perform backoff in an error case');\n        this.state = PersistentStreamState.Backoff;\n        this.backoff.backoffAndWait().then(function () {\n            // Backoff does not run on the AsyncQueue, so we need to reschedule to\n            // make sure the queue blocks\n            _this.queue.schedule(function () {\n                if (_this.state === PersistentStreamState.Stopped) {\n                    // Stream can be stopped while waiting for backoff to complete.\n                    return Promise.resolve();\n                }\n                _this.state = PersistentStreamState.Initial;\n                _this.start();\n                assert(_this.isStarted(), 'PersistentStream should have started');\n                return Promise.resolve();\n            });\n        });\n    };\n    PersistentStream.prototype.handleStreamClose = function (error) {\n        assert(this.isStarted(), \"Can't handle server close on non-started stream\");\n        debug(persistent_stream_LOG_TAG, \"close with error: \" + error);\n        this.stream = null;\n        // In theory the stream could close cleanly, however, in our current model\n        // we never expect this to happen because if we stop a stream ourselves,\n        // this callback will never be called. To prevent cases where we retry\n        // without a backoff accidentally, we set the stream to error in all cases.\n        this.state = PersistentStreamState.Error;\n        if (error && error.code === Code.RESOURCE_EXHAUSTED) {\n            debug(persistent_stream_LOG_TAG, 'Using maximum backoff delay to prevent overloading the backend.');\n            this.backoff.resetToMax();\n        }\n        return this.listener.onClose(error);\n    };\n    return PersistentStream;\n}());\n\n/**\n * A PersistentStream that implements the Listen RPC.\n *\n * Once the Listen stream has called the openHandler, any number of listen and\n * unlisten calls calls can be sent to control what changes will be sent from\n * the server for ListenResponses.\n */\nvar PersistentListenStream = /** @class */ (function (_super) {\n    persistent_stream___extends(PersistentListenStream, _super);\n    function PersistentListenStream(databaseInfo, queue, connection, credentials, serializer, listener, initialBackoffDelay) {\n        var _this = _super.call(this, queue, connection, credentials, listener, initialBackoffDelay) || this;\n        _this.databaseInfo = databaseInfo;\n        _this.serializer = serializer;\n        return _this;\n    }\n    PersistentListenStream.prototype.startRpc = function (token) {\n        return this.connection.openStream('Listen', token);\n    };\n    PersistentListenStream.prototype.onMessage = function (watchChangeProto) {\n        // A successful response means the stream is healthy\n        this.backoff.reset();\n        var watchChange = this.serializer.fromWatchChange(watchChangeProto);\n        var snapshot = this.serializer.versionFromListenResponse(watchChangeProto);\n        return this.listener.onWatchChange(watchChange, snapshot);\n    };\n    /**\n     * Registers interest in the results of the given query. If the query\n     * includes a resumeToken it will be included in the request. Results that\n     * affect the query will be streamed back as WatchChange messages that\n     * reference the targetId.\n     */\n    PersistentListenStream.prototype.watch = function (queryData) {\n        var request = {};\n        request.database = this.serializer.encodedDatabaseId;\n        request.addTarget = this.serializer.toTarget(queryData);\n        var labels = this.serializer.toListenRequestLabels(queryData);\n        if (labels) {\n            request.labels = labels;\n        }\n        this.stream.send(request);\n    };\n    /**\n     * Unregisters interest in the results of the query associated with the\n     * given targetId.\n     */\n    PersistentListenStream.prototype.unwatch = function (targetId) {\n        var request = {};\n        request.database = this.serializer.encodedDatabaseId;\n        request.removeTarget = targetId;\n        this.stream.send(request);\n    };\n    return PersistentListenStream;\n}(persistent_stream_PersistentStream));\n\n/**\n * A Stream that implements the Write RPC.\n *\n * The Write RPC requires the caller to maintain special streamToken\n * state in between calls, to help the server understand which responses the\n * client has processed by the time the next request is made. Every response\n * will contain a streamToken; this value must be passed to the next\n * request.\n *\n * After calling start() on this stream, the next request must be a handshake,\n * containing whatever streamToken is on hand. Once a response to this\n * request is received, all pending mutations may be submitted. When\n * submitting multiple batches of mutations at the same time, it's\n * okay to use the same streamToken for the calls to writeMutations.\n *\n * TODO(b/33271235): Use proto types\n */\nvar persistent_stream_PersistentWriteStream = /** @class */ (function (_super) {\n    persistent_stream___extends(PersistentWriteStream, _super);\n    function PersistentWriteStream(databaseInfo, queue, connection, credentials, serializer, listener, initialBackoffDelay) {\n        var _this = _super.call(this, queue, connection, credentials, listener, initialBackoffDelay) || this;\n        _this.databaseInfo = databaseInfo;\n        _this.serializer = serializer;\n        _this.handshakeComplete_ = false;\n        return _this;\n    }\n    Object.defineProperty(PersistentWriteStream.prototype, \"handshakeComplete\", {\n        /**\n         * Tracks whether or not a handshake has been successfully exchanged and\n         * the stream is ready to accept mutations.\n         */\n        get: function () {\n            return this.handshakeComplete_;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Override of PersistentStream.start\n    PersistentWriteStream.prototype.start = function () {\n        this.handshakeComplete_ = false;\n        _super.prototype.start.call(this);\n    };\n    PersistentWriteStream.prototype.startRpc = function (token) {\n        return this.connection.openStream('Write', token);\n    };\n    PersistentWriteStream.prototype.onMessage = function (responseProto) {\n        // Always capture the last stream token.\n        assert(!!responseProto.streamToken, 'Got a write response without a stream token');\n        this.lastStreamToken = responseProto.streamToken;\n        if (!this.handshakeComplete_) {\n            // The first response is always the handshake response\n            assert(!responseProto.writeResults || responseProto.writeResults.length === 0, 'Got mutation results for handshake');\n            this.handshakeComplete_ = true;\n            return this.listener.onHandshakeComplete();\n        }\n        else {\n            // A successful first write response means the stream is healthy,\n            // Note, that we could consider a successful handshake healthy, however,\n            // the write itself might be causing an error we want to back off from.\n            this.backoff.reset();\n            var results = this.serializer.fromWriteResults(responseProto.writeResults);\n            var commitVersion = this.serializer.fromVersion(responseProto.commitTime);\n            return this.listener.onMutationResult(commitVersion, results);\n        }\n    };\n    /**\n     * Sends an initial streamToken to the server, performing the handshake\n     * required to make the StreamingWrite RPC work. Subsequent\n     * calls should wait until onHandshakeComplete was called.\n     */\n    PersistentWriteStream.prototype.writeHandshake = function () {\n        assert(this.isOpen(), 'Writing handshake requires an opened stream');\n        assert(!this.handshakeComplete_, 'Handshake already completed');\n        // TODO(dimond): Support stream resumption. We intentionally do not set the\n        // stream token on the handshake, ignoring any stream token we might have.\n        var request = {};\n        request.database = this.serializer.encodedDatabaseId;\n        this.stream.send(request);\n    };\n    /** Sends a group of mutations to the Firestore backend to apply. */\n    PersistentWriteStream.prototype.writeMutations = function (mutations) {\n        var _this = this;\n        assert(this.isOpen(), 'Writing mutations requires an opened stream');\n        assert(this.handshakeComplete_, 'Handshake must be complete before writing mutations');\n        assert(this.lastStreamToken.length > 0, 'Trying to write mutation without a token');\n        var request = {\n            // Protos are typed with string, but we support UInt8Array on Node\n            // tslint:disable-next-line:no-any\n            streamToken: this.lastStreamToken,\n            writes: mutations.map(function (mutation) { return _this.serializer.toMutation(mutation); })\n        };\n        this.stream.send(request);\n    };\n    return PersistentWriteStream;\n}(persistent_stream_PersistentStream));\n\n\n//# sourceMappingURL=persistent_stream.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/datastore.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * Datastore is a wrapper around the external Google Cloud Datastore grpc API,\n * which provides an interface that is more convenient for the rest of the\n * client SDK architecture to consume.\n */\nvar datastore_Datastore = /** @class */ (function () {\n    function Datastore(databaseInfo, queue, connection, credentials, serializer, initialBackoffDelay) {\n        this.databaseInfo = databaseInfo;\n        this.queue = queue;\n        this.connection = connection;\n        this.credentials = credentials;\n        this.serializer = serializer;\n        this.initialBackoffDelay = initialBackoffDelay;\n    }\n    Datastore.prototype.newPersistentWriteStream = function (listener) {\n        return new persistent_stream_PersistentWriteStream(this.databaseInfo, this.queue, this.connection, this.credentials, this.serializer, listener, this.initialBackoffDelay);\n    };\n    Datastore.prototype.newPersistentWatchStream = function (listener) {\n        return new PersistentListenStream(this.databaseInfo, this.queue, this.connection, this.credentials, this.serializer, listener, this.initialBackoffDelay);\n    };\n    Datastore.prototype.commit = function (mutations) {\n        var _this = this;\n        var params = {\n            writes: mutations.map(function (m) { return _this.serializer.toMutation(m); })\n        };\n        return this.invokeRPC('commit', params).then(function (response) {\n            return _this.serializer.fromWriteResults(response.writeResults);\n        });\n    };\n    Datastore.prototype.lookup = function (keys) {\n        var _this = this;\n        var params = {\n            documents: keys.map(function (k) { return _this.serializer.toName(k); })\n        };\n        return this.invokeRPC('batchGet', params).then(function (response) {\n            var docs = maybeDocumentMap();\n            response.forEach(function (proto) {\n                var doc = _this.serializer.fromMaybeDocument(proto);\n                docs = docs.insert(doc.key, doc);\n            });\n            var result = [];\n            keys.forEach(function (key) {\n                var doc = docs.get(key);\n                assert(!!doc, 'Missing entity in write response for ' + key);\n                result.push(doc);\n            });\n            return result;\n        });\n    };\n    /** Gets an auth token and invokes the provided RPC. */\n    Datastore.prototype.invokeRPC = function (rpcName, request) {\n        var _this = this;\n        // TODO(mikelehen): Retry (with backoff) on token failures?\n        return this.credentials.getToken(/*forceRefresh=*/ false).then(function (token) {\n            return _this.connection.invoke(rpcName, request, token);\n        });\n    };\n    return Datastore;\n}());\n\n\n//# sourceMappingURL=datastore.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/transaction.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */\nvar transaction_Transaction = /** @class */ (function () {\n    function Transaction(datastore) {\n        this.datastore = datastore;\n        // The version of each document that was read during this transaction.\n        this.readVersions = documentVersionMap();\n        this.mutations = [];\n        this.committed = false;\n    }\n    Transaction.prototype.recordVersion = function (doc) {\n        var docVersion = doc.version;\n        if (doc instanceof document_NoDocument) {\n            // For deleted docs, we must use baseVersion 0 when we overwrite them.\n            docVersion = snapshot_version_SnapshotVersion.forDeletedDoc();\n        }\n        var existingVersion = this.readVersions.get(doc.key);\n        if (existingVersion !== null) {\n            if (!docVersion.equals(existingVersion)) {\n                // This transaction will fail no matter what.\n                throw new FirestoreError(Code.ABORTED, 'Document version changed between two reads.');\n            }\n        }\n        else {\n            this.readVersions = this.readVersions.insert(doc.key, docVersion);\n        }\n    };\n    Transaction.prototype.lookup = function (keys) {\n        var _this = this;\n        if (this.committed) {\n            return Promise.reject('Transaction has already completed.');\n        }\n        if (this.mutations.length > 0) {\n            return Promise.reject('Transactions lookups are invalid after writes.');\n        }\n        return this.datastore.lookup(keys).then(function (docs) {\n            docs.forEach(function (doc) { return _this.recordVersion(doc); });\n            return docs;\n        });\n    };\n    Transaction.prototype.write = function (mutations) {\n        if (this.committed) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'Transaction has already completed.');\n        }\n        this.mutations = this.mutations.concat(mutations);\n    };\n    /**\n     * Returns the version of this document when it was read in this transaction,\n     * as a precondition, or no precondition if it was not read.\n     */\n    Transaction.prototype.precondition = function (key) {\n        var version = this.readVersions.get(key);\n        if (version) {\n            return mutation_Precondition.updateTime(version);\n        }\n        else {\n            return mutation_Precondition.NONE;\n        }\n    };\n    /**\n     * Returns the precondition for a document if the operation is an update.\n     */\n    Transaction.prototype.preconditionForUpdate = function (key) {\n        var version = this.readVersions.get(key);\n        if (version && version.equals(snapshot_version_SnapshotVersion.forDeletedDoc())) {\n            // The document doesn't exist, so fail the transaction.\n            throw new FirestoreError(Code.FAILED_PRECONDITION, \"Can't update a document that doesn't exist.\");\n        }\n        else if (version) {\n            // Document exists, base precondition on document update time.\n            return mutation_Precondition.updateTime(version);\n        }\n        else {\n            // Document was not read, so we just use the preconditions for a blind\n            // update.\n            return mutation_Precondition.exists(true);\n        }\n    };\n    Transaction.prototype.set = function (key, data) {\n        this.write(data.toMutations(key, this.precondition(key)));\n    };\n    Transaction.prototype.update = function (key, data) {\n        this.write(data.toMutations(key, this.preconditionForUpdate(key)));\n    };\n    Transaction.prototype.delete = function (key) {\n        this.write([new mutation_DeleteMutation(key, this.precondition(key))]);\n        // Since the delete will be applied before all following writes, we need to\n        // ensure that the precondition for the next write will be exists: false.\n        this.readVersions = this.readVersions.insert(key, snapshot_version_SnapshotVersion.forDeletedDoc());\n    };\n    Transaction.prototype.commit = function () {\n        var _this = this;\n        var unwritten = this.readVersions;\n        // For each mutation, note that the doc was written.\n        this.mutations.forEach(function (mutation) {\n            unwritten = unwritten.remove(mutation.key);\n        });\n        if (!unwritten.isEmpty()) {\n            return Promise.reject(Error('Every document read in a transaction must also be written.'));\n        }\n        return this.datastore.commit(this.mutations).then(function () {\n            _this.committed = true;\n        });\n    };\n    return Transaction;\n}());\n\n\n//# sourceMappingURL=transaction.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/remote_store.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar remote_store_LOG_TAG = 'RemoteStore';\n// TODO(b/35853402): Negotiate this with the stream.\nvar MAX_PENDING_WRITES = 10;\n// The RemoteStore notifies an onlineStateHandler with OnlineState.Failed if we\n// fail to connect to the backend. This subsequently triggers get() requests to\n// fail or use cached data, etc. Unfortunately, our connections have\n// historically been subject to various transient failures. So we wait for\n// multiple failures before notifying the onlineStateHandler.\nvar ONLINE_ATTEMPTS_BEFORE_FAILURE = 2;\n/**\n * RemoteStore - An interface to remotely stored data, basically providing a\n * wrapper around the Datastore that is more reliable for the rest of the\n * system.\n *\n * RemoteStore is responsible for maintaining the connection to the server.\n * - maintaining a list of active listens.\n * - reconnecting when the connection is dropped.\n * - resuming all the active listens on reconnect.\n *\n * RemoteStore handles all incoming events from the Datastore.\n * - listening to the watch stream and repackaging the events as RemoteEvents\n * - notifying SyncEngine of any changes to the active listens.\n *\n * RemoteStore takes writes from other components and handles them reliably.\n * - pulling pending mutations from LocalStore and sending them to Datastore.\n * - retrying mutations that failed because of network problems.\n * - acking mutations to the SyncEngine once they are accepted or rejected.\n */\nvar remote_store_RemoteStore = /** @class */ (function () {\n    function RemoteStore(databaseInfo, asyncQueue, \n        /**\n         * The local store, used to fill the write pipeline with outbound\n         * mutations and resolve existence filter mismatches.\n         */\n        localStore, \n        /** The client-side proxy for interacting with the backend. */\n        datastore, onlineStateHandler) {\n        this.databaseInfo = databaseInfo;\n        this.asyncQueue = asyncQueue;\n        this.localStore = localStore;\n        this.datastore = datastore;\n        this.onlineStateHandler = onlineStateHandler;\n        this.pendingWrites = [];\n        this.lastBatchSeen = BATCHID_UNKNOWN;\n        /**\n         * A mapping of watched targets that the client cares about tracking and the\n         * user has explicitly called a 'listen' for this target.\n         *\n         * These targets may or may not have been sent to or acknowledged by the\n         * server. On re-establishing the listen stream, these targets should be sent\n         * to the server. The targets removed with unlistens are removed eagerly\n         * without waiting for confirmation from the listen stream.\n         */\n        this.listenTargets = {};\n        /**\n         * A mapping of targetId to pending acks needed.\n         *\n         * If a targetId is present in this map, then we're waiting for watch to\n         * acknowledge a removal or addition of the target. If a target is not in this\n         * mapping, and it's in the listenTargets map, then we consider the target to\n         * be active.\n         *\n         * We increment the count here every time we issue a request over the stream\n         * to watch or unwatch. We then decrement the count every time we get a target\n         * added or target removed message from the server. Once the count is equal to\n         * 0 we know that the client and server are in the same state (once this state\n         * is reached the targetId is removed from the map to free the memory).\n         */\n        this.pendingTargetResponses = {};\n        this.accumulatedWatchChanges = [];\n        this.watchStream = null;\n        this.writeStream = null;\n        /**\n         * The online state of the watch stream. The state is set to healthy if and\n         * only if there are messages received by the backend.\n         */\n        this.watchStreamOnlineState = OnlineState.Unknown;\n        /** A count of consecutive failures to open the stream. */\n        this.watchStreamFailures = 0;\n    }\n    /**\n     * Starts up the remote store, creating streams, restoring state from\n     * LocalStore, etc.\n     */\n    RemoteStore.prototype.start = function () {\n        return this.enableNetwork();\n    };\n    RemoteStore.prototype.setOnlineStateToHealthy = function () {\n        this.updateAndBroadcastOnlineState(OnlineState.Healthy);\n    };\n    RemoteStore.prototype.setOnlineStateToUnknown = function () {\n        // The state is set to unknown when a healthy stream is closed (e.g. due to\n        // a token timeout) or when we have no active listens and therefore there's\n        // no need to start the stream. Assuming there is (possibly in the future)\n        // an active listen, then we will eventually move to state Online or Failed,\n        // but we always want to make at least ONLINE_ATTEMPTS_BEFORE_FAILURE\n        // attempts before failing, so we reset the count here.\n        this.watchStreamFailures = 0;\n        this.updateAndBroadcastOnlineState(OnlineState.Unknown);\n    };\n    RemoteStore.prototype.updateOnlineStateAfterFailure = function () {\n        // The first failure after we are successfully connected moves us to the\n        // 'Unknown' state. We then may make multiple attempts (based on\n        // ONLINE_ATTEMPTS_BEFORE_FAILURE) before we actually report failure.\n        if (this.watchStreamOnlineState === OnlineState.Healthy) {\n            this.setOnlineStateToUnknown();\n        }\n        else {\n            this.watchStreamFailures++;\n            if (this.watchStreamFailures >= ONLINE_ATTEMPTS_BEFORE_FAILURE) {\n                this.updateAndBroadcastOnlineState(OnlineState.Failed);\n            }\n        }\n    };\n    RemoteStore.prototype.updateAndBroadcastOnlineState = function (onlineState) {\n        var didChange = this.watchStreamOnlineState !== onlineState;\n        this.watchStreamOnlineState = onlineState;\n        if (didChange) {\n            this.onlineStateHandler(onlineState);\n        }\n    };\n    RemoteStore.prototype.isNetworkEnabled = function () {\n        assert((this.watchStream == null) == (this.writeStream == null), 'WatchStream and WriteStream should both be null or non-null');\n        return this.watchStream != null;\n    };\n    /** Re-enables the network. Only to be called as the counterpart to disableNetwork(). */\n    RemoteStore.prototype.enableNetwork = function () {\n        var _this = this;\n        assert(this.watchStream == null, 'enableNetwork() called with non-null watchStream.');\n        assert(this.writeStream == null, 'enableNetwork() called with non-null writeStream.');\n        // Create new streams (but note they're not started yet).\n        this.watchStream = this.datastore.newPersistentWatchStream({\n            onOpen: this.onWatchStreamOpen.bind(this),\n            onClose: this.onWatchStreamClose.bind(this),\n            onWatchChange: this.onWatchStreamChange.bind(this)\n        });\n        this.writeStream = this.datastore.newPersistentWriteStream({\n            onOpen: this.onWriteStreamOpen.bind(this),\n            onClose: this.onWriteStreamClose.bind(this),\n            onHandshakeComplete: this.onWriteHandshakeComplete.bind(this),\n            onMutationResult: this.onMutationResult.bind(this)\n        });\n        // Load any saved stream token from persistent storage\n        return this.localStore.getLastStreamToken().then(function (token) {\n            _this.writeStream.lastStreamToken = token;\n            if (_this.shouldStartWatchStream()) {\n                _this.startWatchStream();\n            }\n            _this.updateAndBroadcastOnlineState(OnlineState.Unknown);\n            return _this.fillWritePipeline(); // This may start the writeStream.\n        });\n    };\n    /** Temporarily disables the network. The network can be re-enabled using enableNetwork(). */\n    RemoteStore.prototype.disableNetwork = function () {\n        this.updateAndBroadcastOnlineState(OnlineState.Failed);\n        // NOTE: We're guaranteed not to get any further events from these streams (not even a close\n        // event).\n        this.watchStream.stop();\n        this.writeStream.stop();\n        this.cleanUpWatchStreamState();\n        this.cleanUpWriteStreamState();\n        this.writeStream = null;\n        this.watchStream = null;\n        return Promise.resolve();\n    };\n    RemoteStore.prototype.shutdown = function () {\n        debug(remote_store_LOG_TAG, 'RemoteStore shutting down.');\n        this.disableNetwork();\n        return Promise.resolve(undefined);\n    };\n    /** Starts new listen for the given query. Uses resume token if provided */\n    RemoteStore.prototype.listen = function (queryData) {\n        assert(!contains(this.listenTargets, queryData.targetId), 'listen called with duplicate targetId!');\n        // Mark this as something the client is currently listening for.\n        this.listenTargets[queryData.targetId] = queryData;\n        if (this.shouldStartWatchStream()) {\n            // The listen will be sent in onWatchStreamOpen\n            this.startWatchStream();\n        }\n        else if (this.isNetworkEnabled() && this.watchStream.isOpen()) {\n            this.sendWatchRequest(queryData);\n        }\n    };\n    /** Removes the listen from server */\n    RemoteStore.prototype.unlisten = function (targetId) {\n        assert(contains(this.listenTargets, targetId), 'unlisten called without assigned target ID!');\n        var queryData = this.listenTargets[targetId];\n        delete this.listenTargets[targetId];\n        if (this.isNetworkEnabled() && this.watchStream.isOpen()) {\n            this.sendUnwatchRequest(targetId);\n        }\n    };\n    /**\n     * We need to increment the the expected number of pending responses we're due\n     * from watch so we wait for the ack to process any messages from this target.\n     */\n    RemoteStore.prototype.sendWatchRequest = function (queryData) {\n        this.recordPendingTargetRequest(queryData.targetId);\n        this.watchStream.watch(queryData);\n    };\n    /**\n     * We need to increment the expected number of pending responses we're due\n     * from watch so we wait for the removal on the server before we process any\n     * messages from this target.\n     */\n    RemoteStore.prototype.sendUnwatchRequest = function (targetId) {\n        this.recordPendingTargetRequest(targetId);\n        this.watchStream.unwatch(targetId);\n    };\n    /**\n     * Increment the mapping of how many acks are needed from watch before we can\n     * consider the server to be 'in-sync' with the client's active targets.\n     */\n    RemoteStore.prototype.recordPendingTargetRequest = function (targetId) {\n        // For each request we get we need to record we need a response for it.\n        this.pendingTargetResponses[targetId] =\n            (this.pendingTargetResponses[targetId] || 0) + 1;\n    };\n    RemoteStore.prototype.startWatchStream = function () {\n        assert(this.shouldStartWatchStream(), 'startWriteStream() called when shouldStartWatchStream() is false.');\n        this.watchStream.start();\n    };\n    /**\n     * Returns whether the watch stream should be started because there are\n     * active targets trying to be listened too\n     */\n    RemoteStore.prototype.shouldStartWatchStream = function () {\n        return (this.isNetworkEnabled() &&\n            !this.watchStream.isStarted() &&\n            !isEmpty(this.listenTargets));\n    };\n    RemoteStore.prototype.cleanUpWatchStreamState = function () {\n        // If the connection is closed then we'll never get a snapshot version for\n        // the accumulated changes and so we'll never be able to complete the batch.\n        // When we start up again the server is going to resend these changes\n        // anyway, so just toss the accumulated state.\n        this.accumulatedWatchChanges = [];\n        this.pendingTargetResponses = {};\n    };\n    RemoteStore.prototype.onWatchStreamOpen = function () {\n        var _this = this;\n        // TODO(b/35852690): close the stream again (with some timeout?) if no watch\n        // targets are active\n        forEachNumber(this.listenTargets, function (targetId, queryData) {\n            _this.sendWatchRequest(queryData);\n        });\n        return Promise.resolve();\n    };\n    RemoteStore.prototype.onWatchStreamClose = function (error) {\n        assert(this.isNetworkEnabled(), 'onWatchStreamClose() should only be called when the network is enabled');\n        this.cleanUpWatchStreamState();\n        // If there was an error, retry the connection.\n        if (this.shouldStartWatchStream()) {\n            this.updateOnlineStateAfterFailure();\n            this.startWatchStream();\n        }\n        else {\n            // No need to restart watch stream because there are no active targets.\n            // The online state is set to unknown because there is no active attempt\n            // at establishing a connection\n            this.setOnlineStateToUnknown();\n        }\n        return Promise.resolve();\n    };\n    RemoteStore.prototype.onWatchStreamChange = function (watchChange, snapshotVersion) {\n        // Mark the connection as healthy because we got a message from the server\n        this.setOnlineStateToHealthy();\n        if (watchChange instanceof watch_change_WatchTargetChange &&\n            watchChange.state === WatchTargetChangeState.Removed &&\n            watchChange.cause) {\n            // There was an error on a target, don't wait for a consistent snapshot\n            // to raise events\n            return this.handleTargetError(watchChange);\n        }\n        // Accumulate watch changes but don't process them if there's no\n        // snapshotVersion or it's older than a previous snapshot we've processed\n        // (can happen after we resume a target using a resume token).\n        this.accumulatedWatchChanges.push(watchChange);\n        if (!snapshotVersion.equals(snapshot_version_SnapshotVersion.MIN) &&\n            snapshotVersion.compareTo(this.localStore.getLastRemoteSnapshotVersion()) >= 0) {\n            var changes = this.accumulatedWatchChanges;\n            this.accumulatedWatchChanges = [];\n            return this.handleWatchChangeBatch(snapshotVersion, changes);\n        }\n        else {\n            return Promise.resolve();\n        }\n    };\n    /**\n     * Takes a batch of changes from the Datastore, repackages them as a\n     * RemoteEvent, and passes that on to the listener, which is typically the\n     * SyncEngine.\n     */\n    RemoteStore.prototype.handleWatchChangeBatch = function (snapshotVersion, changes) {\n        var _this = this;\n        var aggregator = new watch_change_WatchChangeAggregator(snapshotVersion, this.listenTargets, this.pendingTargetResponses);\n        aggregator.addChanges(changes);\n        var remoteEvent = aggregator.createRemoteEvent();\n        // Get the new response counts from the aggregator\n        this.pendingTargetResponses = aggregator.pendingTargetResponses;\n        var promises = [];\n        // Handle existence filters and existence filter mismatches.\n        forEachNumber(aggregator.existenceFilters, function (targetId, filter) {\n            var queryData = _this.listenTargets[targetId];\n            if (!queryData) {\n                // A watched target might have been removed already.\n                return;\n            }\n            var query = queryData.query;\n            if (query.isDocumentQuery()) {\n                if (filter.count === 0) {\n                    // The existence filter told us the document does not exist.\n                    // We need to deduce that this document does not exist and apply\n                    // a deleted document to our updates. Without applying a deleted\n                    // document there might be another query that will raise this\n                    // document as part of a snapshot until it is resolved,\n                    // essentially exposing inconsistency between queries.\n                    var key = new document_key_DocumentKey(query.path);\n                    var deletedDoc = new document_NoDocument(key, snapshotVersion);\n                    remoteEvent.addDocumentUpdate(deletedDoc);\n                }\n                else {\n                    assert(filter.count === 1, 'Single document existence filter with count: ' + filter.count);\n                }\n            }\n            else {\n                // Not a document query.\n                var promise = _this.localStore\n                    .remoteDocumentKeys(targetId)\n                    .then(function (trackedRemote) {\n                    if (remoteEvent.targetChanges[targetId]) {\n                        var mapping = remoteEvent.targetChanges[targetId].mapping;\n                        if (mapping !== null) {\n                            if (mapping instanceof UpdateMapping) {\n                                trackedRemote = mapping.applyToKeySet(trackedRemote);\n                            }\n                            else {\n                                assert(mapping instanceof ResetMapping, 'Expected either reset or update mapping but got something else: ' +\n                                    mapping);\n                                trackedRemote = mapping.documents;\n                            }\n                        }\n                    }\n                    if (trackedRemote.size !== filter.count) {\n                        // Existence filter mismatch, resetting mapping.\n                        // Make sure the mismatch is exposed in the remote event.\n                        remoteEvent.handleExistenceFilterMismatch(targetId);\n                        // Clear the resume token for the query, since we're in a\n                        // known mismatch state.\n                        var newQueryData = new query_data_QueryData(query, targetId, queryData.purpose);\n                        _this.listenTargets[targetId] = newQueryData;\n                        // Cause a hard reset by unwatching and rewatching\n                        // immediately, but deliberately don't send a resume token\n                        // so that we get a full update.\n                        // Make sure we expect that this acks are going to happen.\n                        _this.sendUnwatchRequest(targetId);\n                        // Mark the query we send as being on behalf of an existence\n                        // filter mismatch, but don't actually retain that in\n                        // listenTargets. This ensures that we flag the first\n                        // re-listen this way without impacting future listens of\n                        // this target (that might happen e.g. on reconnect).\n                        var requestQueryData = new query_data_QueryData(query, targetId, QueryPurpose.ExistenceFilterMismatch);\n                        _this.sendWatchRequest(requestQueryData);\n                    }\n                });\n                promises.push(promise);\n            }\n        });\n        return Promise.all(promises).then(function () {\n            // Update in-memory resume tokens. LocalStore will update the\n            // persistent view of these when applying the completed RemoteEvent.\n            forEachNumber(remoteEvent.targetChanges, function (targetId, change) {\n                if (change.resumeToken.length > 0) {\n                    var queryData = _this.listenTargets[targetId];\n                    // A watched target might have been removed already.\n                    if (queryData) {\n                        _this.listenTargets[targetId] = queryData.update({\n                            resumeToken: change.resumeToken,\n                            snapshotVersion: change.snapshotVersion\n                        });\n                    }\n                }\n            });\n            // Finally handle remote event\n            return _this.syncEngine.applyRemoteEvent(remoteEvent);\n        });\n    };\n    /** Handles an error on a target */\n    RemoteStore.prototype.handleTargetError = function (watchChange) {\n        var _this = this;\n        assert(!!watchChange.cause, 'Handling target error without a cause');\n        var error = watchChange.cause;\n        var promiseChain = Promise.resolve();\n        watchChange.targetIds.forEach(function (targetId) {\n            promiseChain = promiseChain.then(function () {\n                if (contains(_this.listenTargets, targetId)) {\n                    delete _this.listenTargets[targetId];\n                    return _this.syncEngine.rejectListen(targetId, error);\n                }\n                else {\n                    // A watched target might have been removed already.\n                    return Promise.resolve();\n                }\n            });\n        });\n        return promiseChain;\n    };\n    RemoteStore.prototype.cleanUpWriteStreamState = function () {\n        this.lastBatchSeen = BATCHID_UNKNOWN;\n        this.pendingWrites = [];\n    };\n    /**\n     * Notifies that there are new mutations to process in the queue. This is\n     * typically called by SyncEngine after it has sent mutations to LocalStore.\n     *\n     */\n    RemoteStore.prototype.fillWritePipeline = function () {\n        var _this = this;\n        if (!this.canWriteMutations()) {\n            return Promise.resolve();\n        }\n        else {\n            return this.localStore\n                .nextMutationBatch(this.lastBatchSeen)\n                .then(function (batch) {\n                if (batch === null) {\n                    return Promise.resolve();\n                }\n                else {\n                    _this.commit(batch);\n                    return _this.fillWritePipeline();\n                }\n            });\n        }\n    };\n    /**\n     * Returns true if the backend can accept additional write requests.\n     *\n     * When sending mutations to the write stream (e.g. in fillWritePipeline),\n     * call this method first to check if more mutations can be sent.\n     *\n     * Currently the only thing that can prevent the backend from accepting\n     * write requests is if there are too many requests already outstanding. As\n     * writes complete the backend will be able to accept more.\n     */\n    RemoteStore.prototype.canWriteMutations = function () {\n        return (this.isNetworkEnabled() && this.pendingWrites.length < MAX_PENDING_WRITES);\n    };\n    // For testing\n    RemoteStore.prototype.outstandingWrites = function () {\n        return this.pendingWrites.length;\n    };\n    /**\n     * Given mutations to commit, actually commits them to the Datastore. Note\n     * that this does *not* return a Promise specifically because the AsyncQueue\n     * should not block operations for this.\n     */\n    RemoteStore.prototype.commit = function (batch) {\n        assert(this.canWriteMutations(), \"commit called when batches can't be written\");\n        this.lastBatchSeen = batch.batchId;\n        this.pendingWrites.push(batch);\n        if (this.shouldStartWriteStream()) {\n            this.startWriteStream();\n        }\n        else if (this.isNetworkEnabled() && this.writeStream.handshakeComplete) {\n            this.writeStream.writeMutations(batch.mutations);\n        }\n    };\n    RemoteStore.prototype.shouldStartWriteStream = function () {\n        return (this.isNetworkEnabled() &&\n            !this.writeStream.isStarted() &&\n            this.pendingWrites.length > 0);\n    };\n    RemoteStore.prototype.startWriteStream = function () {\n        assert(this.shouldStartWriteStream(), 'startWriteStream() called when shouldStartWriteStream() is false.');\n        this.writeStream.start();\n    };\n    RemoteStore.prototype.onWriteStreamOpen = function () {\n        this.writeStream.writeHandshake();\n        return Promise.resolve();\n    };\n    RemoteStore.prototype.onWriteHandshakeComplete = function () {\n        var _this = this;\n        // Record the stream token.\n        return this.localStore\n            .setLastStreamToken(this.writeStream.lastStreamToken)\n            .then(function () {\n            // Drain any pending writes.\n            //\n            // Note that at this point pendingWrites contains mutations that\n            // have already been accepted by fillWritePipeline/commitBatch. If\n            // the pipeline is full, canWriteMutations will be false, despite\n            // the fact that we actually need to send mutations over.\n            //\n            // This also means that this method indirectly respects the limits\n            // imposed by canWriteMutations since writes can't be added to the\n            // pendingWrites array when canWriteMutations is false. If the\n            // limits imposed by canWriteMutations actually protect us from\n            // DOSing ourselves then those limits won't be exceeded here and\n            // we'll continue to make progress.\n            for (var _i = 0, _a = _this.pendingWrites; _i < _a.length; _i++) {\n                var batch = _a[_i];\n                _this.writeStream.writeMutations(batch.mutations);\n            }\n        });\n    };\n    RemoteStore.prototype.onMutationResult = function (commitVersion, results) {\n        var _this = this;\n        // This is a response to a write containing mutations and should be\n        // correlated to the first pending write.\n        assert(this.pendingWrites.length > 0, 'Got result for empty pending writes');\n        var batch = this.pendingWrites.shift();\n        var success = mutation_batch_MutationBatchResult.from(batch, commitVersion, results, this.writeStream.lastStreamToken);\n        return this.syncEngine.applySuccessfulWrite(success).then(function () {\n            // It's possible that with the completion of this mutation another\n            // slot has freed up.\n            return _this.fillWritePipeline();\n        });\n    };\n    RemoteStore.prototype.onWriteStreamClose = function (error) {\n        var _this = this;\n        assert(this.isNetworkEnabled(), 'onWriteStreamClose() should only be called when the network is enabled');\n        // Ignore close if there are no pending writes.\n        if (this.pendingWrites.length > 0) {\n            assert(!!error, 'We have pending writes, but the write stream closed without an error');\n            // A promise that is resolved after we processed the error\n            var errorHandling = void 0;\n            if (this.writeStream.handshakeComplete) {\n                // This error affects the actual write.\n                errorHandling = this.handleWriteError(error);\n            }\n            else {\n                // If there was an error before the handshake has finished, it's\n                // possible that the server is unable to process the stream token\n                // we're sending. (Perhaps it's too old?)\n                errorHandling = this.handleHandshakeError(error);\n            }\n            return errorHandling.then(function () {\n                // The write stream might have been started by refilling the write\n                // pipeline for failed writes\n                if (_this.shouldStartWriteStream()) {\n                    _this.startWriteStream();\n                }\n            });\n        }\n        else {\n            // No pending writes, nothing to do\n            return Promise.resolve();\n        }\n    };\n    RemoteStore.prototype.handleHandshakeError = function (error) {\n        // Reset the token if it's a permanent error or the error code is\n        // ABORTED, signaling the write stream is no longer valid.\n        if (isPermanentError(error.code) || error.code === Code.ABORTED) {\n            debug(remote_store_LOG_TAG, 'RemoteStore error before completed handshake; resetting stream token: ', this.writeStream.lastStreamToken);\n            this.writeStream.lastStreamToken = emptyByteString();\n            return this.localStore.setLastStreamToken(emptyByteString());\n        }\n        else {\n            // Some other error, don't reset stream token. Our stream logic will\n            // just retry with exponential backoff.\n            return Promise.resolve();\n        }\n    };\n    RemoteStore.prototype.handleWriteError = function (error) {\n        var _this = this;\n        if (isPermanentError(error.code)) {\n            // This was a permanent error, the request itself was the problem\n            // so it's not going to succeed if we resend it.\n            var batch = this.pendingWrites.shift();\n            // In this case it's also unlikely that the server itself is melting\n            // down -- this was just a bad request so inhibit backoff on the next\n            // restart.\n            this.writeStream.inhibitBackoff();\n            return this.syncEngine\n                .rejectFailedWrite(batch.batchId, error)\n                .then(function () {\n                // It's possible that with the completion of this mutation\n                // another slot has freed up.\n                return _this.fillWritePipeline();\n            });\n        }\n        else {\n            // Transient error, just let the retry logic kick in.\n            return Promise.resolve();\n        }\n    };\n    RemoteStore.prototype.createTransaction = function () {\n        return new transaction_Transaction(this.datastore);\n    };\n    RemoteStore.prototype.handleUserChange = function (user) {\n        debug(remote_store_LOG_TAG, 'RemoteStore changing users: uid=', user.uid);\n        // Tear down and re-create our network streams. This will ensure we get a fresh auth token\n        // for the new user and re-fill the write pipeline with new mutations from the LocalStore\n        // (since mutations are per-user).\n        this.disableNetwork();\n        return this.enableNetwork();\n    };\n    return RemoteStore;\n}());\n\n\n//# sourceMappingURL=remote_store.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/firestore_client.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar firestore_client_LOG_TAG = 'FirestoreClient';\n/**\n * FirestoreClient is a top-level class that constructs and owns all of the\n * pieces of the client SDK architecture. It is responsible for creating the\n * async queue that is shared by all of the other components in the system.\n */\nvar firestore_client_FirestoreClient = /** @class */ (function () {\n    function FirestoreClient(platform, databaseInfo, credentials, \n        /**\n           * Asynchronous queue responsible for all of our internal processing. When\n           * we get incoming work from the user (via public API) or the network\n           * (incoming GRPC messages), we should always schedule onto this queue.\n           * This ensures all of our work is properly serialized (e.g. we don't\n           * start processing a new operation while the previous one is waiting for\n           * an async I/O to complete).\n           */\n        asyncQueue) {\n        this.platform = platform;\n        this.databaseInfo = databaseInfo;\n        this.credentials = credentials;\n        this.asyncQueue = asyncQueue;\n    }\n    /**\n     * Starts up the FirestoreClient, returning only whether or not enabling\n     * persistence succeeded.\n     *\n     * The intent here is to \"do the right thing\" as far as users are concerned.\n     * Namely, in cases where offline persistence is requested and possible,\n     * enable it, but otherwise fall back to persistence disabled. For the most\n     * part we expect this to succeed one way or the other so we don't expect our\n     * users to actually wait on the firestore.enablePersistence Promise since\n     * they generally won't care.\n     *\n     * Of course some users actually do care about whether or not persistence\n     * was successfully enabled, so the Promise returned from this method\n     * indicates this outcome.\n     *\n     * This presents a problem though: even before enablePersistence resolves or\n     * rejects, users may have made calls to e.g. firestore.collection() which\n     * means that the FirestoreClient in there will be available and will be\n     * enqueuing actions on the async queue.\n     *\n     * Meanwhile any failure of an operation on the async queue causes it to\n     * panic and reject any further work, on the premise that unhandled errors\n     * are fatal.\n     *\n     * Consequently the fallback is handled internally here in start, and if the\n     * fallback succeeds we signal success to the async queue even though the\n     * start() itself signals failure.\n     *\n     * @param usePersistence Whether or not to attempt to enable persistence.\n     * @returns A deferred result indicating the user-visible result of enabling\n     *     offline persistence. This method will reject this if IndexedDB fails to\n     *     start for any reason. If usePersistence is false this is\n     *     unconditionally resolved.\n     */\n    FirestoreClient.prototype.start = function (usePersistence) {\n        var _this = this;\n        // We defer our initialization until we get the current user from\n        // setUserChangeListener(). We block the async queue until we got the\n        // initial user and the initialization is completed. This will prevent\n        // any scheduled work from happening before initialization is completed.\n        //\n        // If initializationDone resolved then the FirestoreClient is in a usable\n        // state.\n        var initializationDone = new Deferred();\n        // If usePersistence is true, certain classes of errors while starting are\n        // recoverable but only by falling back to persistence disabled.\n        //\n        // If there's an error in the first case but not in recovery we cannot\n        // reject the promise blocking the async queue because this will cause the\n        // async queue to panic.\n        var persistenceResult = new Deferred();\n        var initialized = false;\n        this.credentials.setUserChangeListener(function (user) {\n            if (!initialized) {\n                initialized = true;\n                _this.initializePersistence(usePersistence, persistenceResult)\n                    .then(function () { return _this.initializeRest(user); })\n                    .then(initializationDone.resolve, initializationDone.reject);\n            }\n            else {\n                _this.asyncQueue.schedule(function () {\n                    return _this.handleUserChange(user);\n                });\n            }\n        });\n        // Block the async queue until initialization is done\n        this.asyncQueue.schedule(function () {\n            return initializationDone.promise;\n        });\n        // Return only the result of enabling persistence. Note that this does not\n        // need to await the completion of initializationDone because the result of\n        // this method should not reflect any other kind of failure to start.\n        return persistenceResult.promise;\n    };\n    /** Enables the network connection and requeues all pending operations. */\n    FirestoreClient.prototype.enableNetwork = function () {\n        var _this = this;\n        return this.asyncQueue.schedule(function () {\n            return _this.remoteStore.enableNetwork();\n        });\n    };\n    /**\n     * Initializes persistent storage, attempting to use IndexedDB if\n     * usePersistence is true or memory-only if false.\n     *\n     * If IndexedDB fails because it's already open in another tab or because the\n     * platform can't possibly support our implementation then this method rejects\n     * the persistenceResult and falls back on memory-only persistence.\n     *\n     * @param usePersistence indicates whether or not to use offline persistence\n     * @param persistenceResult A deferred result indicating the user-visible\n     *     result of enabling offline persistence. This method will reject this if\n     *     IndexedDB fails to start for any reason. If usePersistence is false\n     *     this is unconditionally resolved.\n     * @returns a Promise indicating whether or not initialization should\n     *     continue, i.e. that one of the persistence implementations actually\n     *     succeeded.\n     */\n    FirestoreClient.prototype.initializePersistence = function (usePersistence, persistenceResult) {\n        var _this = this;\n        if (usePersistence) {\n            return this.startIndexedDbPersistence()\n                .then(persistenceResult.resolve)\n                .catch(function (error) {\n                // Regardless of whether or not the retry succeeds, from an user\n                // perspective, offline persistence has failed.\n                persistenceResult.reject(error);\n                // An unknown failure on the first stage shuts everything down.\n                if (!_this.canFallback(error)) {\n                    return Promise.reject(error);\n                }\n                console.warn('Error enabling offline storage. Falling back to' +\n                    ' storage disabled: ' +\n                    error);\n                return _this.startMemoryPersistence();\n            });\n        }\n        else {\n            // When usePersistence == false, enabling offline persistence is defined\n            // to unconditionally succeed. This allows start() to have the same\n            // signature for both cases, despite the fact that the returned promise\n            // is only used in the enablePersistence call.\n            persistenceResult.resolve();\n            return this.startMemoryPersistence();\n        }\n    };\n    FirestoreClient.prototype.canFallback = function (error) {\n        return (error.code === Code.FAILED_PRECONDITION ||\n            error.code === Code.UNIMPLEMENTED);\n    };\n    /**\n     * Starts IndexedDB-based persistence.\n     *\n     * @returns A promise indicating success or failure.\n     */\n    FirestoreClient.prototype.startIndexedDbPersistence = function () {\n        // TODO(http://b/33384523): For now we just disable garbage collection\n        // when persistence is enabled.\n        this.garbageCollector = new no_op_garbage_collector_NoOpGarbageCollector();\n        var storagePrefix = indexeddb_persistence_IndexedDbPersistence.buildStoragePrefix(this.databaseInfo);\n        // Opt to use proto3 JSON in case the platform doesn't support Uint8Array.\n        var serializer = new serializer_JsonProtoSerializer(this.databaseInfo.databaseId, {\n            useProto3Json: true\n        });\n        this.persistence = new indexeddb_persistence_IndexedDbPersistence(storagePrefix, serializer);\n        return this.persistence.start();\n    };\n    /**\n     * Starts Memory-backed persistence. In practice this cannot fail.\n     *\n     * @returns A promise that will successfully resolve.\n     */\n    FirestoreClient.prototype.startMemoryPersistence = function () {\n        this.garbageCollector = new eager_garbage_collector_EagerGarbageCollector();\n        this.persistence = new memory_persistence_MemoryPersistence();\n        return this.persistence.start();\n    };\n    /**\n     * Initializes the rest of the FirestoreClient, assuming the initial user\n     * has been obtained from the credential provider and some persistence\n     * implementation is available in this.persistence.\n     */\n    FirestoreClient.prototype.initializeRest = function (user) {\n        var _this = this;\n        return this.platform\n            .loadConnection(this.databaseInfo)\n            .then(function (connection) {\n            _this.localStore = new local_store_LocalStore(_this.persistence, user, _this.garbageCollector);\n            var serializer = _this.platform.newSerializer(_this.databaseInfo.databaseId);\n            var datastore = new datastore_Datastore(_this.databaseInfo, _this.asyncQueue, connection, _this.credentials, serializer);\n            var onlineStateChangedHandler = function (onlineState) {\n                _this.eventMgr.onOnlineStateChanged(onlineState);\n            };\n            _this.remoteStore = new remote_store_RemoteStore(_this.databaseInfo, _this.asyncQueue, _this.localStore, datastore, onlineStateChangedHandler);\n            _this.syncEngine = new sync_engine_SyncEngine(_this.localStore, _this.remoteStore, user);\n            // Setup wiring between sync engine and remote store\n            _this.remoteStore.syncEngine = _this.syncEngine;\n            _this.eventMgr = new event_manager_EventManager(_this.syncEngine);\n            // NOTE: RemoteStore depends on LocalStore (for persisting stream\n            // tokens, refilling mutation queue, etc.) so must be started after\n            // LocalStore.\n            return _this.localStore.start();\n        })\n            .then(function () {\n            return _this.remoteStore.start();\n        });\n    };\n    FirestoreClient.prototype.handleUserChange = function (user) {\n        this.asyncQueue.verifyOperationInProgress();\n        debug(firestore_client_LOG_TAG, 'User Changed: ' + user.uid);\n        return this.syncEngine.handleUserChange(user);\n    };\n    /** Disables the network connection. Pending operations will not complete. */\n    FirestoreClient.prototype.disableNetwork = function () {\n        var _this = this;\n        return this.asyncQueue.schedule(function () {\n            return _this.remoteStore.disableNetwork();\n        });\n    };\n    FirestoreClient.prototype.shutdown = function () {\n        var _this = this;\n        return this.asyncQueue\n            .schedule(function () {\n            _this.credentials.removeUserChangeListener();\n            return _this.remoteStore.shutdown();\n        })\n            .then(function () {\n            // PORTING NOTE: LocalStore does not need an explicit shutdown on web.\n            return _this.persistence.shutdown();\n        });\n    };\n    FirestoreClient.prototype.listen = function (query, observer, options) {\n        var _this = this;\n        var listener = new event_manager_QueryListener(query, observer, options);\n        this.asyncQueue.schedule(function () {\n            return _this.eventMgr.listen(listener);\n        });\n        return listener;\n    };\n    FirestoreClient.prototype.unlisten = function (listener) {\n        var _this = this;\n        this.asyncQueue.schedule(function () {\n            return _this.eventMgr.unlisten(listener);\n        });\n    };\n    FirestoreClient.prototype.write = function (mutations) {\n        var _this = this;\n        var deferred = new Deferred();\n        this.asyncQueue.schedule(function () { return _this.syncEngine.write(mutations, deferred); });\n        return deferred.promise;\n    };\n    FirestoreClient.prototype.databaseId = function () {\n        return this.databaseInfo.databaseId;\n    };\n    FirestoreClient.prototype.transaction = function (updateFunction) {\n        var _this = this;\n        // We have to wait for the async queue to be sure syncEngine is initialized.\n        return this.asyncQueue\n            .schedule(function () {\n            return Promise.resolve();\n        })\n            .then(function () {\n            return _this.syncEngine.runTransaction(updateFunction);\n        });\n    };\n    return FirestoreClient;\n}());\n\n\n//# sourceMappingURL=firestore_client.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/async_observer.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n * A wrapper implementation of Observer<T> that will dispatch events\n * asynchronously. To allow immediate silencing, a mute call is added which\n * causes events scheduled to no longer be raised.\n */\nvar AsyncObserver = /** @class */ (function () {\n    function AsyncObserver(observer) {\n        this.observer = observer;\n        /**\n         * When set to true, will not raise future events. Necessary to deal with\n         * async detachment of listener.\n         */\n        this.muted = false;\n    }\n    AsyncObserver.prototype.next = function (value) {\n        this.scheduleEvent(this.observer.next, value);\n    };\n    AsyncObserver.prototype.error = function (error) {\n        this.scheduleEvent(this.observer.error, error);\n    };\n    AsyncObserver.prototype.mute = function () {\n        this.muted = true;\n    };\n    AsyncObserver.prototype.scheduleEvent = function (eventHandler, event) {\n        var _this = this;\n        if (!this.muted) {\n            setTimeout(function () {\n                if (!_this.muted) {\n                    eventHandler(event);\n                }\n            }, 0);\n        }\n    };\n    return AsyncObserver;\n}());\n\n\n//# sourceMappingURL=async_observer.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/async_queue.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar async_queue_AsyncQueue = /** @class */ (function () {\n    function AsyncQueue() {\n        // The last promise in the queue.\n        this.tail = Promise.resolve();\n        // The number of ops that are queued to be run in the future (i.e. they had a\n        // delay that has not yet elapsed).\n        this.delayedOpCount = 0;\n        // Flag set while there's an outstanding AsyncQueue operation, used for\n        // assertion sanity-checks.\n        this.operationInProgress = false;\n    }\n    /**\n     * Adds a new operation to the queue. Returns a promise that will be resolved\n     * when the promise returned by the new operation is (with its value).\n     *\n     * Can optionally specify a delay to wait before queuing the operation.\n     */\n    AsyncQueue.prototype.schedule = function (op, delay) {\n        var _this = this;\n        if (this.failure) {\n            fail('AsyncQueue is already failed: ' + this.failure.message);\n        }\n        if ((delay || 0) > 0) {\n            this.delayedOpCount++;\n            var deferred_1 = new Deferred();\n            setTimeout(function () {\n                _this.scheduleInternal(function () {\n                    return op().then(function (result) {\n                        deferred_1.resolve(result);\n                    });\n                });\n                _this.delayedOpCount--; // decrement once it's actually queued.\n            }, delay);\n            return deferred_1.promise;\n        }\n        else {\n            return this.scheduleInternal(op);\n        }\n    };\n    AsyncQueue.prototype.scheduleInternal = function (op) {\n        var _this = this;\n        this.tail = this.tail.then(function () {\n            _this.operationInProgress = true;\n            return op()\n                .catch(function (error) {\n                _this.failure = error;\n                _this.operationInProgress = false;\n                log_error('INTERNAL UNHANDLED ERROR: ', error.stack || error.message);\n                throw error;\n            })\n                .then(function () {\n                _this.operationInProgress = false;\n            });\n        });\n        return this.tail;\n    };\n    /**\n     * Verifies there's an operation currently in-progress on the AsyncQueue.\n     * Unfortunately we can't verify that the running code is in the promise chain\n     * of that operation, so this isn't a foolproof check, but it should be enough\n     * to catch some bugs.\n     */\n    AsyncQueue.prototype.verifyOperationInProgress = function () {\n        assert(this.operationInProgress, 'verifyOpInProgress() called when no op in progress on this queue.');\n    };\n    AsyncQueue.prototype.drain = function () {\n        // TODO(mikelehen): This should perhaps also drain items that are queued to\n        // run in the future (perhaps by artificially running them early), but since\n        // no tests need that yet, I didn't bother for now.\n        assert(this.delayedOpCount === 0, \"draining doesn't handle delayed ops.\");\n        return this.schedule(function () { return Promise.resolve(undefined); });\n    };\n    return AsyncQueue;\n}());\n\n\n//# sourceMappingURL=async_queue.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/auth/user.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nvar User = /** @class */ (function () {\n    function User(uid) {\n        this.uid = uid;\n    }\n    User.prototype.isUnauthenticated = function () {\n        return this.uid == null;\n    };\n    /**\n     * Returns a key representing this user, suitable for inclusion in a\n     * dictionary.\n     */\n    User.prototype.toKey = function () {\n        if (this.isUnauthenticated()) {\n            return 'anonymous-user';\n        }\n        else {\n            return 'uid:' + this.uid;\n        }\n    };\n    User.prototype.equals = function (otherUser) {\n        return otherUser.uid === this.uid;\n    };\n    /** A user with a null UID. */\n    User.UNAUTHENTICATED = new User(null);\n    // TODO(mikelehen): Look into getting a proper uid-equivalent for\n    // non-FirebaseAuth providers.\n    User.GOOGLE_CREDENTIALS = new User('google-credentials-uid');\n    User.FIRST_PARTY = new User('first-party-uid');\n    return User;\n}());\n\n\n//# sourceMappingURL=user.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/credentials.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar OAuthToken = /** @class */ (function () {\n    function OAuthToken(value, user) {\n        this.user = user;\n        this.type = 'OAuth';\n        this.authHeaders = { Authorization: \"Bearer \" + value };\n    }\n    return OAuthToken;\n}());\n\n/** A CredentialsProvider that always yields an empty token. */\nvar credentials_EmptyCredentialsProvider = /** @class */ (function () {\n    function EmptyCredentialsProvider() {\n        /**\n         * Stores the User listener registered with setUserChangeListener()\n         * This isn't actually necessary since the UID never changes, but we use this\n         * to verify the listen contract is adhered to in tests.\n         */\n        this.userListener = null;\n    }\n    EmptyCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        return Promise.resolve(null);\n    };\n    EmptyCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        assert(!this.userListener, 'Can only call setUserChangeListener() once.');\n        this.userListener = listener;\n        // Fire with initial user.\n        listener(User.UNAUTHENTICATED);\n    };\n    EmptyCredentialsProvider.prototype.removeUserChangeListener = function () {\n        assert(this.userListener !== null, 'removeUserChangeListener() when no listener registered');\n        this.userListener = null;\n    };\n    return EmptyCredentialsProvider;\n}());\n\nvar credentials_FirebaseCredentialsProvider = /** @class */ (function () {\n    function FirebaseCredentialsProvider(app) {\n        var _this = this;\n        this.app = app;\n        /**\n         * The auth token listener registered with FirebaseApp, retained here so we\n         * can unregister it.\n         */\n        this.tokenListener = null;\n        /**\n         * Counter used to detect if the user changed while a getToken request was\n         * outstanding.\n         */\n        this.userCounter = 0;\n        /** The User listener registered with setUserChangeListener(). */\n        this.userListener = null;\n        // We listen for token changes but all we really care about is knowing when\n        // the uid may have changed.\n        this.tokenListener = function () {\n            var newUser = _this.getUser();\n            if (!_this.currentUser || !newUser.equals(_this.currentUser)) {\n                _this.currentUser = newUser;\n                _this.userCounter++;\n                if (_this.userListener) {\n                    _this.userListener(_this.currentUser);\n                }\n            }\n        };\n        this.userCounter = 0;\n        // Will fire at least once where we set this.currentUser\n        this.app.INTERNAL.addAuthTokenListener(this.tokenListener);\n    }\n    FirebaseCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        var _this = this;\n        assert(this.tokenListener != null, 'getToken cannot be called after listener removed.');\n        // Take note of the current value of the userCounter so that this method can\n        // fail (with an ABORTED error) if there is a user change while the request\n        // is outstanding.\n        var initialUserCounter = this.userCounter;\n        return this.app.INTERNAL.getToken(forceRefresh).then(function (tokenData) {\n            // Cancel the request since the user changed while the request was\n            // outstanding so the response is likely for a previous user (which\n            // user, we can't be sure).\n            if (_this.userCounter !== initialUserCounter) {\n                throw new FirestoreError(Code.ABORTED, 'getToken aborted due to uid change.');\n            }\n            else {\n                if (tokenData) {\n                    assert(typeof tokenData.accessToken === 'string', 'Invalid tokenData returned from getToken():' + tokenData);\n                    return new OAuthToken(tokenData.accessToken, _this.currentUser);\n                }\n                else {\n                    return null;\n                }\n            }\n        });\n    };\n    FirebaseCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        assert(!this.userListener, 'Can only call setUserChangeListener() once.');\n        this.userListener = listener;\n        // Fire the initial event, but only if we received the initial user\n        if (this.currentUser) {\n            listener(this.currentUser);\n        }\n    };\n    FirebaseCredentialsProvider.prototype.removeUserChangeListener = function () {\n        assert(this.tokenListener != null, 'removeUserChangeListener() called twice');\n        assert(this.userListener !== null, 'removeUserChangeListener() called when no listener registered');\n        this.app.INTERNAL.removeAuthTokenListener(this.tokenListener);\n        this.tokenListener = null;\n        this.userListener = null;\n    };\n    FirebaseCredentialsProvider.prototype.getUser = function () {\n        // TODO(mikelehen): Remove this check once we're shipping with firebase.js.\n        if (typeof this.app.INTERNAL.getUid !== 'function') {\n            fail('This version of the Firestore SDK requires at least version' +\n                ' 3.7.0 of firebase.js.');\n        }\n        var currentUid = this.app.INTERNAL.getUid();\n        assert(currentUid === null || typeof currentUid === 'string', 'Received invalid UID: ' + currentUid);\n        return new User(currentUid);\n    };\n    return FirebaseCredentialsProvider;\n}());\n\n// Wrap a google-auth-library client as a CredentialsProvider.\n// NOTE: grpc-connection can natively accept a google-auth-library\n// client via createFromGoogleCredential(), but we opt to plumb the tokens\n// through our CredentialsProvider interface, at least for now.\nvar credentials_GoogleCredentialsProvider = /** @class */ (function () {\n    function GoogleCredentialsProvider(authClient) {\n        this.authClient = authClient;\n    }\n    GoogleCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            // TODO(b/32935141): ideally this would be declared as an extern\n            _this.authClient['getAccessToken'](function (error, tokenLiteral) {\n                if (error) {\n                    reject(error);\n                }\n                else {\n                    resolve(new OAuthToken(tokenLiteral, User.GOOGLE_CREDENTIALS));\n                }\n            });\n        });\n    };\n    // NOTE: A google-auth-library client represents an immutable \"user\", so\n    // once we fire the initial event, it'll never change.\n    GoogleCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        // Fire with initial uid.\n        listener(User.GOOGLE_CREDENTIALS);\n    };\n    GoogleCredentialsProvider.prototype.removeUserChangeListener = function () { };\n    return GoogleCredentialsProvider;\n}());\n\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * TODO(b/33147818) this implementation violates the current assumption that\n * tokens are immutable.  We need to either revisit this assumption or come\n * up with some way for FPA to use the listen/unlisten interface.\n */\nvar credentials_FirstPartyToken = /** @class */ (function () {\n    function FirstPartyToken(gapi, sessionIndex) {\n        this.gapi = gapi;\n        this.sessionIndex = sessionIndex;\n        this.type = 'FirstParty';\n        this.user = User.FIRST_PARTY;\n        assert(this.gapi &&\n            this.gapi['auth'] &&\n            this.gapi['auth']['getAuthHeaderValueForFirstParty'], 'unexpected gapi interface');\n    }\n    Object.defineProperty(FirstPartyToken.prototype, \"authHeaders\", {\n        get: function () {\n            return {\n                Authorization: this.gapi['auth']['getAuthHeaderValueForFirstParty']([]),\n                'X-Goog-AuthUser': this.sessionIndex\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FirstPartyToken;\n}());\n\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */\nvar credentials_FirstPartyCredentialsProvider = /** @class */ (function () {\n    function FirstPartyCredentialsProvider(gapi, sessionIndex) {\n        this.gapi = gapi;\n        this.sessionIndex = sessionIndex;\n        assert(this.gapi &&\n            this.gapi['auth'] &&\n            this.gapi['auth']['getAuthHeaderValueForFirstParty'], 'unexpected gapi interface');\n    }\n    FirstPartyCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        return Promise.resolve(new credentials_FirstPartyToken(this.gapi, this.sessionIndex));\n    };\n    // TODO(33108925): can someone switch users w/o a page refresh?\n    // TODO(33110621): need to understand token/session lifecycle\n    FirstPartyCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        // Fire with initial uid.\n        listener(User.FIRST_PARTY);\n    };\n    FirstPartyCredentialsProvider.prototype.removeUserChangeListener = function () { };\n    return FirstPartyCredentialsProvider;\n}());\n\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\nfunction makeCredentialsProvider(credentials) {\n    if (!credentials) {\n        return new credentials_EmptyCredentialsProvider();\n    }\n    switch (credentials.type) {\n        case 'google-auth':\n            return new credentials_GoogleCredentialsProvider(credentials.client);\n        case 'gapi':\n            return new credentials_FirstPartyCredentialsProvider(credentials.client, credentials.sessionIndex || '0');\n        case 'provider':\n            return credentials.client;\n        default:\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'makeCredentialsProvider failed due to invalid credential type');\n    }\n}\n\n//# sourceMappingURL=credentials.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/observer.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction isPartialObserver(obj) {\n    return implementsAnyMethods(obj, ['next', 'error', 'complete']);\n}\n/**\n * Returns true if obj is an object and contains at least one of the specified\n * methods.\n */\nfunction implementsAnyMethods(obj, methods) {\n    if (typeof obj !== 'object' || obj === null) {\n        return false;\n    }\n    var object = obj;\n    for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {\n        var method = methods_1[_i];\n        if (method in object && typeof object[method] === 'function') {\n            return true;\n        }\n    }\n    return false;\n}\n\n//# sourceMappingURL=observer.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/field_value.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar api_field_value___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n/**\n * An opaque base class for FieldValue sentinel objects in our public API,\n * with public static methods for creating said sentinel objects.\n */\n// tslint:disable-next-line:class-as-namespace  We use this as a base class.\nvar FieldValueImpl = /** @class */ (function () {\n    function FieldValueImpl() {\n    }\n    FieldValueImpl.delete = function () {\n        return DeleteFieldValueImpl.instance;\n    };\n    FieldValueImpl.serverTimestamp = function () {\n        return ServerTimestampFieldValueImpl.instance;\n    };\n    return FieldValueImpl;\n}());\n\nvar DeleteFieldValueImpl = /** @class */ (function (_super) {\n    api_field_value___extends(DeleteFieldValueImpl, _super);\n    function DeleteFieldValueImpl() {\n        return _super.call(this) || this;\n    }\n    /** Singleton instance. */\n    DeleteFieldValueImpl.instance = new DeleteFieldValueImpl();\n    return DeleteFieldValueImpl;\n}(FieldValueImpl));\n\nvar ServerTimestampFieldValueImpl = /** @class */ (function (_super) {\n    api_field_value___extends(ServerTimestampFieldValueImpl, _super);\n    function ServerTimestampFieldValueImpl() {\n        return _super.call(this) || this;\n    }\n    /** Singleton instance. */\n    ServerTimestampFieldValueImpl.instance = new ServerTimestampFieldValueImpl();\n    return ServerTimestampFieldValueImpl;\n}(FieldValueImpl));\n\n// Public instance that disallows construction at runtime. This constructor is\n// used when exporting FieldValueImpl on firebase.firestore.FieldValue and will\n// be called FieldValue publicly. Internally we still use FieldValueImpl which\n// has a type-checked private constructor. Note that FieldValueImpl and\n// PublicFieldValue can be used interchangeably in instanceof checks.\n// For our internal TypeScript code PublicFieldValue doesn't exist as a type,\n// and so we need to use FieldValueImpl as type and export it too.\n// tslint:disable-next-line:variable-name  We treat this as a class name.\nvar PublicFieldValue = makeConstructorPrivate(FieldValueImpl, 'Use FieldValue.<field>() instead.');\n\n//# sourceMappingURL=field_value.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/user_data_converter.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar RESERVED_FIELD_REGEX = /^__.*__$/;\n/** The result of parsing document data (e.g. for a setData call). */\nvar user_data_converter_ParsedSetData = /** @class */ (function () {\n    function ParsedSetData(data, fieldMask, fieldTransforms) {\n        this.data = data;\n        this.fieldMask = fieldMask;\n        this.fieldTransforms = fieldTransforms;\n    }\n    ParsedSetData.prototype.toMutations = function (key, precondition) {\n        var mutations = [];\n        if (this.fieldMask !== null) {\n            mutations.push(new mutation_PatchMutation(key, this.data, this.fieldMask, precondition));\n        }\n        else {\n            mutations.push(new mutation_SetMutation(key, this.data, precondition));\n        }\n        if (this.fieldTransforms.length > 0) {\n            mutations.push(new mutation_TransformMutation(key, this.fieldTransforms));\n        }\n        return mutations;\n    };\n    return ParsedSetData;\n}());\n\n/** The result of parsing \"update\" data (i.e. for an updateData call). */\nvar user_data_converter_ParsedUpdateData = /** @class */ (function () {\n    function ParsedUpdateData(data, fieldMask, fieldTransforms) {\n        this.data = data;\n        this.fieldMask = fieldMask;\n        this.fieldTransforms = fieldTransforms;\n    }\n    ParsedUpdateData.prototype.toMutations = function (key, precondition) {\n        var mutations = [\n            new mutation_PatchMutation(key, this.data, this.fieldMask, precondition)\n        ];\n        if (this.fieldTransforms.length > 0) {\n            mutations.push(new mutation_TransformMutation(key, this.fieldTransforms));\n        }\n        return mutations;\n    };\n    return ParsedUpdateData;\n}());\n\n/*\n * Represents what type of API method provided the data being parsed; useful\n * for determining which error conditions apply during parsing and providing\n * better error messages.\n */\nvar UserDataSource;\n(function (UserDataSource) {\n    UserDataSource[UserDataSource[\"Set\"] = 0] = \"Set\";\n    UserDataSource[UserDataSource[\"Update\"] = 1] = \"Update\";\n    UserDataSource[UserDataSource[\"QueryValue\"] = 2] = \"QueryValue\"; // from a where clause or cursor bound\n})(UserDataSource || (UserDataSource = {}));\n/** A \"context\" object passed around while parsing user data. */\nvar user_data_converter_ParseContext = /** @class */ (function () {\n    /**\n     * Initializes a ParseContext with the given source and path.\n     *\n     * @param dataSource Indicates what kind of API method this data came from.\n     * @param methodName The name of the method the user called to create this\n     *     ParseContext.\n     * @param path A path within the object being parsed. This could be an empty\n     *     path (in which case the context represents the root of the data being\n     *     parsed), or a nonempty path (indicating the context represents a nested\n     *     location within the data).\n     * @param arrayElement Whether or not this context corresponds to an element\n     *     of an array.\n     * @param fieldTransforms A mutable list of field transforms encountered while\n     *     parsing the data.\n     * @param fieldMask A mutable list of field paths encountered while parsing\n     *     the data.\n     *\n     * TODO(b/34871131): We don't support array paths right now, so path can be\n     * null to indicate the context represents any location within an array (in\n     * which case certain features will not work and errors will be somewhat\n     * compromised).\n     */\n    function ParseContext(dataSource, methodName, path, arrayElement, fieldTransforms, fieldMask) {\n        this.dataSource = dataSource;\n        this.methodName = methodName;\n        this.path = path;\n        this.arrayElement = arrayElement;\n        // Minor hack: If fieldTransforms is undefined, we assume this is an\n        // external call and we need to validate the entire path.\n        if (fieldTransforms === undefined) {\n            this.validatePath();\n        }\n        this.arrayElement = arrayElement !== undefined ? arrayElement : false;\n        this.fieldTransforms = fieldTransforms || [];\n        this.fieldMask = fieldMask || [];\n    }\n    ParseContext.prototype.childContextForField = function (field) {\n        var childPath = this.path == null ? null : this.path.child(field);\n        var context = new ParseContext(this.dataSource, this.methodName, childPath, \n        /*arrayElement=*/ false, this.fieldTransforms, this.fieldMask);\n        context.validatePathSegment(field);\n        return context;\n    };\n    ParseContext.prototype.childContextForFieldPath = function (field) {\n        var childPath = this.path == null ? null : this.path.child(field);\n        var context = new ParseContext(this.dataSource, this.methodName, childPath, \n        /*arrayElement=*/ false, this.fieldTransforms, this.fieldMask);\n        context.validatePath();\n        return context;\n    };\n    ParseContext.prototype.childContextForArray = function (index) {\n        // TODO(b/34871131): We don't support array paths right now; so make path\n        // null.\n        return new ParseContext(this.dataSource, this.methodName, \n        /*path=*/ null, \n        /*arrayElement=*/ true, this.fieldTransforms, this.fieldMask);\n    };\n    ParseContext.prototype.createError = function (reason) {\n        var fieldDescription = this.path === null || this.path.isEmpty()\n            ? ''\n            : \" (found in field \" + this.path.toString() + \")\";\n        return new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + this.methodName + \"() called with invalid data. \" +\n            reason +\n            fieldDescription);\n    };\n    ParseContext.prototype.validatePath = function () {\n        // TODO(b/34871131): Remove null check once we have proper paths for fields\n        // within arrays.\n        if (this.path === null) {\n            return;\n        }\n        for (var i = 0; i < this.path.length; i++) {\n            this.validatePathSegment(this.path.get(i));\n        }\n    };\n    ParseContext.prototype.validatePathSegment = function (segment) {\n        if (this.isWrite() && RESERVED_FIELD_REGEX.test(segment)) {\n            throw this.createError('Document fields cannot begin and end with __');\n        }\n    };\n    ParseContext.prototype.isWrite = function () {\n        return (this.dataSource === UserDataSource.Set ||\n            this.dataSource === UserDataSource.Update);\n    };\n    return ParseContext;\n}());\n/**\n * A placeholder object for DocumentReferences in this file, in order to\n * avoid a circular dependency. See the comments for `DataPreConverter` for\n * the full context.\n */\nvar DocumentKeyReference = /** @class */ (function () {\n    function DocumentKeyReference(databaseId, key) {\n        this.databaseId = databaseId;\n        this.key = key;\n    }\n    return DocumentKeyReference;\n}());\n\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */\nvar user_data_converter_UserDataConverter = /** @class */ (function () {\n    function UserDataConverter(preConverter) {\n        this.preConverter = preConverter;\n    }\n    /** Parse document data (e.g. from a set() call). */\n    UserDataConverter.prototype.parseSetData = function (methodName, input, options) {\n        var _this = this;\n        var context = new user_data_converter_ParseContext(UserDataSource.Set, methodName, path_FieldPath.EMPTY_PATH);\n        validatePlainObject('Data must be an object, but it was:', context, input);\n        var merge = options.merge !== undefined ? options.merge : false;\n        var updateData = field_value_ObjectValue.EMPTY;\n        forEach(input, function (key, value) {\n            var path = new field_path_FieldPath(key)._internalPath;\n            var childContext = context.childContextForFieldPath(path);\n            value = _this.runPreConverter(value, childContext);\n            var parsedValue = _this.parseData(value, childContext);\n            if (parsedValue) {\n                updateData = updateData.set(path, parsedValue);\n            }\n        });\n        var fieldMask = merge ? new mutation_FieldMask(context.fieldMask) : null;\n        return new user_data_converter_ParsedSetData(updateData, fieldMask, context.fieldTransforms);\n    };\n    /** Parse update data (e.g. from an update() call). */\n    UserDataConverter.prototype.parseUpdateData = function (methodName, input) {\n        var _this = this;\n        var context = new user_data_converter_ParseContext(UserDataSource.Update, methodName, path_FieldPath.EMPTY_PATH);\n        validatePlainObject('Data must be an object, but it was:', context, input);\n        var fieldMaskPaths = [];\n        var updateData = field_value_ObjectValue.EMPTY;\n        forEach(input, function (key, value) {\n            var path = fieldPathFromDotSeparatedString(methodName, key);\n            var childContext = context.childContextForFieldPath(path);\n            value = _this.runPreConverter(value, childContext);\n            if (value instanceof DeleteFieldValueImpl) {\n                // Add it to the field mask, but don't add anything to updateData.\n                fieldMaskPaths.push(path);\n            }\n            else {\n                var parsedValue = _this.parseData(value, childContext);\n                if (parsedValue != null) {\n                    fieldMaskPaths.push(path);\n                    updateData = updateData.set(path, parsedValue);\n                }\n            }\n        });\n        var mask = new mutation_FieldMask(fieldMaskPaths);\n        return new user_data_converter_ParsedUpdateData(updateData, mask, context.fieldTransforms);\n    };\n    /** Parse update data from a list of field/value arguments. */\n    UserDataConverter.prototype.parseUpdateVarargs = function (methodName, field, value, moreFieldsAndValues) {\n        var context = new user_data_converter_ParseContext(UserDataSource.Update, methodName, path_FieldPath.EMPTY_PATH);\n        var keys = [fieldPathFromArgument(methodName, field)];\n        var values = [value];\n        if (moreFieldsAndValues.length % 2 !== 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + methodName + \"() needs to be called with an even number \" +\n                'of arguments that alternate between field names and values.');\n        }\n        for (var i = 0; i < moreFieldsAndValues.length; i += 2) {\n            keys.push(fieldPathFromArgument(methodName, moreFieldsAndValues[i]));\n            values.push(moreFieldsAndValues[i + 1]);\n        }\n        var fieldMaskPaths = [];\n        var updateData = field_value_ObjectValue.EMPTY;\n        for (var i = 0; i < keys.length; ++i) {\n            var path = keys[i];\n            var childContext = context.childContextForFieldPath(path);\n            var value_1 = this.runPreConverter(values[i], childContext);\n            if (value_1 instanceof DeleteFieldValueImpl) {\n                // Add it to the field mask, but don't add anything to updateData.\n                fieldMaskPaths.push(path);\n            }\n            else {\n                var parsedValue = this.parseData(value_1, childContext);\n                if (parsedValue != null) {\n                    fieldMaskPaths.push(path);\n                    updateData = updateData.set(path, parsedValue);\n                }\n            }\n        }\n        var mask = new mutation_FieldMask(fieldMaskPaths);\n        return new user_data_converter_ParsedUpdateData(updateData, mask, context.fieldTransforms);\n    };\n    /**\n     * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n     * bound).\n     */\n    UserDataConverter.prototype.parseQueryValue = function (methodName, input) {\n        var context = new user_data_converter_ParseContext(UserDataSource.QueryValue, methodName, path_FieldPath.EMPTY_PATH);\n        var parsed = this.parseData(input, context);\n        assert(parsed != null, 'Parsed data should not be null.');\n        assert(context.fieldTransforms.length === 0, 'Field transforms should have been disallowed.');\n        return parsed;\n    };\n    /** Sends data through this.preConverter, handling any thrown errors. */\n    UserDataConverter.prototype.runPreConverter = function (input, context) {\n        try {\n            return this.preConverter(input);\n        }\n        catch (e) {\n            var message = errorMessage(e);\n            throw context.createError(message);\n        }\n    };\n    /**\n     * Internal helper for parsing user data.\n     *\n     * @param input Data to be parsed.\n     * @param context A context object representing the current path being parsed,\n     * the source of the data being parsed, etc.\n     * @return The parsed value, or null if the value was a FieldValue sentinel\n     * that should not be included in the resulting parsed data.\n     */\n    UserDataConverter.prototype.parseData = function (input, context) {\n        input = this.runPreConverter(input, context);\n        if (input instanceof Array) {\n            // TODO(b/34871131): Include the path containing the array in the error\n            // message.\n            if (context.arrayElement) {\n                throw context.createError('Nested arrays are not supported');\n            }\n            // If context.path is null we are already inside an array and we don't\n            // support field mask paths more granular than the top-level array.\n            if (context.path) {\n                context.fieldMask.push(context.path);\n            }\n            return this.parseArray(input, context);\n        }\n        else if (looksLikeJsonObject(input)) {\n            validatePlainObject('Unsupported field value:', context, input);\n            return this.parseObject(input, context);\n        }\n        else {\n            // If context.path is null, we are inside an array and we should have\n            // already added the root of the array to the field mask.\n            if (context.path) {\n                context.fieldMask.push(context.path);\n            }\n            return this.parseScalarValue(input, context);\n        }\n    };\n    UserDataConverter.prototype.parseArray = function (array, context) {\n        var result = [];\n        var entryIndex = 0;\n        for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n            var entry = array_1[_i];\n            var parsedEntry = this.parseData(entry, context.childContextForArray(entryIndex));\n            if (parsedEntry == null) {\n                // Just include nulls in the array for fields being replaced with a\n                // sentinel.\n                parsedEntry = NullValue.INSTANCE;\n            }\n            result.push(parsedEntry);\n            entryIndex++;\n        }\n        return new field_value_ArrayValue(result);\n    };\n    UserDataConverter.prototype.parseObject = function (obj, context) {\n        var _this = this;\n        var result = new sorted_map_SortedMap(primitiveComparator);\n        forEach(obj, function (key, val) {\n            var parsedValue = _this.parseData(val, context.childContextForField(key));\n            if (parsedValue != null) {\n                result = result.insert(key, parsedValue);\n            }\n        });\n        return new field_value_ObjectValue(result);\n    };\n    /**\n     * Helper to parse a scalar value (i.e. not an Object or Array)\n     *\n     * @return The parsed value, or null if the value was a FieldValue sentinel\n     * that should not be included in the resulting parsed data.\n     */\n    UserDataConverter.prototype.parseScalarValue = function (value, context) {\n        if (value === null) {\n            return NullValue.INSTANCE;\n        }\n        else if (typeof value === 'number') {\n            if (isSafeInteger(value)) {\n                return new IntegerValue(value);\n            }\n            else {\n                return new DoubleValue(value);\n            }\n        }\n        else if (typeof value === 'boolean') {\n            return field_value_BooleanValue.of(value);\n        }\n        else if (typeof value === 'string') {\n            return new field_value_StringValue(value);\n        }\n        else if (value instanceof Date) {\n            return new TimestampValue(timestamp_Timestamp.fromDate(value));\n        }\n        else if (value instanceof geo_point_GeoPoint) {\n            return new GeoPointValue(value);\n        }\n        else if (value instanceof blob_Blob) {\n            return new BlobValue(value);\n        }\n        else if (value instanceof DocumentKeyReference) {\n            return new field_value_RefValue(value.databaseId, value.key);\n        }\n        else if (value instanceof FieldValueImpl) {\n            if (value instanceof DeleteFieldValueImpl) {\n                // We shouldn't encounter delete sentinels here. Provide a good error.\n                if (context.dataSource !== UserDataSource.Update) {\n                    throw context.createError('FieldValue.delete() can only be used with update()');\n                }\n                else {\n                    assert(context.path == null || context.path.length > 0, 'FieldValue.delete() at the top level should have already' +\n                        ' been handled.');\n                    throw context.createError('FieldValue.delete() can only appear at the top level ' +\n                        'of your update data');\n                }\n            }\n            else if (value instanceof ServerTimestampFieldValueImpl) {\n                if (context.dataSource !== UserDataSource.Set &&\n                    context.dataSource !== UserDataSource.Update) {\n                    throw context.createError('FieldValue.serverTimestamp() can only be used with set()' +\n                        ' and update()');\n                }\n                if (context.path === null) {\n                    throw context.createError('FieldValue.serverTimestamp() is not currently' +\n                        ' supported inside arrays');\n                }\n                context.fieldTransforms.push(new FieldTransform(context.path, ServerTimestampTransform.instance));\n                // Return null so this value is omitted from the parsed result.\n                return null;\n            }\n            else {\n                return fail('Unknown FieldValue type: ' + value);\n            }\n        }\n        else {\n            throw context.createError(\"Unsupported field value: \" + valueDescription(value));\n        }\n    };\n    return UserDataConverter;\n}());\n\n/**\n * Checks whether an object looks like a JSON object that should be converted\n * into a struct. Normal class/prototype instances are considered to look like\n * JSON objects since they should be converted to a struct value. Arrays, Dates,\n * GeoPoints, etc. are not considered to look like JSON objects since they map\n * to specific FieldValue types other than ObjectValue.\n */\nfunction looksLikeJsonObject(input) {\n    return (typeof input === 'object' &&\n        input !== null &&\n        !(input instanceof Array) &&\n        !(input instanceof Date) &&\n        !(input instanceof geo_point_GeoPoint) &&\n        !(input instanceof blob_Blob) &&\n        !(input instanceof DocumentKeyReference) &&\n        !(input instanceof FieldValueImpl));\n}\nfunction validatePlainObject(message, context, input) {\n    if (!looksLikeJsonObject(input) || !isPlainObject(input)) {\n        var description = valueDescription(input);\n        if (description === 'an object') {\n            // Massage the error if it was an object.\n            throw context.createError(message + ' a custom object');\n        }\n        else {\n            throw context.createError(message + ' ' + description);\n        }\n    }\n}\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */\nfunction fieldPathFromArgument(methodName, path) {\n    if (path instanceof field_path_FieldPath) {\n        return path._internalPath;\n    }\n    else if (typeof path === 'string') {\n        return fieldPathFromDotSeparatedString(methodName, path);\n    }\n    else {\n        var message = 'Field path arguments must be of type string or FieldPath.';\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + methodName + \"() called with invalid data. \" + message);\n    }\n}\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName The publicly visible method name\n * @param path The dot-separated string form of a field path which will be split\n * on dots.\n */\nfunction fieldPathFromDotSeparatedString(methodName, path) {\n    try {\n        return fromDotSeparatedString(path)._internalPath;\n    }\n    catch (e) {\n        var message = errorMessage(e);\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + methodName + \"() called with invalid data. \" + message);\n    }\n}\n/**\n * Extracts the message from a caught exception, which should be an Error object\n * though JS doesn't guarantee that.\n */\nfunction errorMessage(error) {\n    return error instanceof Error ? error.message : error.toString();\n}\n\n//# sourceMappingURL=user_data_converter.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/database.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar database___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n// tslint:disable:strip-private-property-underscore\nvar DEFAULT_HOST = 'firestore.googleapis.com';\nvar DEFAULT_SSL = true;\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied firestore.Settings object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\nvar database_FirestoreSettings = /** @class */ (function () {\n    function FirestoreSettings(settings) {\n        if (settings.host === undefined) {\n            if (settings.ssl !== undefined) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Can't provide ssl option if host option is not set\");\n            }\n            this.host = DEFAULT_HOST;\n            this.ssl = DEFAULT_SSL;\n        }\n        else {\n            validateNamedType('settings', 'string', 'host', settings.host);\n            this.host = settings.host;\n            validateNamedOptionalType('settings', 'boolean', 'ssl', settings.ssl);\n            this.ssl = defaulted(settings.ssl, DEFAULT_SSL);\n        }\n        validateOptionNames('settings', settings, ['host', 'ssl', 'credentials']);\n        validateNamedOptionalType('settings', 'object', 'credentials', settings.credentials);\n        this.credentials = settings.credentials;\n    }\n    FirestoreSettings.prototype.equals = function (other) {\n        return (this.host === other.host &&\n            this.ssl === other.ssl &&\n            this.credentials === other.credentials);\n    };\n    return FirestoreSettings;\n}());\nvar FirestoreConfig = /** @class */ (function () {\n    function FirestoreConfig() {\n    }\n    return FirestoreConfig;\n}());\n/**\n * The root reference to the database.\n */\nvar database_Firestore = /** @class */ (function () {\n    function Firestore(databaseIdOrApp) {\n        var _this = this;\n        this.INTERNAL = {\n            delete: function () {\n                if (_this._firestoreClient) {\n                    return _this._firestoreClient.shutdown();\n                }\n                else {\n                    return Promise.resolve();\n                }\n            },\n            // Exposed via INTERNAL for use in tests.\n            disableNetwork: function () { return _this._firestoreClient.disableNetwork(); },\n            enableNetwork: function () { return _this._firestoreClient.enableNetwork(); }\n        };\n        var config = new FirestoreConfig();\n        if (typeof databaseIdOrApp.options === 'object') {\n            // This is very likely a Firebase app object\n            // TODO(b/34177605): Can we somehow use instanceof?\n            var app = databaseIdOrApp;\n            config.firebaseApp = app;\n            config.databaseId = Firestore.databaseIdFromApp(app);\n            config.persistenceKey = config.firebaseApp.name;\n            config.credentials = new credentials_FirebaseCredentialsProvider(app);\n        }\n        else {\n            var external_1 = databaseIdOrApp;\n            if (!external_1.projectId) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide projectId');\n            }\n            config.databaseId = new database_info_DatabaseId(external_1.projectId, external_1.database);\n            // Use a default persistenceKey that lines up with FirebaseApp.\n            config.persistenceKey = '[DEFAULT]';\n            config.credentials = new credentials_EmptyCredentialsProvider();\n        }\n        config.settings = new database_FirestoreSettings({});\n        this._config = config;\n        this._databaseId = config.databaseId;\n    }\n    Firestore.prototype.settings = function (settingsLiteral) {\n        validateExactNumberOfArgs('Firestore.settings', arguments, 1);\n        validateArgType('Firestore.settings', 'object', 1, settingsLiteral);\n        if (contains(settingsLiteral, 'persistence')) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, '\"persistence\" is now specified with a separate call to ' +\n                'firestore.enablePersistence().');\n        }\n        var newSettings = new database_FirestoreSettings(settingsLiteral);\n        if (this._firestoreClient && !this._config.settings.equals(newSettings)) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and its settings can no longer ' +\n                'be changed. You can only call settings() before calling any other ' +\n                'methods on a Firestore object.');\n        }\n        this._config.settings = newSettings;\n        if (newSettings.credentials !== undefined) {\n            this._config.credentials = makeCredentialsProvider(newSettings.credentials);\n        }\n    };\n    Firestore.prototype.enablePersistence = function () {\n        if (this._firestoreClient) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and persistence can no longer ' +\n                'be enabled. You can only call enablePersistence() before calling ' +\n                'any other methods on a Firestore object.');\n        }\n        return this.configureClient(/* persistence= */ true);\n    };\n    Firestore.prototype.ensureClientConfigured = function () {\n        if (!this._firestoreClient) {\n            this.configureClient(/* persistence= */ false);\n        }\n        return this._firestoreClient;\n    };\n    Firestore.prototype.configureClient = function (persistence) {\n        var _this = this;\n        assert(!!this._config.settings.host, 'FirestoreSettings.host cannot be falsey');\n        assert(!this._firestoreClient, 'configureClient() called multiple times');\n        var databaseInfo = new DatabaseInfo(this._config.databaseId, this._config.persistenceKey, this._config.settings.host, this._config.settings.ssl);\n        var preConverter = function (value) {\n            if (value instanceof database_DocumentReference) {\n                var thisDb = _this._config.databaseId;\n                var otherDb = value.firestore._config.databaseId;\n                if (!otherDb.equals(thisDb)) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Document reference is for database ' +\n                        (otherDb.projectId + \"/\" + otherDb.database + \" but should be \") +\n                        (\"for database \" + thisDb.projectId + \"/\" + thisDb.database));\n                }\n                return new DocumentKeyReference(_this._config.databaseId, value._key);\n            }\n            else {\n                return value;\n            }\n        };\n        this._dataConverter = new user_data_converter_UserDataConverter(preConverter);\n        this._firestoreClient = new firestore_client_FirestoreClient(platform_PlatformSupport.getPlatform(), databaseInfo, this._config.credentials, new async_queue_AsyncQueue());\n        return this._firestoreClient.start(persistence);\n    };\n    Firestore.databaseIdFromApp = function (app) {\n        var options = app.options;\n        if (!contains(options, 'projectId')) {\n            // TODO(b/62673263): We can safely remove the special handling of\n            // 'firestoreId' once alpha testers have upgraded.\n            if (contains(options, 'firestoreId')) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, '\"firestoreId\" is now specified as \"projectId\" in ' +\n                    'firebase.initializeApp.');\n            }\n            throw new FirestoreError(Code.INVALID_ARGUMENT, '\"projectId\" not provided in firebase.initializeApp.');\n        }\n        if (contains(options, 'firestoreOptions')) {\n            // TODO(b/62673263): We can safely remove the special handling of\n            // 'firestoreOptions' once alpha testers have upgraded.\n            throw new FirestoreError(Code.INVALID_ARGUMENT, '\"firestoreOptions\" values are now specified with ' +\n                'Firestore.settings()');\n        }\n        var projectId = options['projectId'];\n        if (!projectId || typeof projectId !== 'string') {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'projectId must be a string in FirebaseApp.options');\n        }\n        return new database_info_DatabaseId(projectId);\n    };\n    Object.defineProperty(Firestore.prototype, \"app\", {\n        get: function () {\n            if (!this._config.firebaseApp) {\n                throw new FirestoreError(Code.FAILED_PRECONDITION, \"Firestore was not initialized using the Firebase SDK. 'app' is \" +\n                    'not available');\n            }\n            return this._config.firebaseApp;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Firestore.prototype.collection = function (pathString) {\n        validateExactNumberOfArgs('Firestore.collection', arguments, 1);\n        validateArgType('Firestore.collection', 'string', 1, pathString);\n        if (!pathString) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty collection path to collection()');\n        }\n        this.ensureClientConfigured();\n        return new database_CollectionReference(path_ResourcePath.fromString(pathString), this);\n    };\n    Firestore.prototype.doc = function (pathString) {\n        validateExactNumberOfArgs('Firestore.doc', arguments, 1);\n        validateArgType('Firestore.doc', 'string', 1, pathString);\n        if (!pathString) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty document path to doc()');\n        }\n        this.ensureClientConfigured();\n        return database_DocumentReference.forPath(path_ResourcePath.fromString(pathString), this);\n    };\n    Firestore.prototype.runTransaction = function (updateFunction) {\n        var _this = this;\n        validateExactNumberOfArgs('Firestore.runTransaction', arguments, 1);\n        validateArgType('Firestore.runTransaction', 'function', 1, updateFunction);\n        return this.ensureClientConfigured().transaction(function (transaction) {\n            return updateFunction(new database_Transaction(_this, transaction));\n        });\n    };\n    Firestore.prototype.batch = function () {\n        this.ensureClientConfigured();\n        return new database_WriteBatch(this);\n    };\n    Object.defineProperty(Firestore, \"logLevel\", {\n        get: function () {\n            switch (getLogLevel()) {\n                case LogLevel.DEBUG:\n                    return 'debug';\n                case LogLevel.ERROR:\n                    return 'error';\n                case LogLevel.SILENT:\n                    return 'silent';\n                default:\n                    return fail('Unknown log level: ' + getLogLevel());\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Firestore.setLogLevel = function (level) {\n        validateExactNumberOfArgs('Firestore.setLogLevel', arguments, 1);\n        validateArgType('Firestore.setLogLevel', 'string', 1, level);\n        switch (level) {\n            case 'debug':\n                setLogLevel(LogLevel.DEBUG);\n                break;\n            case 'error':\n                setLogLevel(LogLevel.ERROR);\n                break;\n            case 'silent':\n                setLogLevel(LogLevel.SILENT);\n                break;\n            default:\n                throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid log level: ' + level);\n        }\n    };\n    return Firestore;\n}());\n\n/**\n * A reference to a transaction.\n */\nvar database_Transaction = /** @class */ (function () {\n    function Transaction(_firestore, _transaction) {\n        this._firestore = _firestore;\n        this._transaction = _transaction;\n    }\n    Transaction.prototype.get = function (documentRef) {\n        var _this = this;\n        validateExactNumberOfArgs('Transaction.get', arguments, 1);\n        var ref = validateReference('Transaction.get', documentRef, this._firestore);\n        return this._transaction\n            .lookup([ref._key])\n            .then(function (docs) {\n            if (!docs || docs.length !== 1) {\n                return fail('Mismatch in docs returned from document lookup.');\n            }\n            var doc = docs[0];\n            if (doc instanceof document_NoDocument) {\n                return new database_DocumentSnapshot(_this._firestore, ref._key, null, false);\n            }\n            return new database_DocumentSnapshot(_this._firestore, ref._key, doc, false);\n        });\n    };\n    Transaction.prototype.set = function (documentRef, value, options) {\n        validateBetweenNumberOfArgs('Transaction.set', arguments, 2, 3);\n        var ref = validateReference('Transaction.set', documentRef, this._firestore);\n        options = validateSetOptions('Transaction.set', options);\n        var parsed = this._firestore._dataConverter.parseSetData('Transaction.set', value, options);\n        this._transaction.set(ref._key, parsed);\n        return this;\n    };\n    Transaction.prototype.update = function (documentRef, fieldOrUpdateData, value) {\n        var moreFieldsAndValues = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            moreFieldsAndValues[_i - 3] = arguments[_i];\n        }\n        var ref;\n        var parsed;\n        if (typeof fieldOrUpdateData === 'string' ||\n            fieldOrUpdateData instanceof field_path_FieldPath) {\n            validateAtLeastNumberOfArgs('Transaction.update', arguments, 3);\n            ref = validateReference('Transaction.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateVarargs('Transaction.update', fieldOrUpdateData, value, moreFieldsAndValues);\n        }\n        else {\n            validateExactNumberOfArgs('Transaction.update', arguments, 2);\n            ref = validateReference('Transaction.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateData('Transaction.update', fieldOrUpdateData);\n        }\n        this._transaction.update(ref._key, parsed);\n        return this;\n    };\n    Transaction.prototype.delete = function (documentRef) {\n        validateExactNumberOfArgs('Transaction.delete', arguments, 1);\n        var ref = validateReference('Transaction.delete', documentRef, this._firestore);\n        this._transaction.delete(ref._key);\n        return this;\n    };\n    return Transaction;\n}());\n\nvar database_WriteBatch = /** @class */ (function () {\n    function WriteBatch(_firestore) {\n        this._firestore = _firestore;\n        this._mutations = [];\n        this._committed = false;\n    }\n    WriteBatch.prototype.set = function (documentRef, value, options) {\n        validateBetweenNumberOfArgs('WriteBatch.set', arguments, 2, 3);\n        this.verifyNotCommitted();\n        var ref = validateReference('WriteBatch.set', documentRef, this._firestore);\n        options = validateSetOptions('WriteBatch.set', options);\n        var parsed = this._firestore._dataConverter.parseSetData('WriteBatch.set', value, options);\n        this._mutations = this._mutations.concat(parsed.toMutations(ref._key, mutation_Precondition.NONE));\n        return this;\n    };\n    WriteBatch.prototype.update = function (documentRef, fieldOrUpdateData, value) {\n        var moreFieldsAndValues = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            moreFieldsAndValues[_i - 3] = arguments[_i];\n        }\n        this.verifyNotCommitted();\n        var ref;\n        var parsed;\n        if (typeof fieldOrUpdateData === 'string' ||\n            fieldOrUpdateData instanceof field_path_FieldPath) {\n            validateAtLeastNumberOfArgs('WriteBatch.update', arguments, 3);\n            ref = validateReference('WriteBatch.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateVarargs('WriteBatch.update', fieldOrUpdateData, value, moreFieldsAndValues);\n        }\n        else {\n            validateExactNumberOfArgs('WriteBatch.update', arguments, 2);\n            ref = validateReference('WriteBatch.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateData('WriteBatch.update', fieldOrUpdateData);\n        }\n        this._mutations = this._mutations.concat(parsed.toMutations(ref._key, mutation_Precondition.exists(true)));\n        return this;\n    };\n    WriteBatch.prototype.delete = function (documentRef) {\n        validateExactNumberOfArgs('WriteBatch.delete', arguments, 1);\n        this.verifyNotCommitted();\n        var ref = validateReference('WriteBatch.delete', documentRef, this._firestore);\n        this._mutations = this._mutations.concat(new mutation_DeleteMutation(ref._key, mutation_Precondition.NONE));\n        return this;\n    };\n    WriteBatch.prototype.commit = function () {\n        this.verifyNotCommitted();\n        this._committed = true;\n        if (this._mutations.length > 0) {\n            return this._firestore.ensureClientConfigured().write(this._mutations);\n        }\n        else {\n            return Promise.resolve();\n        }\n    };\n    WriteBatch.prototype.verifyNotCommitted = function () {\n        if (this._committed) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'A write batch can no longer be used after commit() ' +\n                'has been called.');\n        }\n    };\n    return WriteBatch;\n}());\n\n/**\n * A reference to a particular document in a collection in the database.\n */\nvar database_DocumentReference = /** @class */ (function () {\n    function DocumentReference(_key, firestore) {\n        this._key = _key;\n        this.firestore = firestore;\n        this._firestoreClient = this.firestore.ensureClientConfigured();\n    }\n    DocumentReference.forPath = function (path, firestore) {\n        if (path.length % 2 !== 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid document reference. Document ' +\n                'references must have an even number of segments, but ' +\n                (path.canonicalString() + \" has \" + path.length));\n        }\n        return new DocumentReference(new document_key_DocumentKey(path), firestore);\n    };\n    Object.defineProperty(DocumentReference.prototype, \"id\", {\n        get: function () {\n            return this._key.path.lastSegment();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentReference.prototype, \"parent\", {\n        get: function () {\n            return new database_CollectionReference(this._key.path.popLast(), this.firestore);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentReference.prototype, \"path\", {\n        get: function () {\n            return this._key.path.canonicalString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DocumentReference.prototype.collection = function (pathString) {\n        validateExactNumberOfArgs('DocumentReference.collection', arguments, 1);\n        validateArgType('DocumentReference.collection', 'string', 1, pathString);\n        if (!pathString) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty collection name to collection()');\n        }\n        var path = path_ResourcePath.fromString(pathString);\n        return new database_CollectionReference(this._key.path.child(path), this.firestore);\n    };\n    DocumentReference.prototype.isEqual = function (other) {\n        if (!(other instanceof DocumentReference)) {\n            throw invalidClassError('isEqual', 'DocumentReference', 1, other);\n        }\n        return this.firestore === other.firestore && this._key.equals(other._key);\n    };\n    DocumentReference.prototype.set = function (value, options) {\n        validateBetweenNumberOfArgs('DocumentReference.set', arguments, 1, 2);\n        options = validateSetOptions('DocumentReference.set', options);\n        var parsed = this.firestore._dataConverter.parseSetData('DocumentReference.set', value, options);\n        return this._firestoreClient.write(parsed.toMutations(this._key, mutation_Precondition.NONE));\n    };\n    DocumentReference.prototype.update = function (fieldOrUpdateData, value) {\n        var moreFieldsAndValues = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            moreFieldsAndValues[_i - 2] = arguments[_i];\n        }\n        var parsed;\n        if (typeof fieldOrUpdateData === 'string' ||\n            fieldOrUpdateData instanceof field_path_FieldPath) {\n            validateAtLeastNumberOfArgs('DocumentReference.update', arguments, 2);\n            parsed = this.firestore._dataConverter.parseUpdateVarargs('DocumentReference.update', fieldOrUpdateData, value, moreFieldsAndValues);\n        }\n        else {\n            validateExactNumberOfArgs('DocumentReference.update', arguments, 1);\n            parsed = this.firestore._dataConverter.parseUpdateData('DocumentReference.update', fieldOrUpdateData);\n        }\n        return this._firestoreClient.write(parsed.toMutations(this._key, mutation_Precondition.exists(true)));\n    };\n    DocumentReference.prototype.delete = function () {\n        validateExactNumberOfArgs('DocumentReference.delete', arguments, 0);\n        return this._firestoreClient.write([\n            new mutation_DeleteMutation(this._key, mutation_Precondition.NONE)\n        ]);\n    };\n    DocumentReference.prototype.onSnapshot = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        validateBetweenNumberOfArgs('DocumentReference.onSnapshot', arguments, 1, 4);\n        var options = {\n            includeMetadataChanges: false\n        };\n        var observer;\n        var currArg = 0;\n        if (typeof args[currArg] === 'object' &&\n            !isPartialObserver(args[currArg])) {\n            options = args[currArg];\n            validateOptionNames('DocumentReference.onSnapshot', options, [\n                'includeMetadataChanges'\n            ]);\n            validateNamedOptionalType('DocumentReference.onSnapshot', 'boolean', 'includeMetadataChanges', options.includeMetadataChanges);\n            currArg++;\n        }\n        var internalOptions = {\n            includeDocumentMetadataChanges: options.includeMetadataChanges,\n            includeQueryMetadataChanges: options.includeMetadataChanges\n        };\n        if (isPartialObserver(args[currArg])) {\n            observer = args[currArg];\n        }\n        else {\n            validateArgType('DocumentReference.onSnapshot', 'function', currArg, args[currArg]);\n            validateOptionalArgType('DocumentReference.onSnapshot', 'function', currArg + 1, args[currArg + 1]);\n            validateOptionalArgType('DocumentReference.onSnapshot', 'function', currArg + 2, args[currArg + 2]);\n            observer = {\n                next: args[currArg],\n                error: args[currArg + 1],\n                complete: args[currArg + 2]\n            };\n        }\n        return this.onSnapshotInternal(internalOptions, observer);\n    };\n    DocumentReference.prototype.onSnapshotInternal = function (options, observer) {\n        var _this = this;\n        var errHandler = function (err) {\n            console.error('Uncaught Error in onSnapshot:', err);\n        };\n        if (observer.error) {\n            errHandler = observer.error.bind(observer);\n        }\n        var asyncObserver = new AsyncObserver({\n            next: function (snapshot) {\n                if (observer.next) {\n                    assert(snapshot.docs.size <= 1, 'Too many documents returned on a document query');\n                    var doc = snapshot.docs.get(_this._key);\n                    observer.next(new database_DocumentSnapshot(_this.firestore, _this._key, doc, snapshot.fromCache));\n                }\n            },\n            error: errHandler\n        });\n        var internalListener = this._firestoreClient.listen(query_Query.atPath(this._key.path), asyncObserver, options);\n        return function () {\n            asyncObserver.mute();\n            _this._firestoreClient.unlisten(internalListener);\n        };\n    };\n    DocumentReference.prototype.get = function () {\n        var _this = this;\n        validateExactNumberOfArgs('DocumentReference.get', arguments, 0);\n        return new Promise(function (resolve, reject) {\n            var unlisten = _this.onSnapshotInternal({\n                includeQueryMetadataChanges: true,\n                includeDocumentMetadataChanges: true,\n                waitForSyncWhenOnline: true\n            }, {\n                next: function (snap) {\n                    // Remove query first before passing event to user to avoid\n                    // user actions affecting the now stale query.\n                    unlisten();\n                    if (!snap.exists && snap.metadata.fromCache) {\n                        // TODO(dimond): If we're online and the document doesn't\n                        // exist then we resolve with a doc.exists set to false. If\n                        // we're offline however, we reject the Promise in this\n                        // case. Two options: 1) Cache the negative response from\n                        // the server so we can deliver that even when you're\n                        // offline 2) Actually reject the Promise in the online case\n                        // if the document doesn't exist.\n                        reject(new FirestoreError(Code.ABORTED, 'Failed to get document because the client is ' + 'offline.'));\n                    }\n                    else {\n                        resolve(snap);\n                    }\n                },\n                error: reject\n            });\n        });\n    };\n    return DocumentReference;\n}());\n\nvar database_DocumentSnapshot = /** @class */ (function () {\n    function DocumentSnapshot(_firestore, _key, _document, _fromCache) {\n        this._firestore = _firestore;\n        this._key = _key;\n        this._document = _document;\n        this._fromCache = _fromCache;\n    }\n    DocumentSnapshot.prototype.data = function () {\n        validateExactNumberOfArgs('DocumentSnapshot.data', arguments, 0);\n        if (!this._document) {\n            throw new FirestoreError(Code.NOT_FOUND, \"This document doesn't exist. Check doc.exists to make sure \" +\n                'the document exists before calling doc.data().');\n        }\n        return this.convertObject(this._document.data);\n    };\n    DocumentSnapshot.prototype.get = function (fieldPath) {\n        validateExactNumberOfArgs('DocumentSnapshot.get', arguments, 1);\n        if (!this._document) {\n            throw new FirestoreError(Code.NOT_FOUND, \"This document doesn't exist. Check doc.exists to make sure \" +\n                'the document exists before calling doc.get().');\n        }\n        var value = this._document.data.field(fieldPathFromArgument('DocumentSnapshot.get', fieldPath));\n        return value === undefined ? undefined : this.convertValue(value);\n    };\n    Object.defineProperty(DocumentSnapshot.prototype, \"id\", {\n        get: function () {\n            return this._key.path.lastSegment();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentSnapshot.prototype, \"ref\", {\n        get: function () {\n            return new database_DocumentReference(this._key, this._firestore);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentSnapshot.prototype, \"exists\", {\n        get: function () {\n            return this._document !== null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentSnapshot.prototype, \"metadata\", {\n        get: function () {\n            return {\n                hasPendingWrites: this._document !== null && this._document.hasLocalMutations,\n                fromCache: this._fromCache\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DocumentSnapshot.prototype.convertObject = function (data) {\n        var _this = this;\n        var result = {};\n        data.forEach(function (key, value) {\n            result[key] = _this.convertValue(value);\n        });\n        return result;\n    };\n    DocumentSnapshot.prototype.convertValue = function (value) {\n        if (value instanceof field_value_ObjectValue) {\n            return this.convertObject(value);\n        }\n        else if (value instanceof field_value_ArrayValue) {\n            return this.convertArray(value);\n        }\n        else if (value instanceof field_value_RefValue) {\n            var key = value.value();\n            var database = this._firestore.ensureClientConfigured().databaseId();\n            if (!value.databaseId.equals(database)) {\n                // TODO(b/64130202): Somehow support foreign references.\n                log_error(\"Document \" + this._key.path + \" contains a document \" +\n                    \"reference within a different database (\" +\n                    (value.databaseId.projectId + \"/\" + value.databaseId\n                        .database + \") which is not \") +\n                    \"supported. It will be treated as a reference in the current \" +\n                    (\"database (\" + database.projectId + \"/\" + database.database + \") \") +\n                    \"instead.\");\n            }\n            return new database_DocumentReference(key, this._firestore);\n        }\n        else {\n            return value.value();\n        }\n    };\n    DocumentSnapshot.prototype.convertArray = function (data) {\n        var _this = this;\n        return data.internalValue.map(function (value) {\n            return _this.convertValue(value);\n        });\n    };\n    return DocumentSnapshot;\n}());\n\nvar database_Query = /** @class */ (function () {\n    function Query(_query, firestore) {\n        this._query = _query;\n        this.firestore = firestore;\n    }\n    Query.prototype.where = function (field, opStr, value) {\n        validateExactNumberOfArgs('Query.where', arguments, 3);\n        validateArgType('Query.where', 'string', 2, opStr);\n        validateDefined('Query.where', 3, value);\n        var fieldValue;\n        var fieldPath = fieldPathFromArgument('Query.where', field);\n        if (fieldPath.isKeyField()) {\n            if (typeof value === 'string') {\n                if (value.indexOf('/') !== -1) {\n                    // TODO(dimond): Allow slashes once ancestor queries are supported\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Function Query.where() requires its third parameter to be a ' +\n                        'valid document ID if the first parameter is ' +\n                        'FieldPath.documentId(), but it contains a slash.');\n                }\n                if (value === '') {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Function Query.where() requires its third parameter to be a ' +\n                        'valid document ID if the first parameter is ' +\n                        'FieldPath.documentId(), but it was an empty string.');\n                }\n                var path = this._query.path.child(new path_ResourcePath([value]));\n                assert(path.length % 2 === 0, 'Path should be a document key');\n                fieldValue = new field_value_RefValue(this.firestore._databaseId, new document_key_DocumentKey(path));\n            }\n            else if (value instanceof database_DocumentReference) {\n                var ref = value;\n                fieldValue = new field_value_RefValue(this.firestore._databaseId, ref._key);\n            }\n            else {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function Query.where() requires its third parameter to be a \" +\n                    \"string or a DocumentReference if the first parameter is \" +\n                    \"FieldPath.documentId(), but it was: \" +\n                    (valueDescription(value) + \".\"));\n            }\n        }\n        else {\n            fieldValue = this.firestore._dataConverter.parseQueryValue('Query.where', value);\n        }\n        var filter = fieldFilter(fieldPath, query_RelationOp.fromString(opStr), fieldValue);\n        this.validateNewFilter(filter);\n        return new Query(this._query.addFilter(filter), this.firestore);\n    };\n    Query.prototype.orderBy = function (field, directionStr) {\n        validateBetweenNumberOfArgs('Query.orderBy', arguments, 1, 2);\n        validateOptionalArgType('Query.orderBy', 'string', 2, directionStr);\n        var direction;\n        if (directionStr === undefined || directionStr === 'asc') {\n            direction = Direction.ASCENDING;\n        }\n        else if (directionStr === 'desc') {\n            direction = Direction.DESCENDING;\n        }\n        else {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function Query.orderBy() has unknown direction '\" + directionStr + \"', \" +\n                \"expected 'asc' or 'desc'.\");\n        }\n        if (this._query.startAt !== null) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call Query.startAt() or ' +\n                'Query.startAfter() before calling Query.orderBy().');\n        }\n        if (this._query.endAt !== null) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call Query.endAt() or ' +\n                'Query.endBefore() before calling Query.orderBy().');\n        }\n        var fieldPath = fieldPathFromArgument('Query.orderBy', field);\n        var orderBy = new query_OrderBy(fieldPath, direction);\n        this.validateNewOrderBy(orderBy);\n        return new Query(this._query.addOrderBy(orderBy), this.firestore);\n    };\n    Query.prototype.limit = function (n) {\n        validateExactNumberOfArgs('Query.limit', arguments, 1);\n        validateArgType('Query.limit', 'number', 1, n);\n        if (n <= 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid Query. Query limit (\" + n + \") is invalid. Limit must be \" +\n                'positive.');\n        }\n        return new Query(this._query.withLimit(n), this.firestore);\n    };\n    Query.prototype.startAt = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.startAt', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.startAt', docOrField, fields, \n        /*before=*/ true);\n        return new Query(this._query.withStartAt(bound), this.firestore);\n    };\n    Query.prototype.startAfter = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.startAfter', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.startAfter', docOrField, fields, \n        /*before=*/ false);\n        return new Query(this._query.withStartAt(bound), this.firestore);\n    };\n    Query.prototype.endBefore = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.endBefore', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.endBefore', docOrField, fields, \n        /*before=*/ true);\n        return new Query(this._query.withEndAt(bound), this.firestore);\n    };\n    Query.prototype.endAt = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.endAt', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.endAt', docOrField, fields, \n        /*before=*/ false);\n        return new Query(this._query.withEndAt(bound), this.firestore);\n    };\n    Query.prototype.isEqual = function (other) {\n        if (!(other instanceof Query)) {\n            throw invalidClassError('isEqual', 'Query', 1, other);\n        }\n        return (this.firestore === other.firestore && this._query.equals(other._query));\n    };\n    /** Helper function to create a bound from a document or fields */\n    Query.prototype.boundFromDocOrFields = function (methodName, docOrField, fields, before) {\n        validateDefined(methodName, 1, docOrField);\n        if (docOrField instanceof database_DocumentSnapshot) {\n            if (fields.length > 0) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Too many arguments provided to \" + methodName + \"().\");\n            }\n            var snap = docOrField;\n            if (!snap.exists) {\n                throw new FirestoreError(Code.NOT_FOUND, \"Can't use a DocumentSnapshot that doesn't exist for \" +\n                    (methodName + \"().\"));\n            }\n            return this.boundFromDocument(methodName, snap._document, before);\n        }\n        else {\n            var allFields = [docOrField].concat(fields);\n            return this.boundFromFields(methodName, allFields, before);\n        }\n    };\n    /**\n     * Create a Bound from a query and a document.\n     *\n     * Note that the Bound will always include the key of the document\n     * and so only the provided document will compare equal to the returned\n     * position.\n     *\n     * Will throw if the document does not contain all fields of the order by\n     * of the query.\n     */\n    Query.prototype.boundFromDocument = function (methodName, doc, before) {\n        var components = [];\n        // Because people expect to continue/end a query at the exact document\n        // provided, we need to use the implicit sort order rather than the explicit\n        // sort order, because it's guaranteed to contain the document key. That way\n        // the position becomes unambiguous and the query continues/ends exactly at\n        // the provided document. Without the key (by using the explicit sort\n        // orders), multiple documents could match the position, yielding duplicate\n        // results.\n        for (var _i = 0, _a = this._query.orderBy; _i < _a.length; _i++) {\n            var orderBy = _a[_i];\n            if (orderBy.field.isKeyField()) {\n                components.push(new field_value_RefValue(this.firestore._databaseId, doc.key));\n            }\n            else {\n                var value = doc.field(orderBy.field);\n                if (value !== undefined) {\n                    components.push(value);\n                }\n                else {\n                    var field = orderBy.field.canonicalString();\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. You are trying to start or end a query using a \" +\n                        (\"document for which the field '\" + field + \"' (used as the \") +\n                        \"orderBy) does not exist.\");\n                }\n            }\n        }\n        return new query_Bound(components, before);\n    };\n    /**\n     * Converts a list of field values to a Bound for the given query.\n     */\n    Query.prototype.boundFromFields = function (methodName, values, before) {\n        // Use explicit order by's because it has to match the query the user made\n        var orderBy = this._query.explicitOrderBy;\n        if (values.length > orderBy.length) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Too many arguments provided to \" + methodName + \"(). \" +\n                \"The number of arguments must be less than or equal to the \" +\n                \"number of Query.orderBy() clauses\");\n        }\n        var components = [];\n        for (var i = 0; i < values.length; i++) {\n            var rawValue = values[i];\n            var orderByComponent = orderBy[i];\n            if (orderByComponent.field.isKeyField()) {\n                if (typeof rawValue !== 'string') {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. Expected a string for document ID in \" +\n                        (methodName + \"(), but got a \" + typeof rawValue));\n                }\n                if (rawValue.indexOf('/') !== -1) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. Document ID '\" + rawValue + \"' contains a slash in \" +\n                        (methodName + \"()\"));\n                }\n                var key = new document_key_DocumentKey(this._query.path.child(rawValue));\n                components.push(new field_value_RefValue(this.firestore._databaseId, key));\n            }\n            else {\n                var wrapped = this.firestore._dataConverter.parseQueryValue(methodName, rawValue);\n                components.push(wrapped);\n            }\n        }\n        return new query_Bound(components, before);\n    };\n    Query.prototype.onSnapshot = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        validateBetweenNumberOfArgs('Query.onSnapshot', arguments, 1, 4);\n        var options = {};\n        var observer;\n        var currArg = 0;\n        if (typeof args[currArg] === 'object' &&\n            !isPartialObserver(args[currArg])) {\n            options = args[currArg];\n            validateOptionNames('Query.onSnapshot', options, [\n                'includeQueryMetadataChanges',\n                'includeDocumentMetadataChanges'\n            ]);\n            validateNamedOptionalType('Query.onSnapshot', 'boolean', 'includeDocumentMetadataChanges', options.includeDocumentMetadataChanges);\n            validateNamedOptionalType('Query.onSnapshot', 'boolean', 'includeQueryMetadataChanges', options.includeQueryMetadataChanges);\n            currArg++;\n        }\n        if (isPartialObserver(args[currArg])) {\n            observer = args[currArg];\n        }\n        else {\n            validateArgType('Query.onSnapshot', 'function', currArg, args[currArg]);\n            validateOptionalArgType('Query.onSnapshot', 'function', currArg + 1, args[currArg + 1]);\n            validateOptionalArgType('Query.onSnapshot', 'function', currArg + 2, args[currArg + 2]);\n            observer = {\n                next: args[currArg],\n                error: args[currArg + 1],\n                complete: args[currArg + 2]\n            };\n        }\n        return this.onSnapshotInternal(options, observer);\n    };\n    Query.prototype.onSnapshotInternal = function (options, observer) {\n        var _this = this;\n        var errHandler = function (err) {\n            console.error('Uncaught Error in onSnapshot:', err);\n        };\n        if (observer.error) {\n            errHandler = observer.error.bind(observer);\n        }\n        var asyncObserver = new AsyncObserver({\n            next: function (result) {\n                if (observer.next) {\n                    observer.next(new database_QuerySnapshot(_this.firestore, _this._query, result));\n                }\n            },\n            error: errHandler\n        });\n        var firestoreClient = this.firestore.ensureClientConfigured();\n        var internalListener = firestoreClient.listen(this._query, asyncObserver, options);\n        return function () {\n            asyncObserver.mute();\n            firestoreClient.unlisten(internalListener);\n        };\n    };\n    Query.prototype.get = function () {\n        var _this = this;\n        validateExactNumberOfArgs('Query.get', arguments, 0);\n        return new Promise(function (resolve, reject) {\n            var unlisten = _this.onSnapshotInternal({\n                includeDocumentMetadataChanges: false,\n                includeQueryMetadataChanges: true,\n                waitForSyncWhenOnline: true\n            }, {\n                next: function (result) {\n                    // Remove query first before passing event to user to avoid\n                    // user actions affecting the now stale query.\n                    unlisten();\n                    resolve(result);\n                },\n                error: reject\n            });\n        });\n    };\n    Query.prototype.validateNewFilter = function (filter) {\n        if (filter instanceof query_RelationFilter && filter.isInequality()) {\n            var existingField = this._query.getInequalityFilterField();\n            if (existingField !== null && !existingField.equals(filter.field)) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. All where filters with an inequality' +\n                    ' (<, <=, >, or >=) must be on the same field. But you have' +\n                    (\" inequality filters on '\" + existingField.toString() + \"'\") +\n                    (\" and '\" + filter.field.toString() + \"'\"));\n            }\n            var firstOrderByField = this._query.getFirstOrderByField();\n            if (firstOrderByField !== null) {\n                this.validateOrderByAndInequalityMatch(filter.field, firstOrderByField);\n            }\n        }\n    };\n    Query.prototype.validateNewOrderBy = function (orderBy) {\n        if (this._query.getFirstOrderByField() === null) {\n            // This is the first order by. It must match any inequality.\n            var inequalityField = this._query.getInequalityFilterField();\n            if (inequalityField !== null) {\n                this.validateOrderByAndInequalityMatch(inequalityField, orderBy.field);\n            }\n        }\n    };\n    Query.prototype.validateOrderByAndInequalityMatch = function (inequality, orderBy) {\n        if (!orderBy.equals(inequality)) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. You have a where filter with an inequality \" +\n                (\"(<, <=, >, or >=) on field '\" + inequality.toString() + \"' \") +\n                (\"and so you must also use '\" + inequality.toString() + \"' \") +\n                \"as your first Query.orderBy(), but your first Query.orderBy() \" +\n                (\"is on field '\" + orderBy.toString() + \"' instead.\"));\n        }\n    };\n    return Query;\n}());\n\nvar database_QuerySnapshot = /** @class */ (function () {\n    function QuerySnapshot(_firestore, _originalQuery, _snapshot) {\n        this._firestore = _firestore;\n        this._originalQuery = _originalQuery;\n        this._snapshot = _snapshot;\n        this._cachedChanges = null;\n        this.metadata = {\n            fromCache: _snapshot.fromCache,\n            hasPendingWrites: _snapshot.hasPendingWrites\n        };\n    }\n    Object.defineProperty(QuerySnapshot.prototype, \"docs\", {\n        get: function () {\n            var result = [];\n            this.forEach(function (doc) { return result.push(doc); });\n            return result;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuerySnapshot.prototype, \"empty\", {\n        get: function () {\n            return this._snapshot.docs.isEmpty();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuerySnapshot.prototype, \"size\", {\n        get: function () {\n            return this._snapshot.docs.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    QuerySnapshot.prototype.forEach = function (callback, thisArg) {\n        var _this = this;\n        validateBetweenNumberOfArgs('QuerySnapshot.forEach', arguments, 1, 2);\n        validateArgType('QuerySnapshot.forEach', 'function', 1, callback);\n        this._snapshot.docs.forEach(function (doc) {\n            callback.call(thisArg, _this.convertToDocumentImpl(doc));\n        });\n    };\n    Object.defineProperty(QuerySnapshot.prototype, \"query\", {\n        get: function () {\n            return new database_Query(this._originalQuery, this._firestore);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuerySnapshot.prototype, \"docChanges\", {\n        get: function () {\n            if (!this._cachedChanges) {\n                this._cachedChanges = changesFromSnapshot(this._firestore, this._snapshot);\n            }\n            return this._cachedChanges;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    QuerySnapshot.prototype.convertToDocumentImpl = function (doc) {\n        return new database_DocumentSnapshot(this._firestore, doc.key, doc, this.metadata.fromCache);\n    };\n    return QuerySnapshot;\n}());\n\nvar database_CollectionReference = /** @class */ (function (_super) {\n    database___extends(CollectionReference, _super);\n    function CollectionReference(path, firestore) {\n        var _this = _super.call(this, query_Query.atPath(path), firestore) || this;\n        if (path.length % 2 !== 1) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid collection reference. Collection ' +\n                'references must have an odd number of segments, but ' +\n                (path.canonicalString() + \" has \" + path.length));\n        }\n        return _this;\n    }\n    Object.defineProperty(CollectionReference.prototype, \"id\", {\n        get: function () {\n            return this._query.path.lastSegment();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CollectionReference.prototype, \"parent\", {\n        get: function () {\n            var parentPath = this._query.path.popLast();\n            if (parentPath.isEmpty()) {\n                return null;\n            }\n            else {\n                return new database_DocumentReference(new document_key_DocumentKey(parentPath), this.firestore);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CollectionReference.prototype, \"path\", {\n        get: function () {\n            return this._query.path.canonicalString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CollectionReference.prototype.doc = function (pathString) {\n        validateBetweenNumberOfArgs('CollectionReference.doc', arguments, 0, 1);\n        // We allow omission of 'pathString' but explicitly prohibit passing in both\n        // 'undefined' and 'null'.\n        if (arguments.length === 0) {\n            pathString = misc_AutoId.newId();\n        }\n        validateArgType('CollectionReference.doc', 'string', 1, pathString);\n        if (pathString === '') {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Document path must be a non-empty string');\n        }\n        var path = path_ResourcePath.fromString(pathString);\n        return database_DocumentReference.forPath(this._query.path.child(path), this.firestore);\n    };\n    CollectionReference.prototype.add = function (value) {\n        validateExactNumberOfArgs('CollectionReference.add', arguments, 1);\n        validateArgType('CollectionReference.add', 'object', 1, value);\n        var docRef = this.doc();\n        return docRef.set(value).then(function () { return docRef; });\n    };\n    return CollectionReference;\n}(database_Query));\n\nfunction validateSetOptions(methodName, options) {\n    if (options === undefined) {\n        return {\n            merge: false\n        };\n    }\n    validateOptionNames(methodName, options, ['merge']);\n    validateNamedOptionalType(methodName, 'boolean', 'merge', options.merge);\n    return options;\n}\nfunction validateReference(methodName, documentRef, firestore) {\n    if (!(documentRef instanceof database_DocumentReference)) {\n        throw invalidClassError(methodName, 'DocumentReference', 1, documentRef);\n    }\n    else if (documentRef.firestore !== firestore) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Provided document reference is from a different Firestore instance.');\n    }\n    else {\n        return documentRef;\n    }\n}\n/**\n * Calculates the array of firestore.DocumentChange's for a given ViewSnapshot.\n *\n * Exported for testing.\n */\nfunction changesFromSnapshot(firestore, snapshot) {\n    if (snapshot.oldDocs.isEmpty()) {\n        // Special case the first snapshot because index calculation is easy and\n        // fast\n        var lastDoc_1;\n        var index_1 = 0;\n        return snapshot.docChanges.map(function (change) {\n            var doc = new database_DocumentSnapshot(firestore, change.doc.key, change.doc, snapshot.fromCache);\n            assert(change.type === ChangeType.Added, 'Invalid event type for first snapshot');\n            assert(!lastDoc_1 || snapshot.query.docComparator(lastDoc_1, change.doc) < 0, 'Got added events in wrong order');\n            lastDoc_1 = change.doc;\n            return {\n                type: 'added',\n                doc: doc,\n                oldIndex: -1,\n                newIndex: index_1++\n            };\n        });\n    }\n    else {\n        // A DocumentSet that is updated incrementally as changes are applied to use\n        // to lookup the index of a document.\n        var indexTracker_1 = snapshot.oldDocs;\n        return snapshot.docChanges.map(function (change) {\n            var doc = new database_DocumentSnapshot(firestore, change.doc.key, change.doc, snapshot.fromCache);\n            var oldIndex = -1;\n            var newIndex = -1;\n            if (change.type !== ChangeType.Added) {\n                oldIndex = indexTracker_1.indexOf(change.doc.key);\n                assert(oldIndex >= 0, 'Index for document not found');\n                indexTracker_1 = indexTracker_1.delete(change.doc.key);\n            }\n            if (change.type !== ChangeType.Removed) {\n                indexTracker_1 = indexTracker_1.add(change.doc);\n                newIndex = indexTracker_1.indexOf(change.doc.key);\n            }\n            return { type: resultChangeType(change.type), doc: doc, oldIndex: oldIndex, newIndex: newIndex };\n        });\n    }\n}\nfunction resultChangeType(type) {\n    switch (type) {\n        case ChangeType.Added:\n            return 'added';\n        case ChangeType.Modified:\n        case ChangeType.Metadata:\n            return 'modified';\n        case ChangeType.Removed:\n            return 'removed';\n        default:\n            return fail('Unknown change type: ' + type);\n    }\n}\n// Export the classes with a private constructor (it will fail if invoked\n// at runtime). Note that this still allows instanceof checks.\n// We're treating the variables as class names, so disable checking for lower\n// case variable names.\n// tslint:disable:variable-name\nvar PublicFirestore = makeConstructorPrivate(database_Firestore, 'Use firebase.firestore() instead.');\nvar PublicTransaction = makeConstructorPrivate(database_Transaction, 'Use firebase.firestore().runTransaction() instead.');\nvar PublicWriteBatch = makeConstructorPrivate(database_WriteBatch, 'Use firebase.firestore().batch() instead.');\nvar PublicDocumentReference = makeConstructorPrivate(database_DocumentReference, 'Use firebase.firestore().doc() instead.');\nvar PublicDocumentSnapshot = makeConstructorPrivate(database_DocumentSnapshot);\nvar PublicQuery = makeConstructorPrivate(database_Query);\nvar PublicQuerySnapshot = makeConstructorPrivate(database_QuerySnapshot);\nvar PublicCollectionReference = makeConstructorPrivate(database_CollectionReference, 'Use firebase.firestore().collection() instead.');\n// tslint:enable:variable-name\n\n//# sourceMappingURL=database.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/platform/config.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\nvar firestoreNamespace = {\n    Firestore: PublicFirestore,\n    GeoPoint: geo_point_GeoPoint,\n    Blob: PublicBlob,\n    Transaction: PublicTransaction,\n    WriteBatch: PublicWriteBatch,\n    DocumentReference: PublicDocumentReference,\n    DocumentSnapshot: PublicDocumentSnapshot,\n    Query: PublicQuery,\n    QuerySnapshot: PublicQuerySnapshot,\n    CollectionReference: PublicCollectionReference,\n    FieldPath: field_path_FieldPath,\n    FieldValue: PublicFieldValue,\n    setLogLevel: database_Firestore.setLogLevel\n};\n/**\n * Configures Firestore as part of the Firebase SDK by calling registerService.\n */\nfunction configureForFirebase(firebase) {\n    firebase.INTERNAL.registerService('firestore', function (app) { return new database_Firestore(app); }, shallowCopy(firestoreNamespace));\n}\n/**\n * Exports the Firestore namespace into the provided `exportObject` object under\n * the key 'firestore'. This is used for wrapped binary that exposes Firestore\n * as a goog module.\n */\nfunction configureForStandalone(exportObject) {\n    var copiedNamespace = shallowCopy(firestoreNamespace);\n    // Unlike the use with Firebase, the standalone allows the use of the\n    // constructor, so export it's internal class\n    copiedNamespace['Firestore'] = database_Firestore;\n    exportObject['firestore'] = copiedNamespace;\n}\n\n//# sourceMappingURL=config.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/index.js\n/* harmony export (immutable) */ __webpack_exports__[\"registerFirestore\"] = registerFirestore;\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nfunction registerFirestore(instance) {\n    configureForFirebase(instance);\n}\nregisterFirestore(esm[\"default\"]);\n\n//# sourceMappingURL=index.js.map\n\n\n/***/ }),\n\n/***/ 115:\n/***/ (function(module, exports, __webpack_require__) {\n\n(function() {var g,goog=goog||{},k=this;function l(a){return\"string\"==typeof a}function aa(){}\nfunction ba(a){var b=typeof a;if(\"object\"==b)if(a){if(a instanceof Array)return\"array\";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if(\"[object Window]\"==c)return\"object\";if(\"[object Array]\"==c||\"number\"==typeof a.length&&\"undefined\"!=typeof a.splice&&\"undefined\"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable(\"splice\"))return\"array\";if(\"[object Function]\"==c||\"undefined\"!=typeof a.call&&\"undefined\"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable(\"call\"))return\"function\"}else return\"null\";\nelse if(\"function\"==b&&\"undefined\"==typeof a.call)return\"object\";return b}function n(a){return\"array\"==ba(a)}function ca(a){var b=ba(a);return\"array\"==b||\"object\"==b&&\"number\"==typeof a.length}function da(a){return\"function\"==ba(a)}function p(a){var b=typeof a;return\"object\"==b&&null!=a||\"function\"==b}var q=\"closure_uid_\"+(1E9*Math.random()>>>0),ea=0;function fa(a,b,c){return a.call.apply(a.bind,arguments)}\nfunction ha(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function r(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf(\"native code\")?r=fa:r=ha;return r.apply(null,arguments)}\nfunction ia(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b)}}var t=Date.now||function(){return+new Date};function u(a,b){function c(){}c.prototype=b.prototype;a.L=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.Bb=function(a,c,f){for(var d=Array(arguments.length-2),e=2;e<arguments.length;e++)d[e-2]=arguments[e];return b.prototype[c].apply(a,d)}};function ja(a){if(Error.captureStackTrace)Error.captureStackTrace(this,ja);else{var b=Error().stack;b&&(this.stack=b)}a&&(this.message=String(a))}u(ja,Error);ja.prototype.name=\"CustomError\";function ka(a,b){for(var c=a.split(\"%s\"),d=\"\",e=Array.prototype.slice.call(arguments,1);e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join(\"%s\")}var la=String.prototype.trim?function(a){return a.trim()}:function(a){return a.replace(/^[\\s\\xa0]+|[\\s\\xa0]+$/g,\"\")};function ma(a,b){return a<b?-1:a>b?1:0};function na(a,b){b.unshift(a);ja.call(this,ka.apply(null,b));b.shift()}u(na,ja);na.prototype.name=\"AssertionError\";function oa(a,b){throw new na(\"Failure\"+(a?\": \"+a:\"\"),Array.prototype.slice.call(arguments,1));};function w(){0!=qa&&(ra[this[q]||(this[q]=++ea)]=this);this.i=this.i;this.v=this.v}var qa=0,ra={};w.prototype.i=!1;w.prototype.Y=function(){if(!this.i&&(this.i=!0,this.w(),0!=qa)){var a=this[q]||(this[q]=++ea);delete ra[a]}};w.prototype.w=function(){if(this.v)for(;this.v.length;)this.v.shift()()};var sa=Array.prototype.indexOf?function(a,b,c){return Array.prototype.indexOf.call(a,b,c)}:function(a,b,c){c=null==c?0:0>c?Math.max(0,a.length+c):c;if(l(a))return l(b)&&1==b.length?a.indexOf(b,c):-1;for(;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1},ta=Array.prototype.forEach?function(a,b,c){Array.prototype.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=l(a)?a.split(\"\"):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)};\nfunction ua(a){a:{var b=va;for(var c=a.length,d=l(a)?a.split(\"\"):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a)){b=e;break a}b=-1}return 0>b?null:l(a)?a.charAt(b):a[b]}function wa(a){if(!n(a))for(var b=a.length-1;0<=b;b--)delete a[b];a.length=0}function xa(a){return Array.prototype.concat.apply([],arguments)}function ya(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return[]};var x;a:{var za=k.navigator;if(za){var Aa=za.userAgent;if(Aa){x=Aa;break a}}x=\"\"}function y(a){return-1!=x.indexOf(a)};function Ba(a,b,c){for(var d in a)b.call(c,a[d],d,a)}function Ca(a){var b=[],c=0,d;for(d in a)b[c++]=a[d];return b}function Da(a){var b=[],c=0,d;for(d in a)b[c++]=d;return b}function Ea(a){var b={},c;for(c in a)b[c]=a[c];return b}var Fa=\"constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf\".split(\" \");\nfunction Ga(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<Fa.length;f++)c=Fa[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}};function Ha(a){Ha[\" \"](a);return a}Ha[\" \"]=aa;function Ia(a,b){var c=Ja;return Object.prototype.hasOwnProperty.call(c,a)?c[a]:c[a]=b(a)};var Ka=y(\"Opera\"),z=y(\"Trident\")||y(\"MSIE\"),La=y(\"Edge\"),Ma=y(\"Gecko\")&&!(-1!=x.toLowerCase().indexOf(\"webkit\")&&!y(\"Edge\"))&&!(y(\"Trident\")||y(\"MSIE\"))&&!y(\"Edge\"),Na=-1!=x.toLowerCase().indexOf(\"webkit\")&&!y(\"Edge\");function Oa(){var a=k.document;return a?a.documentMode:void 0}var Pa;\na:{var Qa=\"\",Sa=function(){var a=x;if(Ma)return/rv\\:([^\\);]+)(\\)|;)/.exec(a);if(La)return/Edge\\/([\\d\\.]+)/.exec(a);if(z)return/\\b(?:MSIE|rv)[: ]([^\\);]+)(\\)|;)/.exec(a);if(Na)return/WebKit\\/(\\S+)/.exec(a);if(Ka)return/(?:Version)[ \\/]?(\\S+)/.exec(a)}();Sa&&(Qa=Sa?Sa[1]:\"\");if(z){var Ta=Oa();if(null!=Ta&&Ta>parseFloat(Qa)){Pa=String(Ta);break a}}Pa=Qa}var Ja={};\nfunction Ua(a){return Ia(a,function(){for(var b=0,c=la(String(Pa)).split(\".\"),d=la(String(a)).split(\".\"),e=Math.max(c.length,d.length),f=0;0==b&&f<e;f++){var h=c[f]||\"\",m=d[f]||\"\";do{h=/(\\d*)(\\D*)(.*)/.exec(h)||[\"\",\"\",\"\",\"\"];m=/(\\d*)(\\D*)(.*)/.exec(m)||[\"\",\"\",\"\",\"\"];if(0==h[0].length&&0==m[0].length)break;b=ma(0==h[1].length?0:parseInt(h[1],10),0==m[1].length?0:parseInt(m[1],10))||ma(0==h[2].length,0==m[2].length)||ma(h[2],m[2]);h=h[3];m=m[3]}while(0==b)}return 0<=b})}var Va;var Wa=k.document;\nVa=Wa&&z?Oa()||(\"CSS1Compat\"==Wa.compatMode?parseInt(Pa,10):5):void 0;var Xa=Object.freeze||function(a){return a};var Ya=!z||9<=Number(Va),Za=z&&!Ua(\"9\"),$a=function(){if(!k.addEventListener||!Object.defineProperty)return!1;var a=!1,b=Object.defineProperty({},\"passive\",{get:function(){a=!0}});k.addEventListener(\"test\",aa,b);k.removeEventListener(\"test\",aa,b);return a}();function A(a,b){this.type=a;this.a=this.target=b;this.Qa=!0}A.prototype.b=function(){this.Qa=!1};function ab(a,b){A.call(this,a?a.type:\"\");this.relatedTarget=this.a=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key=\"\";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.pointerId=0;this.pointerType=\"\";this.c=null;if(a){var c=this.type=a.type,d=a.changedTouches?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.a=b;if(b=a.relatedTarget){if(Ma){a:{try{Ha(b.nodeName);var e=!0;break a}catch(f){}e=!1}e||(b=null)}}else\"mouseover\"==c?b=\na.fromElement:\"mouseout\"==c&&(b=a.toElement);this.relatedTarget=b;null===d?(this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0):(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0);this.button=a.button;this.key=a.key||\"\";this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=a.shiftKey;this.metaKey=\na.metaKey;this.pointerId=a.pointerId||0;this.pointerType=l(a.pointerType)?a.pointerType:bb[a.pointerType]||\"\";this.c=a;a.defaultPrevented&&this.b()}}u(ab,A);var bb=Xa({2:\"touch\",3:\"pen\",4:\"mouse\"});ab.prototype.b=function(){ab.L.b.call(this);var a=this.c;if(a.preventDefault)a.preventDefault();else if(a.returnValue=!1,Za)try{if(a.ctrlKey||112<=a.keyCode&&123>=a.keyCode)a.keyCode=-1}catch(b){}};var cb=\"closure_listenable_\"+(1E6*Math.random()|0);function db(a){return!(!a||!a[cb])}var eb=0;function fb(a,b,c,d,e){this.listener=a;this.a=null;this.src=b;this.type=c;this.capture=!!d;this.da=e;this.key=++eb;this.X=this.ba=!1}function gb(a){a.X=!0;a.listener=null;a.a=null;a.src=null;a.da=null};function hb(a){this.src=a;this.a={};this.b=0}function ib(a,b,c,d,e,f){var h=b.toString();b=a.a[h];b||(b=a.a[h]=[],a.b++);var m=jb(b,c,e,f);-1<m?(a=b[m],d||(a.ba=!1)):(a=new fb(c,a.src,h,!!e,f),a.ba=d,b.push(a));return a}function kb(a,b){var c=b.type;if(c in a.a){var d=a.a[c],e=sa(d,b),f;(f=0<=e)&&Array.prototype.splice.call(d,e,1);f&&(gb(b),0==a.a[c].length&&(delete a.a[c],a.b--))}}function lb(a,b,c,d,e){a=a.a[b.toString()];b=-1;a&&(b=jb(a,c,d,e));return-1<b?a[b]:null}\nfunction jb(a,b,c,d){for(var e=0;e<a.length;++e){var f=a[e];if(!f.X&&f.listener==b&&f.capture==!!c&&f.da==d)return e}return-1};var mb=\"closure_lm_\"+(1E6*Math.random()|0),nb={},ob=0;function pb(a,b,c,d,e){if(d&&d.once)return qb(a,b,c,d,e);if(n(b)){for(var f=0;f<b.length;f++)pb(a,b[f],c,d,e);return null}c=rb(c);return db(a)?a.$(b,c,p(d)?!!d.capture:!!d,e):sb(a,b,c,!1,d,e)}\nfunction sb(a,b,c,d,e,f){if(!b)throw Error(\"Invalid event type\");var h=p(e)?!!e.capture:!!e,m=tb(a);m||(a[mb]=m=new hb(a));c=ib(m,b,c,d,h,f);if(c.a)return c;d=ub();c.a=d;d.src=a;d.listener=c;if(a.addEventListener)$a||(e=h),void 0===e&&(e=!1),a.addEventListener(b.toString(),d,e);else if(a.attachEvent)a.attachEvent(vb(b.toString()),d);else throw Error(\"addEventListener and attachEvent are unavailable.\");ob++;return c}\nfunction ub(){var a=wb,b=Ya?function(c){return a.call(b.src,b.listener,c)}:function(c){c=a.call(b.src,b.listener,c);if(!c)return c};return b}function qb(a,b,c,d,e){if(n(b)){for(var f=0;f<b.length;f++)qb(a,b[f],c,d,e);return null}c=rb(c);return db(a)?a.Ia(b,c,p(d)?!!d.capture:!!d,e):sb(a,b,c,!0,d,e)}function xb(a,b,c,d,e){if(n(b))for(var f=0;f<b.length;f++)xb(a,b[f],c,d,e);else d=p(d)?!!d.capture:!!d,c=rb(c),db(a)?a.xa(b,c,d,e):a&&(a=tb(a))&&(b=lb(a,b,c,d,e))&&yb(b)}\nfunction yb(a){if(\"number\"!=typeof a&&a&&!a.X){var b=a.src;if(db(b))kb(b.c,a);else{var c=a.type,d=a.a;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent&&b.detachEvent(vb(c),d);ob--;(c=tb(b))?(kb(c,a),0==c.b&&(c.src=null,b[mb]=null)):gb(a)}}}function vb(a){return a in nb?nb[a]:nb[a]=\"on\"+a}function zb(a,b,c,d){var e=!0;if(a=tb(a))if(b=a.a[b.toString()])for(b=b.concat(),a=0;a<b.length;a++){var f=b[a];f&&f.capture==c&&!f.X&&(f=Ab(f,d),e=e&&!1!==f)}return e}\nfunction Ab(a,b){var c=a.listener,d=a.da||a.src;a.ba&&yb(a);return c.call(d,b)}\nfunction wb(a,b){if(a.X)return!0;if(!Ya){if(!b)a:{b=[\"window\",\"event\"];for(var c=k,d=0;d<b.length;d++)if(c=c[b[d]],null==c){b=null;break a}b=c}d=b;b=new ab(d,this);c=!0;if(!(0>d.keyCode||void 0!=d.returnValue)){a:{var e=!1;if(0==d.keyCode)try{d.keyCode=-1;break a}catch(h){e=!0}if(e||void 0==d.returnValue)d.returnValue=!0}d=[];for(e=b.a;e;e=e.parentNode)d.push(e);a=a.type;for(e=d.length-1;0<=e;e--){b.a=d[e];var f=zb(d[e],a,!0,b);c=c&&f}for(e=0;e<d.length;e++)b.a=d[e],f=zb(d[e],a,!1,b),c=c&&f}return c}return Ab(a,\nnew ab(b,this))}function tb(a){a=a[mb];return a instanceof hb?a:null}var Bb=\"__closure_events_fn_\"+(1E9*Math.random()>>>0);function rb(a){if(da(a))return a;a[Bb]||(a[Bb]=function(b){return a.handleEvent(b)});return a[Bb]};function B(){w.call(this);this.c=new hb(this);this.P=this;this.J=null}u(B,w);B.prototype[cb]=!0;g=B.prototype;g.addEventListener=function(a,b,c,d){pb(this,a,b,c,d)};g.removeEventListener=function(a,b,c,d){xb(this,a,b,c,d)};\ng.dispatchEvent=function(a){var b,c=this.J;if(c)for(b=[];c;c=c.J)b.push(c);c=this.P;var d=a.type||a;if(l(a))a=new A(a,c);else if(a instanceof A)a.target=a.target||c;else{var e=a;a=new A(d,c);Ga(a,e)}e=!0;if(b)for(var f=b.length-1;0<=f;f--){var h=a.a=b[f];e=Cb(h,d,!0,a)&&e}h=a.a=c;e=Cb(h,d,!0,a)&&e;e=Cb(h,d,!1,a)&&e;if(b)for(f=0;f<b.length;f++)h=a.a=b[f],e=Cb(h,d,!1,a)&&e;return e};\ng.w=function(){B.L.w.call(this);if(this.c){var a=this.c,b=0,c;for(c in a.a){for(var d=a.a[c],e=0;e<d.length;e++)++b,gb(d[e]);delete a.a[c];a.b--}}this.J=null};g.$=function(a,b,c,d){return ib(this.c,String(a),b,!1,c,d)};g.Ia=function(a,b,c,d){return ib(this.c,String(a),b,!0,c,d)};g.xa=function(a,b,c,d){var e=this.c;a=String(a).toString();if(a in e.a){var f=e.a[a];b=jb(f,b,c,d);-1<b?(gb(f[b]),Array.prototype.splice.call(f,b,1),0==f.length&&(delete e.a[a],e.b--),e=!0):e=!1}else e=!1;return e};\nfunction Cb(a,b,c,d){b=a.c.a[String(b)];if(!b)return!0;b=b.concat();for(var e=!0,f=0;f<b.length;++f){var h=b[f];if(h&&!h.X&&h.capture==c){var m=h.listener,v=h.da||h.src;h.ba&&kb(a.c,h);e=!1!==m.call(v,d)&&e}}return e&&0!=d.Qa};function Db(a){return/^\\s*$/.test(a)?!1:/^[\\],:{}\\s\\u2028\\u2029]*$/.test(a.replace(/\\\\[\"\\\\\\/bfnrtu]/g,\"@\").replace(/(?:\"[^\"\\\\\\n\\r\\u2028\\u2029\\x00-\\x08\\x0a-\\x1f]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)[\\s\\u2028\\u2029]*(?=:|,|]|}|$)/g,\"]\").replace(/(?:^|:|,)(?:[\\s\\u2028\\u2029]*\\[)+/g,\"\"))}function Eb(a){a=String(a);if(Db(a))try{return eval(\"(\"+a+\")\")}catch(b){}throw Error(\"Invalid JSON string: \"+a);}function Fb(a){var b=[];Gb(new Hb,a,b);return b.join(\"\")}function Hb(){}\nfunction Gb(a,b,c){if(null==b)c.push(\"null\");else{if(\"object\"==typeof b){if(n(b)){var d=b;b=d.length;c.push(\"[\");for(var e=\"\",f=0;f<b;f++)c.push(e),Gb(a,d[f],c),e=\",\";c.push(\"]\");return}if(b instanceof String||b instanceof Number||b instanceof Boolean)b=b.valueOf();else{c.push(\"{\");e=\"\";for(d in b)Object.prototype.hasOwnProperty.call(b,d)&&(f=b[d],\"function\"!=typeof f&&(c.push(e),Ib(d,c),c.push(\":\"),Gb(a,f,c),e=\",\"));c.push(\"}\");return}}switch(typeof b){case \"string\":Ib(b,c);break;case \"number\":c.push(isFinite(b)&&\n!isNaN(b)?String(b):\"null\");break;case \"boolean\":c.push(String(b));break;case \"function\":c.push(\"null\");break;default:throw Error(\"Unknown type: \"+typeof b);}}}var Jb={'\"':'\\\\\"',\"\\\\\":\"\\\\\\\\\",\"/\":\"\\\\/\",\"\\b\":\"\\\\b\",\"\\f\":\"\\\\f\",\"\\n\":\"\\\\n\",\"\\r\":\"\\\\r\",\"\\t\":\"\\\\t\",\"\\x0B\":\"\\\\u000b\"},Lb=/\\uffff/.test(\"\\uffff\")?/[\\\\\\\"\\x00-\\x1f\\x7f-\\uffff]/g:/[\\\\\\\"\\x00-\\x1f\\x7f-\\xff]/g;\nfunction Ib(a,b){b.push('\"',a.replace(Lb,function(a){var b=Jb[a];b||(b=\"\\\\u\"+(a.charCodeAt(0)|65536).toString(16).substr(1),Jb[a]=b);return b}),'\"')};function Mb(a,b,c){this.f=c;this.c=a;this.g=b;this.b=0;this.a=null}Mb.prototype.get=function(){if(0<this.b){this.b--;var a=this.a;this.a=a.next;a.next=null}else a=this.c();return a};var C=new Mb(function(){return new Nb},function(a){a.reset()},100);function Ob(){var a=Pb,b=null;a.a&&(b=a.a,a.a=a.a.next,a.a||(a.b=null),b.next=null);return b}function Nb(){this.next=this.b=this.a=null}Nb.prototype.set=function(a,b){this.a=a;this.b=b;this.next=null};Nb.prototype.reset=function(){this.next=this.b=this.a=null};function Qb(a){k.setTimeout(function(){throw a;},0)}var Rb;\nfunction Sb(){var a=k.MessageChannel;\"undefined\"===typeof a&&\"undefined\"!==typeof window&&window.postMessage&&window.addEventListener&&!y(\"Presto\")&&(a=function(){var a=document.createElement(\"IFRAME\");a.style.display=\"none\";a.src=\"\";document.documentElement.appendChild(a);var b=a.contentWindow;a=b.document;a.open();a.write(\"\");a.close();var c=\"callImmediate\"+Math.random(),d=\"file:\"==b.location.protocol?\"*\":b.location.protocol+\"//\"+b.location.host;a=r(function(a){if((\"*\"==d||a.origin==d)&&a.data==\nc)this.port1.onmessage()},this);b.addEventListener(\"message\",a,!1);this.port1={};this.port2={postMessage:function(){b.postMessage(c,d)}}});if(\"undefined\"!==typeof a&&!y(\"Trident\")&&!y(\"MSIE\")){var b=new a,c={},d=c;b.port1.onmessage=function(){if(void 0!==c.next){c=c.next;var a=c.Ca;c.Ca=null;a()}};return function(a){d.next={Ca:a};d=d.next;b.port2.postMessage(0)}}return\"undefined\"!==typeof document&&\"onreadystatechange\"in document.createElement(\"SCRIPT\")?function(a){var b=document.createElement(\"SCRIPT\");\nb.onreadystatechange=function(){b.onreadystatechange=null;b.parentNode.removeChild(b);b=null;a();a=null};document.documentElement.appendChild(b)}:function(a){k.setTimeout(a,0)}};var Tb;function Ub(){if(-1!=String(k.Promise).indexOf(\"[native code]\")){var a=k.Promise.resolve(void 0);Tb=function(){a.then(Vb)}}else Tb=function(){var a=Vb;!da(k.setImmediate)||k.Window&&k.Window.prototype&&!y(\"Edge\")&&k.Window.prototype.setImmediate==k.setImmediate?(Rb||(Rb=Sb()),Rb(a)):k.setImmediate(a)}}var Wb=!1,Pb=new function(){this.b=this.a=null};function Vb(){for(var a;a=Ob();){try{a.a.call(a.b)}catch(b){Qb(b)}C.g(a);C.b<C.f&&(C.b++,a.next=C.a,C.a=a)}Wb=!1};function Xb(a,b){B.call(this);this.b=a||1;this.a=b||k;this.f=r(this.jb,this);this.g=t()}u(Xb,B);g=Xb.prototype;g.Z=!1;g.K=null;g.jb=function(){if(this.Z){var a=t()-this.g;0<a&&a<.8*this.b?this.K=this.a.setTimeout(this.f,this.b-a):(this.K&&(this.a.clearTimeout(this.K),this.K=null),this.dispatchEvent(\"tick\"),this.Z&&(this.K=this.a.setTimeout(this.f,this.b),this.g=t()))}};g.start=function(){this.Z=!0;this.K||(this.K=this.a.setTimeout(this.f,this.b),this.g=t())};\nfunction Yb(a){a.Z=!1;a.K&&(a.a.clearTimeout(a.K),a.K=null)}g.w=function(){Xb.L.w.call(this);Yb(this);delete this.a};function Zb(a,b,c){if(da(a))c&&(a=r(a,c));else if(a&&\"function\"==typeof a.handleEvent)a=r(a.handleEvent,a);else throw Error(\"Invalid listener argument\");return 2147483647<Number(b)?-1:k.setTimeout(a,b||0)};function $b(a,b,c){w.call(this);this.f=null!=c?r(a,c):a;this.c=b;this.b=r(this.cb,this);this.a=[]}u($b,w);g=$b.prototype;g.ea=!1;g.W=null;g.Ya=function(a){this.a=arguments;this.W?this.ea=!0:ac(this)};g.w=function(){$b.L.w.call(this);this.W&&(k.clearTimeout(this.W),this.W=null,this.ea=!1,this.a=[])};g.cb=function(){this.W=null;this.ea&&(this.ea=!1,ac(this))};function ac(a){a.W=Zb(a.b,a.c);a.f.apply(null,a.a)};function D(a){w.call(this);this.b=a;this.a={}}u(D,w);var bc=[];D.prototype.$=function(a,b,c,d){n(b)||(b&&(bc[0]=b.toString()),b=bc);for(var e=0;e<b.length;e++){var f=pb(a,b[e],c||this.handleEvent,d||!1,this.b||this);if(!f)break;this.a[f.key]=f}return this};\nD.prototype.xa=function(a,b,c,d,e){if(n(b))for(var f=0;f<b.length;f++)this.xa(a,b[f],c,d,e);else c=c||this.handleEvent,d=p(d)?!!d.capture:!!d,e=e||this.b||this,c=rb(c),d=!!d,b=db(a)?lb(a.c,String(b),c,d,e):a?(a=tb(a))?lb(a,b,c,d,e):null:null,b&&(yb(b),delete this.a[b.key]);return this};function cc(a){Ba(a.a,function(a,c){this.a.hasOwnProperty(c)&&yb(a)},a);a.a={}}D.prototype.w=function(){D.L.w.call(this);cc(this)};\nD.prototype.handleEvent=function(){throw Error(\"EventHandler.handleEvent not implemented\");};function dc(a,b,c,d,e){this.reset(a,b,c,d,e)}dc.prototype.a=null;var ec=0;dc.prototype.reset=function(a,b,c,d,e){\"number\"==typeof e||ec++;d||t();this.b=b;delete this.a};function fc(a){this.f=a;this.b=this.c=this.a=null}function E(a,b){this.name=a;this.value=b}E.prototype.toString=function(){return this.name};var gc=new E(\"SEVERE\",1E3),hc=new E(\"WARNING\",900),ic=new E(\"INFO\",800),jc=new E(\"CONFIG\",700),kc=new E(\"FINE\",500);function lc(a){if(a.c)return a.c;if(a.a)return lc(a.a);oa(\"Root logger has no level set.\");return null}\nfc.prototype.log=function(a,b,c){if(a.value>=lc(this).value)for(da(b)&&(b=b()),a=new dc(a,String(b),this.f),c&&(a.a=c),c=\"log:\"+a.b,(a=k.console)&&a.timeStamp&&a.timeStamp(c),(a=k.msWriteProfilerMark)&&a(c),c=this;c;)c=c.a};function F(a,b){a.log(gc,b,void 0)}function G(a,b){a.log(hc,b,void 0)}var mc={},nc=null;\nfunction oc(a){nc||(nc=new fc(\"\"),mc[\"\"]=nc,nc.c=jc);var b;if(!(b=mc[a])){b=new fc(a);var c=a.lastIndexOf(\".\"),d=a.substr(c+1);c=oc(a.substr(0,c));c.b||(c.b={});c.b[d]=b;b.a=c;mc[a]=b}return b};function pc(a,b){a&&a.log(ic,b,void 0)}function H(a,b){a&&a.log(kc,b,void 0)};function qc(){this.a=oc(\"goog.labs.net.webChannel.WebChannelDebug\")}function rc(a,b,c,d){if(c)try{var e=JSON.parse(c);if(e)for(var f=0;f<e.length;f++)if(n(e[f])){var h=e[f];if(!(2>h.length)){var m=h[1];if(n(m)&&!(1>m.length)){var v=m[0];if(\"noop\"!=v&&\"stop\"!=v&&\"close\"!=v)for(var Ra=1;Ra<m.length;Ra++)m[Ra]=\"\"}}}var Kb=Fb(e)}catch(Pe){I(a,\"Exception parsing expected JS array - probably was not JS\"),Kb=c}else Kb=null;I(a,\"XMLHTTP TEXT (\"+b+\"): \"+Kb+(d?\" \"+d:\"\"))}\nfunction sc(a,b,c){(a=a.a)&&F(a,(c||\"Exception\")+b)}function I(a,b){pc(a.a,b)};var J=new B;function tc(a){A.call(this,\"serverreachability\",a)}u(tc,A);function uc(){J.dispatchEvent(new tc(J))}function vc(a){A.call(this,\"statevent\",a)}u(vc,A);function K(){J.dispatchEvent(new vc(J))}function wc(a){A.call(this,\"timingevent\",a)}u(wc,A);function xc(a,b){if(!da(a))throw Error(\"Fn must not be null and must be a function\");return k.setTimeout(function(){a()},b)};var yc={NO_ERROR:0,kb:1,rb:2,qb:3,nb:4,pb:5,sb:6,Sa:7,TIMEOUT:8,vb:9};var zc={mb:\"complete\",zb:\"success\",Ta:\"error\",Sa:\"abort\",xb:\"ready\",yb:\"readystatechange\",TIMEOUT:\"timeout\",tb:\"incrementaldata\",wb:\"progress\",ob:\"downloadprogress\",Ab:\"uploadprogress\"};function Ac(){}Ac.prototype.a=null;function Bc(a){var b;(b=a.a)||(b={},Cc(a)&&(b[0]=!0,b[1]=!0),b=a.a=b);return b};var Dc;function Ec(){}u(Ec,Ac);function Fc(a){return(a=Cc(a))?new ActiveXObject(a):new XMLHttpRequest}function Cc(a){if(!a.b&&\"undefined\"==typeof XMLHttpRequest&&\"undefined\"!=typeof ActiveXObject){for(var b=[\"MSXML2.XMLHTTP.6.0\",\"MSXML2.XMLHTTP.3.0\",\"MSXML2.XMLHTTP\",\"Microsoft.XMLHTTP\"],c=0;c<b.length;c++){var d=b[c];try{return new ActiveXObject(d),a.b=d}catch(e){}}throw Error(\"Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed\");}return a.b}Dc=new Ec;function L(a,b,c,d,e){this.m=a;this.b=b;this.f=d;this.S=e||1;this.M=new D(this);this.P=Gc;a=this.F=new Xb;a.b=Hc;a.K&&a.Z?(Yb(a),a.start()):a.K&&Yb(a);this.h=null;this.c=!1;this.a=this.B=this.g=this.l=this.I=this.H=this.T=this.o=null;this.C=0;this.i=this.j=null;this.v=-1;this.s=!1;this.N=0;this.G=null;this.J=!1}var Gc=45E3,Hc=250;\nfunction Ic(a,b){switch(a){case 0:return\"Non-200 return code (\"+b+\")\";case 1:return\"XMLHTTP failure (no data)\";case 2:return\"HttpConnection timeout\";default:return\"Unknown error\"}}var Jc={},Kc={};g=L.prototype;g.setTimeout=function(a){this.P=a};function Lc(a,b,c){a.I=1;a.l=Mc(M(b));a.B=c;a.J=!0;Nc(a,null)}function Oc(a,b,c,d){a.I=1;a.l=Mc(M(b));a.B=null;a.J=c;Nc(a,d)}\nfunction Nc(a,b){a.H=t();Pc(a);a.g=M(a.l);Qc(a.g,\"t\",a.S);a.C=0;a.a=a.m.ra(a.m.fa()?b:null);0<a.N&&(a.G=new $b(r(a.Ra,a,a.a),a.N));a.M.$(a.a,\"readystatechange\",a.gb);b=a.h?Ea(a.h):{};a.B?(a.j||(a.j=\"POST\"),b[\"Content-Type\"]=\"application/x-www-form-urlencoded\",a.a.ta(a.g,a.j,a.B,b)):(a.j=\"GET\",a.a.ta(a.g,a.j,null,b));uc();var c=a.B;if(c){b=\"\";c=c.split(\"&\");for(var d=0;d<c.length;d++){var e=c[d].split(\"=\");if(1<e.length){var f=e[0];e=e[1];var h=f.split(\"_\");b=2<=h.length&&\"type\"==h[1]?b+(f+\"=\"+e+\"&\"):\nb+(f+\"=redacted&\")}}}else b=null;I(a.b,\"XMLHTTP REQ (\"+a.f+\") [attempt \"+a.S+\"]: \"+a.j+\"\\n\"+a.g+\"\\n\"+b)}g.gb=function(a){a=a.target;var b=this.G;b&&3==N(a)?(I(this.b,\"Throttling readystatechange.\"),b.Ya()):this.Ra(a)};\ng.Ra=function(a){try{if(a==this.a){var b=N(this.a),c=this.a.Ga();if(!(3>b||3==b&&!Ka&&!this.a.U())){this.s||4!=b||7==c||uc();Rc(this);var d=this.a.V();this.v=d;var e=this.a.U();e||I(this.b,\"No response text for uri \"+this.g+\" status \"+d);this.c=200==d;I(this.b,\"XMLHTTP RESP (\"+this.f+\") [ attempt \"+this.S+\"]: \"+this.j+\"\\n\"+this.g+\"\\n\"+b+\" \"+d);if(this.c)this.J?(Sc(this,b,e),Ka&&this.c&&3==b&&(this.M.$(this.F,\"tick\",this.fb),this.F.start())):(rc(this.b,this.f,e,null),Tc(this,e)),4==b&&Uc(this),this.c&&\n!this.s&&(4==b?this.m.wa(this):(this.c=!1,Pc(this)));else{if(400==d&&0<e.indexOf(\"Unknown SID\")){this.i=3;K();var f=this.b.a;f&&G(f,\"XMLHTTP Unknown SID (\"+this.f+\")\")}else{this.i=0;K();var h=this.b.a;h&&G(h,\"XMLHTTP Bad status \"+d+\" (\"+this.f+\")\")}Uc(this);Vc(this)}}}else{var m=this.b.a;m&&G(m,\"Called back with an unexpected xmlhttp\")}}catch(v){I(this.b,\"Failed call to OnXmlHttpReadyStateChanged_\"),this.a&&this.a.U()?sc(this.b,v,\"ResponseText: \"+this.a.U()):sc(this.b,v,\"No response text\")}finally{}};\nfunction Sc(a,b,c){for(var d=!0;!a.s&&a.C<c.length;){var e=Wc(a,c);if(e==Kc){4==b&&(a.i=4,K(),d=!1);rc(a.b,a.f,null,\"[Incomplete Response]\");break}else if(e==Jc){a.i=4;K();rc(a.b,a.f,c,\"[Invalid Chunk]\");d=!1;break}else rc(a.b,a.f,e,null),Tc(a,e)}4==b&&0==c.length&&(a.i=1,K(),d=!1);a.c=a.c&&d;d||(rc(a.b,a.f,c,\"[Invalid Chunked Response]\"),Uc(a),Vc(a))}g.fb=function(){var a=N(this.a),b=this.a.U();this.C<b.length&&(Rc(this),Sc(this,a,b),this.c&&4!=a&&Pc(this))};\nfunction Wc(a,b){var c=a.C,d=b.indexOf(\"\\n\",c);if(-1==d)return Kc;c=Number(b.substring(c,d));if(isNaN(c))return Jc;d+=1;if(d+c>b.length)return Kc;b=b.substr(d,c);a.C=d+c;return b}g.cancel=function(){this.s=!0;Uc(this)};function Pc(a){a.T=t()+a.P;Xc(a,a.P)}function Xc(a,b){if(null!=a.o)throw Error(\"WatchDog timer not null\");a.o=xc(r(a.eb,a),b)}function Rc(a){a.o&&(k.clearTimeout(a.o),a.o=null)}\ng.eb=function(){this.o=null;var a=t();if(0<=a-this.T)this.c&&(a=this.b.a)&&F(a,\"Received watchdog timeout even though request loaded successfully\"),I(this.b,\"TIMEOUT: \"+this.g),2!=this.I&&(uc(),K()),Uc(this),this.i=2,Vc(this);else{var b=this.b.a;b&&G(b,\"WatchDog timer called too early\");Xc(this,this.T-a)}};function Vc(a){a.m.Ka()||a.s||a.m.wa(a)}function Uc(a){Rc(a);var b=a.G;b&&\"function\"==typeof b.Y&&b.Y();a.G=null;Yb(a.F);cc(a.M);a.a&&(b=a.a,a.a=null,b.abort(),b.Y())}\nfunction Tc(a,b){try{a.m.Na(a,b),uc()}catch(c){sc(a.b,c,\"Error in httprequest callback\")}};function Yc(a){if(a.A&&\"function\"==typeof a.A)return a.A();if(l(a))return a.split(\"\");if(ca(a)){for(var b=[],c=a.length,d=0;d<c;d++)b.push(a[d]);return b}return Ca(a)}\nfunction Zc(a,b){if(a.forEach&&\"function\"==typeof a.forEach)a.forEach(b,void 0);else if(ca(a)||l(a))ta(a,b,void 0);else{if(a.O&&\"function\"==typeof a.O)var c=a.O();else if(a.A&&\"function\"==typeof a.A)c=void 0;else if(ca(a)||l(a)){c=[];for(var d=a.length,e=0;e<d;e++)c.push(e)}else c=Da(a);d=Yc(a);e=d.length;for(var f=0;f<e;f++)b.call(void 0,d[f],c&&c[f],a)}};function O(a,b){this.b={};this.a=[];this.c=0;var c=arguments.length;if(1<c){if(c%2)throw Error(\"Uneven number of arguments\");for(var d=0;d<c;d+=2)this.set(arguments[d],arguments[d+1])}else if(a){a instanceof O?(c=a.O(),d=a.A()):(c=Da(a),d=Ca(a));for(var e=0;e<c.length;e++)this.set(c[e],d[e])}}g=O.prototype;g.u=function(){return this.c};g.A=function(){$c(this);for(var a=[],b=0;b<this.a.length;b++)a.push(this.b[this.a[b]]);return a};g.O=function(){$c(this);return this.a.concat()};\nfunction ad(a){a.b={};a.a.length=0;a.c=0}function bd(a,b){return P(a.b,b)?(delete a.b[b],a.c--,a.a.length>2*a.c&&$c(a),!0):!1}function $c(a){if(a.c!=a.a.length){for(var b=0,c=0;b<a.a.length;){var d=a.a[b];P(a.b,d)&&(a.a[c++]=d);b++}a.a.length=c}if(a.c!=a.a.length){var e={};for(c=b=0;b<a.a.length;)d=a.a[b],P(e,d)||(a.a[c++]=d,e[d]=1),b++;a.a.length=c}}g.get=function(a,b){return P(this.b,a)?this.b[a]:b};g.set=function(a,b){P(this.b,a)||(this.c++,this.a.push(a));this.b[a]=b};\ng.forEach=function(a,b){for(var c=this.O(),d=0;d<c.length;d++){var e=c[d],f=this.get(e);a.call(b,f,e,this)}};function P(a,b){return Object.prototype.hasOwnProperty.call(a,b)};var cd=/^(?:([^:/?#.]+):)?(?:\\/\\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\\?([^#]*))?(?:#([\\s\\S]*))?$/;function dd(a,b){if(a){a=a.split(\"&\");for(var c=0;c<a.length;c++){var d=a[c].indexOf(\"=\"),e=null;if(0<=d){var f=a[c].substring(0,d);e=a[c].substring(d+1)}else f=a[c];b(f,e?decodeURIComponent(e.replace(/\\+/g,\" \")):\"\")}}};function Q(a,b){this.b=this.j=this.f=\"\";this.i=null;this.g=this.a=\"\";this.h=!1;var c;a instanceof Q?(this.h=void 0!==b?b:a.h,ed(this,a.f),this.j=a.j,fd(this,a.b),gd(this,a.i),this.a=a.a,hd(this,id(a.c)),this.g=a.g):a&&(c=String(a).match(cd))?(this.h=!!b,ed(this,c[1]||\"\",!0),this.j=jd(c[2]||\"\"),fd(this,c[3]||\"\",!0),gd(this,c[4]),this.a=jd(c[5]||\"\",!0),hd(this,c[6]||\"\",!0),this.g=jd(c[7]||\"\")):(this.h=!!b,this.c=new kd(null,0,this.h))}\nQ.prototype.toString=function(){var a=[],b=this.f;b&&a.push(ld(b,md,!0),\":\");var c=this.b;if(c||\"file\"==b)a.push(\"//\"),(b=this.j)&&a.push(ld(b,md,!0),\"@\"),a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g,\"%$1\")),c=this.i,null!=c&&a.push(\":\",String(c));if(c=this.a)this.b&&\"/\"!=c.charAt(0)&&a.push(\"/\"),a.push(ld(c,\"/\"==c.charAt(0)?nd:od,!0));(c=this.c.toString())&&a.push(\"?\",c);(c=this.g)&&a.push(\"#\",ld(c,pd));return a.join(\"\")};\nQ.prototype.resolve=function(a){var b=M(this),c=!!a.f;c?ed(b,a.f):c=!!a.j;c?b.j=a.j:c=!!a.b;c?fd(b,a.b):c=null!=a.i;var d=a.a;if(c)gd(b,a.i);else if(c=!!a.a){if(\"/\"!=d.charAt(0))if(this.b&&!this.a)d=\"/\"+d;else{var e=b.a.lastIndexOf(\"/\");-1!=e&&(d=b.a.substr(0,e+1)+d)}e=d;if(\"..\"==e||\".\"==e)d=\"\";else if(-1!=e.indexOf(\"./\")||-1!=e.indexOf(\"/.\")){d=0==e.lastIndexOf(\"/\",0);e=e.split(\"/\");for(var f=[],h=0;h<e.length;){var m=e[h++];\".\"==m?d&&h==e.length&&f.push(\"\"):\"..\"==m?((1<f.length||1==f.length&&\"\"!=\nf[0])&&f.pop(),d&&h==e.length&&f.push(\"\")):(f.push(m),d=!0)}d=f.join(\"/\")}else d=e}c?b.a=d:c=\"\"!==a.c.toString();c?hd(b,id(a.c)):c=!!a.g;c&&(b.g=a.g);return b};function M(a){return new Q(a)}function ed(a,b,c){a.f=c?jd(b,!0):b;a.f&&(a.f=a.f.replace(/:$/,\"\"))}function fd(a,b,c){a.b=c?jd(b,!0):b}function gd(a,b){if(b){b=Number(b);if(isNaN(b)||0>b)throw Error(\"Bad port number \"+b);a.i=b}else a.i=null}function hd(a,b,c){b instanceof kd?(a.c=b,qd(a.c,a.h)):(c||(b=ld(b,rd)),a.c=new kd(b,0,a.h))}\nfunction R(a,b,c){a.c.set(b,c)}function Qc(a,b,c){n(c)||(c=[String(c)]);sd(a.c,b,c)}function Mc(a){R(a,\"zx\",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^t()).toString(36));return a}function td(a){return a instanceof Q?M(a):new Q(a,void 0)}function ud(a,b,c,d){var e=new Q(null,void 0);a&&ed(e,a);b&&fd(e,b);c&&gd(e,c);d&&(e.a=d);return e}function jd(a,b){return a?b?decodeURI(a.replace(/%25/g,\"%2525\")):decodeURIComponent(a):\"\"}\nfunction ld(a,b,c){return l(a)?(a=encodeURI(a).replace(b,vd),c&&(a=a.replace(/%25([0-9a-fA-F]{2})/g,\"%$1\")),a):null}function vd(a){a=a.charCodeAt(0);return\"%\"+(a>>4&15).toString(16)+(a&15).toString(16)}var md=/[#\\/\\?@]/g,od=/[\\#\\?:]/g,nd=/[\\#\\?]/g,rd=/[\\#\\?@]/g,pd=/#/g;function kd(a,b,c){this.b=this.a=null;this.c=a||null;this.f=!!c}\nfunction S(a){a.a||(a.a=new O,a.b=0,a.c&&dd(a.c,function(b,c){b=decodeURIComponent(b.replace(/\\+/g,\" \"));S(a);a.c=null;b=wd(a,b);var d=a.a.get(b);d||a.a.set(b,d=[]);d.push(c);a.b+=1}))}g=kd.prototype;g.u=function(){S(this);return this.b};function xd(a,b){S(a);b=wd(a,b);P(a.a.b,b)&&(a.c=null,a.b-=a.a.get(b).length,bd(a.a,b))}function yd(a,b){S(a);b=wd(a,b);return P(a.a.b,b)}g.forEach=function(a,b){S(this);this.a.forEach(function(c,d){ta(c,function(c){a.call(b,c,d,this)},this)},this)};\ng.O=function(){S(this);for(var a=this.a.A(),b=this.a.O(),c=[],d=0;d<b.length;d++)for(var e=a[d],f=0;f<e.length;f++)c.push(b[d]);return c};g.A=function(a){S(this);var b=[];if(l(a))yd(this,a)&&(b=xa(b,this.a.get(wd(this,a))));else{a=this.a.A();for(var c=0;c<a.length;c++)b=xa(b,a[c])}return b};g.set=function(a,b){S(this);this.c=null;a=wd(this,a);yd(this,a)&&(this.b-=this.a.get(a).length);this.a.set(a,[b]);this.b+=1;return this};g.get=function(a,b){a=a?this.A(a):[];return 0<a.length?String(a[0]):b};\nfunction sd(a,b,c){xd(a,b);0<c.length&&(a.c=null,a.a.set(wd(a,b),ya(c)),a.b+=c.length)}g.toString=function(){if(this.c)return this.c;if(!this.a)return\"\";for(var a=[],b=this.a.O(),c=0;c<b.length;c++){var d=b[c],e=encodeURIComponent(String(d));d=this.A(d);for(var f=0;f<d.length;f++){var h=e;\"\"!==d[f]&&(h+=\"=\"+encodeURIComponent(String(d[f])));a.push(h)}}return this.c=a.join(\"&\")};function id(a){var b=new kd;b.c=a.c;a.a&&(b.a=new O(a.a),b.b=a.b);return b}\nfunction wd(a,b){b=String(b);a.f&&(b=b.toLowerCase());return b}function qd(a,b){b&&!a.f&&(S(a),a.c=null,a.a.forEach(function(a,b){var c=b.toLowerCase();b!=c&&(xd(this,b),sd(this,c,a))},a));a.f=b};function zd(){this.a=t()}var Ad=null;zd.prototype.set=function(a){this.a=a};zd.prototype.reset=function(){this.set(t())};zd.prototype.get=function(){return this.a};function Bd(){Ad||(Ad=new zd)}function Cd(){Ad||(Ad=new zd)}u(Cd,Bd);function Dd(){}var Ed={OPEN:\"a\",lb:\"b\",Ta:\"c\",ub:\"d\"};function Fd(){A.call(this,\"d\")}u(Fd,A);function Gd(){A.call(this,\"c\")}u(Gd,A);function Hd(a,b){this.a=a;this.b=b;this.c=this.i=null;this.h=!1;this.l=null;this.f=-1;this.m=this.g=null}g=Hd.prototype;g.R=null;function Id(a){I(a.b,\"TestConnection: starting stage 2\");var b=a.a.J.a;if(null!=b)I(a.b, true?\"Buffered\":\"Unbuffered\"),K(),b?(K(),Jd(a.a,a,!1)):(K(),Jd(a.a,a,!0));else{a.c=new L(a,a.b,0,void 0,void 0);a.c.h=a.i;b=Kd(a.a,a.g,a.l);K();Qc(b,\"TYPE\",\"xmlhttp\");var c=a.a.j,d=a.a.N;c&&d&&R(b,c,d);Oc(a.c,b,!1,a.g)}}g.ra=function(a){return this.a.ra(a)};\ng.abort=function(){this.c&&(this.c.cancel(),this.c=null);this.f=-1};g.Ka=function(){return!1};\ng.Na=function(a,b){this.f=a.v;if(0==this.R){I(this.b,\"TestConnection: Got data for stage 1\");if(!this.a.F&&(a=a.a)){var c=a.a?a.a.getResponseHeader(\"X-Client-Wire-Protocol\"):null;this.m=c?c:null;this.a.j&&((a=a.a?a.a.getResponseHeader(\"X-HTTP-Session-Id\"):null)?this.a.N=a:(a=this.b.a)&&G(a,\"Missing X_HTTP_SESSION_ID in the handshake response\"))}if(b){try{var d=this.a.la.a.parse(b)}catch(e){sc(this.b,e);Ld(this.a,this);return}this.g=d[0]}else I(this.b,\"TestConnection: Null responseText\"),Ld(this.a,\nthis)}else if(1==this.R)if(this.h)K();else if(\"11111\"==b){if(K(),this.h=!0,!z||10<=Number(Va))this.f=200,this.c.cancel(),I(this.b,\"Test connection succeeded; using streaming connection\"),K(),Jd(this.a,this,!0)}else K(),this.h=!1};\ng.wa=function(){this.f=this.c.v;this.c.c?0==this.R?(this.R=1,I(this.b,\"TestConnection: request complete for initial check\"),Id(this)):1==this.R&&(I(this.b,\"TestConnection: request complete for stage 2\"),this.h?(I(this.b,\"Test connection succeeded; using streaming connection\"),K(),Jd(this.a,this,!0)):(I(this.b,\"Test connection failed; not using streaming\"),K(),Jd(this.a,this,!1))):(I(this.b,\"TestConnection: request failed, in state \"+this.R),0==this.R?K():1==this.R&&K(),Ld(this.a,this))};g.fa=function(){return this.a.fa()};\ng.sa=function(){return this.a.sa()};function Md(){this.a=this.b=null};function Nd(a){this.a=new O;if(a){a=Yc(a);for(var b=a.length,c=0;c<b;c++){var d=a[c];this.a.set(T(d),d)}}}function T(a){var b=typeof a;return\"object\"==b&&a||\"function\"==b?\"o\"+(a[q]||(a[q]=++ea)):b.charAt(0)+a}Nd.prototype.u=function(){return this.a.u()};Nd.prototype.contains=function(a){a=T(a);return P(this.a.b,a)};Nd.prototype.A=function(){return this.a.A()};function Od(a){this.f=a||Pd;this.c=k.pa&&k.pa.La&&k.pa.La()&&k.pa.La().Cb?this.f:1;this.a=null;1<this.c&&(this.a=new Nd);this.b=null}var Pd=10;function Qd(a,b){a.a||-1==b.indexOf(\"spdy\")&&-1==b.indexOf(\"quic\")&&-1==b.indexOf(\"h2\")||(a.c=a.f,a.a=new Nd,a.b&&(Rd(a,a.b),a.b=null))}function Sd(a){return a.b?!0:a.a?a.a.u()>=a.c:!1}function Td(a,b){return a.b?a.b==b:a.a?a.a.contains(b):!1}function Rd(a,b){a.a?a.a.a.set(T(b),b):a.b=b}\nOd.prototype.cancel=function(){this.b?(this.b.cancel(),this.b=null):this.a&&0!=this.a.a.c&&(ta(this.a.A(),function(a){a.cancel()}),ad(this.a.a))};function Ud(a,b){this.a=a;this.b=b};function Vd(a,b){this.a=a;this.b=b}Vd.prototype.stringify=function(a){return k.JSON.stringify(a,this.a)};Vd.prototype.parse=function(a){return k.JSON.parse(a,this.b)};function Wd(){this.a=new Vd}function Xd(a,b,c){var d=c||\"\";try{Zc(a,function(a,c){var e=a;p(a)&&(e=Fb(a));b.push(d+c+\"=\"+encodeURIComponent(e))})}catch(e){throw b.push(d+\"type=\"+encodeURIComponent(\"_badmap\")),e;}};function Yd(a,b){var c=new qc;I(c,\"TestLoadImage: loading \"+a);var d=new Image;d.onload=ia(Zd,c,d,\"TestLoadImage: loaded\",!0,b);d.onerror=ia(Zd,c,d,\"TestLoadImage: error\",!1,b);d.onabort=ia(Zd,c,d,\"TestLoadImage: abort\",!1,b);d.ontimeout=ia(Zd,c,d,\"TestLoadImage: timeout\",!1,b);k.setTimeout(function(){if(d.ontimeout)d.ontimeout()},1E4);d.src=a}function Zd(a,b,c,d,e){try{I(a,c),b.onload=null,b.onerror=null,b.onabort=null,b.ontimeout=null,e(d)}catch(f){sc(a,f)}};function U(a){B.call(this);this.headers=new O;this.G=a||null;this.f=!1;this.F=this.a=null;this.M=this.s=\"\";this.j=0;this.g=\"\";this.h=this.I=this.o=this.H=!1;this.l=0;this.B=null;this.N=$d;this.C=this.m=!1}u(U,B);var $d=\"\";U.prototype.b=oc(\"goog.net.XhrIo\");var ae=/^https?$/i,be=[\"POST\",\"PUT\"];g=U.prototype;\ng.ta=function(a,b,c,d){if(this.a)throw Error(\"[goog.net.XhrIo] Object is active with another request=\"+this.s+\"; newUri=\"+a);b=b?b.toUpperCase():\"GET\";this.s=a;this.g=\"\";this.j=0;this.M=b;this.H=!1;this.f=!0;this.a=this.G?Fc(this.G):Fc(Dc);this.F=this.G?Bc(this.G):Bc(Dc);this.a.onreadystatechange=r(this.Ma,this);try{H(this.b,V(this,\"Opening Xhr\")),this.I=!0,this.a.open(b,String(a),!0),this.I=!1}catch(f){H(this.b,V(this,\"Error opening Xhr: \"+f.message));ce(this,f);return}a=c||\"\";var e=new O(this.headers);\nd&&Zc(d,function(a,b){e.set(b,a)});d=ua(e.O());c=k.FormData&&a instanceof k.FormData;!(0<=sa(be,b))||d||c||e.set(\"Content-Type\",\"application/x-www-form-urlencoded;charset=utf-8\");e.forEach(function(a,b){this.a.setRequestHeader(b,a)},this);this.N&&(this.a.responseType=this.N);\"withCredentials\"in this.a&&this.a.withCredentials!==this.m&&(this.a.withCredentials=this.m);try{de(this),0<this.l&&(this.C=ee(this.a),H(this.b,V(this,\"Will abort after \"+this.l+\"ms if incomplete, xhr2 \"+this.C)),this.C?(this.a.timeout=\nthis.l,this.a.ontimeout=r(this.Ja,this)):this.B=Zb(this.Ja,this.l,this)),H(this.b,V(this,\"Sending request\")),this.o=!0,this.a.send(a),this.o=!1}catch(f){H(this.b,V(this,\"Send error: \"+f.message)),ce(this,f)}};function ee(a){return z&&Ua(9)&&\"number\"==typeof a.timeout&&void 0!==a.ontimeout}function va(a){return\"content-type\"==a.toLowerCase()}\ng.Ja=function(){\"undefined\"!=typeof goog&&this.a&&(this.g=\"Timed out after \"+this.l+\"ms, aborting\",this.j=8,H(this.b,V(this,this.g)),this.dispatchEvent(\"timeout\"),this.abort(8))};function ce(a,b){a.f=!1;a.a&&(a.h=!0,a.a.abort(),a.h=!1);a.g=b;a.j=5;fe(a);ge(a)}function fe(a){a.H||(a.H=!0,a.dispatchEvent(\"complete\"),a.dispatchEvent(\"error\"))}\ng.abort=function(a){this.a&&this.f&&(H(this.b,V(this,\"Aborting\")),this.f=!1,this.h=!0,this.a.abort(),this.h=!1,this.j=a||7,this.dispatchEvent(\"complete\"),this.dispatchEvent(\"abort\"),ge(this))};g.w=function(){this.a&&(this.f&&(this.f=!1,this.h=!0,this.a.abort(),this.h=!1),ge(this,!0));U.L.w.call(this)};g.Ma=function(){this.i||(this.I||this.o||this.h?he(this):this.bb())};g.bb=function(){he(this)};\nfunction he(a){if(a.f&&\"undefined\"!=typeof goog)if(a.F[1]&&4==N(a)&&2==a.V())H(a.b,V(a,\"Local request error detected and ignored\"));else if(a.o&&4==N(a))Zb(a.Ma,0,a);else if(a.dispatchEvent(\"readystatechange\"),4==N(a)){H(a.b,V(a,\"Request complete\"));a.f=!1;try{var b=a.V();a:switch(b){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var c=!0;break a;default:c=!1}var d;if(!(d=c)){var e;if(e=0===b){var f=String(a.s).match(cd)[1]||null;if(!f&&k.self&&k.self.location){var h=k.self.location.protocol;\nf=h.substr(0,h.length-1)}e=!ae.test(f?f.toLowerCase():\"\")}d=e}d?(a.dispatchEvent(\"complete\"),a.dispatchEvent(\"success\")):(a.j=6,a.g=a.Ha()+\" [\"+a.V()+\"]\",fe(a))}finally{ge(a)}}}function ge(a,b){if(a.a){de(a);var c=a.a,d=a.F[0]?aa:null;a.a=null;a.F=null;b||a.dispatchEvent(\"ready\");try{c.onreadystatechange=d}catch(e){(a=a.b)&&F(a,\"Problem encountered resetting onreadystatechange: \"+e.message)}}}function de(a){a.a&&a.C&&(a.a.ontimeout=null);\"number\"==typeof a.B&&(k.clearTimeout(a.B),a.B=null)}\nfunction N(a){return a.a?a.a.readyState:0}g.V=function(){try{return 2<N(this)?this.a.status:-1}catch(a){return-1}};g.Ha=function(){try{return 2<N(this)?this.a.statusText:\"\"}catch(a){return H(this.b,\"Can not get status: \"+a.message),\"\"}};g.U=function(){try{return this.a?this.a.responseText:\"\"}catch(a){return H(this.b,\"Can not get responseText: \"+a.message),\"\"}};\ng.Za=function(a){if(this.a){var b=this.a.responseText;a&&0==b.indexOf(a)&&(b=b.substring(a.length));a:{a=b;if(k.JSON)try{var c=k.JSON.parse(a);break a}catch(d){}c=Eb(a)}return c}};g.Ga=function(){return this.j};g.$a=function(){return l(this.g)?this.g:String(this.g)};function V(a,b){return b+\" [\"+a.M+\" \"+a.s+\" \"+a.V()+\"]\"};function ie(a){var b=\"\";Ba(a,function(a,d){b+=d;b+=\":\";b+=a;b+=\"\\r\\n\"});return b}function je(a,b,c){a:{for(d in c){var d=!1;break a}d=!0}if(d)return a;c=ie(c);if(l(a)){b=encodeURIComponent(String(b));c=null!=c?\"=\"+encodeURIComponent(String(c)):\"\";if(b+=c){c=a.indexOf(\"#\");0>c&&(c=a.length);d=a.indexOf(\"?\");if(0>d||d>c){d=c;var e=\"\"}else e=a.substring(d+1,c);a=[a.substr(0,d),e,a.substr(c)];c=a[1];a[1]=b?c?c+\"&\"+b:b:c;a=a[0]+(a[1]?\"?\"+a[1]:\"\")+a[2]}return a}R(a,b,c);return a};function ke(a,b,c){this.za=b||0;this.Ba=0;this.h=[];this.l=[];this.a=new qc;this.J=c||new Md;this.ia=this.ya=this.H=this.ja=this.b=this.N=this.j=this.ha=this.f=this.P=this.i=null;this.Va=this.I=0;this.ka=this.C=this.s=this.m=this.o=this.c=null;this.v=this.Aa=this.S=-1;this.ga=this.B=this.G=0;this.T=a&&a.supportsCrossDomainXhr||!1;this.M=\"\";this.g=new Od(a&&a.concurrentRequestLimit);this.la=new Wd;this.F=a&&void 0!==a.backgroundChannelTest?a.backgroundChannelTest:!0;this.Ua=a&&a.fastHandshake||!1}\ng=ke.prototype;g.oa=8;g.D=1;function le(a){I(a.a,\"disconnect()\");me(a);if(3==a.D){var b=a.I++,c=M(a.H);R(c,\"SID\",a.M);R(c,\"RID\",b);R(c,\"TYPE\",\"terminate\");ne(a,c);b=new L(a,a.a,0,b,void 0);b.I=2;b.l=Mc(M(c));c=!1;k.navigator&&k.navigator.sendBeacon&&(c=k.navigator.sendBeacon(b.l.toString(),\"\"));c||((new Image).src=b.l);b.H=t();Pc(b)}oe(a)}\nfunction me(a){a.C&&(a.C.abort(),a.C=null);a.b&&(a.b.cancel(),a.b=null);a.m&&(k.clearTimeout(a.m),a.m=null);pe(a);a.g.cancel();a.o&&(k.clearTimeout(a.o),a.o=null)}function qe(a,b){if(1E3==a.h.length){var c=\"Already have 1000 queued maps upon queueing \"+Fb(b),d=a.a.a;d&&F(d,c)}a.h.push(new Ud(a.Va++,b));3==a.D&&re(a)}g.Ka=function(){return 0==this.D};function re(a){Sd(a.g)||a.o||(a.o=xc(r(a.Pa,a),0),a.G=0)}\ng.Pa=function(a){this.o=null;I(this.a,\"startForwardChannel_\");if(1==this.D)if(a)(a=this.a.a)&&F(a,\"Not supposed to retry the open\");else{I(this.a,\"open_()\");this.I=Math.floor(1E5*Math.random());a=this.I++;var b=new L(this,this.a,0,a,void 0),c=this.i;this.P&&(c?(c=Ea(c),Ga(c,this.P)):c=this.P);null===this.f&&(b.h=c);var d=se(this),e=M(this.H);R(e,\"RID\",a);0<this.za&&R(e,\"CVER\",this.za);this.F&&this.j&&R(e,\"X-HTTP-Session-Id\",this.j);ne(this,e);this.f&&c&&je(e,this.f,c);Rd(this.g,b);this.Ua?(R(e,\"$req\",\nd),Lc(b,e,null)):Lc(b,e,d);this.D=2}else 3==this.D&&(a?te(this,a):0==this.h.length?I(this.a,\"startForwardChannel_ returned: nothing to send\"):Sd(this.g)?(a=this.a.a)&&F(a,\"startForwardChannel_ returned: connection already in progress\"):(te(this),I(this.a,\"startForwardChannel_ finished, sent request\")))};\nfunction te(a,b){if(b){a.h=a.l.concat(a.h);a.l.length=0;var c=a.I-1}else c=a.I++;b=se(a);var d=M(a.H);R(d,\"SID\",a.M);R(d,\"RID\",c);R(d,\"AID\",a.S);ne(a,d);a.f&&a.i&&je(d,a.f,a.i);c=new L(a,a.a,0,c,a.G+1);null===a.f&&(c.h=a.i);c.setTimeout(Math.round(1E4)+Math.round(1E4*Math.random()));Rd(a.g,c);Lc(c,d,b)}function ne(a,b){a.c&&Zc({},function(a,d){R(b,d,a)})}\nfunction se(a){var b=Math.min(a.h.length,1E3),c=a.c?r(a.c.Wa,a.c,a):null,d=a.h,e=[\"count=\"+b];if(0<b){var f=d[0].a;e.push(\"ofs=\"+f)}else f=0;for(var h=0;h<b;h++){var m=d[h].a,v=d[h].b;m-=f;try{Xd(v,e,\"req\"+m+\"_\")}catch(Ra){c&&c(v)}}c=e.join(\"&\");a.l=a.l.concat(a.h.splice(0,b));return c}function ue(a){if(!a.b&&!a.m){a.ga=1;var b=a.Oa;Tb||Ub();Wb||(Tb(),Wb=!0);var c=Pb,d=C.get();d.set(b,a);c.b?c.b.next=d:c.a=d;c.b=d;a.B=0}}\nfunction ve(a){if(a.b||a.m)return(a=a.a.a)&&F(a,\"Request already in progress\"),!1;if(3<=a.B)return!1;I(a.a,\"Going to retry GET\");a.ga++;a.m=xc(r(a.Oa,a),we(a,a.B));a.B++;return!0}\ng.Oa=function(){this.m=null;I(this.a,\"Creating new HttpRequest\");this.b=new L(this,this.a,0,\"rpc\",this.ga);null===this.f&&(this.b.h=this.i);this.b.N=0;var a=M(this.ya);R(a,\"RID\",\"rpc\");R(a,\"SID\",this.M);R(a,\"CI\",this.ka?\"0\":\"1\");R(a,\"AID\",this.S);ne(this,a);R(a,\"TYPE\",\"xmlhttp\");this.f&&this.i&&je(a,this.f,this.i);Oc(this.b,a,!0,this.ia);I(this.a,\"New Request created\")};\nfunction Jd(a,b,c){I(a.a,\"Test Connection Finished\");var d=b.m;d&&Qd(a.g,d);a.ka=c;a.v=b.f;I(a.a,\"connectChannel_()\");a.H=xe(a,a.ja);re(a)}function Ld(a,b){I(a.a,\"Test Connection Failed\");a.v=b.f;W(a,2)}\ng.Na=function(a,b){if(0!=this.D&&(this.b==a||Td(this.g,a)))if(this.v=a.v,Td(this.g,a)&&3==this.D){try{var c=this.la.a.parse(b)}catch(f){c=null}if(n(c)&&3==c.length)if(b=c,0==b[0])a:if(I(this.a,\"Server claims our backchannel is missing.\"),this.m)I(this.a,\"But we are currently starting the request.\");else{if(this.b)if(this.b.H+3E3<a.H)pe(this),this.b.cancel(),this.b=null;else break a;else(a=this.a.a)&&G(a,\"We do not have a BackChannel established\");ve(this);K()}else this.Aa=b[1],a=this.Aa-this.S,0<\na&&(b=b[2],I(this.a,b+\" bytes (in \"+a+\" arrays) are outstanding on the BackChannel\"),37500>b&&this.ka&&0==this.B&&!this.s&&(this.s=xc(r(this.ab,this),6E3)));else I(this.a,\"Bad POST response data returned\"),W(this,11)}else if(this.b==a&&pe(this),!/^[\\s\\xa0]*$/.test(b))for(b=c=this.la.a.parse(b),c=0;c<b.length;c++){var d=b[c];this.S=d[0];d=d[1];if(2==this.D)if(\"c\"==d[0]){this.M=d[1];this.ia=d[2];var e=d[3];null!=e&&(this.oa=e,I(this.a,\"VER=\"+this.oa));d=d[4];null!=d&&(this.Ba=d,I(this.a,\"SVER=\"+this.Ba));\nthis.F&&(d=a.a)&&((e=d.a?d.a.getResponseHeader(\"X-Client-Wire-Protocol\"):null)&&Qd(this.g,e),this.j&&((d=d.a?d.a.getResponseHeader(\"X-HTTP-Session-Id\"):null)?(this.N=d,R(this.H,this.j,d)):(d=this.a.a)&&G(d,\"Missing X_HTTP_SESSION_ID in the handshake response\")));this.D=3;this.c&&this.c.Fa(this);this.ya=Kd(this,this.ia,this.ja);ue(this)}else\"stop\"!=d[0]&&\"close\"!=d[0]||W(this,7);else 3==this.D&&(\"stop\"==d[0]||\"close\"==d[0]?\"stop\"==d[0]?W(this,7):le(this):\"noop\"!=d[0]&&this.c&&this.c.Ea(this,d),this.B=\n0)}};g.ab=function(){null!=this.s&&(this.s=null,this.b.cancel(),this.b=null,ve(this),K())};function pe(a){null!=a.s&&(k.clearTimeout(a.s),a.s=null)}\ng.wa=function(a){I(this.a,\"Request complete\");if(this.b==a){pe(this);this.b=null;var b=2}else if(Td(this.g,a))b=this.g,b.b&&b.b==a?b.b=null:b.a&&b.a.contains(a)&&bd(b.a.a,T(a)),b=1;else return;this.v=a.v;if(0!=this.D)if(a.c)1==b?(t(),J.dispatchEvent(new wc(J)),re(this),this.l.length=0):ue(this);else{var c=a.i;if(3==c||0==c&&0<this.v)I(this.a,\"Not retrying due to error type\");else{I(this.a,\"Maybe retrying, last error: \"+Ic(c,this.v));var d;if(d=1==b)Sd(this.g)||this.o?((a=this.a.a)&&F(a,\"Request already in progress\"),\nd=!1):1==this.D||2==this.D||2<=this.G?d=!1:(I(this.a,\"Going to retry POST\"),this.o=xc(r(this.Pa,this,a),we(this,this.G)),this.G++,d=!0);if(d||2==b&&ve(this))return;I(this.a,\"Exceeded max number of retries\")}I(this.a,\"Error: HTTP request failed\");switch(c){case 1:W(this,5);break;case 4:W(this,10);break;case 3:W(this,6);break;default:W(this,2)}}};function we(a,b){var c=5E3+Math.floor(1E4*Math.random());a.sa()||(I(a.a,\"Inactive channel\"),c*=2);return c*b}\nfunction W(a,b){I(a.a,\"Error code \"+b);if(2==b){var c=null;a.c&&(c=null);var d=r(a.ib,a);c||(c=new Q(\"//www.google.com/images/cleardot.gif\"),k.location&&\"http\"==k.location.protocol||ed(c,\"https\"),Mc(c));Yd(c.toString(),d)}else K();I(a.a,\"HttpChannel: error - \"+b);a.D=0;a.c&&a.c.Da(a,b);oe(a);me(a)}g.ib=function(a){a?I(this.a,\"Successfully pinged google.com\"):I(this.a,\"Failed to ping google.com\");K()};\nfunction oe(a){a.D=0;a.v=-1;if(a.c)if(0==a.l.length&&0==a.h.length)a.c.na(a);else{I(a.a,\"Number of undelivered maps, pending: \"+a.l.length+\", outgoing: \"+a.h.length);var b=ya(a.l),c=ya(a.h);a.l.length=0;a.h.length=0;a.c.na(a,b,c)}}function xe(a,b){b=ye(a,null,b);I(a.a,\"GetForwardChannelUri: \"+b);return b}function Kd(a,b,c){b=ye(a,a.fa()?b:null,c);I(a.a,\"GetBackChannelUri: \"+b);return b}\nfunction ye(a,b,c){var d=td(c);if(\"\"!=d.b)b&&fd(d,b+\".\"+d.b),gd(d,d.i);else{var e=k.location,f;b?f=b+\".\"+e.hostname:f=e.hostname;d=ud(e.protocol,f,e.port,c)}a.ha&&Ba(a.ha,function(a,b){R(d,b,a)});b=a.j;c=a.N;b&&c&&R(d,b,c);R(d,\"VER\",a.oa);ne(a,d);return d}g.ra=function(a){if(a&&!this.T)throw Error(\"Can't create secondary domain capable XhrIo object.\");a=new U;a.m=this.T;return a};g.sa=function(){return!!this.c&&!0};g.fa=function(){return this.T};new Cd;function ze(){}g=ze.prototype;g.Fa=function(){};\ng.Ea=function(){};g.Da=function(){};g.na=function(){};g.Wa=function(){};function Ae(a){for(var b=arguments[0],c=1;c<arguments.length;c++){var d=arguments[c];if(0==d.lastIndexOf(\"/\",0))b=d;else{var e;(e=\"\"==b)||(e=b.length-1,e=0<=e&&b.indexOf(\"/\",e)==e);e?b+=d:b+=\"/\"+d}}return b};function Be(){if(z&&!(10<=Number(Va)))throw Error(\"Environmental error: no available transport.\");}Be.prototype.a=function(a,b){return new X(a,b)};\nfunction X(a,b){B.call(this);this.a=new ke(b,20);this.b=a;this.s=b&&b.testUrl?b.testUrl:Ae(this.b,\"test\");this.f=oc(\"goog.labs.net.webChannel.WebChannelBaseTransport\");this.g=b&&b.messageUrlParams||null;a=b&&b.messageHeaders||null;b&&b.clientProtocolHeaderRequired&&(a?a[\"X-Client-Protocol\"]=\"webchannel\":a={\"X-Client-Protocol\":\"webchannel\"});this.a.i=a;this.a.P=b&&b.initMessageHeaders||null;(a=b&&b.httpHeadersOverwriteParam)&&!/^[\\s\\xa0]*$/.test(a)&&(this.a.f=a);this.o=b&&b.supportsCrossDomainXhr||\n!1;this.m=b&&b.sendRawJson||!1;(b=b&&b.httpSessionIdParam)&&!/^[\\s\\xa0]*$/.test(b)&&(this.a.j=b,a=this.g,null!==a&&b in a&&(a=this.g,b in a&&delete a[b],(a=this.f)&&G(a,\"Ignore httpSessionIdParam also specified with messageUrlParams: \"+b)));this.h=new Ce(this)}u(X,B);\nX.prototype.j=function(){this.a.c=this.h;this.o&&(this.a.T=!0);var a=this.a,b=this.s,c=this.b,d=this.g||void 0;I(a.a,\"connect()\");K();a.ja=c;a.ha=d||{};a.F&&(I(a.a,\"connect() bypassed channel-test.\"),a.J.b=[],a.J.a=!1);I(a.a,\"connectTest_()\");a.C=new Hd(a,a.a);null===a.f&&(a.C.i=a.i);c=b;a.f&&a.i&&(c=je(b,a.f,a.i));a=a.C;a.l=c;b=xe(a.a,a.l);K();(c=a.a.J.b)?(a.g=c[0],a.R=1,Id(a)):(Qc(b,\"MODE\",\"init\"),!a.a.F&&a.a.j&&Qc(b,\"X-HTTP-Session-Id\",a.a.j),a.c=new L(a,a.b,0,void 0,void 0),a.c.h=a.i,Oc(a.c,b,\n!1,null),a.R=0)};X.prototype.close=function(){le(this.a)};X.prototype.l=function(a){if(this.m){var b={};b.__data__=Fb(a);qe(this.a,b)}else qe(this.a,a)};X.prototype.w=function(){this.a.c=null;delete this.h;le(this.a);delete this.a;X.L.w.call(this)};function De(a){Fd.call(this);this.data=a}u(De,Fd);function Ee(){Gd.call(this);this.status=1}u(Ee,Gd);function Ce(a){this.a=a}u(Ce,ze);Ce.prototype.Fa=function(){pc(this.a.f,\"WebChannel opened on \"+this.a.b);this.a.dispatchEvent(\"a\")};\nCe.prototype.Ea=function(a,b){this.a.dispatchEvent(new De(b))};Ce.prototype.Da=function(a,b){pc(this.a.f,\"WebChannel aborted on \"+this.a.b+\" due to channel error: \"+b);this.a.dispatchEvent(new Ee)};Ce.prototype.na=function(){pc(this.a.f,\"WebChannel closed on \"+this.a.b);this.a.dispatchEvent(\"b\")};var Fe=ia(function(a,b){function c(){}c.prototype=a.prototype;var d=new c;a.apply(d,Array.prototype.slice.call(arguments,1));return d},Be);function Ge(){this.b=[];this.a=[]}function He(a){0==a.b.length&&(a.b=a.a,a.b.reverse(),a.a=[]);return a.b.pop()}Ge.prototype.u=function(){return this.b.length+this.a.length};Ge.prototype.contains=function(a){return 0<=sa(this.b,a)||0<=sa(this.a,a)};Ge.prototype.A=function(){for(var a=[],b=this.b.length-1;0<=b;--b)a.push(this.b[b]);var c=this.a.length;for(b=0;b<c;++b)a.push(this.a[b]);return a};function Ie(a,b){w.call(this);this.h=a||0;this.c=b||10;if(this.h>this.c)throw Error(Je);this.a=new Ge;this.b=new Nd;this.g=null;this.aa()}u(Ie,w);var Je=\"[goog.structs.Pool] Min can not be greater than max\";g=Ie.prototype;g.ca=function(){var a=t();if(!(null!=this.g&&0>a-this.g)){for(var b;0<this.a.u()&&(b=He(this.a),!this.va(b));)this.aa();!b&&this.u()<this.c&&(b=this.qa());b&&(this.g=a,this.b.a.set(T(b),b));return b}};g.hb=function(a){return bd(this.b.a,T(a))?(this.ma(a),!0):!1};\ng.ma=function(a){bd(this.b.a,T(a));this.va(a)&&this.u()<this.c?this.a.a.push(a):Ke(a)};g.aa=function(){for(var a=this.a;this.u()<this.h;){var b=this.qa();a.a.push(b)}for(;this.u()>this.c&&0<this.a.u();)Ke(He(a))};g.qa=function(){return{}};function Ke(a){if(\"function\"==typeof a.Y)a.Y();else for(var b in a)a[b]=null}g.va=function(a){return\"function\"==typeof a.Xa?a.Xa():!0};g.contains=function(a){return this.a.contains(a)||this.b.contains(a)};g.u=function(){return this.a.u()+this.b.u()};\ng.w=function(){Ie.L.w.call(this);if(0<this.b.u())throw Error(\"[goog.structs.Pool] Objects not released\");delete this.b;for(var a=this.a;0!=a.b.length||0!=a.a.length;)Ke(He(a));delete this.a};function Le(a,b){this.a=a;this.b=b};function Me(a){this.a=[];if(a)a:{if(a instanceof Me){var b=a.O();a=a.A();if(0>=this.u()){for(var c=this.a,d=0;d<b.length;d++)c.push(new Le(b[d],a[d]));break a}}else b=Da(a),a=Ca(a);for(d=0;d<b.length;d++)Ne(this,b[d],a[d])}}function Ne(a,b,c){var d=a.a;d.push(new Le(b,c));b=d.length-1;a=a.a;for(c=a[b];0<b;)if(d=b-1>>1,a[d].a>c.a)a[b]=a[d],b=d;else break;a[b]=c}Me.prototype.A=function(){for(var a=this.a,b=[],c=a.length,d=0;d<c;d++)b.push(a[d].b);return b};\nMe.prototype.O=function(){for(var a=this.a,b=[],c=a.length,d=0;d<c;d++)b.push(a[d].a);return b};Me.prototype.u=function(){return this.a.length};function Oe(){Me.call(this)}u(Oe,Me);function Y(a,b){this.f=new Oe;Ie.call(this,a,b)}u(Y,Ie);g=Y.prototype;g.ca=function(a,b){if(!a)return Y.L.ca.call(this);Ne(this.f,void 0!==b?b:100,a);this.ua()};g.ua=function(){for(var a=this.f;0<a.u();){var b=this.ca();if(b){var c=a,d=c.a,e=d.length;var f=d[0];if(0>=e)f=void 0;else{if(1==e)wa(d);else{d[0]=d.pop();d=0;c=c.a;e=c.length;for(var h=c[d];d<e>>1;){var m=2*d+1,v=2*d+2;m=v<e&&c[v].a<c[m].a?v:m;if(c[m].a>h.a)break;c[d]=c[m];d=m}c[d]=h}f=f.b}f.apply(this,[b])}else break}};\ng.ma=function(a){Y.L.ma.call(this,a);this.ua()};g.aa=function(){Y.L.aa.call(this);this.ua()};g.w=function(){Y.L.w.call(this);k.clearTimeout(void 0);wa(this.f.a);this.f=null};function Z(a,b,c,d){this.l=a;this.j=!!d;Y.call(this,b,c)}u(Z,Y);Z.prototype.qa=function(){var a=new U,b=this.l;b&&b.forEach(function(b,d){a.headers.set(d,b)});this.j&&(a.m=!0);return a};Z.prototype.va=function(a){return!a.i&&!a.a};Be.prototype.createWebChannel=Be.prototype.a;X.prototype.send=X.prototype.l;X.prototype.open=X.prototype.j;X.prototype.close=X.prototype.close;yc.NO_ERROR=0;yc.TIMEOUT=8;yc.HTTP_ERROR=6;zc.COMPLETE=\"complete\";Dd.EventType=Ed;Ed.OPEN=\"a\";Ed.CLOSE=\"b\";Ed.ERROR=\"c\";Ed.MESSAGE=\"d\";B.prototype.listen=B.prototype.$;Z.prototype.getObject=Z.prototype.ca;Z.prototype.releaseObject=Z.prototype.hb;U.prototype.listenOnce=U.prototype.Ia;U.prototype.getLastError=U.prototype.$a;U.prototype.getLastErrorCode=U.prototype.Ga;\nU.prototype.getStatus=U.prototype.V;U.prototype.getStatusText=U.prototype.Ha;U.prototype.getResponseJson=U.prototype.Za;U.prototype.getResponseText=U.prototype.U;U.prototype.getResponseText=U.prototype.U;U.prototype.send=U.prototype.ta;module.exports={createWebChannelTransport:Fe,ErrorCode:yc,EventType:zc,WebChannel:Dd,XhrIoPool:Z};}).call(typeof window !== 'undefined' ? window : this)\n\n\n/***/ })\n\n},[113]);\n        } catch(error) {\n          throw new Error(\n            'Cannot instantiate firebase-firestore.js - ' +\n            'be sure to load firebase-app.js first.'\n          )\n        }\n\n\n// WEBPACK FOOTER //\n// firebase-firestore.js","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nrequire('@firebase/firestore');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./firestore/index.js\n// module id = 113\n// module chunks = 1","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* tslint:disable:no-console */\nimport { SDK_VERSION } from '../core/version';\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n    LogLevel[LogLevel[\"ERROR\"] = 1] = \"ERROR\";\n    LogLevel[LogLevel[\"SILENT\"] = 2] = \"SILENT\";\n})(LogLevel = LogLevel || (LogLevel = {}));\nvar logLevel = LogLevel.ERROR;\n// Helper methods are needed because variables can't be exported as read/write\nexport function getLogLevel() {\n    return logLevel;\n}\nexport function setLogLevel(newLevel) {\n    logLevel = newLevel;\n}\nexport function debug(tag, msg) {\n    var obj = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        obj[_i - 2] = arguments[_i];\n    }\n    if (logLevel <= LogLevel.DEBUG) {\n        var time = new Date().toISOString();\n        var args = obj.map(argToString);\n        console.log.apply(console, [\"Firestore (\" + SDK_VERSION + \") \" + time + \" [\" + tag + \"]: \" + msg].concat(args));\n    }\n}\nexport function error(msg) {\n    var obj = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        obj[_i - 1] = arguments[_i];\n    }\n    if (logLevel <= LogLevel.ERROR) {\n        var time = new Date().toISOString();\n        var args = obj.map(argToString);\n        console.error.apply(console, [\"Firestore (\" + SDK_VERSION + \") \" + time + \": \" + msg].concat(args));\n    }\n}\n/**\n * Converts an additional log parameter to a string representation.\n */\nfunction argToString(obj) {\n    if (typeof obj === 'string') {\n        return obj;\n    }\n    else {\n        try {\n            return JSON.stringify(obj);\n        }\n        catch (e) {\n            // Converting to JSON failed, just log the object directly\n            return obj;\n        }\n    }\n}\n\n//# sourceMappingURL=log.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/log.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SDK_VERSION } from '../core/version';\nimport { error } from './log';\n/**\n * Unconditionally fails, throwing an Error with the given message.\n *\n * Returns any so it can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */\nexport function fail(failure) {\n    // Log the failure in addition to throw an exception, just in case the\n    // exception is swallowed.\n    var message = \"FIRESTORE (\" + SDK_VERSION + \") INTERNAL ASSERTION FAILED: \" + failure;\n    error(message);\n    // NOTE: We don't use FirestoreError here because these are internal failures\n    // that cannot be handled by the user. (Also it would create a circular\n    // dependency between the error and assert modules which doesn't work.)\n    throw new Error(message);\n}\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n */\nexport function assert(assertion, message) {\n    if (!assertion) {\n        fail(message);\n    }\n}\n\n//# sourceMappingURL=assert.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/assert.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from '../util/assert';\n/**\n * Provides singleton helpers where setup code can inject a platform at runtime.\n * setPlatform needs to be set before Firestore is used and must be set exactly\n * once.\n */\nvar PlatformSupport = /** @class */ (function () {\n    function PlatformSupport() {\n    }\n    PlatformSupport.setPlatform = function (platform) {\n        if (PlatformSupport.platform) {\n            fail('Platform already defined');\n        }\n        PlatformSupport.platform = platform;\n    };\n    PlatformSupport.getPlatform = function () {\n        if (!PlatformSupport.platform) {\n            fail('Platform not set');\n        }\n        return PlatformSupport.platform;\n    };\n    return PlatformSupport;\n}());\nexport { PlatformSupport };\n/**\n * Returns the representation of an empty \"proto\" byte string for the\n * platform.\n */\nexport function emptyByteString() {\n    return PlatformSupport.getPlatform().emptyByteString;\n}\n\n//# sourceMappingURL=platform.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/platform/platform.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// We are doing some heavy reflective stuff, lots of any casting necessary\n/* tslint:disable:no-any */\nimport { Code, FirestoreError } from './error';\n/**\n * Helper function to prevent instantiation through the constructor.\n *\n * This method creates a new constructor that throws when it's invoked.\n * The prototype of that constructor is then set to the prototype of the hidden\n * \"class\" to expose all the prototype methods and allow for instanceof\n * checks.\n *\n * To also make all the static methods available, all properties of the\n * original constructor are copied to the new constructor.\n */\nexport function makeConstructorPrivate(cls, optionalMessage) {\n    function PublicConstructor() {\n        var error = 'This constructor is private.';\n        if (optionalMessage) {\n            error += ' ';\n            error += optionalMessage;\n        }\n        throw new FirestoreError(Code.INVALID_ARGUMENT, error);\n    }\n    // Make sure instanceof checks work and all methods are exposed on the public\n    // constructor\n    PublicConstructor.prototype = cls.prototype;\n    // Copy any static methods/members\n    for (var staticProperty in cls) {\n        if (cls.hasOwnProperty(staticProperty)) {\n            PublicConstructor[staticProperty] = cls[staticProperty];\n        }\n    }\n    return PublicConstructor;\n}\n\n//# sourceMappingURL=api.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/api.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from './assert';\nexport function contains(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\nexport function get(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key) ? obj[key] : null;\n}\nexport function size(obj) {\n    var count = 0;\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            count++;\n        }\n    }\n    return count;\n}\n/** Returns the given value if it's defined or the defaultValue otherwise. */\nexport function defaulted(value, defaultValue) {\n    return value !== undefined ? value : defaultValue;\n}\nexport function forEachNumber(obj, fn) {\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var num = parseInt(key, 10);\n            if (!isNaN(num)) {\n                fn(num, obj[key]);\n            }\n        }\n    }\n}\nexport function forEach(obj, fn) {\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            fn(key, obj[key]);\n        }\n    }\n}\nexport function lookupOrInsert(obj, key, valFn) {\n    if (!contains(obj, key)) {\n        obj[key] = valFn();\n    }\n    return obj[key];\n}\nexport function isEmpty(obj) {\n    assert(obj != null && typeof obj === 'object', 'isEmpty() expects object parameter.');\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function shallowCopy(obj) {\n    assert(obj && typeof obj === 'object', 'shallowCopy() expects object parameter.');\n    var result = {};\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            result[key] = obj[key];\n        }\n    }\n    return result;\n}\n\n//# sourceMappingURL=obj.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/obj.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from './assert';\nimport { Code, FirestoreError } from './error';\nimport * as obj from './obj';\n/**\n * Validates the invocation of functionName has the exact number of arguments.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateExactNumberOfArgs('myFunction', arguments, 2);\n */\nexport function validateExactNumberOfArgs(functionName, args, numberOfArgs) {\n    if (args.length !== numberOfArgs) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires \" +\n            formatPlural(numberOfArgs, 'argument') +\n            ', but was called with ' +\n            formatPlural(args.length, 'argument') +\n            '.');\n    }\n}\n/**\n * Validates the invocation of functionName has at least the provided number of\n * arguments (but can have many more).\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateAtLeastNumberOfArgs('myFunction', arguments, 2);\n */\nexport function validateAtLeastNumberOfArgs(functionName, args, minNumberOfArgs) {\n    if (args.length < minNumberOfArgs) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires at least \" +\n            formatPlural(minNumberOfArgs, 'argument') +\n            ', but was called with ' +\n            formatPlural(args.length, 'argument') +\n            '.');\n    }\n}\n/**\n * Validates the invocation of functionName has number of arguments between\n * the values provided.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateBetweenNumberOfArgs('myFunction', arguments, 2, 3);\n */\nexport function validateBetweenNumberOfArgs(functionName, args, minNumberOfArgs, maxNumberOfArgs) {\n    if (args.length < minNumberOfArgs || args.length > maxNumberOfArgs) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires between \" + minNumberOfArgs + \" and \" +\n            (maxNumberOfArgs + \" arguments, but was called with \") +\n            formatPlural(args.length, 'argument') +\n            '.');\n    }\n}\n/**\n * Validates the provided argument is an array and has as least the expected\n * number of elements.\n */\nexport function validateNamedArrayAtLeastNumberOfElements(functionName, value, name, minNumberOfElements) {\n    if (!(value instanceof Array) || value.length < minNumberOfElements) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + name + \" argument to be an \" +\n            'array with at least ' +\n            (formatPlural(minNumberOfElements, 'element') + \".\"));\n    }\n}\n/**\n * Validates the provided positional argument has the native JavaScript type\n * using typeof checks.\n */\nexport function validateArgType(functionName, type, position, argument) {\n    validateType(functionName, type, ordinal(position) + \" argument\", argument);\n}\n/**\n * Validates the provided argument has the native JavaScript type using\n * typeof checks or is undefined.\n */\nexport function validateOptionalArgType(functionName, type, position, argument) {\n    if (argument !== undefined) {\n        validateArgType(functionName, type, position, argument);\n    }\n}\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks.\n */\nexport function validateNamedType(functionName, type, optionName, argument) {\n    validateType(functionName, type, optionName + \" option\", argument);\n}\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks or is undefined.\n */\nexport function validateNamedOptionalType(functionName, type, optionName, argument) {\n    if (argument !== undefined) {\n        validateNamedType(functionName, type, optionName, argument);\n    }\n}\n/** Helper to validate the type of a provided input. */\nfunction validateType(functionName, type, inputName, input) {\n    if (typeof input !== type || (type === 'object' && !isPlainObject(input))) {\n        var description = valueDescription(input);\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + inputName + \" \" +\n            (\"to be of type \" + type + \", but it was: \" + description));\n    }\n}\n/**\n * Returns true iff it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\nexport function isPlainObject(input) {\n    return (typeof input === 'object' &&\n        input !== null &&\n        Object.getPrototypeOf(input) === Object.prototype);\n}\n/** Returns a string describing the type / value of the provided input. */\nexport function valueDescription(input) {\n    if (input === undefined) {\n        return 'undefined';\n    }\n    else if (input === null) {\n        return 'null';\n    }\n    else if (typeof input === 'string') {\n        if (input.length > 20) {\n            input = input.substring(0, 20) + \"...\";\n        }\n        return JSON.stringify(input);\n    }\n    else if (typeof input === 'number' || typeof input === 'boolean') {\n        return '' + input;\n    }\n    else if (typeof input === 'object') {\n        if (input instanceof Array) {\n            return 'an array';\n        }\n        else {\n            var customObjectName = tryGetCustomObjectType(input);\n            if (customObjectName) {\n                return \"a custom \" + customObjectName + \" object\";\n            }\n            else {\n                return 'an object';\n            }\n        }\n    }\n    else if (typeof input === 'function') {\n        return 'a function';\n    }\n    else {\n        return fail('Unknown wrong type: ' + typeof input);\n    }\n}\n/** Hacky method to try to get the constructor name for an object. */\nexport function tryGetCustomObjectType(input) {\n    if (input.constructor) {\n        var funcNameRegex = /function\\s+([^\\s(]+)\\s*\\(/;\n        var results = funcNameRegex.exec(input.constructor.toString());\n        if (results && results.length > 1) {\n            return results[1];\n        }\n    }\n    return null;\n}\n/** Validates the provided argument is defined. */\nexport function validateDefined(functionName, position, argument) {\n    if (argument === undefined) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires a valid \" + ordinal(position) + \" \" +\n            \"argument, but it was undefined.\");\n    }\n}\n/**\n * Validates the provided positional argument is an object, and its keys and\n * values match the expected keys and types provided in optionTypes.\n */\nexport function validateOptionNames(functionName, options, optionNames) {\n    obj.forEach(options, function (key, _) {\n        if (optionNames.indexOf(key) < 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Unknown option '\" + key + \"' passed to function \" + functionName + \"(). \" +\n                'Available options: ' +\n                optionNames.join(', '));\n        }\n    });\n}\n/**\n * Helper method to throw an error that the provided argument did not pass\n * an instanceof check.\n */\nexport function invalidClassError(functionName, type, position, argument) {\n    var description = valueDescription(argument);\n    return new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + ordinal(position) + \" \" +\n        (\"argument to be a \" + type + \", but it was: \" + description));\n}\n/** Converts a number to its english word representation */\nfunction ordinal(num) {\n    switch (num) {\n        case 1:\n            return 'first';\n        case 2:\n            return 'second';\n        case 3:\n            return 'third';\n        default:\n            return num + 'th';\n    }\n}\n/**\n * Formats the given word as plural conditionally given the preceding number.\n */\nfunction formatPlural(num, str) {\n    return num + \" \" + str + (num === 1 ? '' : 's');\n}\n\n//# sourceMappingURL=input_validation.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/input_validation.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from './assert';\n// tslint:disable-next-line:class-as-namespace\nvar AutoId = /** @class */ (function () {\n    function AutoId() {\n    }\n    AutoId.newId = function () {\n        // Alphanumeric characters\n        var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var autoId = '';\n        for (var i = 0; i < 20; i++) {\n            autoId += chars.charAt(Math.floor(Math.random() * chars.length));\n        }\n        assert(autoId.length === 20, 'Invalid auto ID: ' + autoId);\n        return autoId;\n    };\n    return AutoId;\n}());\nexport { AutoId };\nexport function primitiveComparator(left, right) {\n    if (left < right)\n        return -1;\n    if (left > right)\n        return 1;\n    return 0;\n}\n/** Helper to compare nullable (or undefined-able) objects using equals(). */\nexport function equals(left, right) {\n    if (left !== null && left !== undefined) {\n        return !!(right && left.equals(right));\n    }\n    else {\n        // HACK: Explicitly cast since TypeScript's type narrowing apparently isn't\n        // smart enough.\n        return left === right;\n    }\n}\n/** Helper to compare arrays using equals(). */\nexport function arrayEquals(left, right) {\n    if (left.length !== right.length) {\n        return false;\n    }\n    for (var i = 0; i < left.length; i++) {\n        if (!left[i].equals(right[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Returns the largest lexicographically smaller string of equal or smaller\n * length. Returns an empty string if there is no such predecessor (if the input\n * is empty).\n *\n * Strings returned from this method can be invalid UTF-16 but this is sufficent\n * in use for indexeddb because that depends on lexicographical ordering but\n * shouldn't be used elsewhere.\n */\nexport function immediatePredecessor(s) {\n    // We can decrement the last character in the string and be done\n    // unless that character is 0 (0x0000), in which case we have to erase the\n    // last character.\n    var lastIndex = s.length - 1;\n    if (s.length === 0) {\n        // Special case the empty string.\n        return '';\n    }\n    else if (s.charAt(lastIndex) === '\\0') {\n        return s.substring(0, lastIndex);\n    }\n    else {\n        return (s.substring(0, lastIndex) +\n            String.fromCharCode(s.charCodeAt(lastIndex) - 1));\n    }\n}\n/**\n * Returns the immediate lexicographically-following string. This is useful to\n * construct an inclusive range for indexeddb iterators.\n */\nexport function immediateSuccessor(s) {\n    // Return the input string, with an additional NUL byte appended.\n    return s + '\\0';\n}\n\n//# sourceMappingURL=misc.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/misc.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { PlatformSupport } from '../platform/platform';\nimport { makeConstructorPrivate } from '../util/api';\nimport { Code, FirestoreError } from '../util/error';\nimport { invalidClassError, validateArgType, validateExactNumberOfArgs } from '../util/input_validation';\nimport { primitiveComparator } from '../util/misc';\n/** Helper function to assert Uint8Array is available at runtime. */\nfunction assertUint8ArrayAvailable() {\n    if (typeof Uint8Array === 'undefined') {\n        throw new FirestoreError(Code.UNIMPLEMENTED, 'Uint8Arrays are not available in this environment.');\n    }\n}\n/** Helper function to assert Base64 functions are available at runtime. */\nfunction assertBase64Available() {\n    if (!PlatformSupport.getPlatform().base64Available) {\n        throw new FirestoreError(Code.UNIMPLEMENTED, 'Blobs are unavailable in Firestore in this environment.');\n    }\n}\n/**\n * Immutable class holding a blob (binary data).\n * This class is directly exposed in the public API.\n *\n * Note that while you can't hide the constructor in JavaScript code, we are\n * using the hack above to make sure no-one outside this module can call it.\n */\nvar Blob = /** @class */ (function () {\n    function Blob(binaryString) {\n        assertBase64Available();\n        this._binaryString = binaryString;\n    }\n    Blob.fromBase64String = function (base64) {\n        validateExactNumberOfArgs('Blob.fromBase64String', arguments, 1);\n        validateArgType('Blob.fromBase64String', 'string', 1, base64);\n        assertBase64Available();\n        try {\n            var binaryString = PlatformSupport.getPlatform().atob(base64);\n            return new Blob(binaryString);\n        }\n        catch (e) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Failed to construct Blob from Base64 string: ' + e);\n        }\n    };\n    Blob.fromUint8Array = function (array) {\n        validateExactNumberOfArgs('Blob.fromUint8Array', arguments, 1);\n        assertUint8ArrayAvailable();\n        if (!(array instanceof Uint8Array)) {\n            throw invalidClassError('Blob.fromUint8Array', 'Uint8Array', 1, array);\n        }\n        // We can't call array.map directly because it expects the return type to\n        // be a Uint8Array, whereas we can convert it to a regular array by invoking\n        // map on the Array prototype.\n        var binaryString = Array.prototype.map\n            .call(array, function (char) {\n            return String.fromCharCode(char);\n        })\n            .join('');\n        return new Blob(binaryString);\n    };\n    Blob.prototype.toBase64 = function () {\n        validateExactNumberOfArgs('Blob.toBase64', arguments, 0);\n        assertBase64Available();\n        return PlatformSupport.getPlatform().btoa(this._binaryString);\n    };\n    Blob.prototype.toUint8Array = function () {\n        validateExactNumberOfArgs('Blob.toUint8Array', arguments, 0);\n        assertUint8ArrayAvailable();\n        var buffer = new Uint8Array(this._binaryString.length);\n        for (var i = 0; i < this._binaryString.length; i++) {\n            buffer[i] = this._binaryString.charCodeAt(i);\n        }\n        return buffer;\n    };\n    Blob.prototype.toString = function () {\n        return 'Blob(base64: ' + this.toBase64() + ')';\n    };\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    Blob.prototype._equals = function (other) {\n        return this._binaryString === other._binaryString;\n    };\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    Blob.prototype._compareTo = function (other) {\n        return primitiveComparator(this._binaryString, other._binaryString);\n    };\n    return Blob;\n}());\nexport { Blob };\n// Public instance that disallows construction at runtime. This constructor is\n// used when exporting Blob on firebase.firestore.Blob and will be called Blob\n// publicly. Internally we still use Blob which has a type checked private\n// constructor. Note that Blob and PublicBlob can be used interchangeably in\n// instanceof checks.\n// For our internal TypeScript code PublicBlob doesn't exist as a type, and so\n// we need to use Blob as type and export it too.\n// tslint:disable-next-line:variable-name We're treating this as a class name.\nexport var PublicBlob = makeConstructorPrivate(Blob, 'Use Blob.fromUint8Array() or Blob.fromBase64String() instead.');\n\n//# sourceMappingURL=blob.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/blob.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { assert } from '../util/assert';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedMap } from '../util/sorted_map';\nimport { DocumentKey } from './document_key';\nexport var TypeOrder;\n(function (TypeOrder) {\n    // This order is defined by the backend.\n    TypeOrder[TypeOrder[\"NullValue\"] = 0] = \"NullValue\";\n    TypeOrder[TypeOrder[\"BooleanValue\"] = 1] = \"BooleanValue\";\n    TypeOrder[TypeOrder[\"NumberValue\"] = 2] = \"NumberValue\";\n    TypeOrder[TypeOrder[\"TimestampValue\"] = 3] = \"TimestampValue\";\n    TypeOrder[TypeOrder[\"StringValue\"] = 4] = \"StringValue\";\n    TypeOrder[TypeOrder[\"BlobValue\"] = 5] = \"BlobValue\";\n    TypeOrder[TypeOrder[\"RefValue\"] = 6] = \"RefValue\";\n    TypeOrder[TypeOrder[\"GeoPointValue\"] = 7] = \"GeoPointValue\";\n    TypeOrder[TypeOrder[\"ArrayValue\"] = 8] = \"ArrayValue\";\n    TypeOrder[TypeOrder[\"ObjectValue\"] = 9] = \"ObjectValue\";\n})(TypeOrder = TypeOrder || (TypeOrder = {}));\n/**\n * A field value represents a datatype as stored by Firestore.\n */\nvar FieldValue = /** @class */ (function () {\n    function FieldValue() {\n    }\n    FieldValue.prototype.toString = function () {\n        var val = this.value();\n        return val === null ? 'null' : val.toString();\n    };\n    FieldValue.prototype.defaultCompareTo = function (other) {\n        assert(this.typeOrder !== other.typeOrder, 'Default compareTo should not be used for values of same type.');\n        var cmp = primitiveComparator(this.typeOrder, other.typeOrder);\n        return cmp;\n    };\n    return FieldValue;\n}());\nexport { FieldValue };\nvar NullValue = /** @class */ (function (_super) {\n    __extends(NullValue, _super);\n    function NullValue() {\n        var _this = _super.call(this) || this;\n        _this.typeOrder = TypeOrder.NullValue;\n        // internalValue is unused but we add it to work around\n        // https://github.com/Microsoft/TypeScript/issues/15585\n        _this.internalValue = null;\n        return _this;\n    }\n    NullValue.prototype.value = function () {\n        return null;\n    };\n    NullValue.prototype.equals = function (other) {\n        return other instanceof NullValue;\n    };\n    NullValue.prototype.compareTo = function (other) {\n        if (other instanceof NullValue) {\n            return 0;\n        }\n        return this.defaultCompareTo(other);\n    };\n    NullValue.INSTANCE = new NullValue();\n    return NullValue;\n}(FieldValue));\nexport { NullValue };\nvar BooleanValue = /** @class */ (function (_super) {\n    __extends(BooleanValue, _super);\n    function BooleanValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.BooleanValue;\n        return _this;\n    }\n    BooleanValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    BooleanValue.prototype.equals = function (other) {\n        return (other instanceof BooleanValue &&\n            this.internalValue === other.internalValue);\n    };\n    BooleanValue.prototype.compareTo = function (other) {\n        if (other instanceof BooleanValue) {\n            return primitiveComparator(this, other);\n        }\n        return this.defaultCompareTo(other);\n    };\n    BooleanValue.of = function (value) {\n        return value ? BooleanValue.TRUE : BooleanValue.FALSE;\n    };\n    BooleanValue.TRUE = new BooleanValue(true);\n    BooleanValue.FALSE = new BooleanValue(false);\n    return BooleanValue;\n}(FieldValue));\nexport { BooleanValue };\n/** Base class for IntegerValue and DoubleValue. */\nvar NumberValue = /** @class */ (function (_super) {\n    __extends(NumberValue, _super);\n    function NumberValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.NumberValue;\n        return _this;\n    }\n    NumberValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    NumberValue.prototype.compareTo = function (other) {\n        if (other instanceof NumberValue) {\n            return numericComparator(this.internalValue, other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return NumberValue;\n}(FieldValue));\nexport { NumberValue };\n/** Utility function to compare doubles (using Firestore semantics for NaN). */\nfunction numericComparator(left, right) {\n    if (left < right) {\n        return -1;\n    }\n    else if (left > right) {\n        return 1;\n    }\n    else if (left === right) {\n        return 0;\n    }\n    else {\n        // one or both are NaN.\n        if (isNaN(left)) {\n            return isNaN(right) ? 0 : -1;\n        }\n        else {\n            return 1;\n        }\n    }\n}\n/**\n * Utility function to check numbers for equality using Firestore semantics\n * (NaN === NaN, -0.0 !== 0.0).\n */\nfunction numericEquals(left, right) {\n    // Implemented based on Object.is() polyfill from\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n    if (left === right) {\n        // +0 != -0\n        return left !== 0 || 1 / left === 1 / right;\n    }\n    else {\n        // NaN == NaN\n        return left !== left && right !== right;\n    }\n}\nvar IntegerValue = /** @class */ (function (_super) {\n    __extends(IntegerValue, _super);\n    function IntegerValue(internalValue) {\n        return _super.call(this, internalValue) || this;\n    }\n    IntegerValue.prototype.equals = function (other) {\n        // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,\n        // but that doesn't make them equal via equals().\n        if (other instanceof IntegerValue) {\n            return numericEquals(this.internalValue, other.internalValue);\n        }\n        else {\n            return false;\n        }\n    };\n    return IntegerValue;\n}(NumberValue));\nexport { IntegerValue };\nvar DoubleValue = /** @class */ (function (_super) {\n    __extends(DoubleValue, _super);\n    function DoubleValue(internalValue) {\n        var _this = _super.call(this, internalValue) || this;\n        _this.internalValue = internalValue;\n        return _this;\n    }\n    DoubleValue.prototype.equals = function (other) {\n        // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,\n        // but that doesn't make them equal via equals().\n        if (other instanceof DoubleValue) {\n            return numericEquals(this.internalValue, other.internalValue);\n        }\n        else {\n            return false;\n        }\n    };\n    DoubleValue.NAN = new DoubleValue(NaN);\n    DoubleValue.POSITIVE_INFINITY = new DoubleValue(Infinity);\n    DoubleValue.NEGATIVE_INFINITY = new DoubleValue(-Infinity);\n    return DoubleValue;\n}(NumberValue));\nexport { DoubleValue };\n// TODO(b/37267885): Add truncation support\nvar StringValue = /** @class */ (function (_super) {\n    __extends(StringValue, _super);\n    function StringValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.StringValue;\n        return _this;\n    }\n    StringValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    StringValue.prototype.equals = function (other) {\n        return (other instanceof StringValue && this.internalValue === other.internalValue);\n    };\n    StringValue.prototype.compareTo = function (other) {\n        if (other instanceof StringValue) {\n            return primitiveComparator(this.internalValue, other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return StringValue;\n}(FieldValue));\nexport { StringValue };\nvar TimestampValue = /** @class */ (function (_super) {\n    __extends(TimestampValue, _super);\n    function TimestampValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.TimestampValue;\n        return _this;\n    }\n    TimestampValue.prototype.value = function () {\n        return this.internalValue.toDate();\n    };\n    TimestampValue.prototype.equals = function (other) {\n        return (other instanceof TimestampValue &&\n            this.internalValue.equals(other.internalValue));\n    };\n    TimestampValue.prototype.compareTo = function (other) {\n        if (other instanceof TimestampValue) {\n            return this.internalValue.compareTo(other.internalValue);\n        }\n        else if (other instanceof ServerTimestampValue) {\n            // Concrete timestamps come before server timestamps.\n            return -1;\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    return TimestampValue;\n}(FieldValue));\nexport { TimestampValue };\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   TransformMutation (see TransformMutation.applyTo()). They can only exist in\n *   the local view of a document. Therefore they do not need to be parsed or\n *   serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they evaluate to null.\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */\nvar ServerTimestampValue = /** @class */ (function (_super) {\n    __extends(ServerTimestampValue, _super);\n    function ServerTimestampValue(localWriteTime) {\n        var _this = _super.call(this) || this;\n        _this.localWriteTime = localWriteTime;\n        _this.typeOrder = TypeOrder.TimestampValue;\n        return _this;\n    }\n    ServerTimestampValue.prototype.value = function () {\n        return null;\n    };\n    ServerTimestampValue.prototype.equals = function (other) {\n        return (other instanceof ServerTimestampValue &&\n            this.localWriteTime.equals(other.localWriteTime));\n    };\n    ServerTimestampValue.prototype.compareTo = function (other) {\n        if (other instanceof ServerTimestampValue) {\n            return this.localWriteTime.compareTo(other.localWriteTime);\n        }\n        else if (other instanceof TimestampValue) {\n            // Server timestamps come after all concrete timestamps.\n            return 1;\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ServerTimestampValue.prototype.toString = function () {\n        return '<ServerTimestamp localTime=' + this.localWriteTime.toString() + '>';\n    };\n    return ServerTimestampValue;\n}(FieldValue));\nexport { ServerTimestampValue };\nvar BlobValue = /** @class */ (function (_super) {\n    __extends(BlobValue, _super);\n    function BlobValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.BlobValue;\n        return _this;\n    }\n    BlobValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    BlobValue.prototype.equals = function (other) {\n        return (other instanceof BlobValue &&\n            this.internalValue._equals(other.internalValue));\n    };\n    BlobValue.prototype.compareTo = function (other) {\n        if (other instanceof BlobValue) {\n            return this.internalValue._compareTo(other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return BlobValue;\n}(FieldValue));\nexport { BlobValue };\nvar RefValue = /** @class */ (function (_super) {\n    __extends(RefValue, _super);\n    function RefValue(databaseId, key) {\n        var _this = _super.call(this) || this;\n        _this.databaseId = databaseId;\n        _this.key = key;\n        _this.typeOrder = TypeOrder.RefValue;\n        return _this;\n    }\n    RefValue.prototype.value = function () {\n        return this.key;\n    };\n    RefValue.prototype.equals = function (other) {\n        if (other instanceof RefValue) {\n            return (this.key.equals(other.key) && this.databaseId.equals(other.databaseId));\n        }\n        else {\n            return false;\n        }\n    };\n    RefValue.prototype.compareTo = function (other) {\n        if (other instanceof RefValue) {\n            var cmp = this.databaseId.compareTo(other.databaseId);\n            return cmp !== 0 ? cmp : DocumentKey.comparator(this.key, other.key);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return RefValue;\n}(FieldValue));\nexport { RefValue };\nvar GeoPointValue = /** @class */ (function (_super) {\n    __extends(GeoPointValue, _super);\n    function GeoPointValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.GeoPointValue;\n        return _this;\n    }\n    GeoPointValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    GeoPointValue.prototype.equals = function (other) {\n        return (other instanceof GeoPointValue &&\n            this.internalValue._equals(other.internalValue));\n    };\n    GeoPointValue.prototype.compareTo = function (other) {\n        if (other instanceof GeoPointValue) {\n            return this.internalValue._compareTo(other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return GeoPointValue;\n}(FieldValue));\nexport { GeoPointValue };\nvar ObjectValue = /** @class */ (function (_super) {\n    __extends(ObjectValue, _super);\n    function ObjectValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.ObjectValue;\n        return _this;\n    }\n    ObjectValue.prototype.value = function () {\n        var result = {};\n        this.internalValue.inorderTraversal(function (key, val) {\n            result[key] = val.value();\n        });\n        return result;\n    };\n    ObjectValue.prototype.forEach = function (action) {\n        this.internalValue.inorderTraversal(action);\n    };\n    ObjectValue.prototype.equals = function (other) {\n        if (other instanceof ObjectValue) {\n            var it1 = this.internalValue.getIterator();\n            var it2 = other.internalValue.getIterator();\n            while (it1.hasNext() && it2.hasNext()) {\n                var next1 = it1.getNext();\n                var next2 = it2.getNext();\n                if (next1.key !== next2.key || !next1.value.equals(next2.value)) {\n                    return false;\n                }\n            }\n            return !it1.hasNext() && !it2.hasNext();\n        }\n        return false;\n    };\n    ObjectValue.prototype.compareTo = function (other) {\n        if (other instanceof ObjectValue) {\n            var it1 = this.internalValue.getIterator();\n            var it2 = other.internalValue.getIterator();\n            while (it1.hasNext() && it2.hasNext()) {\n                var next1 = it1.getNext();\n                var next2 = it2.getNext();\n                var cmp = primitiveComparator(next1.key, next2.key) ||\n                    next1.value.compareTo(next2.value);\n                if (cmp) {\n                    return cmp;\n                }\n            }\n            // Only equal if both iterators are exhausted\n            return primitiveComparator(it1.hasNext(), it2.hasNext());\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ObjectValue.prototype.set = function (path, to) {\n        assert(!path.isEmpty(), 'Cannot set field for empty path on ObjectValue');\n        if (path.length === 1) {\n            return this.setChild(path.firstSegment(), to);\n        }\n        else {\n            var child = this.child(path.firstSegment());\n            if (!(child instanceof ObjectValue)) {\n                child = ObjectValue.EMPTY;\n            }\n            var newChild = child.set(path.popFirst(), to);\n            return this.setChild(path.firstSegment(), newChild);\n        }\n    };\n    ObjectValue.prototype.delete = function (path) {\n        assert(!path.isEmpty(), 'Cannot delete field for empty path on ObjectValue');\n        if (path.length === 1) {\n            return new ObjectValue(this.internalValue.remove(path.firstSegment()));\n        }\n        else {\n            // nested field\n            var child = this.child(path.firstSegment());\n            if (child instanceof ObjectValue) {\n                var newChild = child.delete(path.popFirst());\n                return new ObjectValue(this.internalValue.insert(path.firstSegment(), newChild));\n            }\n            else {\n                // Don't actually change a primitive value to an object for a delete\n                return this;\n            }\n        }\n    };\n    ObjectValue.prototype.contains = function (path) {\n        return this.field(path) !== undefined;\n    };\n    ObjectValue.prototype.field = function (path) {\n        assert(!path.isEmpty(), \"Can't get field of empty path\");\n        var field = this;\n        path.forEach(function (pathSegment) {\n            if (field instanceof ObjectValue) {\n                field = field.internalValue.get(pathSegment) || undefined;\n            }\n            else {\n                field = undefined;\n            }\n        });\n        return field;\n    };\n    ObjectValue.prototype.toString = function () {\n        return JSON.stringify(this.value());\n    };\n    ObjectValue.prototype.child = function (childName) {\n        return this.internalValue.get(childName) || undefined;\n    };\n    ObjectValue.prototype.setChild = function (childName, value) {\n        return new ObjectValue(this.internalValue.insert(childName, value));\n    };\n    ObjectValue.EMPTY = new ObjectValue(new SortedMap(primitiveComparator));\n    return ObjectValue;\n}(FieldValue));\nexport { ObjectValue };\nvar ArrayValue = /** @class */ (function (_super) {\n    __extends(ArrayValue, _super);\n    function ArrayValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.ArrayValue;\n        return _this;\n    }\n    ArrayValue.prototype.value = function () {\n        return this.internalValue.map(function (v) { return v.value(); });\n    };\n    ArrayValue.prototype.forEach = function (action) {\n        this.internalValue.forEach(action);\n    };\n    ArrayValue.prototype.equals = function (other) {\n        if (other instanceof ArrayValue) {\n            if (this.internalValue.length !== other.internalValue.length) {\n                return false;\n            }\n            for (var i = 0; i < this.internalValue.length; i++) {\n                if (!this.internalValue[i].equals(other.internalValue[i])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    };\n    ArrayValue.prototype.compareTo = function (other) {\n        if (other instanceof ArrayValue) {\n            var minLength = Math.min(this.internalValue.length, other.internalValue.length);\n            for (var i = 0; i < minLength; i++) {\n                var cmp = this.internalValue[i].compareTo(other.internalValue[i]);\n                if (cmp) {\n                    return cmp;\n                }\n            }\n            return primitiveComparator(this.internalValue.length, other.internalValue.length);\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ArrayValue.prototype.toString = function () {\n        return JSON.stringify(this.value());\n    };\n    return ArrayValue;\n}(FieldValue));\nexport { ArrayValue };\n\n//# sourceMappingURL=field_value.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/field_value.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Untyped Number alias we can use to check for ES6 methods / properties.\n// tslint:disable-next-line:no-any variable-name\nvar NumberAsAny = Number;\n/**\n * Minimum safe integer in Javascript because of floating point precision.\n * Added to not rely on ES6 features.\n */\nexport var MIN_SAFE_INTEGER = NumberAsAny.MIN_SAFE_INTEGER || -(Math.pow(2, 53) - 1);\n/**\n * Maximum safe integer in Javascript because of floating point precision.\n * Added to not rely on ES6 features.\n */\nexport var MAX_SAFE_INTEGER = NumberAsAny.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n/**\n * Returns whether an number is an integer, uses native implementation if\n * available.\n * Added to not rely on ES6 features.\n * @param value The value to test for being an integer\n */\nexport var isInteger = NumberAsAny.isInteger ||\n    (function (value) {\n        return typeof value === 'number' &&\n            isFinite(value) &&\n            Math.floor(value) === value;\n    });\n/**\n * Returns whether a variable is either undefined or null.\n */\nexport function isNullOrUndefined(value) {\n    return value === null || value === undefined;\n}\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value The value to test for being an integer and in the safe range\n */\nexport function isSafeInteger(value) {\n    return (isInteger(value) &&\n        value <= MAX_SAFE_INTEGER &&\n        value >= MIN_SAFE_INTEGER);\n}\n/**\n * Safely checks if the number is NaN.\n */\nexport function safeIsNaN(value) {\n    if (NumberAsAny.IsNaN) {\n        return NumberAsAny.IsNaN(value);\n    }\n    else {\n        return typeof value === 'number' && isNaN(value);\n    }\n}\n\n//# sourceMappingURL=types.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/types.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { DoubleValue, NullValue, RefValue } from '../model/field_value';\nimport { FieldPath } from '../model/path';\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { isNullOrUndefined } from '../util/types';\nvar Query = /** @class */ (function () {\n    function Query(path, explicitOrderBy, filters, limit, startAt, endAt) {\n        if (explicitOrderBy === void 0) { explicitOrderBy = []; }\n        if (filters === void 0) { filters = []; }\n        if (limit === void 0) { limit = null; }\n        if (startAt === void 0) { startAt = null; }\n        if (endAt === void 0) { endAt = null; }\n        this.path = path;\n        this.explicitOrderBy = explicitOrderBy;\n        this.filters = filters;\n        this.limit = limit;\n        this.startAt = startAt;\n        this.endAt = endAt;\n        this.memoizedCanonicalId = null;\n        this.memoizedOrderBy = null;\n        if (this.startAt) {\n            this.assertValidBound(this.startAt);\n        }\n        if (this.endAt) {\n            this.assertValidBound(this.endAt);\n        }\n    }\n    Query.atPath = function (path) {\n        return new Query(path);\n    };\n    Object.defineProperty(Query.prototype, \"orderBy\", {\n        get: function () {\n            if (this.memoizedOrderBy === null) {\n                var inequalityField = this.getInequalityFilterField();\n                var firstOrderByField = this.getFirstOrderByField();\n                if (inequalityField !== null && firstOrderByField === null) {\n                    // In order to implicitly add key ordering, we must also add the\n                    // inequality filter field for it to be a valid query.\n                    // Note that the default inequality field and key ordering is ascending.\n                    if (inequalityField.isKeyField()) {\n                        this.memoizedOrderBy = [KEY_ORDERING_ASC];\n                    }\n                    else {\n                        this.memoizedOrderBy = [\n                            new OrderBy(inequalityField),\n                            KEY_ORDERING_ASC\n                        ];\n                    }\n                }\n                else {\n                    assert(inequalityField === null ||\n                        (firstOrderByField !== null &&\n                            inequalityField.equals(firstOrderByField)), 'First orderBy should match inequality field.');\n                    this.memoizedOrderBy = [];\n                    var foundKeyOrdering = false;\n                    for (var _i = 0, _a = this.explicitOrderBy; _i < _a.length; _i++) {\n                        var orderBy = _a[_i];\n                        this.memoizedOrderBy.push(orderBy);\n                        if (orderBy.field.isKeyField()) {\n                            foundKeyOrdering = true;\n                        }\n                    }\n                    if (!foundKeyOrdering) {\n                        // The order of the implicit key ordering always matches the last\n                        // explicit order by\n                        var lastDirection = this.explicitOrderBy.length > 0\n                            ? this.explicitOrderBy[this.explicitOrderBy.length - 1].dir\n                            : Direction.ASCENDING;\n                        this.memoizedOrderBy.push(lastDirection === Direction.ASCENDING\n                            ? KEY_ORDERING_ASC\n                            : KEY_ORDERING_DESC);\n                    }\n                }\n            }\n            return this.memoizedOrderBy;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Query.prototype.addFilter = function (filter) {\n        assert(this.getInequalityFilterField() == null ||\n            !(filter instanceof RelationFilter) ||\n            !filter.isInequality() ||\n            filter.field.equals(this.getInequalityFilterField()), 'Query must only have one inequality field.');\n        assert(!DocumentKey.isDocumentKey(this.path), 'No filtering allowed for document query');\n        var newFilters = this.filters.concat([filter]);\n        return new Query(this.path, this.explicitOrderBy.slice(), newFilters, this.limit, this.startAt, this.endAt);\n    };\n    Query.prototype.addOrderBy = function (orderBy) {\n        assert(!DocumentKey.isDocumentKey(this.path), 'No ordering allowed for document query');\n        assert(!this.startAt && !this.endAt, 'Bounds must be set after orderBy');\n        // TODO(dimond): validate that orderBy does not list the same key twice.\n        var newOrderBy = this.explicitOrderBy.concat([orderBy]);\n        return new Query(this.path, newOrderBy, this.filters.slice(), this.limit, this.startAt, this.endAt);\n    };\n    Query.prototype.withLimit = function (limit) {\n        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), limit, this.startAt, this.endAt);\n    };\n    Query.prototype.withStartAt = function (bound) {\n        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), this.limit, bound, this.endAt);\n    };\n    Query.prototype.withEndAt = function (bound) {\n        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), this.limit, this.startAt, bound);\n    };\n    // TODO(b/29183165): This is used to get a unique string from a query to, for\n    // example, use as a dictionary key, but the implementation is subject to\n    // collisions. Make it collision-free.\n    Query.prototype.canonicalId = function () {\n        if (this.memoizedCanonicalId === null) {\n            var canonicalId = this.path.canonicalString();\n            canonicalId += '|f:';\n            for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {\n                var filter = _a[_i];\n                canonicalId += filter.canonicalId();\n                canonicalId += ',';\n            }\n            canonicalId += '|ob:';\n            // TODO(dimond): make this collision resistant\n            for (var _b = 0, _c = this.orderBy; _b < _c.length; _b++) {\n                var orderBy = _c[_b];\n                canonicalId += orderBy.canonicalId();\n                canonicalId += ',';\n            }\n            if (!isNullOrUndefined(this.limit)) {\n                canonicalId += '|l:';\n                canonicalId += this.limit;\n            }\n            if (this.startAt) {\n                canonicalId += '|lb:';\n                canonicalId += this.startAt.canonicalId();\n            }\n            if (this.endAt) {\n                canonicalId += '|ub:';\n                canonicalId += this.endAt.canonicalId();\n            }\n            this.memoizedCanonicalId = canonicalId;\n        }\n        return this.memoizedCanonicalId;\n    };\n    Query.prototype.toString = function () {\n        var str = 'Query(' + this.path.canonicalString();\n        if (this.filters.length > 0) {\n            str += \", filters: [\" + this.filters.join(', ') + \"]\";\n        }\n        if (!isNullOrUndefined(this.limit)) {\n            str += ', limit: ' + this.limit;\n        }\n        if (this.explicitOrderBy.length > 0) {\n            str += \", orderBy: [\" + this.explicitOrderBy.join(', ') + \"]\";\n        }\n        if (this.startAt) {\n            str += ', startAt: ' + this.startAt.canonicalId();\n        }\n        if (this.endAt) {\n            str += ', endAt: ' + this.endAt.canonicalId();\n        }\n        return str + ')';\n    };\n    Query.prototype.equals = function (other) {\n        if (this.limit !== other.limit) {\n            return false;\n        }\n        if (this.orderBy.length !== other.orderBy.length) {\n            return false;\n        }\n        for (var i = 0; i < this.orderBy.length; i++) {\n            if (!this.orderBy[i].equals(other.orderBy[i])) {\n                return false;\n            }\n        }\n        if (this.filters.length !== other.filters.length) {\n            return false;\n        }\n        for (var i = 0; i < this.filters.length; i++) {\n            if (!this.filters[i].equals(other.filters[i])) {\n                return false;\n            }\n        }\n        if (!this.path.equals(other.path)) {\n            return false;\n        }\n        if (this.startAt !== null\n            ? !this.startAt.equals(other.startAt)\n            : other.startAt !== null) {\n            return false;\n        }\n        return this.endAt !== null\n            ? this.endAt.equals(other.endAt)\n            : other.endAt === null;\n    };\n    Query.prototype.docComparator = function (d1, d2) {\n        var comparedOnKeyField = false;\n        for (var _i = 0, _a = this.orderBy; _i < _a.length; _i++) {\n            var orderBy = _a[_i];\n            var comp = orderBy.compare(d1, d2);\n            if (comp !== 0)\n                return comp;\n            comparedOnKeyField = comparedOnKeyField || orderBy.field.isKeyField();\n        }\n        // Assert that we actually compared by key\n        assert(comparedOnKeyField, \"orderBy used that doesn't compare on key field\");\n        return 0;\n    };\n    Query.prototype.matches = function (doc) {\n        return (this.matchesAncestor(doc) &&\n            this.matchesOrderBy(doc) &&\n            this.matchesFilters(doc) &&\n            this.matchesBounds(doc));\n    };\n    Query.prototype.hasLimit = function () {\n        return !isNullOrUndefined(this.limit);\n    };\n    Query.prototype.getFirstOrderByField = function () {\n        return this.explicitOrderBy.length > 0\n            ? this.explicitOrderBy[0].field\n            : null;\n    };\n    Query.prototype.getInequalityFilterField = function () {\n        for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {\n            var filter = _a[_i];\n            if (filter instanceof RelationFilter && filter.isInequality()) {\n                return filter.field;\n            }\n        }\n        return null;\n    };\n    Query.prototype.isDocumentQuery = function () {\n        return DocumentKey.isDocumentKey(this.path) && this.filters.length === 0;\n    };\n    Query.prototype.matchesAncestor = function (doc) {\n        var docPath = doc.key.path;\n        if (DocumentKey.isDocumentKey(this.path)) {\n            // exact match for document queries\n            return this.path.equals(docPath);\n        }\n        else {\n            // shallow ancestor queries by default\n            return (this.path.isPrefixOf(docPath) && this.path.length === docPath.length - 1);\n        }\n    };\n    /**\n     * A document must have a value for every ordering clause in order to show up\n     * in the results.\n     */\n    Query.prototype.matchesOrderBy = function (doc) {\n        for (var _i = 0, _a = this.explicitOrderBy; _i < _a.length; _i++) {\n            var orderBy = _a[_i];\n            // order by key always matches\n            if (!orderBy.field.isKeyField() &&\n                doc.field(orderBy.field) === undefined) {\n                return false;\n            }\n        }\n        return true;\n    };\n    Query.prototype.matchesFilters = function (doc) {\n        for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {\n            var filter = _a[_i];\n            if (!filter.matches(doc)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * Makes sure a document is within the bounds, if provided.\n     */\n    Query.prototype.matchesBounds = function (doc) {\n        if (this.startAt && !this.startAt.sortsBeforeDocument(this.orderBy, doc)) {\n            return false;\n        }\n        if (this.endAt && this.endAt.sortsBeforeDocument(this.orderBy, doc)) {\n            return false;\n        }\n        return true;\n    };\n    Query.prototype.assertValidBound = function (bound) {\n        assert(bound.position.length <= this.orderBy.length, 'Bound is longer than orderBy');\n    };\n    return Query;\n}());\nexport { Query };\nvar RelationOp = /** @class */ (function () {\n    function RelationOp(name) {\n        this.name = name;\n    }\n    RelationOp.fromString = function (op) {\n        switch (op) {\n            case '<':\n                return RelationOp.LESS_THAN;\n            case '<=':\n                return RelationOp.LESS_THAN_OR_EQUAL;\n            case '==':\n                return RelationOp.EQUAL;\n            case '>=':\n                return RelationOp.GREATER_THAN_OR_EQUAL;\n            case '>':\n                return RelationOp.GREATER_THAN;\n            default:\n                return fail('Unknown relation: ' + op);\n        }\n    };\n    RelationOp.prototype.toString = function () {\n        return this.name;\n    };\n    RelationOp.prototype.equals = function (other) {\n        return this.name === other.name;\n    };\n    RelationOp.LESS_THAN = new RelationOp('<');\n    RelationOp.LESS_THAN_OR_EQUAL = new RelationOp('<=');\n    RelationOp.EQUAL = new RelationOp('==');\n    RelationOp.GREATER_THAN = new RelationOp('>');\n    RelationOp.GREATER_THAN_OR_EQUAL = new RelationOp('>=');\n    return RelationOp;\n}());\nexport { RelationOp };\nvar RelationFilter = /** @class */ (function () {\n    function RelationFilter(field, op, value) {\n        this.field = field;\n        this.op = op;\n        this.value = value;\n    }\n    RelationFilter.prototype.matches = function (doc) {\n        if (this.field.isKeyField()) {\n            assert(this.value instanceof RefValue, 'Comparing on key, but filter value not a RefValue');\n            var refValue = this.value;\n            var comparison = DocumentKey.comparator(doc.key, refValue.key);\n            return this.matchesComparison(comparison);\n        }\n        else {\n            var val = doc.field(this.field);\n            return val !== undefined && this.matchesValue(val);\n        }\n    };\n    RelationFilter.prototype.matchesValue = function (value) {\n        // Only compare types with matching backend order (such as double and int).\n        if (this.value.typeOrder !== value.typeOrder) {\n            return false;\n        }\n        return this.matchesComparison(value.compareTo(this.value));\n    };\n    RelationFilter.prototype.matchesComparison = function (comparison) {\n        switch (this.op) {\n            case RelationOp.LESS_THAN:\n                return comparison < 0;\n            case RelationOp.LESS_THAN_OR_EQUAL:\n                return comparison <= 0;\n            case RelationOp.EQUAL:\n                return comparison === 0;\n            case RelationOp.GREATER_THAN:\n                return comparison > 0;\n            case RelationOp.GREATER_THAN_OR_EQUAL:\n                return comparison >= 0;\n            default:\n                return fail('Unknown relation op' + this.op);\n        }\n    };\n    RelationFilter.prototype.isInequality = function () {\n        return this.op !== RelationOp.EQUAL;\n    };\n    RelationFilter.prototype.canonicalId = function () {\n        // TODO(b/29183165): Technically, this won't be unique if two values have\n        // the same description, such as the int 3 and the string \"3\". So we should\n        // add the types in here somehow, too.\n        return (this.field.canonicalString() + this.op.toString() + this.value.toString());\n    };\n    RelationFilter.prototype.equals = function (other) {\n        if (other instanceof RelationFilter) {\n            return (this.op.equals(other.op) &&\n                this.field.equals(other.field) &&\n                this.value.equals(other.value));\n        }\n        else {\n            return false;\n        }\n    };\n    RelationFilter.prototype.toString = function () {\n        return this.field.canonicalString() + \" \" + this.op + \" \" + this.value.value();\n    };\n    return RelationFilter;\n}());\nexport { RelationFilter };\n/**\n * Filter that matches 'null' values.\n */\nvar NullFilter = /** @class */ (function () {\n    function NullFilter(field) {\n        this.field = field;\n    }\n    NullFilter.prototype.matches = function (doc) {\n        var val = doc.field(this.field);\n        return val !== undefined && val.value() === null;\n    };\n    NullFilter.prototype.canonicalId = function () {\n        return this.field.canonicalString() + ' IS null';\n    };\n    NullFilter.prototype.toString = function () {\n        return this.field.canonicalString() + \" IS null\";\n    };\n    NullFilter.prototype.equals = function (other) {\n        if (other instanceof NullFilter) {\n            return this.field.equals(other.field);\n        }\n        else {\n            return false;\n        }\n    };\n    return NullFilter;\n}());\nexport { NullFilter };\n/**\n * Filter that matches 'NaN' values.\n */\nvar NanFilter = /** @class */ (function () {\n    function NanFilter(field) {\n        this.field = field;\n    }\n    NanFilter.prototype.matches = function (doc) {\n        var val = doc.field(this.field).value();\n        return typeof val === 'number' && isNaN(val);\n    };\n    NanFilter.prototype.canonicalId = function () {\n        return this.field.canonicalString() + ' IS NaN';\n    };\n    NanFilter.prototype.toString = function () {\n        return this.field.canonicalString() + \" IS NaN\";\n    };\n    NanFilter.prototype.equals = function (other) {\n        if (other instanceof NanFilter) {\n            return this.field.equals(other.field);\n        }\n        else {\n            return false;\n        }\n    };\n    return NanFilter;\n}());\nexport { NanFilter };\n/**\n * Creates a filter based on the provided arguments.\n */\nexport function fieldFilter(field, op, value) {\n    if (value.equals(NullValue.INSTANCE)) {\n        if (op !== RelationOp.EQUAL) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You can only perform equals ' + 'comparisons on null.');\n        }\n        return new NullFilter(field);\n    }\n    else if (value.equals(DoubleValue.NAN)) {\n        if (op !== RelationOp.EQUAL) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You can only perform equals ' + 'comparisons on NaN.');\n        }\n        return new NanFilter(field);\n    }\n    else {\n        return new RelationFilter(field, op, value);\n    }\n}\n/**\n * The direction of sorting in an order by.\n */\nvar Direction = /** @class */ (function () {\n    function Direction(name) {\n        this.name = name;\n    }\n    Direction.prototype.toString = function () {\n        return this.name;\n    };\n    Direction.ASCENDING = new Direction('asc');\n    Direction.DESCENDING = new Direction('desc');\n    return Direction;\n}());\nexport { Direction };\n/**\n * Represents a bound of a query.\n *\n * The bound is specified with the given components representing a position and\n * whether it's just before or just after the position (relative to whatever the\n * query order is).\n *\n * The position represents a logical index position for a query. It's a prefix\n * of values for the (potentially implicit) order by clauses of a query.\n *\n * Bound provides a function to determine whether a document comes before or\n * after a bound. This is influenced by whether the position is just before or\n * just after the provided values.\n */\nvar Bound = /** @class */ (function () {\n    function Bound(position, before) {\n        this.position = position;\n        this.before = before;\n    }\n    Bound.prototype.canonicalId = function () {\n        // TODO(b/29183165): Make this collision robust.\n        var canonicalId = this.before ? 'b:' : 'a:';\n        for (var _i = 0, _a = this.position; _i < _a.length; _i++) {\n            var component = _a[_i];\n            canonicalId += component.toString();\n        }\n        return canonicalId;\n    };\n    /**\n     * Returns true if a document sorts before a bound using the provided sort\n     * order.\n     */\n    Bound.prototype.sortsBeforeDocument = function (orderBy, doc) {\n        assert(this.position.length <= orderBy.length, \"Bound has more components than query's orderBy\");\n        var comparison = 0;\n        for (var i = 0; i < this.position.length; i++) {\n            var orderByComponent = orderBy[i];\n            var component = this.position[i];\n            if (orderByComponent.field.isKeyField()) {\n                assert(component instanceof RefValue, 'Bound has a non-key value where the key path is being used.');\n                comparison = DocumentKey.comparator(component.key, doc.key);\n            }\n            else {\n                var docValue = doc.field(orderByComponent.field);\n                assert(docValue !== undefined, 'Field should exist since document matched the orderBy already.');\n                comparison = component.compareTo(docValue);\n            }\n            if (orderByComponent.dir === Direction.DESCENDING) {\n                comparison = comparison * -1;\n            }\n            if (comparison !== 0) {\n                break;\n            }\n        }\n        return this.before ? comparison <= 0 : comparison < 0;\n    };\n    Bound.prototype.equals = function (other) {\n        if (other === null) {\n            return false;\n        }\n        if (this.before !== other.before ||\n            this.position.length !== other.position.length) {\n            return false;\n        }\n        for (var i = 0; i < this.position.length; i++) {\n            var thisPosition = this.position[i];\n            var otherPosition = other.position[i];\n            return thisPosition.equals(otherPosition);\n        }\n        return true;\n    };\n    return Bound;\n}());\nexport { Bound };\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */\nvar OrderBy = /** @class */ (function () {\n    function OrderBy(field, dir) {\n        this.field = field;\n        if (dir === undefined) {\n            dir = Direction.ASCENDING;\n        }\n        this.dir = dir;\n        this.isKeyOrderBy = field.isKeyField();\n    }\n    OrderBy.prototype.compare = function (d1, d2) {\n        var comparison = this.isKeyOrderBy\n            ? Document.compareByKey(d1, d2)\n            : Document.compareByField(this.field, d1, d2);\n        switch (this.dir) {\n            case Direction.ASCENDING:\n                return comparison;\n            case Direction.DESCENDING:\n                return -1 * comparison;\n            default:\n                return fail('Unknown direction: ' + this.dir);\n        }\n    };\n    OrderBy.prototype.canonicalId = function () {\n        // TODO(b/29183165): Make this collision robust.\n        return this.field.canonicalString() + this.dir.toString();\n    };\n    OrderBy.prototype.toString = function () {\n        return this.field.canonicalString() + \" (\" + this.dir + \")\";\n    };\n    OrderBy.prototype.equals = function (other) {\n        return this.dir === other.dir && this.field.equals(other.field);\n    };\n    return OrderBy;\n}());\nexport { OrderBy };\nvar KEY_ORDERING_ASC = new OrderBy(FieldPath.keyField(), Direction.ASCENDING);\nvar KEY_ORDERING_DESC = new OrderBy(FieldPath.keyField(), Direction.DESCENDING);\n\n//# sourceMappingURL=query.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/query.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from '../util/assert';\nimport { Code } from '../util/error';\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers.\n */\nvar RpcCode;\n(function (RpcCode) {\n    RpcCode[RpcCode[\"OK\"] = 0] = \"OK\";\n    RpcCode[RpcCode[\"CANCELLED\"] = 1] = \"CANCELLED\";\n    RpcCode[RpcCode[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n    RpcCode[RpcCode[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n    RpcCode[RpcCode[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n    RpcCode[RpcCode[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n    RpcCode[RpcCode[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n    RpcCode[RpcCode[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n    RpcCode[RpcCode[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n    RpcCode[RpcCode[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n    RpcCode[RpcCode[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n    RpcCode[RpcCode[\"ABORTED\"] = 10] = \"ABORTED\";\n    RpcCode[RpcCode[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n    RpcCode[RpcCode[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n    RpcCode[RpcCode[\"INTERNAL\"] = 13] = \"INTERNAL\";\n    RpcCode[RpcCode[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n    RpcCode[RpcCode[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n})(RpcCode || (RpcCode = {}));\nexport function isPermanentError(code) {\n    switch (code) {\n        case Code.OK:\n            return fail('Treated status OK as error');\n        case Code.CANCELLED:\n        case Code.UNKNOWN:\n        case Code.DEADLINE_EXCEEDED:\n        case Code.RESOURCE_EXHAUSTED:\n        case Code.INTERNAL:\n        case Code.UNAVAILABLE:\n        // Unauthenticated means something went wrong with our token and we need\n        // to retry with new credentials which will happen automatically.\n        // TODO(b/37325376): Give up after second unauthenticated error.\n        case Code.UNAUTHENTICATED:\n            return false;\n        case Code.INVALID_ARGUMENT:\n        case Code.NOT_FOUND:\n        case Code.ALREADY_EXISTS:\n        case Code.PERMISSION_DENIED:\n        case Code.FAILED_PRECONDITION:\n        // Aborted might be retried in some scenarios, but that is dependant on\n        // the context and should handled individually by the calling code.\n        // See https://cloud.google.com/apis/design/errors.\n        case Code.ABORTED:\n        case Code.OUT_OF_RANGE:\n        case Code.UNIMPLEMENTED:\n        case Code.DATA_LOSS:\n            return true;\n        default:\n            return fail('Unknown status code: ' + code);\n    }\n}\n/**\n * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.\n *\n * @returns The Code equivalent to the given status string or undefined if\n *     there is no match.\n */\nexport function mapCodeFromRpcStatus(status) {\n    // tslint:disable-next-line:no-any lookup by string\n    var code = RpcCode[status];\n    if (code === undefined) {\n        return undefined;\n    }\n    return mapCodeFromRpcCode(code);\n}\n/**\n * Maps an error Code from GRPC status code number, like 0, 1, or 14. These\n * are not the same as HTTP status codes.\n *\n * @returns The Code equivalent to the given GRPC status code. Fails if there\n *     is no match.\n */\nexport function mapCodeFromRpcCode(code) {\n    switch (code) {\n        case RpcCode.OK:\n            return Code.OK;\n        case RpcCode.CANCELLED:\n            return Code.CANCELLED;\n        case RpcCode.UNKNOWN:\n            return Code.UNKNOWN;\n        case RpcCode.DEADLINE_EXCEEDED:\n            return Code.DEADLINE_EXCEEDED;\n        case RpcCode.RESOURCE_EXHAUSTED:\n            return Code.RESOURCE_EXHAUSTED;\n        case RpcCode.INTERNAL:\n            return Code.INTERNAL;\n        case RpcCode.UNAVAILABLE:\n            return Code.UNAVAILABLE;\n        case RpcCode.UNAUTHENTICATED:\n            return Code.UNAUTHENTICATED;\n        case RpcCode.INVALID_ARGUMENT:\n            return Code.INVALID_ARGUMENT;\n        case RpcCode.NOT_FOUND:\n            return Code.NOT_FOUND;\n        case RpcCode.ALREADY_EXISTS:\n            return Code.ALREADY_EXISTS;\n        case RpcCode.PERMISSION_DENIED:\n            return Code.PERMISSION_DENIED;\n        case RpcCode.FAILED_PRECONDITION:\n            return Code.FAILED_PRECONDITION;\n        case RpcCode.ABORTED:\n            return Code.ABORTED;\n        case RpcCode.OUT_OF_RANGE:\n            return Code.OUT_OF_RANGE;\n        case RpcCode.UNIMPLEMENTED:\n            return Code.UNIMPLEMENTED;\n        case RpcCode.DATA_LOSS:\n            return Code.DATA_LOSS;\n        default:\n            return fail('Unknown status code: ' + code);\n    }\n}\n/**\n * Maps an RPC code from a Code. This is the reverse operation from\n * mapCodeFromRpcCode and should really only be used in tests.\n */\nexport function mapRpcCodeFromCode(code) {\n    if (code === undefined) {\n        return RpcCode.OK;\n    }\n    switch (code) {\n        case Code.OK:\n            return RpcCode.OK;\n        case Code.CANCELLED:\n            return RpcCode.CANCELLED;\n        case Code.UNKNOWN:\n            return RpcCode.UNKNOWN;\n        case Code.DEADLINE_EXCEEDED:\n            return RpcCode.DEADLINE_EXCEEDED;\n        case Code.RESOURCE_EXHAUSTED:\n            return RpcCode.RESOURCE_EXHAUSTED;\n        case Code.INTERNAL:\n            return RpcCode.INTERNAL;\n        case Code.UNAVAILABLE:\n            return RpcCode.UNAVAILABLE;\n        case Code.UNAUTHENTICATED:\n            return RpcCode.UNAUTHENTICATED;\n        case Code.INVALID_ARGUMENT:\n            return RpcCode.INVALID_ARGUMENT;\n        case Code.NOT_FOUND:\n            return RpcCode.NOT_FOUND;\n        case Code.ALREADY_EXISTS:\n            return RpcCode.ALREADY_EXISTS;\n        case Code.PERMISSION_DENIED:\n            return RpcCode.PERMISSION_DENIED;\n        case Code.FAILED_PRECONDITION:\n            return RpcCode.FAILED_PRECONDITION;\n        case Code.ABORTED:\n            return RpcCode.ABORTED;\n        case Code.OUT_OF_RANGE:\n            return RpcCode.OUT_OF_RANGE;\n        case Code.UNIMPLEMENTED:\n            return RpcCode.UNIMPLEMENTED;\n        case Code.DATA_LOSS:\n            return RpcCode.DATA_LOSS;\n        default:\n            return fail('Unknown status code: ' + code);\n    }\n}\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nexport function mapCodeFromHttpStatus(status) {\n    // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n    // status codes but the mapping is not bijective. In each case of ambiguity\n    // this function chooses a primary error.\n    //\n    // [1]\n    // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n    switch (status) {\n        case 200:// OK\n            return Code.OK;\n        case 400:// Bad Request\n            return Code.INVALID_ARGUMENT;\n        // Other possibilities based on the forward mapping\n        // return Code.FAILED_PRECONDITION;\n        // return Code.OUT_OF_RANGE;\n        case 401:// Unauthorized\n            return Code.UNAUTHENTICATED;\n        case 403:// Forbidden\n            return Code.PERMISSION_DENIED;\n        case 404:// Not Found\n            return Code.NOT_FOUND;\n        case 409:// Conflict\n            return Code.ABORTED;\n        // Other possibilities:\n        // return Code.ALREADY_EXISTS;\n        case 416:// Range Not Satisfiable\n            return Code.OUT_OF_RANGE;\n        case 429:// Too Many Requests\n            return Code.RESOURCE_EXHAUSTED;\n        case 499:// Client Closed Request\n            return Code.CANCELLED;\n        case 500:// Internal Server Error\n            return Code.UNKNOWN;\n        // Other possibilities:\n        // return Code.INTERNAL;\n        // return Code.DATA_LOSS;\n        case 501:// Unimplemented\n            return Code.UNIMPLEMENTED;\n        case 503:// Service Unavailable\n            return Code.UNAVAILABLE;\n        case 504:// Gateway Timeout\n            return Code.DEADLINE_EXCEEDED;\n        default:\n            if (status >= 200 && status < 300)\n                return Code.OK;\n            if (status >= 400 && status < 500)\n                return Code.FAILED_PRECONDITION;\n            if (status >= 500 && status < 600)\n                return Code.INTERNAL;\n            return Code.UNKNOWN;\n    }\n}\n\n//# sourceMappingURL=rpc_error.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/rpc_error.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\nimport { DocumentKey } from './document_key';\nvar EMPTY_MAYBE_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);\nexport function maybeDocumentMap() {\n    return EMPTY_MAYBE_DOCUMENT_MAP;\n}\nvar EMPTY_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);\nexport function documentMap() {\n    return EMPTY_DOCUMENT_MAP;\n}\nvar EMPTY_DOCUMENT_VERSION_MAP = new SortedMap(DocumentKey.comparator);\nexport function documentVersionMap() {\n    return EMPTY_DOCUMENT_VERSION_MAP;\n}\nvar EMPTY_DOCUMENT_KEY_SET = new SortedSet(DocumentKey.comparator);\nexport function documentKeySet() {\n    return EMPTY_DOCUMENT_KEY_SET;\n}\n\n//# sourceMappingURL=collections.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/collections.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { maybeDocumentMap } from '../model/collections';\nimport { emptyByteString } from '../platform/platform';\nimport { assert, fail } from '../util/assert';\nimport * as objUtils from '../util/obj';\nimport { CurrentStatusUpdate, RemoteEvent, ResetMapping, UpdateMapping } from './remote_event';\n/**\n * Represents a changed document and a list of target ids to which this change\n * applies.\n *\n * If document has been deleted NoDocument will be provided.\n */\nvar DocumentWatchChange = /** @class */ (function () {\n    function DocumentWatchChange(\n        /** The new document applies to all of these targets. */\n        updatedTargetIds, \n        /** The new document is removed from all of these targets. */\n        removedTargetIds, \n        /** The key of the document for this change. */\n        key, \n        /**\n           * The new document or NoDocument if it was deleted. Is null if the\n           * document went out of view without the server sending a new document.\n           */\n        newDoc) {\n        this.updatedTargetIds = updatedTargetIds;\n        this.removedTargetIds = removedTargetIds;\n        this.key = key;\n        this.newDoc = newDoc;\n    }\n    return DocumentWatchChange;\n}());\nexport { DocumentWatchChange };\nvar ExistenceFilterChange = /** @class */ (function () {\n    function ExistenceFilterChange(targetId, existenceFilter) {\n        this.targetId = targetId;\n        this.existenceFilter = existenceFilter;\n    }\n    return ExistenceFilterChange;\n}());\nexport { ExistenceFilterChange };\nexport var WatchTargetChangeState;\n(function (WatchTargetChangeState) {\n    WatchTargetChangeState[WatchTargetChangeState[\"NoChange\"] = 0] = \"NoChange\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Added\"] = 1] = \"Added\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Removed\"] = 2] = \"Removed\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Current\"] = 3] = \"Current\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Reset\"] = 4] = \"Reset\";\n})(WatchTargetChangeState = WatchTargetChangeState || (WatchTargetChangeState = {}));\nvar WatchTargetChange = /** @class */ (function () {\n    function WatchTargetChange(\n        /** What kind of change occurred to the watch target. */\n        state, \n        /** The target IDs that were added/removed/set. */\n        targetIds, \n        /**\n           * An opaque, server-assigned token that allows watching a query to be\n           * resumed after disconnecting without retransmitting all the data that\n           * matches the query. The resume token essentially identifies a point in\n           * time from which the server should resume sending results.\n           */\n        resumeToken, \n        /** An RPC error indicating why the watch failed. */\n        cause) {\n        if (resumeToken === void 0) { resumeToken = emptyByteString(); }\n        if (cause === void 0) { cause = null; }\n        this.state = state;\n        this.targetIds = targetIds;\n        this.resumeToken = resumeToken;\n        this.cause = cause;\n    }\n    return WatchTargetChange;\n}());\nexport { WatchTargetChange };\n/**\n * A helper class to accumulate watch changes into a RemoteEvent and other\n * target information.\n */\nvar WatchChangeAggregator = /** @class */ (function () {\n    function WatchChangeAggregator(snapshotVersion, listenTargets, pendingTargetResponses) {\n        this.snapshotVersion = snapshotVersion;\n        this.listenTargets = listenTargets;\n        /** The existence filter - if any - for the given target IDs. */\n        this.existenceFilters = {};\n        /** Keeps track of the current target mappings */\n        this.targetChanges = {};\n        /** Keeps track of document to update */\n        this.documentUpdates = maybeDocumentMap();\n        /** Whether this aggregator was frozen and can no longer be modified */\n        this.frozen = false;\n        this.pendingTargetResponses = objUtils.shallowCopy(pendingTargetResponses);\n    }\n    /** Aggregates a watch change into the current state */\n    WatchChangeAggregator.prototype.add = function (watchChange) {\n        assert(!this.frozen, 'Trying to modify frozen WatchChangeAggregator.');\n        if (watchChange instanceof DocumentWatchChange) {\n            this.addDocumentChange(watchChange);\n        }\n        else if (watchChange instanceof WatchTargetChange) {\n            this.addTargetChange(watchChange);\n        }\n        else if (watchChange instanceof ExistenceFilterChange) {\n            this.addExistenceFilterChange(watchChange);\n        }\n        else {\n            fail('Unknown watch change: ' + watchChange);\n        }\n    };\n    /** Aggregates all provided watch changes to the current state in order */\n    WatchChangeAggregator.prototype.addChanges = function (watchChanges) {\n        var _this = this;\n        assert(!this.frozen, 'Trying to modify frozen WatchChangeAggregator.');\n        watchChanges.forEach(function (change) { return _this.add(change); });\n    };\n    /**\n     * Converts the current state into a remote event with the snapshot version\n     * provided via the constructor.\n     */\n    WatchChangeAggregator.prototype.createRemoteEvent = function () {\n        var _this = this;\n        var targetChanges = this.targetChanges;\n        // Remove all the non-active targets from the remote event.\n        objUtils.forEachNumber(this.targetChanges, function (targetId) {\n            if (!_this.isActiveTarget(targetId)) {\n                delete targetChanges[targetId];\n            }\n        });\n        // Mark this aggregator as frozen so no further modifications are made\n        this.frozen = true;\n        return new RemoteEvent(this.snapshotVersion, targetChanges, this.documentUpdates);\n    };\n    WatchChangeAggregator.prototype.ensureTargetChange = function (targetId) {\n        var change = this.targetChanges[targetId];\n        if (!change) {\n            // Create an UpdateMapping by default, since resets are always explicit.\n            change = {\n                currentStatusUpdate: CurrentStatusUpdate.None,\n                snapshotVersion: this.snapshotVersion,\n                mapping: new UpdateMapping(),\n                resumeToken: emptyByteString()\n            };\n            this.targetChanges[targetId] = change;\n        }\n        return change;\n    };\n    /**\n     * We need to wait for watch to ack targets before we process those events,\n     * so to know if a target is active, there must be no pending acks we're\n     * waiting for and it must be in the current list of targets that the client\n     * cares about.\n     *\n     * This method is visible for testing.\n     */\n    WatchChangeAggregator.prototype.isActiveTarget = function (targetId) {\n        return (!objUtils.contains(this.pendingTargetResponses, targetId) &&\n            objUtils.contains(this.listenTargets, targetId));\n    };\n    WatchChangeAggregator.prototype.addDocumentChange = function (docChange) {\n        var relevant = false;\n        for (var _i = 0, _a = docChange.updatedTargetIds; _i < _a.length; _i++) {\n            var targetId = _a[_i];\n            if (this.isActiveTarget(targetId)) {\n                var change = this.ensureTargetChange(targetId);\n                change.mapping.add(docChange.key);\n                relevant = true;\n            }\n        }\n        for (var _b = 0, _c = docChange.removedTargetIds; _b < _c.length; _b++) {\n            var targetId = _c[_b];\n            if (this.isActiveTarget(targetId)) {\n                var change = this.ensureTargetChange(targetId);\n                change.mapping.delete(docChange.key);\n                relevant = true;\n            }\n        }\n        // Only update the document if there is a new document to replace to an\n        // active target that is being listened to, this might be just a target\n        // update instead.\n        if (docChange.newDoc && relevant) {\n            this.documentUpdates = this.documentUpdates.insert(docChange.key, docChange.newDoc);\n        }\n    };\n    WatchChangeAggregator.prototype.addTargetChange = function (targetChange) {\n        var _this = this;\n        targetChange.targetIds.forEach(function (targetId) {\n            var change = _this.ensureTargetChange(targetId);\n            switch (targetChange.state) {\n                case WatchTargetChangeState.NoChange:\n                    if (_this.isActiveTarget(targetId)) {\n                        // Creating the change above satisfies the semantics of no-change.\n                        applyResumeToken(change, targetChange.resumeToken);\n                    }\n                    break;\n                case WatchTargetChangeState.Added:\n                    // We need to decrement the number of pending acks needed from watch\n                    // for this targetId.\n                    _this.recordTargetResponse(targetId);\n                    if (!objUtils.contains(_this.pendingTargetResponses, targetId)) {\n                        // We have a freshly added target, so we need to reset any state\n                        // that we had previously This can happen e.g. when remove and add\n                        // back a target for existence filter mismatches.\n                        change.mapping = new UpdateMapping();\n                        change.currentStatusUpdate = CurrentStatusUpdate.None;\n                        delete _this.existenceFilters[targetId];\n                    }\n                    applyResumeToken(change, targetChange.resumeToken);\n                    break;\n                case WatchTargetChangeState.Removed:\n                    // We need to keep track of removed targets to we can\n                    // post-filter and remove any target changes.\n                    // We need to decrement the number of pending acks needed from watch\n                    // for this targetId.\n                    _this.recordTargetResponse(targetId);\n                    assert(!targetChange.cause, 'WatchChangeAggregator does not handle errored targets');\n                    break;\n                case WatchTargetChangeState.Current:\n                    if (_this.isActiveTarget(targetId)) {\n                        change.currentStatusUpdate = CurrentStatusUpdate.MarkCurrent;\n                        applyResumeToken(change, targetChange.resumeToken);\n                    }\n                    break;\n                case WatchTargetChangeState.Reset:\n                    if (_this.isActiveTarget(targetId)) {\n                        // Overwrite any existing target mapping with a reset\n                        // mapping. Every subsequent update will modify the reset\n                        // mapping, not an update mapping.\n                        change.mapping = new ResetMapping();\n                        applyResumeToken(change, targetChange.resumeToken);\n                    }\n                    break;\n                default:\n                    fail('Unknown target watch change state: ' + targetChange.state);\n            }\n        });\n    };\n    /**\n     * Record that we get a watch target add/remove by decrementing the number of\n     * pending target responses that we have.\n     */\n    WatchChangeAggregator.prototype.recordTargetResponse = function (targetId) {\n        var newCount = (this.pendingTargetResponses[targetId] || 0) - 1;\n        if (newCount === 0) {\n            delete this.pendingTargetResponses[targetId];\n        }\n        else {\n            this.pendingTargetResponses[targetId] = newCount;\n        }\n    };\n    WatchChangeAggregator.prototype.addExistenceFilterChange = function (change) {\n        if (this.isActiveTarget(change.targetId)) {\n            this.existenceFilters[change.targetId] = change.existenceFilter;\n        }\n    };\n    return WatchChangeAggregator;\n}());\nexport { WatchChangeAggregator };\n/**\n * Applies the resume token to the TargetChange, but only when it has a new\n * value. null and empty resumeTokens are discarded.\n */\nfunction applyResumeToken(change, resumeToken) {\n    if (resumeToken.length > 0) {\n        change.resumeToken = resumeToken;\n    }\n}\n\n//# sourceMappingURL=watch_change.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/watch_change.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Blob } from '../api/blob';\nimport { GeoPoint } from '../api/geo_point';\nimport { DatabaseId } from '../core/database_info';\nimport { Bound, Direction, NanFilter, NullFilter, OrderBy, Query, RelationFilter, RelationOp } from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Timestamp } from '../core/timestamp';\nimport { QueryPurpose } from '../local/query_data';\nimport { Document, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport * as fieldValue from '../model/field_value';\nimport { DeleteMutation, FieldMask, FieldTransform, MutationResult, PatchMutation, Precondition, ServerTimestampTransform, SetMutation, TransformMutation } from '../model/mutation';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport * as obj from '../util/obj';\nimport * as typeUtils from '../util/types';\nimport { ExistenceFilter } from './existence_filter';\nimport { mapCodeFromRpcCode, mapRpcCodeFromCode } from './rpc_error';\nimport { DocumentWatchChange, ExistenceFilterChange, WatchTargetChange, WatchTargetChangeState } from './watch_change';\nvar DIRECTIONS = (function () {\n    var dirs = {};\n    dirs[Direction.ASCENDING.name] = 'ASCENDING';\n    dirs[Direction.DESCENDING.name] = 'DESCENDING';\n    return dirs;\n})();\nvar OPERATORS = (function () {\n    var ops = {};\n    ops[RelationOp.LESS_THAN.name] = 'LESS_THAN';\n    ops[RelationOp.LESS_THAN_OR_EQUAL.name] = 'LESS_THAN_OR_EQUAL';\n    ops[RelationOp.GREATER_THAN.name] = 'GREATER_THAN';\n    ops[RelationOp.GREATER_THAN_OR_EQUAL.name] = 'GREATER_THAN_OR_EQUAL';\n    ops[RelationOp.EQUAL.name] = 'EQUAL';\n    return ops;\n})();\nfunction assertPresent(value, description) {\n    assert(!typeUtils.isNullOrUndefined(value), description + ' is missing');\n}\nfunction parseInt64(value) {\n    // TODO(bjornick): Handle int64 greater than 53 bits.\n    if (typeof value === 'number') {\n        return value;\n    }\n    else if (typeof value === 'string') {\n        return parseInt(value, 10);\n    }\n    else {\n        return fail(\"can't parse \" + value);\n    }\n}\n/**\n * Generates JsonObject values for the Datastore API suitable for sending to\n * either GRPC stub methods or via the JSON/HTTP REST API.\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\nvar JsonProtoSerializer = /** @class */ (function () {\n    function JsonProtoSerializer(databaseId, options) {\n        this.databaseId = databaseId;\n        this.options = options;\n    }\n    JsonProtoSerializer.prototype.emptyByteString = function () {\n        if (this.options.useProto3Json) {\n            return '';\n        }\n        else {\n            return new Uint8Array(0);\n        }\n    };\n    JsonProtoSerializer.prototype.unsafeCastProtoByteString = function (byteString) {\n        // byteStrings can be either string or UInt8Array, but the typings say\n        // it's always a string. Cast as string to avoid type check failing\n        return byteString;\n    };\n    JsonProtoSerializer.prototype.fromRpcStatus = function (status) {\n        var code = status.code === undefined\n            ? Code.UNKNOWN\n            : mapCodeFromRpcCode(status.code);\n        return new FirestoreError(code, status.message || '');\n    };\n    /**\n     * Returns a value for a Date that's appropriate to put into a proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as returning \"string\" because that's what\n     * our generated proto interfaces say dates must be. But it's easier and safer\n     * to actually return a Timestamp proto.\n     */\n    JsonProtoSerializer.prototype.toTimestamp = function (timestamp) {\n        return {\n            seconds: timestamp.seconds,\n            nanos: timestamp.nanos\n            // tslint:disable-next-line:no-any\n        };\n    };\n    JsonProtoSerializer.prototype.fromTimestamp = function (date) {\n        // The json interface (for the browser) will return an iso timestamp string,\n        // while the proto js library (for node) will return a\n        // google.protobuf.Timestamp instance.\n        if (typeof date === 'string') {\n            // TODO(b/37282237): Use strings for Proto3 timestamps\n            // assert(this.options.useProto3Json,\n            //   'The timestamp string format requires Proto3.');\n            return Timestamp.fromISOString(date);\n        }\n        else {\n            assert(!!date, 'Cannot deserialize null or undefined timestamp.');\n            // TODO(b/37282237): Use strings for Proto3 timestamps\n            // assert(!this.options.useProto3Json,\n            //   'The timestamp instance format requires Proto JS.');\n            var seconds = parseInt64(date.seconds || '0');\n            var nanos = date.nanos || 0;\n            return new Timestamp(seconds, nanos);\n        }\n    };\n    /**\n     * Returns a value for bytes that's appropriate to put in a proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as returning \"string\" because that's what\n     * our generated proto interfaces say bytes must be. But it should return\n     * an Uint8Array in Node.\n     */\n    JsonProtoSerializer.prototype.toBytes = function (bytes) {\n        if (this.options.useProto3Json) {\n            return bytes.toBase64();\n        }\n        else {\n            // The typings say it's a string, but it needs to be a Uint8Array in Node.\n            return this.unsafeCastProtoByteString(bytes.toUint8Array());\n        }\n    };\n    /**\n     * Parse the blob from the protos into the internal Blob class. Note that the\n     * typings assume all blobs are strings, but they are actually Uint8Arrays\n     * on Node.\n     */\n    JsonProtoSerializer.prototype.fromBlob = function (blob) {\n        if (typeof blob === 'string') {\n            assert(this.options.useProto3Json, 'Expected bytes to be passed in as Uint8Array, but got a string instead.');\n            return Blob.fromBase64String(blob);\n        }\n        else {\n            assert(!this.options.useProto3Json, 'Expected bytes to be passed in as string, but got something else instead.');\n            return Blob.fromUint8Array(blob);\n        }\n    };\n    JsonProtoSerializer.prototype.toVersion = function (version) {\n        return this.toTimestamp(version.toTimestamp());\n    };\n    JsonProtoSerializer.prototype.fromVersion = function (version) {\n        assert(!!version, \"Trying to deserialize version that isn't set\");\n        return SnapshotVersion.fromTimestamp(this.fromTimestamp(version));\n    };\n    JsonProtoSerializer.prototype.toResourceName = function (databaseId, path) {\n        return this.fullyQualifiedPrefixPath(databaseId)\n            .child('documents')\n            .child(path)\n            .canonicalString();\n    };\n    JsonProtoSerializer.prototype.fromResourceName = function (name) {\n        var resource = ResourcePath.fromString(name);\n        assert(this.isValidResourceName(resource), 'Tried to deserialize invalid key ' + resource.toString());\n        return resource;\n    };\n    JsonProtoSerializer.prototype.toName = function (key) {\n        return this.toResourceName(this.databaseId, key.path);\n    };\n    JsonProtoSerializer.prototype.fromName = function (name) {\n        var resource = this.fromResourceName(name);\n        assert(resource.get(1) === this.databaseId.projectId, 'Tried to deserialize key from different project: ' +\n            resource.get(1) +\n            ' vs ' +\n            this.databaseId.projectId);\n        assert((!resource.get(3) && !this.databaseId.database) ||\n            resource.get(3) === this.databaseId.database, 'Tried to deserialize key from different database: ' +\n            resource.get(3) +\n            ' vs ' +\n            this.databaseId.database);\n        return new DocumentKey(this.extractLocalPathFromResourceName(resource));\n    };\n    JsonProtoSerializer.prototype.toQueryPath = function (path) {\n        if (path.length === 0) {\n            // If the path is empty, the backend requires we leave off the /documents\n            // at the end.\n            return this.encodedDatabaseId;\n        }\n        return this.toResourceName(this.databaseId, path);\n    };\n    JsonProtoSerializer.prototype.fromQueryPath = function (name) {\n        var resourceName = this.fromResourceName(name);\n        if (resourceName.length === 4) {\n            return ResourcePath.EMPTY_PATH;\n        }\n        return this.extractLocalPathFromResourceName(resourceName);\n    };\n    Object.defineProperty(JsonProtoSerializer.prototype, \"encodedDatabaseId\", {\n        get: function () {\n            var path = new ResourcePath([\n                'projects',\n                this.databaseId.projectId,\n                'databases',\n                this.databaseId.database\n            ]);\n            return path.canonicalString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    JsonProtoSerializer.prototype.fullyQualifiedPrefixPath = function (databaseId) {\n        return new ResourcePath([\n            'projects',\n            databaseId.projectId,\n            'databases',\n            databaseId.database\n        ]);\n    };\n    JsonProtoSerializer.prototype.extractLocalPathFromResourceName = function (resourceName) {\n        assert(resourceName.length > 4 && resourceName.get(4) === 'documents', 'tried to deserialize invalid key ' + resourceName.toString());\n        return resourceName.popFirst(5);\n    };\n    JsonProtoSerializer.prototype.isValidResourceName = function (path) {\n        // Resource names have at least 4 components (project ID, database ID)\n        return (path.length >= 4 &&\n            path.get(0) === 'projects' &&\n            path.get(2) === 'databases');\n    };\n    JsonProtoSerializer.prototype.toValue = function (val) {\n        if (val instanceof fieldValue.NullValue) {\n            return { nullValue: 'NULL_VALUE' };\n        }\n        else if (val instanceof fieldValue.BooleanValue) {\n            return { booleanValue: val.value() };\n        }\n        else if (val instanceof fieldValue.IntegerValue) {\n            return { integerValue: '' + val.value() };\n        }\n        else if (val instanceof fieldValue.DoubleValue) {\n            var doubleValue = val.value();\n            if (this.options.useProto3Json) {\n                // Proto 3 let's us encode NaN and Infinity as string values as\n                // expected by the backend. This is currently not checked by our unit\n                // tests because they rely on protobuf.js.\n                if (isNaN(doubleValue)) {\n                    return { doubleValue: 'NaN' };\n                }\n                else if (doubleValue === Infinity) {\n                    return { doubleValue: 'Infinity' };\n                }\n                else if (doubleValue === -Infinity) {\n                    return { doubleValue: '-Infinity' };\n                }\n            }\n            return { doubleValue: val.value() };\n        }\n        else if (val instanceof fieldValue.StringValue) {\n            return { stringValue: val.value() };\n        }\n        else if (val instanceof fieldValue.ObjectValue) {\n            return { mapValue: this.toMapValue(val) };\n        }\n        else if (val instanceof fieldValue.ArrayValue) {\n            return { arrayValue: this.toArrayValue(val) };\n        }\n        else if (val instanceof fieldValue.TimestampValue) {\n            return {\n                timestampValue: this.toTimestamp(val.internalValue)\n            };\n        }\n        else if (val instanceof fieldValue.GeoPointValue) {\n            return {\n                geoPointValue: {\n                    latitude: val.value().latitude,\n                    longitude: val.value().longitude\n                }\n            };\n        }\n        else if (val instanceof fieldValue.BlobValue) {\n            return {\n                bytesValue: this.toBytes(val.value())\n            };\n        }\n        else if (val instanceof fieldValue.RefValue) {\n            return {\n                referenceValue: this.toResourceName(val.databaseId, val.key.path)\n            };\n        }\n        else {\n            return fail('Unknown FieldValue ' + JSON.stringify(val));\n        }\n    };\n    JsonProtoSerializer.prototype.fromValue = function (obj) {\n        var _this = this;\n        // tslint:disable-next-line:no-any\n        var type = obj['value_type'];\n        if (hasTag(obj, type, 'nullValue')) {\n            return fieldValue.NullValue.INSTANCE;\n        }\n        else if (hasTag(obj, type, 'booleanValue')) {\n            return fieldValue.BooleanValue.of(obj.booleanValue);\n        }\n        else if (hasTag(obj, type, 'integerValue')) {\n            return new fieldValue.IntegerValue(parseInt64(obj.integerValue));\n        }\n        else if (hasTag(obj, type, 'doubleValue')) {\n            if (this.options.useProto3Json) {\n                // Proto 3 uses the string values 'NaN' and 'Infinity'.\n                if (obj.doubleValue === 'NaN') {\n                    return fieldValue.DoubleValue.NAN;\n                }\n                else if (obj.doubleValue === 'Infinity') {\n                    return fieldValue.DoubleValue.POSITIVE_INFINITY;\n                }\n                else if (obj.doubleValue === '-Infinity') {\n                    return fieldValue.DoubleValue.NEGATIVE_INFINITY;\n                }\n            }\n            return new fieldValue.DoubleValue(obj.doubleValue);\n        }\n        else if (hasTag(obj, type, 'stringValue')) {\n            return new fieldValue.StringValue(obj.stringValue);\n        }\n        else if (hasTag(obj, type, 'mapValue')) {\n            return this.fromFields(obj.mapValue.fields || {});\n        }\n        else if (hasTag(obj, type, 'arrayValue')) {\n            // \"values\" is not present if the array is empty\n            assertPresent(obj.arrayValue, 'arrayValue');\n            var values = obj.arrayValue.values || [];\n            return new fieldValue.ArrayValue(values.map(function (v) { return _this.fromValue(v); }));\n        }\n        else if (hasTag(obj, type, 'timestampValue')) {\n            assertPresent(obj.timestampValue, 'timestampValue');\n            return new fieldValue.TimestampValue(this.fromTimestamp(obj.timestampValue));\n        }\n        else if (hasTag(obj, type, 'geoPointValue')) {\n            assertPresent(obj.geoPointValue, 'geoPointValue');\n            var latitude = obj.geoPointValue.latitude || 0;\n            var longitude = obj.geoPointValue.longitude || 0;\n            return new fieldValue.GeoPointValue(new GeoPoint(latitude, longitude));\n        }\n        else if (hasTag(obj, type, 'bytesValue')) {\n            assertPresent(obj.bytesValue, 'bytesValue');\n            var blob = this.fromBlob(obj.bytesValue);\n            return new fieldValue.BlobValue(blob);\n        }\n        else if (hasTag(obj, type, 'referenceValue')) {\n            assertPresent(obj.referenceValue, 'referenceValue');\n            var resourceName = this.fromResourceName(obj.referenceValue);\n            var dbId = new DatabaseId(resourceName.get(1), resourceName.get(3));\n            var key = new DocumentKey(this.extractLocalPathFromResourceName(resourceName));\n            return new fieldValue.RefValue(dbId, key);\n        }\n        else {\n            return fail('Unknown Value proto ' + JSON.stringify(obj));\n        }\n    };\n    /** Creates an api.Document from key and fields (but no create/update time) */\n    JsonProtoSerializer.prototype.toMutationDocument = function (key, fields) {\n        return {\n            name: this.toName(key),\n            fields: this.toFields(fields)\n        };\n    };\n    JsonProtoSerializer.prototype.toDocument = function (document) {\n        assert(!document.hasLocalMutations, \"Can't serialize documents with mutations.\");\n        return {\n            name: this.toName(document.key),\n            fields: this.toFields(document.data),\n            updateTime: this.toTimestamp(document.version.toTimestamp())\n        };\n    };\n    JsonProtoSerializer.prototype.fromDocument = function (document) {\n        return new Document(this.fromName(document.name), this.fromVersion(document.updateTime), this.fromFields(document.fields || {}), { hasLocalMutations: false });\n    };\n    JsonProtoSerializer.prototype.toFields = function (fields) {\n        var _this = this;\n        var result = {};\n        fields.forEach(function (key, value) {\n            result[key] = _this.toValue(value);\n        });\n        return result;\n    };\n    JsonProtoSerializer.prototype.fromFields = function (object) {\n        var _this = this;\n        // Proto map<string, Value> gets mapped to Object, so cast it.\n        var map = object;\n        var result = fieldValue.ObjectValue.EMPTY;\n        obj.forEach(map, function (key, value) {\n            result = result.set(new FieldPath([key]), _this.fromValue(value));\n        });\n        return result;\n    };\n    JsonProtoSerializer.prototype.toMapValue = function (map) {\n        return {\n            fields: this.toFields(map)\n        };\n    };\n    JsonProtoSerializer.prototype.toArrayValue = function (array) {\n        var _this = this;\n        var result = [];\n        array.forEach(function (value) {\n            result.push(_this.toValue(value));\n        });\n        return { values: result };\n    };\n    JsonProtoSerializer.prototype.fromFound = function (doc) {\n        assert(!!doc.found, 'Tried to deserialize a found document from a missing document.');\n        assertPresent(doc.found.name, 'doc.found.name');\n        assertPresent(doc.found.updateTime, 'doc.found.updateTime');\n        var key = this.fromName(doc.found.name);\n        var version = this.fromVersion(doc.found.updateTime);\n        var fields = this.fromFields(doc.found.fields || {});\n        return new Document(key, version, fields, { hasLocalMutations: false });\n    };\n    JsonProtoSerializer.prototype.fromMissing = function (result) {\n        assert(!!result.missing, 'Tried to deserialize a missing document from a found document.');\n        assert(!!result.readTime, 'Tried to deserialize a missing document without a read time.');\n        var key = this.fromName(result.missing);\n        var version = this.fromVersion(result.readTime);\n        return new NoDocument(key, version);\n    };\n    JsonProtoSerializer.prototype.fromMaybeDocument = function (result) {\n        // tslint:disable-next-line:no-any\n        var type = result['result_type'];\n        if (hasTag(result, type, 'found')) {\n            return this.fromFound(result);\n        }\n        else if (hasTag(result, type, 'missing')) {\n            return this.fromMissing(result);\n        }\n        return fail('invalid batch get response: ' + JSON.stringify(result));\n    };\n    JsonProtoSerializer.prototype.toWatchTargetChangeState = function (state) {\n        switch (state) {\n            case WatchTargetChangeState.Added:\n                return 'ADD';\n            case WatchTargetChangeState.Current:\n                return 'CURRENT';\n            case WatchTargetChangeState.NoChange:\n                return 'NO_CHANGE';\n            case WatchTargetChangeState.Removed:\n                return 'REMOVE';\n            case WatchTargetChangeState.Reset:\n                return 'RESET';\n            default:\n                return fail('Unknown WatchTargetChangeState: ' + state);\n        }\n    };\n    JsonProtoSerializer.prototype.toTestWatchChange = function (watchChange) {\n        if (watchChange instanceof ExistenceFilterChange) {\n            return {\n                filter: {\n                    count: watchChange.existenceFilter.count,\n                    targetId: watchChange.targetId\n                }\n            };\n        }\n        if (watchChange instanceof DocumentWatchChange) {\n            if (watchChange.newDoc instanceof Document) {\n                var doc = watchChange.newDoc;\n                return {\n                    documentChange: {\n                        document: {\n                            name: this.toName(doc.key),\n                            fields: this.toFields(doc.data),\n                            updateTime: this.toVersion(doc.version)\n                        },\n                        targetIds: watchChange.updatedTargetIds,\n                        removedTargetIds: watchChange.removedTargetIds\n                    }\n                };\n            }\n            else if (watchChange.newDoc instanceof NoDocument) {\n                var doc = watchChange.newDoc;\n                return {\n                    documentDelete: {\n                        document: this.toName(doc.key),\n                        readTime: this.toVersion(doc.version),\n                        removedTargetIds: watchChange.removedTargetIds\n                    }\n                };\n            }\n            else if (watchChange.newDoc === null) {\n                return {\n                    documentRemove: {\n                        document: this.toName(watchChange.key),\n                        removedTargetIds: watchChange.removedTargetIds\n                    }\n                };\n            }\n        }\n        if (watchChange instanceof WatchTargetChange) {\n            var cause = undefined;\n            if (watchChange.cause) {\n                cause = {\n                    code: mapRpcCodeFromCode(watchChange.cause.code),\n                    message: watchChange.cause.message\n                };\n            }\n            return {\n                targetChange: {\n                    targetChangeType: this.toWatchTargetChangeState(watchChange.state),\n                    targetIds: watchChange.targetIds,\n                    resumeToken: this.unsafeCastProtoByteString(watchChange.resumeToken),\n                    cause: cause\n                }\n            };\n        }\n        return fail('Unrecognized watch change: ' + JSON.stringify(watchChange));\n    };\n    JsonProtoSerializer.prototype.fromWatchChange = function (change) {\n        // tslint:disable-next-line:no-any\n        var type = change['change_type'];\n        var watchChange;\n        if (hasTag(change, type, 'targetChange')) {\n            assertPresent(change.targetChange, 'targetChange');\n            // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'\n            // if unset\n            var state = this.fromWatchTargetChangeState(change.targetChange.targetChangeType || 'NO_CHANGE');\n            var targetIds = change.targetChange.targetIds || [];\n            var resumeToken = change.targetChange.resumeToken || this.emptyByteString();\n            var causeProto = change.targetChange.cause;\n            var cause = causeProto && this.fromRpcStatus(causeProto);\n            watchChange = new WatchTargetChange(state, targetIds, resumeToken, cause || null);\n        }\n        else if (hasTag(change, type, 'documentChange')) {\n            assertPresent(change.documentChange, 'documentChange');\n            assertPresent(change.documentChange.document, 'documentChange.name');\n            assertPresent(change.documentChange.document.name, 'documentChange.document.name');\n            assertPresent(change.documentChange.document.updateTime, 'documentChange.document.updateTime');\n            var entityChange = change.documentChange;\n            var key = this.fromName(entityChange.document.name);\n            var version = this.fromVersion(entityChange.document.updateTime);\n            var fields = this.fromFields(entityChange.document.fields || {});\n            var doc = new Document(key, version, fields, {\n                hasLocalMutations: false\n            });\n            var updatedTargetIds = entityChange.targetIds || [];\n            var removedTargetIds = entityChange.removedTargetIds || [];\n            watchChange = new DocumentWatchChange(updatedTargetIds, removedTargetIds, doc.key, doc);\n        }\n        else if (hasTag(change, type, 'documentDelete')) {\n            assertPresent(change.documentDelete, 'documentDelete');\n            assertPresent(change.documentDelete.document, 'documentDelete.document');\n            var docDelete = change.documentDelete;\n            var key = this.fromName(docDelete.document);\n            var version = docDelete.readTime\n                ? this.fromVersion(docDelete.readTime)\n                : SnapshotVersion.forDeletedDoc();\n            var doc = new NoDocument(key, version);\n            var removedTargetIds = docDelete.removedTargetIds || [];\n            watchChange = new DocumentWatchChange([], removedTargetIds, doc.key, doc);\n        }\n        else if (hasTag(change, type, 'documentRemove')) {\n            assertPresent(change.documentRemove, 'documentRemove');\n            assertPresent(change.documentRemove.document, 'documentRemove');\n            var docRemove = change.documentRemove;\n            var key = this.fromName(docRemove.document);\n            var removedTargetIds = docRemove.removedTargetIds || [];\n            watchChange = new DocumentWatchChange([], removedTargetIds, key, null);\n        }\n        else if (hasTag(change, type, 'filter')) {\n            // TODO(dimond): implement existence filter parsing with strategy.\n            assertPresent(change.filter, 'filter');\n            assertPresent(change.filter.targetId, 'filter.targetId');\n            var filter = change.filter;\n            var count = filter.count || 0;\n            var existenceFilter = new ExistenceFilter(count);\n            var targetId = filter.targetId;\n            watchChange = new ExistenceFilterChange(targetId, existenceFilter);\n        }\n        else {\n            return fail('Unknown change type ' + JSON.stringify(change));\n        }\n        return watchChange;\n    };\n    JsonProtoSerializer.prototype.fromWatchTargetChangeState = function (state) {\n        if (state === 'NO_CHANGE') {\n            return WatchTargetChangeState.NoChange;\n        }\n        else if (state === 'ADD') {\n            return WatchTargetChangeState.Added;\n        }\n        else if (state === 'REMOVE') {\n            return WatchTargetChangeState.Removed;\n        }\n        else if (state === 'CURRENT') {\n            return WatchTargetChangeState.Current;\n        }\n        else if (state === 'RESET') {\n            return WatchTargetChangeState.Reset;\n        }\n        else {\n            return fail('Got unexpected TargetChange.state: ' + state);\n        }\n    };\n    JsonProtoSerializer.prototype.versionFromListenResponse = function (change) {\n        // We have only reached a consistent snapshot for the entire stream if there\n        // is a read_time set and it applies to all targets (i.e. the list of\n        // targets is empty). The backend is guaranteed to send such responses.\n        // tslint:disable-next-line:no-any\n        var type = change['response_type'];\n        if (!hasTag(change, type, 'targetChange')) {\n            return SnapshotVersion.MIN;\n        }\n        var targetChange = change.targetChange;\n        if (targetChange.targetIds && targetChange.targetIds.length) {\n            return SnapshotVersion.MIN;\n        }\n        if (!targetChange.readTime) {\n            return SnapshotVersion.MIN;\n        }\n        return this.fromVersion(targetChange.readTime);\n    };\n    JsonProtoSerializer.prototype.toMutation = function (mutation) {\n        var _this = this;\n        var result;\n        if (mutation instanceof SetMutation) {\n            result = {\n                update: this.toMutationDocument(mutation.key, mutation.value)\n            };\n        }\n        else if (mutation instanceof DeleteMutation) {\n            result = { delete: this.toName(mutation.key) };\n        }\n        else if (mutation instanceof PatchMutation) {\n            result = {\n                update: this.toMutationDocument(mutation.key, mutation.data),\n                updateMask: this.toDocumentMask(mutation.fieldMask)\n            };\n        }\n        else if (mutation instanceof TransformMutation) {\n            result = {\n                transform: {\n                    document: this.toName(mutation.key),\n                    fieldTransforms: mutation.fieldTransforms.map(function (transform) {\n                        return _this.toFieldTransform(transform);\n                    })\n                }\n            };\n        }\n        else {\n            return fail('Unknown mutation type ' + mutation.type);\n        }\n        if (!mutation.precondition.isNone) {\n            result.currentDocument = this.toPrecondition(mutation.precondition);\n        }\n        return result;\n    };\n    JsonProtoSerializer.prototype.fromMutation = function (proto) {\n        var _this = this;\n        var precondition = proto.currentDocument\n            ? this.fromPrecondition(proto.currentDocument)\n            : Precondition.NONE;\n        if (proto.update) {\n            assertPresent(proto.update.name, 'name');\n            var key = this.fromName(proto.update.name);\n            var value = this.fromFields(proto.update.fields || {});\n            if (proto.updateMask) {\n                var fieldMask = this.fromDocumentMask(proto.updateMask);\n                return new PatchMutation(key, value, fieldMask, precondition);\n            }\n            else {\n                return new SetMutation(key, value, precondition);\n            }\n        }\n        else if (proto.delete) {\n            var key = this.fromName(proto.delete);\n            return new DeleteMutation(key, precondition);\n        }\n        else if (proto.transform) {\n            var key = this.fromName(proto.transform.document);\n            var fieldTransforms = proto.transform.fieldTransforms.map(function (transform) {\n                return _this.fromFieldTransform(transform);\n            });\n            assert(precondition.exists === true, 'Transforms only support precondition \"exists == true\"');\n            return new TransformMutation(key, fieldTransforms);\n        }\n        else {\n            return fail('unknown mutation proto: ' + JSON.stringify(proto));\n        }\n    };\n    JsonProtoSerializer.prototype.toPrecondition = function (precondition) {\n        assert(!precondition.isNone, \"Can't serialize an empty precondition\");\n        if (precondition.updateTime !== undefined) {\n            return {\n                updateTime: this.toVersion(precondition.updateTime)\n            };\n        }\n        else if (precondition.exists !== undefined) {\n            return { exists: precondition.exists };\n        }\n        else {\n            return fail('Unknown precondition');\n        }\n    };\n    JsonProtoSerializer.prototype.fromPrecondition = function (precondition) {\n        if (precondition.updateTime !== undefined) {\n            return Precondition.updateTime(this.fromVersion(precondition.updateTime));\n        }\n        else if (precondition.exists !== undefined) {\n            return Precondition.exists(precondition.exists);\n        }\n        else {\n            return Precondition.NONE;\n        }\n    };\n    JsonProtoSerializer.prototype.fromWriteResult = function (proto) {\n        var _this = this;\n        // NOTE: Deletes don't have an updateTime.\n        var version = proto.updateTime\n            ? this.fromVersion(proto.updateTime)\n            : null;\n        var transformResults = null;\n        if (proto.transformResults) {\n            transformResults = proto.transformResults.map(function (result) {\n                return _this.fromValue(result);\n            });\n        }\n        return new MutationResult(version, transformResults);\n    };\n    JsonProtoSerializer.prototype.fromWriteResults = function (protos) {\n        var _this = this;\n        return (protos || []).map(function (proto) { return _this.fromWriteResult(proto); });\n    };\n    JsonProtoSerializer.prototype.toFieldTransform = function (fieldTransform) {\n        assert(fieldTransform.transform instanceof ServerTimestampTransform, 'Unknown transform: ' + fieldTransform.transform);\n        return {\n            fieldPath: fieldTransform.field.canonicalString(),\n            setToServerValue: 'REQUEST_TIME'\n        };\n    };\n    JsonProtoSerializer.prototype.fromFieldTransform = function (proto) {\n        assert(proto.setToServerValue === 'REQUEST_TIME', 'Unknown transform proto: ' + JSON.stringify(proto));\n        var fieldPath = FieldPath.fromServerFormat(proto.fieldPath);\n        return new FieldTransform(fieldPath, ServerTimestampTransform.instance);\n    };\n    JsonProtoSerializer.prototype.toDocumentsTarget = function (query) {\n        return { documents: [this.toQueryPath(query.path)] };\n    };\n    JsonProtoSerializer.prototype.fromDocumentsTarget = function (documentsTarget) {\n        var count = documentsTarget.documents.length;\n        assert(count === 1, 'DocumentsTarget contained other than 1 document: ' + count);\n        var name = documentsTarget.documents[0];\n        return Query.atPath(this.fromQueryPath(name));\n    };\n    JsonProtoSerializer.prototype.toQueryTarget = function (query) {\n        // Dissect the path into parent, collectionId, and optional key filter.\n        var result = { structuredQuery: {} };\n        if (query.path.isEmpty()) {\n            result.parent = this.toQueryPath(ResourcePath.EMPTY_PATH);\n        }\n        else {\n            var path = query.path;\n            assert(path.length % 2 !== 0, 'Document queries with filters are not supported.');\n            result.parent = this.toQueryPath(path.popLast());\n            result.structuredQuery.from = [{ collectionId: path.lastSegment() }];\n        }\n        var where = this.toFilter(query.filters);\n        if (where) {\n            result.structuredQuery.where = where;\n        }\n        var orderBy = this.toOrder(query.orderBy);\n        if (orderBy) {\n            result.structuredQuery.orderBy = orderBy;\n        }\n        var limit = this.toLimit(query.limit);\n        if (limit !== undefined) {\n            result.structuredQuery.limit = limit;\n        }\n        if (query.startAt) {\n            result.structuredQuery.startAt = this.toCursor(query.startAt);\n        }\n        if (query.endAt) {\n            result.structuredQuery.endAt = this.toCursor(query.endAt);\n        }\n        return result;\n    };\n    JsonProtoSerializer.prototype.fromQueryTarget = function (target) {\n        var path = this.fromQueryPath(target.parent);\n        var query = target.structuredQuery;\n        var fromCount = query.from ? query.from.length : 0;\n        if (fromCount > 0) {\n            assert(fromCount === 1, 'StructuredQuery.from with more than one collection is not supported.');\n            var from = query.from[0];\n            path = path.child(from.collectionId);\n        }\n        var filterBy = [];\n        if (query.where) {\n            filterBy = this.fromFilter(query.where);\n        }\n        var orderBy = [];\n        if (query.orderBy) {\n            orderBy = this.fromOrder(query.orderBy);\n        }\n        var limit = null;\n        if (query.limit) {\n            limit = query.limit;\n        }\n        var startAt = null;\n        if (query.startAt) {\n            startAt = this.fromCursor(query.startAt);\n        }\n        var endAt = null;\n        if (query.endAt) {\n            endAt = this.fromCursor(query.endAt);\n        }\n        return new Query(path, orderBy, filterBy, limit, startAt, endAt);\n    };\n    JsonProtoSerializer.prototype.toListenRequestLabels = function (queryData) {\n        var value = this.toLabel(queryData.purpose);\n        if (value == null) {\n            return null;\n        }\n        else {\n            return {\n                'goog-listen-tags': value\n            };\n        }\n    };\n    JsonProtoSerializer.prototype.toLabel = function (purpose) {\n        switch (purpose) {\n            case QueryPurpose.Listen:\n                return null;\n            case QueryPurpose.ExistenceFilterMismatch:\n                return 'existence-filter-mismatch';\n            case QueryPurpose.LimboResolution:\n                return 'limbo-document';\n            default:\n                return fail('Unrecognized query purpose: ' + purpose);\n        }\n    };\n    JsonProtoSerializer.prototype.toTarget = function (queryData) {\n        var result;\n        var query = queryData.query;\n        if (query.isDocumentQuery()) {\n            result = { documents: this.toDocumentsTarget(query) };\n        }\n        else {\n            result = { query: this.toQueryTarget(query) };\n        }\n        result.targetId = queryData.targetId;\n        if (queryData.resumeToken.length > 0) {\n            result.resumeToken = this.unsafeCastProtoByteString(queryData.resumeToken);\n        }\n        return result;\n    };\n    JsonProtoSerializer.prototype.toFilter = function (filters) {\n        var _this = this;\n        if (filters.length === 0)\n            return;\n        var protos = filters.map(function (filter) {\n            return filter instanceof RelationFilter\n                ? _this.toRelationFilter(filter)\n                : _this.toUnaryFilter(filter);\n        });\n        if (protos.length === 1) {\n            return protos[0];\n        }\n        return { compositeFilter: { op: 'AND', filters: protos } };\n    };\n    JsonProtoSerializer.prototype.fromFilter = function (filter) {\n        var _this = this;\n        if (!filter) {\n            return [];\n        }\n        else if (filter.unaryFilter !== undefined) {\n            return [this.fromUnaryFilter(filter)];\n        }\n        else if (filter.fieldFilter !== undefined) {\n            return [this.fromRelationFilter(filter)];\n        }\n        else if (filter.compositeFilter !== undefined) {\n            return filter.compositeFilter.filters\n                .map(function (f) { return _this.fromFilter(f); })\n                .reduce(function (accum, current) { return accum.concat(current); });\n        }\n        else {\n            return fail('Unknown filter: ' + JSON.stringify(filter));\n        }\n    };\n    JsonProtoSerializer.prototype.toOrder = function (orderBys) {\n        var _this = this;\n        if (orderBys.length === 0)\n            return;\n        return orderBys.map(function (order) { return _this.toPropertyOrder(order); });\n    };\n    JsonProtoSerializer.prototype.fromOrder = function (orderBys) {\n        var _this = this;\n        return orderBys.map(function (order) { return _this.fromPropertyOrder(order); });\n    };\n    JsonProtoSerializer.prototype.toLimit = function (limit) {\n        if (!typeUtils.isNullOrUndefined(limit)) {\n            return limit;\n        }\n        return;\n    };\n    JsonProtoSerializer.prototype.toCursor = function (cursor) {\n        var _this = this;\n        return {\n            before: cursor.before,\n            values: cursor.position.map(function (component) { return _this.toValue(component); })\n        };\n    };\n    JsonProtoSerializer.prototype.fromCursor = function (cursor) {\n        var _this = this;\n        var before = !!cursor.before;\n        var position = cursor.values.map(function (component) { return _this.fromValue(component); });\n        return new Bound(position, before);\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toDirection = function (dir) {\n        return DIRECTIONS[dir.name];\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.fromDirection = function (dir) {\n        switch (dir) {\n            case 'ASCENDING':\n                return Direction.ASCENDING;\n            case 'DESCENDING':\n                return Direction.DESCENDING;\n            default:\n                return undefined;\n        }\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toOperatorName = function (op) {\n        return OPERATORS[op.name];\n    };\n    JsonProtoSerializer.prototype.fromOperatorName = function (op) {\n        switch (op) {\n            case 'EQUAL':\n                return RelationOp.EQUAL;\n            case 'GREATER_THAN':\n                return RelationOp.GREATER_THAN;\n            case 'GREATER_THAN_OR_EQUAL':\n                return RelationOp.GREATER_THAN_OR_EQUAL;\n            case 'LESS_THAN':\n                return RelationOp.LESS_THAN;\n            case 'LESS_THAN_OR_EQUAL':\n                return RelationOp.LESS_THAN_OR_EQUAL;\n            case 'OPERATOR_UNSPECIFIED':\n                return fail('Unspecified relation');\n            default:\n                return fail('Unknown relation');\n        }\n    };\n    JsonProtoSerializer.prototype.toFieldPathReference = function (path) {\n        return { fieldPath: path.canonicalString() };\n    };\n    JsonProtoSerializer.prototype.fromFieldPathReference = function (fieldReference) {\n        return FieldPath.fromServerFormat(fieldReference.fieldPath);\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toPropertyOrder = function (orderBy) {\n        return {\n            field: this.toFieldPathReference(orderBy.field),\n            direction: this.toDirection(orderBy.dir)\n        };\n    };\n    JsonProtoSerializer.prototype.fromPropertyOrder = function (orderBy) {\n        return new OrderBy(this.fromFieldPathReference(orderBy.field), this.fromDirection(orderBy.direction));\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toRelationFilter = function (filter) {\n        if (filter instanceof RelationFilter) {\n            return {\n                fieldFilter: {\n                    field: this.toFieldPathReference(filter.field),\n                    op: this.toOperatorName(filter.op),\n                    value: this.toValue(filter.value)\n                }\n            };\n        }\n        else {\n            return fail('Unrecognized filter: ' + JSON.stringify(filter));\n        }\n    };\n    JsonProtoSerializer.prototype.fromRelationFilter = function (filter) {\n        return new RelationFilter(this.fromFieldPathReference(filter.fieldFilter.field), this.fromOperatorName(filter.fieldFilter.op), this.fromValue(filter.fieldFilter.value));\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toUnaryFilter = function (filter) {\n        if (filter instanceof NanFilter) {\n            return {\n                unaryFilter: {\n                    field: this.toFieldPathReference(filter.field),\n                    op: 'IS_NAN'\n                }\n            };\n        }\n        else if (filter instanceof NullFilter) {\n            return {\n                unaryFilter: {\n                    field: this.toFieldPathReference(filter.field),\n                    op: 'IS_NULL'\n                }\n            };\n        }\n        else {\n            return fail('Unrecognized filter: ' + JSON.stringify(filter));\n        }\n    };\n    JsonProtoSerializer.prototype.fromUnaryFilter = function (filter) {\n        switch (filter.unaryFilter.op) {\n            case 'IS_NAN':\n                var nanField = this.fromFieldPathReference(filter.unaryFilter.field);\n                return new NanFilter(nanField);\n            case 'IS_NULL':\n                var nullField = this.fromFieldPathReference(filter.unaryFilter.field);\n                return new NullFilter(nullField);\n            case 'OPERATOR_UNSPECIFIED':\n                return fail('Unspecified filter');\n            default:\n                return fail('Unknown filter');\n        }\n    };\n    JsonProtoSerializer.prototype.toDocumentMask = function (fieldMask) {\n        return {\n            fieldPaths: fieldMask.fields.map(function (field) { return field.canonicalString(); })\n        };\n    };\n    JsonProtoSerializer.prototype.fromDocumentMask = function (proto) {\n        var paths = proto.fieldPaths || [];\n        var fields = paths.map(function (path) { return FieldPath.fromServerFormat(path); });\n        return new FieldMask(fields);\n    };\n    return JsonProtoSerializer;\n}());\nexport { JsonProtoSerializer };\n/**\n * Checks for a specific oneof tag in a protocol buffer message.\n *\n * This intentionally accommodates two distinct cases:\n *\n * 1) Messages containing a type tag: these are the format produced by GRPC in\n * return values. These may contain default-value mappings for all tags in the\n * oneof but the type tag specifies which one was actually set.\n *\n * 2) Messages that don't contain a type tag: these are the format required by\n * GRPC as inputs. If we emitted objects with type tags, ProtoBuf.js would\n * choke claiming that the tags aren't fields in the Message.\n *\n * Allowing both formats here makes the serializer able to consume the outputs\n * it produces: for all messages it supports, fromX(toX(value)) == value.\n *\n * Note that case 2 suffers from ambiguity: if multiple tags are present\n * without a type tag then the callers are structured in such a way that the\n * first invocation will win. Since we only parse in this mode when parsing\n * the output of a serialize method this works, but it's not a general\n * solution.\n *\n * Unfortunately there is no general solution here because proto3 makes it\n * impossible to distinguish unset from explicitly set fields: both have the\n * default value for the type. Without the type tag but multiple value tags\n * it's possible to have default values for each tag in the oneof and not be\n * able to know which was actually in effect.\n */\nfunction hasTag(obj, type, tag) {\n    return type === tag || (!type && tag in obj);\n}\n\n//# sourceMappingURL=serializer.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/serializer.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FieldPath as InternalFieldPath } from '../model/path';\nimport { Code, FirestoreError } from '../util/error';\nimport { validateArgType, validateNamedArrayAtLeastNumberOfElements } from '../util/input_validation';\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n// tslint:disable:strip-private-property-underscore\n/**\n * A FieldPath refers to a field in a document. The path may consist of a single\n * field name (referring to a top-level field in the document), or a list of\n * field names (referring to a nested field in the document).\n */\nvar FieldPath = /** @class */ (function () {\n    /**\n     * Creates a FieldPath from the provided field names. If more than one field\n     * name is provided, the path will point to a nested field in a document.\n     *\n     * @param fieldNames A list of field names.\n     */\n    function FieldPath() {\n        var fieldNames = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            fieldNames[_i] = arguments[_i];\n        }\n        validateNamedArrayAtLeastNumberOfElements('FieldPath', fieldNames, 'fieldNames', 1);\n        for (var i = 0; i < fieldNames.length; ++i) {\n            validateArgType('FieldPath', 'string', i, fieldNames[i]);\n            if (fieldNames[i].length === 0) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field name at argument $(i + 1). \" +\n                    'Field names must not be empty.');\n            }\n        }\n        this._internalPath = new InternalFieldPath(fieldNames);\n    }\n    FieldPath.documentId = function () {\n        return FieldPath._DOCUMENT_ID;\n    };\n    /**\n     * Internal Note: The backend doesn't technically support querying by\n     * document ID. Instead it queries by the entire document name (full path\n     * included), but in the cases we currently support documentId(), the net\n     * effect is the same.\n     */\n    FieldPath._DOCUMENT_ID = new FieldPath(InternalFieldPath.keyField().canonicalString());\n    return FieldPath;\n}());\nexport { FieldPath };\n/**\n * Matches any characters in a field path string that are reserved.\n */\nvar RESERVED = new RegExp('[~\\\\*/\\\\[\\\\]]');\n/**\n * Parses a field path string into a FieldPath, treating dots as separators.\n */\nexport function fromDotSeparatedString(path) {\n    var found = path.search(RESERVED);\n    if (found >= 0) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not contain \" +\n            \"'~', '*', '/', '[', or ']'\");\n    }\n    try {\n        return new (FieldPath.bind.apply(FieldPath, [void 0].concat(path.split('.'))))();\n    }\n    catch (e) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not be empty, \" +\n            \"begin with '.', end with '.', or contain '..'\");\n    }\n}\n\n//# sourceMappingURL=field_path.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/field_path.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentKeySet } from '../model/collections';\nimport { Document } from '../model/document';\nimport { DocumentSet } from '../model/document_set';\nimport { CurrentStatusUpdate, ResetMapping, UpdateMapping } from '../remote/remote_event';\nimport { assert, fail } from '../util/assert';\nimport { ChangeType, DocumentChangeSet, SyncState } from './view_snapshot';\nvar AddedLimboDocument = /** @class */ (function () {\n    function AddedLimboDocument(key) {\n        this.key = key;\n    }\n    return AddedLimboDocument;\n}());\nexport { AddedLimboDocument };\nvar RemovedLimboDocument = /** @class */ (function () {\n    function RemovedLimboDocument(key) {\n        this.key = key;\n    }\n    return RemovedLimboDocument;\n}());\nexport { RemovedLimboDocument };\n/**\n * View is responsible for computing the final merged truth of what docs are in\n * a query. It gets notified of local and remote changes to docs, and applies\n * the query filters and limits to determine the most correct possible results.\n */\nvar View = /** @class */ (function () {\n    function View(query, \n        /** Documents included in the remote target */\n        syncedDocuments) {\n        this.query = query;\n        this.syncedDocuments = syncedDocuments;\n        this.syncState = null;\n        /**\n         * A flag whether the view is current with the backend. A view is considered\n         * current after it has seen the current flag from the backend and did not\n         * lose consistency within the watch stream (e.g. because of an existence\n         * filter mismatch).\n         */\n        this.current = false;\n        /** Documents in the view but not in the remote target */\n        this.limboDocuments = documentKeySet();\n        /** Document Keys that have local changes */\n        this.mutatedKeys = documentKeySet();\n        this.documentSet = new DocumentSet(query.docComparator.bind(query));\n    }\n    /**\n     * Iterates over a set of doc changes, applies the query limit, and computes\n     * what the new results should be, what the changes were, and whether we may\n     * need to go back to the local cache for more results. Does not make any\n     * changes to the view.\n     * @param docChanges The doc changes to apply to this view.\n     * @param previousChanges If this is being called with a refill, then start\n     *        with this set of docs and changes instead of the current view.\n     * @return a new set of docs, changes, and refill flag.\n     */\n    View.prototype.computeDocChanges = function (docChanges, previousChanges) {\n        var _this = this;\n        var changeSet = previousChanges\n            ? previousChanges.changeSet\n            : new DocumentChangeSet();\n        var oldDocumentSet = previousChanges\n            ? previousChanges.documentSet\n            : this.documentSet;\n        var newMutatedKeys = previousChanges\n            ? previousChanges.mutatedKeys\n            : this.mutatedKeys;\n        var newDocumentSet = oldDocumentSet;\n        var needsRefill = false;\n        // Track the last doc in a (full) limit. This is necessary, because some\n        // update (a delete, or an update moving a doc past the old limit) might\n        // mean there is some other document in the local cache that either should\n        // come (1) between the old last limit doc and the new last document, in the\n        // case of updates, or (2) after the new last document, in the case of\n        // deletes. So we keep this doc at the old limit to compare the updates to.\n        //\n        // Note that this should never get used in a refill (when previousChanges is\n        // set), because there will only be adds -- no deletes or updates.\n        var lastDocInLimit = this.query.hasLimit() && oldDocumentSet.size === this.query.limit\n            ? oldDocumentSet.last()\n            : null;\n        docChanges.inorderTraversal(function (key, newMaybeDoc) {\n            var oldDoc = oldDocumentSet.get(key);\n            var newDoc = newMaybeDoc instanceof Document ? newMaybeDoc : null;\n            if (newDoc) {\n                assert(key.equals(newDoc.key), 'Mismatching keys found in document changes: ' +\n                    key +\n                    ' != ' +\n                    newDoc.key);\n                newDoc = _this.query.matches(newDoc) ? newDoc : null;\n            }\n            if (newDoc) {\n                newDocumentSet = newDocumentSet.add(newDoc);\n                if (newDoc.hasLocalMutations) {\n                    newMutatedKeys = newMutatedKeys.add(key);\n                }\n                else {\n                    newMutatedKeys = newMutatedKeys.delete(key);\n                }\n            }\n            else {\n                newDocumentSet = newDocumentSet.delete(key);\n                newMutatedKeys = newMutatedKeys.delete(key);\n            }\n            // Calculate change\n            if (oldDoc && newDoc) {\n                var docsEqual = oldDoc.data.equals(newDoc.data);\n                if (!docsEqual ||\n                    oldDoc.hasLocalMutations !== newDoc.hasLocalMutations) {\n                    // only report a change if document actually changed\n                    if (docsEqual) {\n                        changeSet.track({ type: ChangeType.Metadata, doc: newDoc });\n                    }\n                    else {\n                        changeSet.track({ type: ChangeType.Modified, doc: newDoc });\n                    }\n                    if (lastDocInLimit &&\n                        _this.query.docComparator(newDoc, lastDocInLimit) > 0) {\n                        // This doc moved from inside the limit to after the limit.\n                        // That means there may be some doc in the local cache that's\n                        // actually less than this one.\n                        needsRefill = true;\n                    }\n                }\n            }\n            else if (!oldDoc && newDoc) {\n                changeSet.track({ type: ChangeType.Added, doc: newDoc });\n            }\n            else if (oldDoc && !newDoc) {\n                changeSet.track({ type: ChangeType.Removed, doc: oldDoc });\n                if (lastDocInLimit) {\n                    // A doc was removed from a full limit query. We'll need to\n                    // requery from the local cache to see if we know about some other\n                    // doc that should be in the results.\n                    needsRefill = true;\n                }\n            }\n        });\n        if (this.query.hasLimit()) {\n            // TODO(klimt): Make DocumentSet size be constant time.\n            while (newDocumentSet.size > this.query.limit) {\n                var oldDoc = newDocumentSet.last();\n                newDocumentSet = newDocumentSet.delete(oldDoc.key);\n                changeSet.track({ type: ChangeType.Removed, doc: oldDoc });\n            }\n        }\n        assert(!needsRefill || !previousChanges, 'View was refilled using docs that themselves needed refilling.');\n        return {\n            documentSet: newDocumentSet,\n            changeSet: changeSet,\n            needsRefill: needsRefill,\n            mutatedKeys: newMutatedKeys\n        };\n    };\n    /**\n     * Updates the view with the given ViewDocumentChanges and updates limbo docs\n     * and sync state from the given (optional) target change.\n     * @param docChanges The set of changes to make to the view's docs.\n     * @param targetChange A target change to apply for computing limbo docs and\n     *        sync state.\n     * @return A new ViewChange with the given docs, changes, and sync state.\n     */\n    View.prototype.applyChanges = function (docChanges, targetChange) {\n        var _this = this;\n        assert(!docChanges.needsRefill, 'Cannot apply changes that need a refill');\n        var oldDocs = this.documentSet;\n        this.documentSet = docChanges.documentSet;\n        this.mutatedKeys = docChanges.mutatedKeys;\n        // Sort changes based on type and query comparator\n        var changes = docChanges.changeSet.getChanges();\n        changes.sort(function (c1, c2) {\n            return (compareChangeType(c1.type, c2.type) ||\n                _this.query.docComparator(c1.doc, c2.doc));\n        });\n        var limboChanges = this.applyTargetChange(targetChange);\n        var synced = this.limboDocuments.size === 0 && this.current;\n        var newSyncState = synced ? SyncState.Synced : SyncState.Local;\n        var syncStateChanged = newSyncState !== this.syncState;\n        this.syncState = newSyncState;\n        if (changes.length === 0 && !syncStateChanged) {\n            // no changes\n            return { limboChanges: limboChanges };\n        }\n        else {\n            return {\n                snapshot: {\n                    query: this.query,\n                    docs: docChanges.documentSet,\n                    oldDocs: oldDocs,\n                    docChanges: changes,\n                    fromCache: newSyncState === SyncState.Local,\n                    syncStateChanged: syncStateChanged,\n                    hasPendingWrites: !docChanges.mutatedKeys.isEmpty()\n                },\n                limboChanges: limboChanges\n            };\n        }\n    };\n    /**\n     * Returns whether the doc for the given key should be in limbo.\n     */\n    View.prototype.shouldBeInLimbo = function (key) {\n        // If the remote end says it's part of this query, it's not in limbo.\n        if (this.syncedDocuments.has(key)) {\n            return false;\n        }\n        // The local store doesn't think it's a result, so it shouldn't be in limbo.\n        if (!this.documentSet.has(key)) {\n            return false;\n        }\n        // If there are local changes to the doc, they might explain why the server\n        // doesn't know that it's part of the query. So don't put it in limbo.\n        // TODO(klimt): Ideally, we would only consider changes that might actually\n        // affect this specific query.\n        if (this.documentSet.get(key).hasLocalMutations) {\n            return false;\n        }\n        // Everything else is in limbo.\n        return true;\n    };\n    /**\n     * Updates syncedDocuments, current, and limbo docs based on the given change.\n     * Returns the list of changes to which docs are in limbo.\n     */\n    View.prototype.applyTargetChange = function (targetChange) {\n        var _this = this;\n        if (targetChange) {\n            var targetMapping = targetChange.mapping;\n            if (targetMapping instanceof ResetMapping) {\n                this.syncedDocuments = targetMapping.documents;\n            }\n            else if (targetMapping instanceof UpdateMapping) {\n                this.syncedDocuments = targetMapping.applyToKeySet(this.syncedDocuments);\n            }\n            switch (targetChange.currentStatusUpdate) {\n                case CurrentStatusUpdate.MarkCurrent:\n                    this.current = true;\n                    break;\n                case CurrentStatusUpdate.MarkNotCurrent:\n                    this.current = false;\n                    break;\n                case CurrentStatusUpdate.None:\n                    break;\n                default:\n                    fail('Unknown current status update: ' + targetChange.currentStatusUpdate);\n            }\n        }\n        // Recompute the set of limbo docs.\n        // TODO(klimt): Do this incrementally so that it's not quadratic when\n        // updating many documents.\n        var oldLimboDocuments = this.limboDocuments;\n        this.limboDocuments = documentKeySet();\n        if (this.current) {\n            this.documentSet.forEach(function (doc) {\n                if (_this.shouldBeInLimbo(doc.key)) {\n                    _this.limboDocuments = _this.limboDocuments.add(doc.key);\n                }\n            });\n        }\n        // Diff the new limbo docs with the old limbo docs.\n        var changes = [];\n        oldLimboDocuments.forEach(function (key) {\n            if (!_this.limboDocuments.has(key)) {\n                changes.push(new RemovedLimboDocument(key));\n            }\n        });\n        this.limboDocuments.forEach(function (key) {\n            if (!oldLimboDocuments.has(key)) {\n                changes.push(new AddedLimboDocument(key));\n            }\n        });\n        return changes;\n    };\n    return View;\n}());\nexport { View };\nfunction compareChangeType(c1, c2) {\n    var order = function (change) {\n        switch (change) {\n            case ChangeType.Added:\n                return 1;\n            case ChangeType.Modified:\n                return 2;\n            case ChangeType.Metadata:\n                // A metadata change is converted to a modified change at the public\n                // api layer.  Since we sort by document key and then change type,\n                // metadata and modified changes must be sorted equivalently.\n                return 2;\n            case ChangeType.Removed:\n                return 0;\n            default:\n                return fail('Unknown ChangeType: ' + change);\n        }\n    };\n    return order(c1) - order(c2);\n}\n\n//# sourceMappingURL=view.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/view.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ResourcePath } from '../model/path';\nimport { assert, fail } from '../util/assert';\nvar escapeChar = '\\u0001';\nvar encodedSeparatorChar = '\\u0001';\nvar encodedNul = '\\u0010';\nvar encodedEscape = '\\u0011';\n/**\n * Encodes a resource path into a IndexedDb-compatible string form.\n */\nexport function encode(path) {\n    var result = '';\n    for (var i = 0; i < path.length; i++) {\n        if (result.length > 0) {\n            result = encodeSeparator(result);\n        }\n        result = encodeSegment(path.get(i), result);\n    }\n    return encodeSeparator(result);\n}\n/** Encodes a single segment of a resource path into the given result */\nfunction encodeSegment(segment, resultBuf) {\n    var result = resultBuf;\n    var length = segment.length;\n    for (var i = 0; i < length; i++) {\n        var c = segment.charAt(i);\n        switch (c) {\n            case '\\0':\n                result += escapeChar + encodedNul;\n                break;\n            case escapeChar:\n                result += escapeChar + encodedEscape;\n                break;\n            default:\n                result += c;\n        }\n    }\n    return result;\n}\n/** Encodes a path separator into the given result */\nfunction encodeSeparator(result) {\n    return result + escapeChar + encodedSeparatorChar;\n}\n/**\n * Decodes the given IndexedDb-compatible string form of a resource path into\n * a ResourcePath instance. Note that this method is not suitable for use with\n * decoding resource names from the server; those are One Platform format\n * strings.\n */\nexport function decode(path) {\n    // Event the empty path must encode as a path of at least length 2. A path\n    // with exactly 2 must be the empty path.\n    var length = path.length;\n    assert(length >= 2, 'Invalid path ' + path);\n    if (length === 2) {\n        assert(path.charAt(0) === escapeChar && path.charAt(1) === encodedSeparatorChar, 'Non-empty path ' + path + ' had length 2');\n        return ResourcePath.EMPTY_PATH;\n    }\n    // Escape characters cannot exist past the second-to-last position in the\n    // source value.\n    var lastReasonableEscapeIndex = length - 2;\n    var segments = [];\n    var segmentBuilder = '';\n    for (var start = 0; start < length;) {\n        // The last two characters of a valid encoded path must be a separator, so\n        // there must be an end to this segment.\n        var end = path.indexOf(escapeChar, start);\n        if (end < 0 || end > lastReasonableEscapeIndex) {\n            fail('Invalid encoded resource path: \"' + path + '\"');\n        }\n        var next = path.charAt(end + 1);\n        switch (next) {\n            case encodedSeparatorChar:\n                var currentPiece = path.substring(start, end);\n                var segment = void 0;\n                if (segmentBuilder.length === 0) {\n                    // Avoid copying for the common case of a segment that excludes \\0\n                    // and \\001\n                    segment = currentPiece;\n                }\n                else {\n                    segmentBuilder += currentPiece;\n                    segment = segmentBuilder;\n                    segmentBuilder = '';\n                }\n                segments.push(segment);\n                break;\n            case encodedNul:\n                segmentBuilder += path.substring(start, end);\n                segmentBuilder += '\\0';\n                break;\n            case encodedEscape:\n                // The escape character can be used in the output to encode itself.\n                segmentBuilder += path.substring(start, end + 1);\n                break;\n            default:\n                fail('Invalid encoded resource path: \"' + path + '\"');\n        }\n        start = end + 2;\n    }\n    return new ResourcePath(segments);\n}\n/**\n * Computes the prefix successor of the given path, computed by encode above.\n * A prefix successor is the first key that cannot be prefixed by the given\n * path. It's useful for defining the end of a prefix scan such that all keys\n * in the scan have the same prefix.\n *\n * Note that this is not a general prefix successor implementation, which is\n * tricky to get right with Strings, given that they encode down to UTF-8.\n * Instead this relies on the fact that all paths encoded by this class are\n * always terminated with a separator, and so a successor can always be\n * cheaply computed by incrementing the last character of the path.\n */\nexport function prefixSuccessor(path) {\n    var c = path.charCodeAt(path.length - 1);\n    // TODO(mcg): this really should be a general thing, but not worth it right\n    // now\n    assert(c === 1, 'successor may only operate on paths generated by encode');\n    return path.substring(0, path.length - 1) + String.fromCharCode(c + 1);\n}\n\n//# sourceMappingURL=encoded_resource_path.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/encoded_resource_path.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { encode } from './encoded_resource_path';\nexport var SCHEMA_VERSION = 1;\n/** Performs database creation and (in the future) upgrades between versions. */\nexport function createOrUpgradeDb(db, oldVersion) {\n    assert(oldVersion === 0, 'Unexpected upgrade from version ' + oldVersion);\n    db.createObjectStore(DbMutationQueue.store, {\n        keyPath: DbMutationQueue.keyPath\n    });\n    // TODO(mikelehen): Get rid of \"as any\" if/when TypeScript fixes their\n    // types. https://github.com/Microsoft/TypeScript/issues/14322\n    db.createObjectStore(\n    // tslint:disable-next-line:no-any\n    DbMutationBatch.store, { keyPath: DbMutationBatch.keyPath });\n    var targetDocumentsStore = db.createObjectStore(\n    // tslint:disable-next-line:no-any\n    DbTargetDocument.store, { keyPath: DbTargetDocument.keyPath });\n    targetDocumentsStore.createIndex(DbTargetDocument.documentTargetsIndex, DbTargetDocument.documentTargetsKeyPath, { unique: true });\n    var targetStore = db.createObjectStore(DbTarget.store, {\n        keyPath: DbTarget.keyPath\n    });\n    // NOTE: This is unique only because the TargetId is the suffix.\n    targetStore.createIndex(DbTarget.queryTargetsIndexName, DbTarget.queryTargetsKeyPath, { unique: true });\n    // NOTE: keys for these stores are specified explicitly rather than using a\n    // keyPath.\n    db.createObjectStore(DbDocumentMutation.store);\n    db.createObjectStore(DbRemoteDocument.store);\n    db.createObjectStore(DbOwner.store);\n    db.createObjectStore(DbTargetGlobal.store);\n}\n/**\n * Wrapper class to store timestamps (seconds and nanos) in IndexedDb objects.\n */\nvar DbTimestamp = /** @class */ (function () {\n    function DbTimestamp(seconds, nanos) {\n        this.seconds = seconds;\n        this.nanos = nanos;\n    }\n    return DbTimestamp;\n}());\nexport { DbTimestamp };\n/**\n * A singleton object to be stored in the 'owner' store in IndexedDb.\n *\n * A given database can be owned by a single tab at a given time. That tab\n * must validate that it is still the owner before every write operation and\n * should regularly write an updated timestamp to prevent other tabs from\n * \"stealing\" ownership of the db.\n */\nvar DbOwner = /** @class */ (function () {\n    function DbOwner(ownerId, leaseTimestampMs) {\n        this.ownerId = ownerId;\n        this.leaseTimestampMs = leaseTimestampMs;\n    }\n    /** Name of the IndexedDb object store. */\n    DbOwner.store = 'owner';\n    return DbOwner;\n}());\nexport { DbOwner };\n/**\n * An object to be stored in the 'mutationQueues' store in IndexedDb.\n *\n * Each user gets a single queue of MutationBatches to apply to the server.\n * DbMutationQueue tracks the metadata about the queue.\n */\nvar DbMutationQueue = /** @class */ (function () {\n    function DbMutationQueue(\n        /**\n           * The normalized user ID to which this queue belongs.\n           */\n        userId, \n        /**\n           * An identifier for the highest numbered batch that has been acknowledged\n           * by the server. All MutationBatches in this queue with batchIds less\n           * than or equal to this value are considered to have been acknowledged by\n           * the server.\n           */\n        lastAcknowledgedBatchId, \n        /**\n           * A stream token that was previously sent by the server.\n           *\n           * See StreamingWriteRequest in datastore.proto for more details about\n           * usage.\n           *\n           * After sending this token, earlier tokens may not be used anymore so\n           * only a single stream token is retained.\n           */\n        lastStreamToken) {\n        this.userId = userId;\n        this.lastAcknowledgedBatchId = lastAcknowledgedBatchId;\n        this.lastStreamToken = lastStreamToken;\n    }\n    /** Name of the IndexedDb object store.  */\n    DbMutationQueue.store = 'mutationQueues';\n    /** Keys are automatically assigned via the userId property. */\n    DbMutationQueue.keyPath = 'userId';\n    return DbMutationQueue;\n}());\nexport { DbMutationQueue };\n/**\n * An object to be stored in the 'mutations' store in IndexedDb.\n *\n * Represents a batch of user-level mutations intended to be sent to the server\n * in a single write. Each user-level batch gets a separate DbMutationBatch\n * with a new batchId.\n */\nvar DbMutationBatch = /** @class */ (function () {\n    function DbMutationBatch(\n        /**\n           * The normalized user ID to which this batch belongs.\n           */\n        userId, \n        /**\n           * An identifier for this batch, allocated by the mutation queue in a\n           * monotonically increasing manner.\n           */\n        batchId, \n        /**\n           * The local write time of the batch, stored as milliseconds since the\n           * epoch.\n           */\n        localWriteTimeMs, \n        /**\n           * A list of mutations to apply. All mutations will be applied atomically.\n           *\n           * Mutations are serialized via JsonProtoSerializer.toMutation().\n           */\n        mutations) {\n        this.userId = userId;\n        this.batchId = batchId;\n        this.localWriteTimeMs = localWriteTimeMs;\n        this.mutations = mutations;\n    }\n    /** Name of the IndexedDb object store.  */\n    DbMutationBatch.store = 'mutations';\n    /** Keys are automatically assigned via the userId, batchId properties. */\n    DbMutationBatch.keyPath = ['userId', 'batchId'];\n    return DbMutationBatch;\n}());\nexport { DbMutationBatch };\n/**\n * An object to be stored in the 'documentMutations' store in IndexedDb.\n *\n * A manually maintained index of all the mutation batches that affect a given\n * document key. The rows in this table are references based on the contents of\n * DbMutationBatch.mutations.\n */\nvar DbDocumentMutation = /** @class */ (function () {\n    function DbDocumentMutation() {\n    }\n    /**\n     * Creates a [userId] key for use in the DbDocumentMutations index to iterate\n     * over all of a user's document mutations.\n     */\n    DbDocumentMutation.prefixForUser = function (userId) {\n        return [userId];\n    };\n    /**\n     * Creates a [userId, encodedPath] key for use in the DbDocumentMutations\n     * index to iterate over all at document mutations for a given path or lower.\n     */\n    DbDocumentMutation.prefixForPath = function (userId, path) {\n        return [userId, encode(path)];\n    };\n    /**\n     * Creates a full index key of [userId, encodedPath, batchId] for inserting\n     * and deleting into the DbDocumentMutations index.\n     */\n    DbDocumentMutation.key = function (userId, path, batchId) {\n        return [userId, encode(path), batchId];\n    };\n    DbDocumentMutation.store = 'documentMutations';\n    /**\n     * Because we store all the useful information for this store in the key,\n     * there is no useful information to store as the value. The raw (unencoded)\n     * path cannot be stored because IndexedDb doesn't store prototype\n     * information.\n     */\n    DbDocumentMutation.PLACEHOLDER = new DbDocumentMutation();\n    return DbDocumentMutation;\n}());\nexport { DbDocumentMutation };\n/**\n * Represents the known absence of a document at a particular version.\n * Stored in IndexedDb as part of a DbRemoteDocument object.\n */\nvar DbNoDocument = /** @class */ (function () {\n    function DbNoDocument(path, readTime) {\n        this.path = path;\n        this.readTime = readTime;\n    }\n    return DbNoDocument;\n}());\nexport { DbNoDocument };\n/**\n * An object to be stored in the 'remoteDocuments' store in IndexedDb. It\n * represents either a cached document (if it exists) or a cached \"no-document\"\n * (if it is known to not exist).\n *\n * Note: This is the persisted equivalent of a MaybeDocument and could perhaps\n * be made more general if necessary.\n */\nvar DbRemoteDocument = /** @class */ (function () {\n    function DbRemoteDocument(\n        /**\n           * Set to an instance of a DbNoDocument if it is known that no document\n           * exists.\n           */\n        noDocument, \n        /**\n           * Set to an instance of a Document if there's a cached version of the\n           * document.\n           */\n        document) {\n        this.noDocument = noDocument;\n        this.document = document;\n    }\n    DbRemoteDocument.store = 'remoteDocuments';\n    return DbRemoteDocument;\n}());\nexport { DbRemoteDocument };\n/**\n * An object to be stored in the 'targets' store in IndexedDb.\n *\n * This is based on and should be kept in sync with the proto used in the iOS\n * client.\n *\n * Each query the client listens to against the server is tracked on disk so\n * that the query can be efficiently resumed on restart.\n */\nvar DbTarget = /** @class */ (function () {\n    function DbTarget(\n        /**\n           * An auto-generated sequential numeric identifier for the query.\n           *\n           * Queries are stored using their canonicalId as the key, but these\n           * canonicalIds can be quite long so we additionally assign a unique\n           * queryId which can be used by referenced data structures (e.g.\n           * indexes) to minimize the on-disk cost.\n           */\n        targetId, \n        /**\n           * The canonical string representing this query. This is not unique.\n           */\n        canonicalId, \n        /**\n           * The last readTime received from the Watch Service for this query.\n           *\n           * This is the same value as TargetChange.read_time in the protos.\n           */\n        readTime, \n        /**\n           * An opaque, server-assigned token that allows watching a query to be\n           * resumed after disconnecting without retransmitting all the data\n           * that matches the query. The resume token essentially identifies a\n           * point in time from which the server should resume sending results.\n           *\n           * This is related to the snapshotVersion in that the resumeToken\n           * effectively also encodes that value, but the resumeToken is opaque\n           * and sometimes encodes additional information.\n           *\n           * A consequence of this is that the resumeToken should be used when\n           * asking the server to reason about where this client is in the watch\n           * stream, but the client should use the snapshotVersion for its own\n           * purposes.\n           *\n           * This is the same value as TargetChange.resume_token in the protos.\n           */\n        resumeToken, \n        /**\n           * A sequence number representing the last time this query was\n           * listened to, used for garbage collection purposes.\n           *\n           * Conventionally this would be a timestamp value, but device-local\n           * clocks are unreliable and they must be able to create new listens\n           * even while disconnected. Instead this should be a monotonically\n           * increasing number that's incremented on each listen call.\n           *\n           * This is different from the queryId since the queryId is an\n           * immutable identifier assigned to the Query on first use while\n           * lastListenSequenceNumber is updated every time the query is\n           * listened to.\n           */\n        lastListenSequenceNumber, \n        /**\n           * The query for this target.\n           *\n           * Because canonical ids are not unique we must store the actual query. We\n           * use the proto to have an object we can persist without having to\n           * duplicate translation logic to and from a `Query` object.\n           */\n        query) {\n        this.targetId = targetId;\n        this.canonicalId = canonicalId;\n        this.readTime = readTime;\n        this.resumeToken = resumeToken;\n        this.lastListenSequenceNumber = lastListenSequenceNumber;\n        this.query = query;\n    }\n    DbTarget.store = 'targets';\n    /** Keys are automatically assigned via the targetId property. */\n    DbTarget.keyPath = 'targetId';\n    /** The name of the queryTargets index. */\n    DbTarget.queryTargetsIndexName = 'queryTargetsIndex';\n    /**\n     * The index of all canonicalIds to the targets that they match. This is not\n     * a unique mapping because canonicalId does not promise a unique name for all\n     * possible queries, so we append the targetId to make the mapping unique.\n     */\n    DbTarget.queryTargetsKeyPath = ['canonicalId', 'targetId'];\n    return DbTarget;\n}());\nexport { DbTarget };\n/**\n * An object representing an association between a target and a document.\n * Stored in the targetDocument object store to store the documents tracked by a\n * particular target.\n */\nvar DbTargetDocument = /** @class */ (function () {\n    function DbTargetDocument(\n        /**\n           * The targetId identifying a target.\n           */\n        targetId, \n        /**\n           * The path to the document, as encoded in the key.\n           */\n        path) {\n        this.targetId = targetId;\n        this.path = path;\n    }\n    /** Name of the IndexedDb object store.  */\n    DbTargetDocument.store = 'targetDocuments';\n    /** Keys are automatically assigned via the targetId, path properties. */\n    DbTargetDocument.keyPath = ['targetId', 'path'];\n    /** The index name for the reverse index. */\n    DbTargetDocument.documentTargetsIndex = 'documentTargetsIndex';\n    /** We also need to create the reverse index for these properties. */\n    DbTargetDocument.documentTargetsKeyPath = ['path', 'targetId'];\n    return DbTargetDocument;\n}());\nexport { DbTargetDocument };\n/**\n * A record of global state tracked across all Targets, tracked separately\n * to avoid the need for extra indexes.\n *\n * This should be kept in-sync with the proto used in the iOS client.\n */\nvar DbTargetGlobal = /** @class */ (function () {\n    function DbTargetGlobal(\n        /**\n           * The highest numbered target id across all targets.\n           *\n           * See DbTarget.targetId.\n           */\n        highestTargetId, \n        /**\n           * The highest numbered lastListenSequenceNumber across all targets.\n           *\n           * See DbTarget.lastListenSequenceNumber.\n           */\n        highestListenSequenceNumber, \n        /**\n           * A global snapshot version representing the last consistent snapshot we\n           * received from the backend. This is monotonically increasing and any\n           * snapshots received from the backend prior to this version (e.g. for\n           * targets resumed with a resumeToken) should be suppressed (buffered)\n           * until the backend has caught up to this snapshot version again. This\n           * prevents our cache from ever going backwards in time.\n           */\n        lastRemoteSnapshotVersion) {\n        this.highestTargetId = highestTargetId;\n        this.highestListenSequenceNumber = highestListenSequenceNumber;\n        this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;\n    }\n    /**\n     * The key string used for the single object that exists in the\n     * DbTargetGlobal store.\n     */\n    DbTargetGlobal.key = 'targetGlobalKey';\n    DbTargetGlobal.store = 'targetGlobal';\n    return DbTargetGlobal;\n}());\nexport { DbTargetGlobal };\n/**\n * The list of all IndexedDB stored used by the SDK. This is used when creating\n * transactions so that access across all stores is done atomically.\n */\nexport var ALL_STORES = [\n    DbMutationQueue.store,\n    DbMutationBatch.store,\n    DbDocumentMutation.store,\n    DbRemoteDocument.store,\n    DbTarget.store,\n    DbOwner.store,\n    DbTargetGlobal.store,\n    DbTargetDocument.store\n];\n\n//# sourceMappingURL=indexeddb_schema.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/indexeddb_schema.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { debug } from '../util/log';\nimport { PersistencePromise } from './persistence_promise';\nvar LOG_TAG = 'SimpleDb';\n/**\n * Provides a wrapper around IndexedDb with a simplified interface that uses\n * Promise-like return values to chain operations. Real promises cannot be used\n * since .then() continuations are executed asynchronously (e.g. via\n * .setImmediate), which would cause IndexedDB to end the transaction.\n * See PersistencePromise for more details.\n */\nvar SimpleDb = /** @class */ (function () {\n    function SimpleDb(db) {\n        this.db = db;\n    }\n    /** Opens the specified database, creating or upgrading it if necessary. */\n    SimpleDb.openOrCreate = function (name, version, runUpgrade) {\n        assert(SimpleDb.isAvailable(), 'IndexedDB not supported in current environment.');\n        debug(LOG_TAG, 'Opening database:', name);\n        return new PersistencePromise(function (resolve, reject) {\n            // TODO(mikelehen): Investigate browser compatibility.\n            // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB\n            // suggests IE9 and older WebKit browsers handle upgrade\n            // differently.\n            var request = window.indexedDB.open(name, version);\n            request.onsuccess = function (event) {\n                var db = event.target.result;\n                resolve(new SimpleDb(db));\n            };\n            request.onerror = function (event) {\n                reject(event.target.error);\n            };\n            request.onupgradeneeded = function (event) {\n                debug(LOG_TAG, 'Database \"' + name + '\" requires upgrade from version:', event.oldVersion);\n                // TODO(mikelehen): If/when we need to do an actual data\n                // migration, we'll want to wrap db in a SimpleDb and have the\n                // runUpgrade function return a PersistencePromise, since we'll\n                // likely need to do async reads and writes. For now we're\n                // cheating and just passing the raw IndexedDB in, since\n                // createObjectStore(), etc. are synchronous.\n                var db = event.target.result;\n                runUpgrade(db, event.oldVersion);\n            };\n        }).toPromise();\n    };\n    /** Deletes the specified database. */\n    SimpleDb.delete = function (name) {\n        debug(LOG_TAG, 'Removing database:', name);\n        return wrapRequest(window.indexedDB.deleteDatabase(name)).toPromise();\n    };\n    /** Returns true if IndexedDB is available in the current environment. */\n    SimpleDb.isAvailable = function () {\n        if (typeof window === 'undefined' || window.indexedDB == null) {\n            return false;\n        }\n        // We extensively use indexed array values and compound keys,\n        // which IE and Edge do not support. However, they still have indexedDB\n        // defined on the window, so we need to check for them here and make sure\n        // to return that persistence is not enabled for those browsers.\n        // For tracking support of this feature, see here:\n        // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/\n        // Check the UA string to find out the browser.\n        var ua = window.navigator.userAgent;\n        // IE 10\n        // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n        // IE 11\n        // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n        // Edge\n        // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,\n        // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n        if (ua.indexOf('MSIE ') > 0 ||\n            ua.indexOf('Trident/') > 0 ||\n            ua.indexOf('Edge/') > 0) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    };\n    SimpleDb.prototype.runTransaction = function (mode, objectStores, transactionFn) {\n        var transaction = new SimpleDbTransaction(this.db, mode, objectStores);\n        var transactionFnResult = transactionFn(transaction)\n            .catch(function (error) {\n            // Abort the transaction if there was an\n            // error.\n            transaction.abort();\n            return PersistencePromise.reject(error);\n        })\n            .toPromise();\n        // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to\n        // fire), but still return the original transactionFnResult back to the\n        // caller.\n        return transaction.completionPromise.then(function () { return transactionFnResult; });\n    };\n    SimpleDb.prototype.close = function () {\n        this.db.close();\n    };\n    return SimpleDb;\n}());\nexport { SimpleDb };\n/**\n * A controller for iterating over a key range or index. It allows an iterate\n * callback to delete the currently-referenced object, or jump to a new key\n * within the key range or index.\n */\nvar IterationController = /** @class */ (function () {\n    function IterationController(dbCursor) {\n        this.dbCursor = dbCursor;\n        this.shouldStop = false;\n        this.nextKey = null;\n    }\n    Object.defineProperty(IterationController.prototype, \"isDone\", {\n        get: function () {\n            return this.shouldStop;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IterationController.prototype, \"skipToKey\", {\n        get: function () {\n            return this.nextKey;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IterationController.prototype, \"cursor\", {\n        set: function (value) {\n            this.dbCursor = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This function can be called to stop iteration at any point.\n     */\n    IterationController.prototype.done = function () {\n        this.shouldStop = true;\n    };\n    /**\n     * This function can be called to skip to that next key, which could be\n     * an index or a primary key.\n     */\n    IterationController.prototype.skip = function (key) {\n        this.nextKey = key;\n    };\n    /**\n     * Delete the current cursor value from the object store.\n     *\n     * NOTE: You CANNOT do this with a keysOnly query.\n     */\n    IterationController.prototype.delete = function () {\n        return wrapRequest(this.dbCursor.delete());\n    };\n    return IterationController;\n}());\nexport { IterationController };\n/**\n * Wraps an IDBTransaction and exposes a store() method to get a handle to a\n * specific object store.\n */\nvar SimpleDbTransaction = /** @class */ (function () {\n    function SimpleDbTransaction(db, mode, objectStoresNames) {\n        var _this = this;\n        this.aborted = false;\n        this.transaction = db.transaction(objectStoresNames, mode);\n        this.completionPromise = new Promise(function (resolve, reject) {\n            // We consider aborting to be \"normal\" and just resolve the promise.\n            // May need to revisit if/when we actually need to abort transactions.\n            _this.transaction.onabort = _this.transaction.oncomplete = function (event) {\n                resolve();\n            };\n            _this.transaction.onerror = function (event) {\n                reject(event.target.error);\n            };\n        });\n    }\n    SimpleDbTransaction.prototype.abort = function () {\n        if (!this.aborted) {\n            debug(LOG_TAG, 'Aborting transaction.');\n            this.aborted = true;\n            this.transaction.abort();\n        }\n    };\n    /**\n     * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All\n     * operations performed on the SimpleDbStore happen within the context of this\n     * transaction and it cannot be used anymore once the transaction is\n     * completed.\n     *\n     * Note that we can't actually enforce that the KeyType and ValueType are\n     * correct, but they allow type safety through the rest of the consuming code.\n     */\n    SimpleDbTransaction.prototype.store = function (storeName) {\n        var store = this.transaction.objectStore(storeName);\n        assert(!!store, 'Object store not part of transaction: ' + storeName);\n        return new SimpleDbStore(store);\n    };\n    return SimpleDbTransaction;\n}());\nexport { SimpleDbTransaction };\n/**\n * A wrapper around an IDBObjectStore providing an API that:\n *\n * 1) Has generic KeyType / ValueType parameters to provide strongly-typed\n * methods for acting against the object store.\n * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every\n * method return a PersistencePromise instead.\n * 3) Provides a higher-level API to avoid needing to do excessive wrapping of\n * intermediate IndexedDB types (IDBCursorWithValue, etc.)\n */\nvar SimpleDbStore = /** @class */ (function () {\n    function SimpleDbStore(store) {\n        this.store = store;\n    }\n    SimpleDbStore.prototype.put = function (keyOrValue, value) {\n        var request;\n        if (value !== undefined) {\n            debug(LOG_TAG, 'PUT', this.store.name, keyOrValue, value);\n            request = this.store.put(value, keyOrValue);\n        }\n        else {\n            debug(LOG_TAG, 'PUT', this.store.name, '<auto-key>', keyOrValue);\n            request = this.store.put(keyOrValue);\n        }\n        return wrapRequest(request);\n    };\n    /**\n     * Gets the object with the specified key from the specified store, or null\n     * if no object exists with the specified key.\n     *\n     * @key The key of the object to get.\n     * @return The object with the specified key or null if no object exists.\n     */\n    SimpleDbStore.prototype.get = function (key) {\n        var _this = this;\n        var request = this.store.get(key);\n        // tslint:disable-next-line:no-any We're doing an unsafe cast to ValueType.\n        return wrapRequest(request).next(function (result) {\n            // Normalize nonexistence to null.\n            if (result === undefined) {\n                result = null;\n            }\n            debug(LOG_TAG, 'GET', _this.store.name, key, result);\n            return result;\n        });\n    };\n    SimpleDbStore.prototype.delete = function (key) {\n        debug(LOG_TAG, 'DELETE', this.store.name, key);\n        var request = this.store.delete(key);\n        return wrapRequest(request);\n    };\n    SimpleDbStore.prototype.loadAll = function (indexOrRange, range) {\n        var cursor = this.cursor(this.options(indexOrRange, range));\n        var results = [];\n        return this.iterateCursor(cursor, function (key, value) {\n            results.push(value);\n        }).next(function () {\n            return results;\n        });\n    };\n    SimpleDbStore.prototype.deleteAll = function (indexOrRange, range) {\n        debug(LOG_TAG, 'DELETE ALL', this.store.name);\n        var options = this.options(indexOrRange, range);\n        options.keysOnly = false;\n        var cursor = this.cursor(options);\n        return this.iterateCursor(cursor, function (key, value, control) {\n            // NOTE: Calling delete() on a cursor is documented as more efficient than\n            // calling delete() on an object store with a single key\n            // (https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete),\n            // however, this requires us *not* to use a keysOnly cursor\n            // (https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/delete). We\n            // may want to compare the performance of each method.\n            return control.delete();\n        });\n    };\n    SimpleDbStore.prototype.iterate = function (optionsOrCallback, callback) {\n        var options;\n        if (!callback) {\n            options = {};\n            callback = optionsOrCallback;\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        var cursor = this.cursor(options);\n        return this.iterateCursor(cursor, callback);\n    };\n    SimpleDbStore.prototype.iterateCursor = function (cursorRequest, fn) {\n        var results = [];\n        return new PersistencePromise(function (resolve, reject) {\n            cursorRequest.onerror = function (event) {\n                reject(event.target.error);\n            };\n            cursorRequest.onsuccess = function (event) {\n                var cursor = event.target.result;\n                if (!cursor) {\n                    resolve();\n                    return;\n                }\n                var controller = new IterationController(cursor);\n                var userResult = fn(cursor.primaryKey, cursor.value, controller);\n                if (userResult instanceof PersistencePromise) {\n                    results.push(userResult);\n                }\n                if (controller.isDone) {\n                    resolve();\n                }\n                else if (controller.skipToKey === null) {\n                    cursor.continue();\n                }\n                else {\n                    cursor.continue(controller.skipToKey);\n                }\n            };\n        }).next(function () {\n            return PersistencePromise.waitFor(results);\n        });\n    };\n    SimpleDbStore.prototype.options = function (indexOrRange, range) {\n        var indexName = undefined;\n        if (indexOrRange !== undefined) {\n            if (typeof indexOrRange === 'string') {\n                indexName = indexOrRange;\n            }\n            else {\n                assert(range === undefined, '3rd argument must not be defined if 2nd is a range.');\n                range = indexOrRange;\n            }\n        }\n        return { index: indexName, range: range };\n    };\n    SimpleDbStore.prototype.cursor = function (options) {\n        var direction = 'next';\n        if (options.reverse) {\n            direction = 'prev';\n        }\n        if (options.index) {\n            var index = this.store.index(options.index);\n            if (options.keysOnly) {\n                return index.openKeyCursor(options.range, direction);\n            }\n            else {\n                return index.openCursor(options.range, direction);\n            }\n        }\n        else {\n            return this.store.openCursor(options.range, direction);\n        }\n    };\n    return SimpleDbStore;\n}());\nexport { SimpleDbStore };\n/**\n * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror\n * handlers to resolve / reject the PersistencePromise as appropriate.\n */\nfunction wrapRequest(request) {\n    return new PersistencePromise(function (resolve, reject) {\n        request.onsuccess = function (event) {\n            var result = event.target.result;\n            resolve(result);\n        };\n        request.onerror = function (event) {\n            reject(event.target.error);\n        };\n    });\n}\n\n//# sourceMappingURL=simple_db.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/simple_db.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { BATCHID_UNKNOWN, MutationBatch } from '../model/mutation_batch';\nimport { assert, fail } from '../util/assert';\nimport { immediatePredecessor, primitiveComparator } from '../util/misc';\nimport { SortedSet } from '../util/sorted_set';\nimport * as EncodedResourcePath from './encoded_resource_path';\nimport { DbDocumentMutation, DbMutationBatch, DbMutationQueue } from './indexeddb_schema';\nimport { PersistencePromise } from './persistence_promise';\nimport { SimpleDbTransaction } from './simple_db';\n/** A mutation queue for a specific user, backed by IndexedDB. */\nvar IndexedDbMutationQueue = /** @class */ (function () {\n    function IndexedDbMutationQueue(\n        /**\n           * The normalized userId (e.g. null UID => \"\" userId) used to store /\n           * retrieve mutations.\n           */\n        userId, serializer) {\n        this.userId = userId;\n        this.serializer = serializer;\n        this.garbageCollector = null;\n    }\n    /**\n     * Creates a new mutation queue for the given user.\n     * @param user The user for which to create a mutation queue.\n     * @param serializer The serializer to use when persisting to IndexedDb.\n     */\n    IndexedDbMutationQueue.forUser = function (user, serializer) {\n        // TODO(mcg): Figure out what constraints there are on userIDs\n        // In particular, are there any reserved characters? are empty ids allowed?\n        // For the moment store these together in the same mutations table assuming\n        // that empty userIDs aren't allowed.\n        assert(user.uid !== '', 'UserID must not be an empty string.');\n        var userId = user.isUnauthenticated() ? '' : user.uid;\n        return new IndexedDbMutationQueue(userId, serializer);\n    };\n    IndexedDbMutationQueue.prototype.start = function (transaction) {\n        var _this = this;\n        return IndexedDbMutationQueue.loadNextBatchIdFromDb(transaction)\n            .next(function (nextBatchId) {\n            _this.nextBatchId = nextBatchId;\n            return mutationQueuesStore(transaction).get(_this.userId);\n        })\n            .next(function (metadata) {\n            if (!metadata) {\n                metadata = new DbMutationQueue(_this.userId, BATCHID_UNKNOWN, \n                /*lastStreamToken=*/ '');\n            }\n            _this.metadata = metadata;\n            // On restart, nextBatchId may end up lower than\n            // lastAcknowledgedBatchId since it's computed from the queue\n            // contents, and there may be no mutations in the queue. In this\n            // case, we need to reset lastAcknowledgedBatchId (which is safe\n            // since the queue must be empty).\n            if (_this.metadata.lastAcknowledgedBatchId >= _this.nextBatchId) {\n                return _this.checkEmpty(transaction).next(function (empty) {\n                    assert(empty, 'Reset nextBatchID is only possible when the queue is empty');\n                    _this.metadata.lastAcknowledgedBatchId = BATCHID_UNKNOWN;\n                    return mutationQueuesStore(transaction).put(_this.metadata);\n                });\n            }\n            else {\n                return PersistencePromise.resolve();\n            }\n        });\n    };\n    /**\n     * Returns one larger than the largest batch ID that has been stored. If there\n     * are no mutations returns 0. Note that batch IDs are global.\n     */\n    IndexedDbMutationQueue.loadNextBatchIdFromDb = function (txn) {\n        var maxBatchId = BATCHID_UNKNOWN;\n        return mutationsStore(txn)\n            .iterate({ reverse: true }, function (key, batch, control) {\n            var userId = key[0], batchId = key[1];\n            if (batchId > maxBatchId) {\n                maxBatchId = batch.batchId;\n            }\n            if (userId === '') {\n                // We can't compute a predecessor for the empty string, since it\n                // is lexographically first. That also means that no other\n                // userIds can come before this one, so we can just exit early.\n                control.done();\n            }\n            else {\n                var nextUser = immediatePredecessor(userId);\n                control.skip([nextUser]);\n            }\n        })\n            .next(function () { return maxBatchId + 1; });\n    };\n    IndexedDbMutationQueue.prototype.checkEmpty = function (transaction) {\n        var empty = true;\n        var range = IDBKeyRange.bound(this.keyForBatchId(Number.NEGATIVE_INFINITY), this.keyForBatchId(Number.POSITIVE_INFINITY));\n        return mutationsStore(transaction)\n            .iterate({ range: range }, function (key, value, control) {\n            empty = false;\n            control.done();\n        })\n            .next(function () { return empty; });\n    };\n    IndexedDbMutationQueue.prototype.getNextBatchId = function (transaction) {\n        return PersistencePromise.resolve(this.nextBatchId);\n    };\n    IndexedDbMutationQueue.prototype.getHighestAcknowledgedBatchId = function (transaction) {\n        return PersistencePromise.resolve(this.metadata.lastAcknowledgedBatchId);\n    };\n    IndexedDbMutationQueue.prototype.acknowledgeBatch = function (transaction, batch, streamToken) {\n        var batchId = batch.batchId;\n        assert(batchId > this.metadata.lastAcknowledgedBatchId, 'Mutation batchIDs must be acknowledged in order');\n        this.metadata.lastAcknowledgedBatchId = batchId;\n        this.metadata.lastStreamToken = validateStreamToken(streamToken);\n        return mutationQueuesStore(transaction).put(this.metadata);\n    };\n    IndexedDbMutationQueue.prototype.getLastStreamToken = function (transaction) {\n        return PersistencePromise.resolve(this.metadata.lastStreamToken);\n    };\n    IndexedDbMutationQueue.prototype.setLastStreamToken = function (transaction, streamToken) {\n        this.metadata.lastStreamToken = validateStreamToken(streamToken);\n        return mutationQueuesStore(transaction).put(this.metadata);\n    };\n    IndexedDbMutationQueue.prototype.addMutationBatch = function (transaction, localWriteTime, mutations) {\n        var _this = this;\n        var batchId = this.nextBatchId;\n        this.nextBatchId++;\n        var batch = new MutationBatch(batchId, localWriteTime, mutations);\n        var dbBatch = this.serializer.toDbMutationBatch(this.userId, batch);\n        return mutationsStore(transaction)\n            .put(dbBatch)\n            .next(function () {\n            var promises = [];\n            for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {\n                var mutation = mutations_1[_i];\n                var encodedPath = EncodedResourcePath.encode(mutation.key.path);\n                var indexKey = DbDocumentMutation.key(_this.userId, mutation.key.path, batchId);\n                documentMutationsStore(transaction).put(indexKey, DbDocumentMutation.PLACEHOLDER);\n            }\n            return PersistencePromise.waitFor(promises);\n        })\n            .next(function () {\n            return batch;\n        });\n    };\n    IndexedDbMutationQueue.prototype.lookupMutationBatch = function (transaction, batchId) {\n        var _this = this;\n        return mutationsStore(transaction)\n            .get(this.keyForBatchId(batchId))\n            .next(function (dbBatch) {\n            return dbBatch ? _this.serializer.fromDbMutationBatch(dbBatch) : null;\n        });\n    };\n    IndexedDbMutationQueue.prototype.getNextMutationBatchAfterBatchId = function (transaction, batchId) {\n        var _this = this;\n        var range = IDBKeyRange.lowerBound(this.keyForBatchId(batchId + 1));\n        var foundBatch = null;\n        return mutationsStore(transaction)\n            .iterate({ range: range }, function (key, dbBatch, control) {\n            if (dbBatch.userId === _this.userId) {\n                assert(dbBatch.batchId > batchId, 'Should have found mutation after ' + batchId);\n                foundBatch = _this.serializer.fromDbMutationBatch(dbBatch);\n            }\n            control.done();\n        })\n            .next(function () { return foundBatch; });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatches = function (transaction) {\n        var _this = this;\n        var range = IDBKeyRange.bound(this.keyForBatchId(BATCHID_UNKNOWN), this.keyForBatchId(Number.POSITIVE_INFINITY));\n        return mutationsStore(transaction)\n            .loadAll(range)\n            .next(function (dbBatches) {\n            return dbBatches.map(function (dbBatch) { return _this.serializer.fromDbMutationBatch(dbBatch); });\n        });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesThroughBatchId = function (transaction, batchId) {\n        var _this = this;\n        var range = IDBKeyRange.bound(this.keyForBatchId(BATCHID_UNKNOWN), this.keyForBatchId(batchId));\n        return mutationsStore(transaction)\n            .loadAll(range)\n            .next(function (dbBatches) {\n            return dbBatches.map(function (dbBatch) { return _this.serializer.fromDbMutationBatch(dbBatch); });\n        });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey = function (transaction, documentKey) {\n        var _this = this;\n        // Scan the document-mutation index starting with a prefix starting with\n        // the given documentKey.\n        var indexPrefix = DbDocumentMutation.prefixForPath(this.userId, documentKey.path);\n        var indexStart = IDBKeyRange.lowerBound(indexPrefix);\n        var results = [];\n        return documentMutationsStore(transaction)\n            .iterate({ range: indexStart }, function (indexKey, _, control) {\n            var userID = indexKey[0], encodedPath = indexKey[1], batchID = indexKey[2];\n            // Only consider rows matching exactly the specific key of\n            // interest. Note that because we order by path first, and we\n            // order terminators before path separators, we'll encounter all\n            // the index rows for documentKey contiguously. In particular, all\n            // the rows for documentKey will occur before any rows for\n            // documents nested in a subcollection beneath documentKey so we\n            // can stop as soon as we hit any such row.\n            var path = EncodedResourcePath.decode(encodedPath);\n            if (userID !== _this.userId || !documentKey.path.equals(path)) {\n                control.done();\n                return;\n            }\n            var mutationKey = _this.keyForBatchId(batchID);\n            // Look up the mutation batch in the store.\n            // PORTING NOTE: because iteration is callback driven in the web,\n            // we just look up the key instead of keeping an open iterator\n            // like iOS.\n            return mutationsStore(transaction)\n                .get(mutationKey)\n                .next(function (dbBatch) {\n                if (dbBatch === null) {\n                    fail('Dangling document-mutation reference found: ' +\n                        indexKey +\n                        ' which points to ' +\n                        mutationKey);\n                }\n                results.push(_this.serializer.fromDbMutationBatch(dbBatch));\n            });\n        })\n            .next(function () { return results; });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingQuery = function (transaction, query) {\n        var _this = this;\n        assert(!query.isDocumentQuery(), \"Document queries shouldn't go down this path\");\n        var queryPath = query.path;\n        var immediateChildrenLength = queryPath.length + 1;\n        // TODO(mcg): Actually implement a single-collection query\n        //\n        // This is actually executing an ancestor query, traversing the whole\n        // subtree below the collection which can be horrifically inefficient for\n        // some structures. The right way to solve this is to implement the full\n        // value index, but that's not in the cards in the near future so this is\n        // the best we can do for the moment.\n        //\n        // Since we don't yet index the actual properties in the mutations, our\n        // current approach is to just return all mutation batches that affect\n        // documents in the collection being queried.\n        var indexPrefix = DbDocumentMutation.prefixForPath(this.userId, queryPath);\n        var encodedQueryPath = indexPrefix[1];\n        var indexStart = IDBKeyRange.lowerBound(indexPrefix);\n        // Collect up unique batchIDs encountered during a scan of the index. Use a\n        // SortedSet to accumulate batch IDs so they can be traversed in order in a\n        // scan of the main table.\n        var uniqueBatchIDs = new SortedSet(primitiveComparator);\n        return documentMutationsStore(transaction)\n            .iterate({ range: indexStart }, function (indexKey, _, control) {\n            var userID = indexKey[0], encodedPath = indexKey[1], batchID = indexKey[2];\n            var path = EncodedResourcePath.decode(encodedPath);\n            if (userID !== _this.userId || !queryPath.isPrefixOf(path)) {\n                control.done();\n                return;\n            }\n            // Rows with document keys more than one segment longer than the\n            // query path can't be matches. For example, a query on 'rooms'\n            // can't match the document /rooms/abc/messages/xyx.\n            // TODO(mcg): we'll need a different scanner when we implement\n            // ancestor queries.\n            if (path.length !== immediateChildrenLength) {\n                return;\n            }\n            uniqueBatchIDs = uniqueBatchIDs.add(batchID);\n        })\n            .next(function () {\n            var results = [];\n            var promises = [];\n            // TODO(rockwood): Implement this using iterate.\n            uniqueBatchIDs.forEach(function (batchID) {\n                var mutationKey = _this.keyForBatchId(batchID);\n                promises.push(mutationsStore(transaction)\n                    .get(mutationKey)\n                    .next(function (mutation) {\n                    if (mutation === null) {\n                        fail('Dangling document-mutation reference found, ' +\n                            'which points to ' +\n                            mutationKey);\n                    }\n                    results.push(_this.serializer.fromDbMutationBatch(mutation));\n                }));\n            });\n            return PersistencePromise.waitFor(promises).next(function () { return results; });\n        });\n    };\n    IndexedDbMutationQueue.prototype.removeMutationBatches = function (transaction, batches) {\n        var txn = mutationsStore(transaction);\n        var indexTxn = documentMutationsStore(transaction);\n        var promises = [];\n        var _loop_1 = function (batch) {\n            var range = IDBKeyRange.only(this_1.keyForBatchId(batch.batchId));\n            var numDeleted = 0;\n            var removePromise = txn.iterate({ range: range }, function (key, value, control) {\n                numDeleted++;\n                return control.delete();\n            });\n            promises.push(removePromise.next(function () {\n                assert(numDeleted === 1, 'Dangling document-mutation reference found: Missing batch ' +\n                    batch.batchId);\n            }));\n            for (var _i = 0, _a = batch.mutations; _i < _a.length; _i++) {\n                var mutation = _a[_i];\n                var indexKey = DbDocumentMutation.key(this_1.userId, mutation.key.path, batch.batchId);\n                promises.push(indexTxn.delete(indexKey));\n                if (this_1.garbageCollector !== null) {\n                    this_1.garbageCollector.addPotentialGarbageKey(mutation.key);\n                }\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\n            var batch = batches_1[_i];\n            _loop_1(batch);\n        }\n        return PersistencePromise.waitFor(promises);\n    };\n    IndexedDbMutationQueue.prototype.performConsistencyCheck = function (txn) {\n        var _this = this;\n        return this.checkEmpty(txn).next(function (empty) {\n            if (!empty) {\n                return PersistencePromise.resolve();\n            }\n            // Verify that there are no entries in the documentMutations index if\n            // the queue is empty.\n            var startRange = IDBKeyRange.lowerBound(DbDocumentMutation.prefixForUser(_this.userId));\n            var danglingMutationReferences = [];\n            return documentMutationsStore(txn)\n                .iterate({ range: startRange }, function (key, _, control) {\n                var userID = key[0];\n                if (userID !== _this.userId) {\n                    control.done();\n                    return;\n                }\n                else {\n                    var path = EncodedResourcePath.decode(key[1]);\n                    danglingMutationReferences.push(path);\n                }\n            })\n                .next(function () {\n                assert(danglingMutationReferences.length === 0, 'Document leak -- detected dangling mutation references when queue is empty. Dangling keys: ' +\n                    danglingMutationReferences.map(function (p) { return p.canonicalString(); }));\n            });\n        });\n    };\n    IndexedDbMutationQueue.prototype.setGarbageCollector = function (gc) {\n        this.garbageCollector = gc;\n    };\n    IndexedDbMutationQueue.prototype.containsKey = function (txn, key) {\n        var _this = this;\n        var indexKey = DbDocumentMutation.prefixForPath(this.userId, key.path);\n        var encodedPath = indexKey[1];\n        var startRange = IDBKeyRange.lowerBound(indexKey);\n        var containsKey = false;\n        return documentMutationsStore(txn)\n            .iterate({ range: startRange, keysOnly: true }, function (key, _, control) {\n            var userID = key[0], keyPath = key[1], batchID = key[2];\n            if (userID === _this.userId && keyPath === encodedPath) {\n                containsKey = true;\n            }\n            control.done();\n        })\n            .next(function () { return containsKey; });\n    };\n    /**\n     * Creates a [userId, batchId] key for use with the DbMutationQueue object\n     * store.\n     */\n    IndexedDbMutationQueue.prototype.keyForBatchId = function (batchId) {\n        return [this.userId, batchId];\n    };\n    return IndexedDbMutationQueue;\n}());\nexport { IndexedDbMutationQueue };\nfunction validateStreamToken(token) {\n    assert(typeof token === 'string', 'Persisting non-string stream token not supported.');\n    return token;\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutations object store.\n */\nfunction mutationsStore(txn) {\n    return getStore(txn, DbMutationBatch.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\n */\nfunction documentMutationsStore(txn) {\n    return getStore(txn, DbDocumentMutation.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\n */\nfunction mutationQueuesStore(txn) {\n    return getStore(txn, DbMutationQueue.store);\n}\n/**\n * Helper to get a typed SimpleDbStore from a transaction.\n */\nfunction getStore(txn, store) {\n    if (txn instanceof SimpleDbTransaction) {\n        return txn.store(store);\n    }\n    else {\n        return fail('Invalid transaction object provided!');\n    }\n}\n\n//# sourceMappingURL=indexeddb_mutation_queue.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/indexeddb_mutation_queue.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Timestamp } from '../core/timestamp';\nimport { documentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\nimport { assert, fail } from '../util/assert';\nimport { immediateSuccessor } from '../util/misc';\nimport * as EncodedResourcePath from './encoded_resource_path';\nimport { DbTarget, DbTargetDocument, DbTargetGlobal } from './indexeddb_schema';\nimport { PersistencePromise } from './persistence_promise';\nimport { SimpleDbTransaction } from './simple_db';\nvar IndexedDbQueryCache = /** @class */ (function () {\n    function IndexedDbQueryCache(serializer) {\n        this.serializer = serializer;\n        /**\n         * The last received snapshot version. We store this seperately from the\n         * metadata to avoid the extra conversion to/from DbTimestamp.\n         */\n        this.lastRemoteSnapshotVersion = SnapshotVersion.MIN;\n        /**\n         * A cached copy of the metadata for the query cache.\n         */\n        this.metadata = new DbTargetGlobal(\n        /*highestTargetId=*/ 0, \n        /*lastListenSequenceNumber=*/ 0, SnapshotVersion.MIN.toTimestamp());\n        /** The garbage collector to notify about potential garbage keys. */\n        this.garbageCollector = null;\n    }\n    IndexedDbQueryCache.prototype.start = function (transaction) {\n        var _this = this;\n        return globalTargetStore(transaction)\n            .get(DbTargetGlobal.key)\n            .next(function (metadata) {\n            if (metadata !== null) {\n                _this.metadata = metadata;\n                var lastSavedVersion = metadata.lastRemoteSnapshotVersion;\n                _this.lastRemoteSnapshotVersion = SnapshotVersion.fromTimestamp(new Timestamp(lastSavedVersion.seconds, lastSavedVersion.nanos));\n            }\n            return PersistencePromise.resolve();\n        });\n    };\n    IndexedDbQueryCache.prototype.getHighestTargetId = function () {\n        return this.metadata.highestTargetId;\n    };\n    IndexedDbQueryCache.prototype.getLastRemoteSnapshotVersion = function () {\n        return this.lastRemoteSnapshotVersion;\n    };\n    IndexedDbQueryCache.prototype.setLastRemoteSnapshotVersion = function (transaction, snapshotVersion) {\n        this.lastRemoteSnapshotVersion = snapshotVersion;\n        this.metadata.lastRemoteSnapshotVersion = snapshotVersion.toTimestamp();\n        return globalTargetStore(transaction).put(DbTargetGlobal.key, this.metadata);\n    };\n    IndexedDbQueryCache.prototype.addQueryData = function (transaction, queryData) {\n        var _this = this;\n        var targetId = queryData.targetId;\n        var addedQueryPromise = targetsStore(transaction).put(this.serializer.toDbTarget(queryData));\n        if (targetId > this.metadata.highestTargetId) {\n            this.metadata.highestTargetId = targetId;\n            return addedQueryPromise.next(function () {\n                return globalTargetStore(transaction).put(DbTargetGlobal.key, _this.metadata);\n            });\n        }\n        else {\n            return addedQueryPromise;\n        }\n    };\n    IndexedDbQueryCache.prototype.removeQueryData = function (transaction, queryData) {\n        return this.removeMatchingKeysForTargetId(transaction, queryData.targetId).next(function () {\n            targetsStore(transaction).delete(queryData.targetId);\n        });\n    };\n    IndexedDbQueryCache.prototype.getQueryData = function (transaction, query) {\n        var _this = this;\n        // Iterating by the canonicalId may yield more than one result because\n        // canonicalId values are not required to be unique per target. This query\n        // depends on the queryTargets index to be efficent.\n        var canonicalId = query.canonicalId();\n        var range = IDBKeyRange.bound([canonicalId, Number.NEGATIVE_INFINITY], [canonicalId, Number.POSITIVE_INFINITY]);\n        var result = null;\n        return targetsStore(transaction)\n            .iterate({ range: range, index: DbTarget.queryTargetsIndexName }, function (key, value, control) {\n            var found = _this.serializer.fromDbTarget(value);\n            // After finding a potential match, check that the query is\n            // actually equal to the requested query.\n            if (query.equals(found.query)) {\n                result = found;\n                control.done();\n            }\n        })\n            .next(function () { return result; });\n    };\n    IndexedDbQueryCache.prototype.addMatchingKeys = function (txn, keys, targetId) {\n        // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n        // Indexeddb.\n        var promises = [];\n        var store = documentTargetStore(txn);\n        keys.forEach(function (key) {\n            var path = EncodedResourcePath.encode(key.path);\n            promises.push(store.put(new DbTargetDocument(targetId, path)));\n        });\n        return PersistencePromise.waitFor(promises);\n    };\n    IndexedDbQueryCache.prototype.removeMatchingKeys = function (txn, keys, targetId) {\n        var _this = this;\n        // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n        // IndexedDb.\n        var promises = [];\n        var store = documentTargetStore(txn);\n        keys.forEach(function (key) {\n            var path = EncodedResourcePath.encode(key.path);\n            promises.push(store.delete([targetId, path]));\n            if (_this.garbageCollector !== null) {\n                _this.garbageCollector.addPotentialGarbageKey(key);\n            }\n        });\n        return PersistencePromise.waitFor(promises);\n    };\n    IndexedDbQueryCache.prototype.removeMatchingKeysForTargetId = function (txn, targetId) {\n        var store = documentTargetStore(txn);\n        var range = IDBKeyRange.bound([targetId], [targetId + 1], \n        /*lowerOpen=*/ false, \n        /*upperOpen=*/ true);\n        return this.notifyGCForRemovedKeys(txn, range).next(function () {\n            return store.delete(range);\n        });\n    };\n    IndexedDbQueryCache.prototype.notifyGCForRemovedKeys = function (txn, range) {\n        var _this = this;\n        var store = documentTargetStore(txn);\n        if (this.garbageCollector !== null && this.garbageCollector.isEager) {\n            // In order to generate garbage events properly, we need to read these\n            // keys before deleting.\n            return store.iterate({ range: range, keysOnly: true }, function (key, _, control) {\n                var path = EncodedResourcePath.decode(key[1]);\n                var docKey = new DocumentKey(path);\n                // Paranoid assertion in case the the collector is set to null\n                // during the iteration.\n                assert(_this.garbageCollector !== null, 'GarbageCollector for query cache set to null during key removal.');\n                _this.garbageCollector.addPotentialGarbageKey(docKey);\n            });\n        }\n        else {\n            return PersistencePromise.resolve();\n        }\n    };\n    IndexedDbQueryCache.prototype.getMatchingKeysForTargetId = function (txn, targetId) {\n        var promises = [];\n        var range = IDBKeyRange.bound([targetId], [targetId + 1], \n        /*lowerOpen=*/ false, \n        /*upperOpen=*/ true);\n        var store = documentTargetStore(txn);\n        var result = documentKeySet();\n        return store\n            .iterate({ range: range, keysOnly: true }, function (key, _, control) {\n            var path = EncodedResourcePath.decode(key[1]);\n            var docKey = new DocumentKey(path);\n            result = result.add(docKey);\n        })\n            .next(function () { return result; });\n    };\n    IndexedDbQueryCache.prototype.setGarbageCollector = function (gc) {\n        this.garbageCollector = gc;\n    };\n    IndexedDbQueryCache.prototype.containsKey = function (txn, key) {\n        assert(txn !== null, 'Persistence Transaction cannot be null for query cache containsKey');\n        var path = EncodedResourcePath.encode(key.path);\n        var range = IDBKeyRange.bound([path], [immediateSuccessor(path)], \n        /*lowerOpen=*/ false, \n        /*upperOpen=*/ true);\n        var count = 0;\n        return documentTargetStore(txn)\n            .iterate({\n            index: DbTargetDocument.documentTargetsIndex,\n            keysOnly: true,\n            range: range\n        }, function (key, _, control) {\n            count++;\n            control.done();\n        })\n            .next(function () { return count > 0; });\n    };\n    return IndexedDbQueryCache;\n}());\nexport { IndexedDbQueryCache };\n/**\n * Helper to get a typed SimpleDbStore for the queries object store.\n */\nfunction targetsStore(txn) {\n    return getStore(txn, DbTarget.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the target globals object store.\n */\nfunction globalTargetStore(txn) {\n    return getStore(txn, DbTargetGlobal.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the document target object store.\n */\nfunction documentTargetStore(txn) {\n    return getStore(txn, DbTargetDocument.store);\n}\n/**\n * Helper to get a typed SimpleDbStore from a transaction.\n */\nfunction getStore(txn, store) {\n    if (txn instanceof SimpleDbTransaction) {\n        return txn.store(store);\n    }\n    else {\n        return fail('Invalid transaction object provided!');\n    }\n}\n\n//# sourceMappingURL=indexeddb_query_cache.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/indexeddb_query_cache.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentMap } from '../model/collections';\nimport { Document } from '../model/document';\nimport { fail } from '../util/assert';\nimport { DbRemoteDocument } from './indexeddb_schema';\nimport { SimpleDbTransaction } from './simple_db';\nvar IndexedDbRemoteDocumentCache = /** @class */ (function () {\n    function IndexedDbRemoteDocumentCache(serializer) {\n        this.serializer = serializer;\n    }\n    IndexedDbRemoteDocumentCache.prototype.addEntry = function (transaction, maybeDocument) {\n        return remoteDocumentsStore(transaction).put(dbKey(maybeDocument.key), this.serializer.toDbRemoteDocument(maybeDocument));\n    };\n    IndexedDbRemoteDocumentCache.prototype.removeEntry = function (transaction, documentKey) {\n        return remoteDocumentsStore(transaction).delete(dbKey(documentKey));\n    };\n    IndexedDbRemoteDocumentCache.prototype.getEntry = function (transaction, documentKey) {\n        var _this = this;\n        return remoteDocumentsStore(transaction)\n            .get(dbKey(documentKey))\n            .next(function (dbRemoteDoc) {\n            return dbRemoteDoc\n                ? _this.serializer.fromDbRemoteDocument(dbRemoteDoc)\n                : null;\n        });\n    };\n    IndexedDbRemoteDocumentCache.prototype.getDocumentsMatchingQuery = function (transaction, query) {\n        var _this = this;\n        var results = documentMap();\n        // Documents are ordered by key, so we can use a prefix scan to narrow down\n        // the documents we need to match the query against.\n        var startKey = query.path.toArray();\n        var range = IDBKeyRange.lowerBound(startKey);\n        return remoteDocumentsStore(transaction)\n            .iterate({ range: range }, function (key, dbRemoteDoc, control) {\n            var maybeDoc = _this.serializer.fromDbRemoteDocument(dbRemoteDoc);\n            if (!query.path.isPrefixOf(maybeDoc.key.path)) {\n                control.done();\n            }\n            else if (maybeDoc instanceof Document && query.matches(maybeDoc)) {\n                results = results.insert(maybeDoc.key, maybeDoc);\n            }\n        })\n            .next(function () { return results; });\n    };\n    return IndexedDbRemoteDocumentCache;\n}());\nexport { IndexedDbRemoteDocumentCache };\n/**\n * Helper to get a typed SimpleDbStore for the remoteDocuments object store.\n */\nfunction remoteDocumentsStore(txn) {\n    if (txn instanceof SimpleDbTransaction) {\n        return txn.store(DbRemoteDocument.store);\n    }\n    else {\n        return fail('Invalid transaction object provided!');\n    }\n}\nfunction dbKey(docKey) {\n    return docKey.path.toArray();\n}\n\n//# sourceMappingURL=indexeddb_remote_document_cache.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/indexeddb_remote_document_cache.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Timestamp } from '../core/timestamp';\nimport { Document, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { MutationBatch } from '../model/mutation_batch';\nimport { assert, fail } from '../util/assert';\nimport { DbMutationBatch, DbNoDocument, DbRemoteDocument, DbTarget, DbTimestamp } from './indexeddb_schema';\nimport { QueryData, QueryPurpose } from './query_data';\n/** Serializer for values stored in the LocalStore. */\nvar LocalSerializer = /** @class */ (function () {\n    function LocalSerializer(remoteSerializer) {\n        this.remoteSerializer = remoteSerializer;\n    }\n    /** Decodes a remote document from storage locally to a Document. */\n    LocalSerializer.prototype.fromDbRemoteDocument = function (remoteDoc) {\n        if (remoteDoc.document) {\n            return this.remoteSerializer.fromDocument(remoteDoc.document);\n        }\n        else if (remoteDoc.noDocument) {\n            var key = DocumentKey.fromSegments(remoteDoc.noDocument.path);\n            var readTime = remoteDoc.noDocument.readTime;\n            var timestamp = new Timestamp(readTime.seconds, readTime.nanos);\n            return new NoDocument(key, SnapshotVersion.fromTimestamp(timestamp));\n        }\n        else {\n            return fail('Unexpected DbRemoteDocument');\n        }\n    };\n    /** Encodes a document for storage locally. */\n    LocalSerializer.prototype.toDbRemoteDocument = function (maybeDoc) {\n        if (maybeDoc instanceof Document) {\n            var doc = this.remoteSerializer.toDocument(maybeDoc);\n            return new DbRemoteDocument(null, doc);\n        }\n        else {\n            var path = maybeDoc.key.path.toArray();\n            var timestamp = maybeDoc.version.toTimestamp();\n            var readTime = new DbTimestamp(timestamp.seconds, timestamp.nanos);\n            return new DbRemoteDocument(new DbNoDocument(path, readTime), null);\n        }\n    };\n    /** Encodes a batch of mutations into a DbMutationBatch for local storage. */\n    LocalSerializer.prototype.toDbMutationBatch = function (userId, batch) {\n        var _this = this;\n        var serializedMutations = batch.mutations.map(function (m) {\n            return _this.remoteSerializer.toMutation(m);\n        });\n        return new DbMutationBatch(userId, batch.batchId, batch.localWriteTime.toEpochMilliseconds(), serializedMutations);\n    };\n    /** Decodes a DbMutationBatch into a MutationBatch */\n    LocalSerializer.prototype.fromDbMutationBatch = function (dbBatch) {\n        var _this = this;\n        var mutations = dbBatch.mutations.map(function (m) {\n            return _this.remoteSerializer.fromMutation(m);\n        });\n        var timestamp = Timestamp.fromEpochMilliseconds(dbBatch.localWriteTimeMs);\n        return new MutationBatch(dbBatch.batchId, timestamp, mutations);\n    };\n    /** Decodes a DbTarget into QueryData */\n    LocalSerializer.prototype.fromDbTarget = function (dbTarget) {\n        var readTime = new Timestamp(dbTarget.readTime.seconds, dbTarget.readTime.nanos);\n        var version = SnapshotVersion.fromTimestamp(readTime);\n        var query;\n        if (isDocumentQuery(dbTarget.query)) {\n            query = this.remoteSerializer.fromDocumentsTarget(dbTarget.query);\n        }\n        else {\n            query = this.remoteSerializer.fromQueryTarget(dbTarget.query);\n        }\n        return new QueryData(query, dbTarget.targetId, QueryPurpose.Listen, version, dbTarget.resumeToken);\n    };\n    /** Encodes QueryData into a DbTarget for storage locally. */\n    LocalSerializer.prototype.toDbTarget = function (queryData) {\n        assert(QueryPurpose.Listen === queryData.purpose, 'Only queries with purpose ' +\n            QueryPurpose.Listen +\n            ' may be stored, got ' +\n            queryData.purpose);\n        var timestamp = queryData.snapshotVersion.toTimestamp();\n        var dbTimestamp = new DbTimestamp(timestamp.seconds, timestamp.nanos);\n        var queryProto;\n        if (queryData.query.isDocumentQuery()) {\n            queryProto = this.remoteSerializer.toDocumentsTarget(queryData.query);\n        }\n        else {\n            queryProto = this.remoteSerializer.toQueryTarget(queryData.query);\n        }\n        assert(typeof queryData.resumeToken === 'string', 'Persisting non-string resume token not supported.');\n        var resumeToken = queryData.resumeToken;\n        // lastListenSequenceNumber is always 0 until we do real GC.\n        return new DbTarget(queryData.targetId, queryData.query.canonicalId(), dbTimestamp, resumeToken, 0, queryProto);\n    };\n    return LocalSerializer;\n}());\nexport { LocalSerializer };\n/**\n * A helper function for figuring out what kind of query has been stored.\n */\nfunction isDocumentQuery(dbQuery) {\n    return dbQuery.documents !== undefined;\n}\n\n//# sourceMappingURL=local_serializer.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/local_serializer.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { User } from '../auth/user';\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nvar OAuthToken = /** @class */ (function () {\n    function OAuthToken(value, user) {\n        this.user = user;\n        this.type = 'OAuth';\n        this.authHeaders = { Authorization: \"Bearer \" + value };\n    }\n    return OAuthToken;\n}());\nexport { OAuthToken };\n/** A CredentialsProvider that always yields an empty token. */\nvar EmptyCredentialsProvider = /** @class */ (function () {\n    function EmptyCredentialsProvider() {\n        /**\n         * Stores the User listener registered with setUserChangeListener()\n         * This isn't actually necessary since the UID never changes, but we use this\n         * to verify the listen contract is adhered to in tests.\n         */\n        this.userListener = null;\n    }\n    EmptyCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        return Promise.resolve(null);\n    };\n    EmptyCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        assert(!this.userListener, 'Can only call setUserChangeListener() once.');\n        this.userListener = listener;\n        // Fire with initial user.\n        listener(User.UNAUTHENTICATED);\n    };\n    EmptyCredentialsProvider.prototype.removeUserChangeListener = function () {\n        assert(this.userListener !== null, 'removeUserChangeListener() when no listener registered');\n        this.userListener = null;\n    };\n    return EmptyCredentialsProvider;\n}());\nexport { EmptyCredentialsProvider };\nvar FirebaseCredentialsProvider = /** @class */ (function () {\n    function FirebaseCredentialsProvider(app) {\n        var _this = this;\n        this.app = app;\n        /**\n         * The auth token listener registered with FirebaseApp, retained here so we\n         * can unregister it.\n         */\n        this.tokenListener = null;\n        /**\n         * Counter used to detect if the user changed while a getToken request was\n         * outstanding.\n         */\n        this.userCounter = 0;\n        /** The User listener registered with setUserChangeListener(). */\n        this.userListener = null;\n        // We listen for token changes but all we really care about is knowing when\n        // the uid may have changed.\n        this.tokenListener = function () {\n            var newUser = _this.getUser();\n            if (!_this.currentUser || !newUser.equals(_this.currentUser)) {\n                _this.currentUser = newUser;\n                _this.userCounter++;\n                if (_this.userListener) {\n                    _this.userListener(_this.currentUser);\n                }\n            }\n        };\n        this.userCounter = 0;\n        // Will fire at least once where we set this.currentUser\n        this.app.INTERNAL.addAuthTokenListener(this.tokenListener);\n    }\n    FirebaseCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        var _this = this;\n        assert(this.tokenListener != null, 'getToken cannot be called after listener removed.');\n        // Take note of the current value of the userCounter so that this method can\n        // fail (with an ABORTED error) if there is a user change while the request\n        // is outstanding.\n        var initialUserCounter = this.userCounter;\n        return this.app.INTERNAL.getToken(forceRefresh).then(function (tokenData) {\n            // Cancel the request since the user changed while the request was\n            // outstanding so the response is likely for a previous user (which\n            // user, we can't be sure).\n            if (_this.userCounter !== initialUserCounter) {\n                throw new FirestoreError(Code.ABORTED, 'getToken aborted due to uid change.');\n            }\n            else {\n                if (tokenData) {\n                    assert(typeof tokenData.accessToken === 'string', 'Invalid tokenData returned from getToken():' + tokenData);\n                    return new OAuthToken(tokenData.accessToken, _this.currentUser);\n                }\n                else {\n                    return null;\n                }\n            }\n        });\n    };\n    FirebaseCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        assert(!this.userListener, 'Can only call setUserChangeListener() once.');\n        this.userListener = listener;\n        // Fire the initial event, but only if we received the initial user\n        if (this.currentUser) {\n            listener(this.currentUser);\n        }\n    };\n    FirebaseCredentialsProvider.prototype.removeUserChangeListener = function () {\n        assert(this.tokenListener != null, 'removeUserChangeListener() called twice');\n        assert(this.userListener !== null, 'removeUserChangeListener() called when no listener registered');\n        this.app.INTERNAL.removeAuthTokenListener(this.tokenListener);\n        this.tokenListener = null;\n        this.userListener = null;\n    };\n    FirebaseCredentialsProvider.prototype.getUser = function () {\n        // TODO(mikelehen): Remove this check once we're shipping with firebase.js.\n        if (typeof this.app.INTERNAL.getUid !== 'function') {\n            fail('This version of the Firestore SDK requires at least version' +\n                ' 3.7.0 of firebase.js.');\n        }\n        var currentUid = this.app.INTERNAL.getUid();\n        assert(currentUid === null || typeof currentUid === 'string', 'Received invalid UID: ' + currentUid);\n        return new User(currentUid);\n    };\n    return FirebaseCredentialsProvider;\n}());\nexport { FirebaseCredentialsProvider };\n// Wrap a google-auth-library client as a CredentialsProvider.\n// NOTE: grpc-connection can natively accept a google-auth-library\n// client via createFromGoogleCredential(), but we opt to plumb the tokens\n// through our CredentialsProvider interface, at least for now.\nvar GoogleCredentialsProvider = /** @class */ (function () {\n    function GoogleCredentialsProvider(authClient) {\n        this.authClient = authClient;\n    }\n    GoogleCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            // TODO(b/32935141): ideally this would be declared as an extern\n            _this.authClient['getAccessToken'](function (error, tokenLiteral) {\n                if (error) {\n                    reject(error);\n                }\n                else {\n                    resolve(new OAuthToken(tokenLiteral, User.GOOGLE_CREDENTIALS));\n                }\n            });\n        });\n    };\n    // NOTE: A google-auth-library client represents an immutable \"user\", so\n    // once we fire the initial event, it'll never change.\n    GoogleCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        // Fire with initial uid.\n        listener(User.GOOGLE_CREDENTIALS);\n    };\n    GoogleCredentialsProvider.prototype.removeUserChangeListener = function () { };\n    return GoogleCredentialsProvider;\n}());\nexport { GoogleCredentialsProvider };\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * TODO(b/33147818) this implementation violates the current assumption that\n * tokens are immutable.  We need to either revisit this assumption or come\n * up with some way for FPA to use the listen/unlisten interface.\n */\nvar FirstPartyToken = /** @class */ (function () {\n    function FirstPartyToken(gapi, sessionIndex) {\n        this.gapi = gapi;\n        this.sessionIndex = sessionIndex;\n        this.type = 'FirstParty';\n        this.user = User.FIRST_PARTY;\n        assert(this.gapi &&\n            this.gapi['auth'] &&\n            this.gapi['auth']['getAuthHeaderValueForFirstParty'], 'unexpected gapi interface');\n    }\n    Object.defineProperty(FirstPartyToken.prototype, \"authHeaders\", {\n        get: function () {\n            return {\n                Authorization: this.gapi['auth']['getAuthHeaderValueForFirstParty']([]),\n                'X-Goog-AuthUser': this.sessionIndex\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FirstPartyToken;\n}());\nexport { FirstPartyToken };\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */\nvar FirstPartyCredentialsProvider = /** @class */ (function () {\n    function FirstPartyCredentialsProvider(gapi, sessionIndex) {\n        this.gapi = gapi;\n        this.sessionIndex = sessionIndex;\n        assert(this.gapi &&\n            this.gapi['auth'] &&\n            this.gapi['auth']['getAuthHeaderValueForFirstParty'], 'unexpected gapi interface');\n    }\n    FirstPartyCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        return Promise.resolve(new FirstPartyToken(this.gapi, this.sessionIndex));\n    };\n    // TODO(33108925): can someone switch users w/o a page refresh?\n    // TODO(33110621): need to understand token/session lifecycle\n    FirstPartyCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        // Fire with initial uid.\n        listener(User.FIRST_PARTY);\n    };\n    FirstPartyCredentialsProvider.prototype.removeUserChangeListener = function () { };\n    return FirstPartyCredentialsProvider;\n}());\nexport { FirstPartyCredentialsProvider };\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\nexport function makeCredentialsProvider(credentials) {\n    if (!credentials) {\n        return new EmptyCredentialsProvider();\n    }\n    switch (credentials.type) {\n        case 'google-auth':\n            return new GoogleCredentialsProvider(credentials.client);\n        case 'gapi':\n            return new FirstPartyCredentialsProvider(credentials.client, credentials.sessionIndex || '0');\n        case 'provider':\n            return credentials.client;\n        default:\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'makeCredentialsProvider failed due to invalid credential type');\n    }\n}\n\n//# sourceMappingURL=credentials.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/credentials.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function isPartialObserver(obj) {\n    return implementsAnyMethods(obj, ['next', 'error', 'complete']);\n}\n/**\n * Returns true if obj is an object and contains at least one of the specified\n * methods.\n */\nfunction implementsAnyMethods(obj, methods) {\n    if (typeof obj !== 'object' || obj === null) {\n        return false;\n    }\n    var object = obj;\n    for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {\n        var method = methods_1[_i];\n        if (method in object && typeof object[method] === 'function') {\n            return true;\n        }\n    }\n    return false;\n}\n\n//# sourceMappingURL=observer.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/observer.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Timestamp } from '../core/timestamp';\nimport { ObjectValue } from '../model/field_value';\nimport { ArrayValue, BlobValue, BooleanValue, DoubleValue, GeoPointValue, IntegerValue, NullValue, RefValue, StringValue, TimestampValue } from '../model/field_value';\nimport { FieldMask, FieldTransform, PatchMutation, ServerTimestampTransform, SetMutation, TransformMutation } from '../model/mutation';\nimport { FieldPath } from '../model/path';\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { isPlainObject, valueDescription } from '../util/input_validation';\nimport { primitiveComparator } from '../util/misc';\nimport * as objUtils from '../util/obj';\nimport { SortedMap } from '../util/sorted_map';\nimport * as typeUtils from '../util/types';\nimport { Blob } from './blob';\nimport { FieldPath as ExternalFieldPath, fromDotSeparatedString } from './field_path';\nimport { DeleteFieldValueImpl, FieldValueImpl, ServerTimestampFieldValueImpl } from './field_value';\nimport { GeoPoint } from './geo_point';\nvar RESERVED_FIELD_REGEX = /^__.*__$/;\n/** The result of parsing document data (e.g. for a setData call). */\nvar ParsedSetData = /** @class */ (function () {\n    function ParsedSetData(data, fieldMask, fieldTransforms) {\n        this.data = data;\n        this.fieldMask = fieldMask;\n        this.fieldTransforms = fieldTransforms;\n    }\n    ParsedSetData.prototype.toMutations = function (key, precondition) {\n        var mutations = [];\n        if (this.fieldMask !== null) {\n            mutations.push(new PatchMutation(key, this.data, this.fieldMask, precondition));\n        }\n        else {\n            mutations.push(new SetMutation(key, this.data, precondition));\n        }\n        if (this.fieldTransforms.length > 0) {\n            mutations.push(new TransformMutation(key, this.fieldTransforms));\n        }\n        return mutations;\n    };\n    return ParsedSetData;\n}());\nexport { ParsedSetData };\n/** The result of parsing \"update\" data (i.e. for an updateData call). */\nvar ParsedUpdateData = /** @class */ (function () {\n    function ParsedUpdateData(data, fieldMask, fieldTransforms) {\n        this.data = data;\n        this.fieldMask = fieldMask;\n        this.fieldTransforms = fieldTransforms;\n    }\n    ParsedUpdateData.prototype.toMutations = function (key, precondition) {\n        var mutations = [\n            new PatchMutation(key, this.data, this.fieldMask, precondition)\n        ];\n        if (this.fieldTransforms.length > 0) {\n            mutations.push(new TransformMutation(key, this.fieldTransforms));\n        }\n        return mutations;\n    };\n    return ParsedUpdateData;\n}());\nexport { ParsedUpdateData };\n/*\n * Represents what type of API method provided the data being parsed; useful\n * for determining which error conditions apply during parsing and providing\n * better error messages.\n */\nvar UserDataSource;\n(function (UserDataSource) {\n    UserDataSource[UserDataSource[\"Set\"] = 0] = \"Set\";\n    UserDataSource[UserDataSource[\"Update\"] = 1] = \"Update\";\n    UserDataSource[UserDataSource[\"QueryValue\"] = 2] = \"QueryValue\"; // from a where clause or cursor bound\n})(UserDataSource || (UserDataSource = {}));\n/** A \"context\" object passed around while parsing user data. */\nvar ParseContext = /** @class */ (function () {\n    /**\n     * Initializes a ParseContext with the given source and path.\n     *\n     * @param dataSource Indicates what kind of API method this data came from.\n     * @param methodName The name of the method the user called to create this\n     *     ParseContext.\n     * @param path A path within the object being parsed. This could be an empty\n     *     path (in which case the context represents the root of the data being\n     *     parsed), or a nonempty path (indicating the context represents a nested\n     *     location within the data).\n     * @param arrayElement Whether or not this context corresponds to an element\n     *     of an array.\n     * @param fieldTransforms A mutable list of field transforms encountered while\n     *     parsing the data.\n     * @param fieldMask A mutable list of field paths encountered while parsing\n     *     the data.\n     *\n     * TODO(b/34871131): We don't support array paths right now, so path can be\n     * null to indicate the context represents any location within an array (in\n     * which case certain features will not work and errors will be somewhat\n     * compromised).\n     */\n    function ParseContext(dataSource, methodName, path, arrayElement, fieldTransforms, fieldMask) {\n        this.dataSource = dataSource;\n        this.methodName = methodName;\n        this.path = path;\n        this.arrayElement = arrayElement;\n        // Minor hack: If fieldTransforms is undefined, we assume this is an\n        // external call and we need to validate the entire path.\n        if (fieldTransforms === undefined) {\n            this.validatePath();\n        }\n        this.arrayElement = arrayElement !== undefined ? arrayElement : false;\n        this.fieldTransforms = fieldTransforms || [];\n        this.fieldMask = fieldMask || [];\n    }\n    ParseContext.prototype.childContextForField = function (field) {\n        var childPath = this.path == null ? null : this.path.child(field);\n        var context = new ParseContext(this.dataSource, this.methodName, childPath, \n        /*arrayElement=*/ false, this.fieldTransforms, this.fieldMask);\n        context.validatePathSegment(field);\n        return context;\n    };\n    ParseContext.prototype.childContextForFieldPath = function (field) {\n        var childPath = this.path == null ? null : this.path.child(field);\n        var context = new ParseContext(this.dataSource, this.methodName, childPath, \n        /*arrayElement=*/ false, this.fieldTransforms, this.fieldMask);\n        context.validatePath();\n        return context;\n    };\n    ParseContext.prototype.childContextForArray = function (index) {\n        // TODO(b/34871131): We don't support array paths right now; so make path\n        // null.\n        return new ParseContext(this.dataSource, this.methodName, \n        /*path=*/ null, \n        /*arrayElement=*/ true, this.fieldTransforms, this.fieldMask);\n    };\n    ParseContext.prototype.createError = function (reason) {\n        var fieldDescription = this.path === null || this.path.isEmpty()\n            ? ''\n            : \" (found in field \" + this.path.toString() + \")\";\n        return new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + this.methodName + \"() called with invalid data. \" +\n            reason +\n            fieldDescription);\n    };\n    ParseContext.prototype.validatePath = function () {\n        // TODO(b/34871131): Remove null check once we have proper paths for fields\n        // within arrays.\n        if (this.path === null) {\n            return;\n        }\n        for (var i = 0; i < this.path.length; i++) {\n            this.validatePathSegment(this.path.get(i));\n        }\n    };\n    ParseContext.prototype.validatePathSegment = function (segment) {\n        if (this.isWrite() && RESERVED_FIELD_REGEX.test(segment)) {\n            throw this.createError('Document fields cannot begin and end with __');\n        }\n    };\n    ParseContext.prototype.isWrite = function () {\n        return (this.dataSource === UserDataSource.Set ||\n            this.dataSource === UserDataSource.Update);\n    };\n    return ParseContext;\n}());\n/**\n * A placeholder object for DocumentReferences in this file, in order to\n * avoid a circular dependency. See the comments for `DataPreConverter` for\n * the full context.\n */\nvar DocumentKeyReference = /** @class */ (function () {\n    function DocumentKeyReference(databaseId, key) {\n        this.databaseId = databaseId;\n        this.key = key;\n    }\n    return DocumentKeyReference;\n}());\nexport { DocumentKeyReference };\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */\nvar UserDataConverter = /** @class */ (function () {\n    function UserDataConverter(preConverter) {\n        this.preConverter = preConverter;\n    }\n    /** Parse document data (e.g. from a set() call). */\n    UserDataConverter.prototype.parseSetData = function (methodName, input, options) {\n        var _this = this;\n        var context = new ParseContext(UserDataSource.Set, methodName, FieldPath.EMPTY_PATH);\n        validatePlainObject('Data must be an object, but it was:', context, input);\n        var merge = options.merge !== undefined ? options.merge : false;\n        var updateData = ObjectValue.EMPTY;\n        objUtils.forEach(input, function (key, value) {\n            var path = new ExternalFieldPath(key)._internalPath;\n            var childContext = context.childContextForFieldPath(path);\n            value = _this.runPreConverter(value, childContext);\n            var parsedValue = _this.parseData(value, childContext);\n            if (parsedValue) {\n                updateData = updateData.set(path, parsedValue);\n            }\n        });\n        var fieldMask = merge ? new FieldMask(context.fieldMask) : null;\n        return new ParsedSetData(updateData, fieldMask, context.fieldTransforms);\n    };\n    /** Parse update data (e.g. from an update() call). */\n    UserDataConverter.prototype.parseUpdateData = function (methodName, input) {\n        var _this = this;\n        var context = new ParseContext(UserDataSource.Update, methodName, FieldPath.EMPTY_PATH);\n        validatePlainObject('Data must be an object, but it was:', context, input);\n        var fieldMaskPaths = [];\n        var updateData = ObjectValue.EMPTY;\n        objUtils.forEach(input, function (key, value) {\n            var path = fieldPathFromDotSeparatedString(methodName, key);\n            var childContext = context.childContextForFieldPath(path);\n            value = _this.runPreConverter(value, childContext);\n            if (value instanceof DeleteFieldValueImpl) {\n                // Add it to the field mask, but don't add anything to updateData.\n                fieldMaskPaths.push(path);\n            }\n            else {\n                var parsedValue = _this.parseData(value, childContext);\n                if (parsedValue != null) {\n                    fieldMaskPaths.push(path);\n                    updateData = updateData.set(path, parsedValue);\n                }\n            }\n        });\n        var mask = new FieldMask(fieldMaskPaths);\n        return new ParsedUpdateData(updateData, mask, context.fieldTransforms);\n    };\n    /** Parse update data from a list of field/value arguments. */\n    UserDataConverter.prototype.parseUpdateVarargs = function (methodName, field, value, moreFieldsAndValues) {\n        var context = new ParseContext(UserDataSource.Update, methodName, FieldPath.EMPTY_PATH);\n        var keys = [fieldPathFromArgument(methodName, field)];\n        var values = [value];\n        if (moreFieldsAndValues.length % 2 !== 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + methodName + \"() needs to be called with an even number \" +\n                'of arguments that alternate between field names and values.');\n        }\n        for (var i = 0; i < moreFieldsAndValues.length; i += 2) {\n            keys.push(fieldPathFromArgument(methodName, moreFieldsAndValues[i]));\n            values.push(moreFieldsAndValues[i + 1]);\n        }\n        var fieldMaskPaths = [];\n        var updateData = ObjectValue.EMPTY;\n        for (var i = 0; i < keys.length; ++i) {\n            var path = keys[i];\n            var childContext = context.childContextForFieldPath(path);\n            var value_1 = this.runPreConverter(values[i], childContext);\n            if (value_1 instanceof DeleteFieldValueImpl) {\n                // Add it to the field mask, but don't add anything to updateData.\n                fieldMaskPaths.push(path);\n            }\n            else {\n                var parsedValue = this.parseData(value_1, childContext);\n                if (parsedValue != null) {\n                    fieldMaskPaths.push(path);\n                    updateData = updateData.set(path, parsedValue);\n                }\n            }\n        }\n        var mask = new FieldMask(fieldMaskPaths);\n        return new ParsedUpdateData(updateData, mask, context.fieldTransforms);\n    };\n    /**\n     * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n     * bound).\n     */\n    UserDataConverter.prototype.parseQueryValue = function (methodName, input) {\n        var context = new ParseContext(UserDataSource.QueryValue, methodName, FieldPath.EMPTY_PATH);\n        var parsed = this.parseData(input, context);\n        assert(parsed != null, 'Parsed data should not be null.');\n        assert(context.fieldTransforms.length === 0, 'Field transforms should have been disallowed.');\n        return parsed;\n    };\n    /** Sends data through this.preConverter, handling any thrown errors. */\n    UserDataConverter.prototype.runPreConverter = function (input, context) {\n        try {\n            return this.preConverter(input);\n        }\n        catch (e) {\n            var message = errorMessage(e);\n            throw context.createError(message);\n        }\n    };\n    /**\n     * Internal helper for parsing user data.\n     *\n     * @param input Data to be parsed.\n     * @param context A context object representing the current path being parsed,\n     * the source of the data being parsed, etc.\n     * @return The parsed value, or null if the value was a FieldValue sentinel\n     * that should not be included in the resulting parsed data.\n     */\n    UserDataConverter.prototype.parseData = function (input, context) {\n        input = this.runPreConverter(input, context);\n        if (input instanceof Array) {\n            // TODO(b/34871131): Include the path containing the array in the error\n            // message.\n            if (context.arrayElement) {\n                throw context.createError('Nested arrays are not supported');\n            }\n            // If context.path is null we are already inside an array and we don't\n            // support field mask paths more granular than the top-level array.\n            if (context.path) {\n                context.fieldMask.push(context.path);\n            }\n            return this.parseArray(input, context);\n        }\n        else if (looksLikeJsonObject(input)) {\n            validatePlainObject('Unsupported field value:', context, input);\n            return this.parseObject(input, context);\n        }\n        else {\n            // If context.path is null, we are inside an array and we should have\n            // already added the root of the array to the field mask.\n            if (context.path) {\n                context.fieldMask.push(context.path);\n            }\n            return this.parseScalarValue(input, context);\n        }\n    };\n    UserDataConverter.prototype.parseArray = function (array, context) {\n        var result = [];\n        var entryIndex = 0;\n        for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n            var entry = array_1[_i];\n            var parsedEntry = this.parseData(entry, context.childContextForArray(entryIndex));\n            if (parsedEntry == null) {\n                // Just include nulls in the array for fields being replaced with a\n                // sentinel.\n                parsedEntry = NullValue.INSTANCE;\n            }\n            result.push(parsedEntry);\n            entryIndex++;\n        }\n        return new ArrayValue(result);\n    };\n    UserDataConverter.prototype.parseObject = function (obj, context) {\n        var _this = this;\n        var result = new SortedMap(primitiveComparator);\n        objUtils.forEach(obj, function (key, val) {\n            var parsedValue = _this.parseData(val, context.childContextForField(key));\n            if (parsedValue != null) {\n                result = result.insert(key, parsedValue);\n            }\n        });\n        return new ObjectValue(result);\n    };\n    /**\n     * Helper to parse a scalar value (i.e. not an Object or Array)\n     *\n     * @return The parsed value, or null if the value was a FieldValue sentinel\n     * that should not be included in the resulting parsed data.\n     */\n    UserDataConverter.prototype.parseScalarValue = function (value, context) {\n        if (value === null) {\n            return NullValue.INSTANCE;\n        }\n        else if (typeof value === 'number') {\n            if (typeUtils.isSafeInteger(value)) {\n                return new IntegerValue(value);\n            }\n            else {\n                return new DoubleValue(value);\n            }\n        }\n        else if (typeof value === 'boolean') {\n            return BooleanValue.of(value);\n        }\n        else if (typeof value === 'string') {\n            return new StringValue(value);\n        }\n        else if (value instanceof Date) {\n            return new TimestampValue(Timestamp.fromDate(value));\n        }\n        else if (value instanceof GeoPoint) {\n            return new GeoPointValue(value);\n        }\n        else if (value instanceof Blob) {\n            return new BlobValue(value);\n        }\n        else if (value instanceof DocumentKeyReference) {\n            return new RefValue(value.databaseId, value.key);\n        }\n        else if (value instanceof FieldValueImpl) {\n            if (value instanceof DeleteFieldValueImpl) {\n                // We shouldn't encounter delete sentinels here. Provide a good error.\n                if (context.dataSource !== UserDataSource.Update) {\n                    throw context.createError('FieldValue.delete() can only be used with update()');\n                }\n                else {\n                    assert(context.path == null || context.path.length > 0, 'FieldValue.delete() at the top level should have already' +\n                        ' been handled.');\n                    throw context.createError('FieldValue.delete() can only appear at the top level ' +\n                        'of your update data');\n                }\n            }\n            else if (value instanceof ServerTimestampFieldValueImpl) {\n                if (context.dataSource !== UserDataSource.Set &&\n                    context.dataSource !== UserDataSource.Update) {\n                    throw context.createError('FieldValue.serverTimestamp() can only be used with set()' +\n                        ' and update()');\n                }\n                if (context.path === null) {\n                    throw context.createError('FieldValue.serverTimestamp() is not currently' +\n                        ' supported inside arrays');\n                }\n                context.fieldTransforms.push(new FieldTransform(context.path, ServerTimestampTransform.instance));\n                // Return null so this value is omitted from the parsed result.\n                return null;\n            }\n            else {\n                return fail('Unknown FieldValue type: ' + value);\n            }\n        }\n        else {\n            throw context.createError(\"Unsupported field value: \" + valueDescription(value));\n        }\n    };\n    return UserDataConverter;\n}());\nexport { UserDataConverter };\n/**\n * Checks whether an object looks like a JSON object that should be converted\n * into a struct. Normal class/prototype instances are considered to look like\n * JSON objects since they should be converted to a struct value. Arrays, Dates,\n * GeoPoints, etc. are not considered to look like JSON objects since they map\n * to specific FieldValue types other than ObjectValue.\n */\nfunction looksLikeJsonObject(input) {\n    return (typeof input === 'object' &&\n        input !== null &&\n        !(input instanceof Array) &&\n        !(input instanceof Date) &&\n        !(input instanceof GeoPoint) &&\n        !(input instanceof Blob) &&\n        !(input instanceof DocumentKeyReference) &&\n        !(input instanceof FieldValueImpl));\n}\nfunction validatePlainObject(message, context, input) {\n    if (!looksLikeJsonObject(input) || !isPlainObject(input)) {\n        var description = valueDescription(input);\n        if (description === 'an object') {\n            // Massage the error if it was an object.\n            throw context.createError(message + ' a custom object');\n        }\n        else {\n            throw context.createError(message + ' ' + description);\n        }\n    }\n}\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */\nexport function fieldPathFromArgument(methodName, path) {\n    if (path instanceof ExternalFieldPath) {\n        return path._internalPath;\n    }\n    else if (typeof path === 'string') {\n        return fieldPathFromDotSeparatedString(methodName, path);\n    }\n    else {\n        var message = 'Field path arguments must be of type string or FieldPath.';\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + methodName + \"() called with invalid data. \" + message);\n    }\n}\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName The publicly visible method name\n * @param path The dot-separated string form of a field path which will be split\n * on dots.\n */\nfunction fieldPathFromDotSeparatedString(methodName, path) {\n    try {\n        return fromDotSeparatedString(path)._internalPath;\n    }\n    catch (e) {\n        var message = errorMessage(e);\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + methodName + \"() called with invalid data. \" + message);\n    }\n}\n/**\n * Extracts the message from a caught exception, which should be an Error object\n * though JS doesn't guarantee that.\n */\nfunction errorMessage(error) {\n    return error instanceof Error ? error.message : error.toString();\n}\n\n//# sourceMappingURL=user_data_converter.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/user_data_converter.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { FieldPath as ExternalFieldPath } from './field_path';\nimport { DatabaseId, DatabaseInfo } from '../core/database_info';\nimport { FirestoreClient } from '../core/firestore_client';\nimport { Bound, Direction, fieldFilter, OrderBy, Query as InternalQuery, RelationFilter, RelationOp } from '../core/query';\nimport { ChangeType } from '../core/view_snapshot';\nimport { NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { ArrayValue, ObjectValue, RefValue } from '../model/field_value';\nimport { DeleteMutation, Precondition } from '../model/mutation';\nimport { ResourcePath } from '../model/path';\nimport { PlatformSupport } from '../platform/platform';\nimport { makeConstructorPrivate } from '../util/api';\nimport { assert, fail } from '../util/assert';\nimport { AsyncObserver } from '../util/async_observer';\nimport { AsyncQueue } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport { invalidClassError, validateArgType, validateAtLeastNumberOfArgs, validateBetweenNumberOfArgs, validateDefined, validateExactNumberOfArgs, validateNamedOptionalType, validateNamedType, validateOptionalArgType, validateOptionNames, valueDescription } from '../util/input_validation';\nimport * as log from '../util/log';\nimport { LogLevel } from '../util/log';\nimport { AutoId } from '../util/misc';\nimport * as objUtils from '../util/obj';\nimport { EmptyCredentialsProvider, FirebaseCredentialsProvider, makeCredentialsProvider } from './credentials';\nimport { isPartialObserver } from './observer';\nimport { DocumentKeyReference, fieldPathFromArgument, UserDataConverter } from './user_data_converter';\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n// tslint:disable:strip-private-property-underscore\nvar DEFAULT_HOST = 'firestore.googleapis.com';\nvar DEFAULT_SSL = true;\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied firestore.Settings object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\nvar FirestoreSettings = /** @class */ (function () {\n    function FirestoreSettings(settings) {\n        if (settings.host === undefined) {\n            if (settings.ssl !== undefined) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Can't provide ssl option if host option is not set\");\n            }\n            this.host = DEFAULT_HOST;\n            this.ssl = DEFAULT_SSL;\n        }\n        else {\n            validateNamedType('settings', 'string', 'host', settings.host);\n            this.host = settings.host;\n            validateNamedOptionalType('settings', 'boolean', 'ssl', settings.ssl);\n            this.ssl = objUtils.defaulted(settings.ssl, DEFAULT_SSL);\n        }\n        validateOptionNames('settings', settings, ['host', 'ssl', 'credentials']);\n        validateNamedOptionalType('settings', 'object', 'credentials', settings.credentials);\n        this.credentials = settings.credentials;\n    }\n    FirestoreSettings.prototype.equals = function (other) {\n        return (this.host === other.host &&\n            this.ssl === other.ssl &&\n            this.credentials === other.credentials);\n    };\n    return FirestoreSettings;\n}());\nvar FirestoreConfig = /** @class */ (function () {\n    function FirestoreConfig() {\n    }\n    return FirestoreConfig;\n}());\n/**\n * The root reference to the database.\n */\nvar Firestore = /** @class */ (function () {\n    function Firestore(databaseIdOrApp) {\n        var _this = this;\n        this.INTERNAL = {\n            delete: function () {\n                if (_this._firestoreClient) {\n                    return _this._firestoreClient.shutdown();\n                }\n                else {\n                    return Promise.resolve();\n                }\n            },\n            // Exposed via INTERNAL for use in tests.\n            disableNetwork: function () { return _this._firestoreClient.disableNetwork(); },\n            enableNetwork: function () { return _this._firestoreClient.enableNetwork(); }\n        };\n        var config = new FirestoreConfig();\n        if (typeof databaseIdOrApp.options === 'object') {\n            // This is very likely a Firebase app object\n            // TODO(b/34177605): Can we somehow use instanceof?\n            var app = databaseIdOrApp;\n            config.firebaseApp = app;\n            config.databaseId = Firestore.databaseIdFromApp(app);\n            config.persistenceKey = config.firebaseApp.name;\n            config.credentials = new FirebaseCredentialsProvider(app);\n        }\n        else {\n            var external_1 = databaseIdOrApp;\n            if (!external_1.projectId) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide projectId');\n            }\n            config.databaseId = new DatabaseId(external_1.projectId, external_1.database);\n            // Use a default persistenceKey that lines up with FirebaseApp.\n            config.persistenceKey = '[DEFAULT]';\n            config.credentials = new EmptyCredentialsProvider();\n        }\n        config.settings = new FirestoreSettings({});\n        this._config = config;\n        this._databaseId = config.databaseId;\n    }\n    Firestore.prototype.settings = function (settingsLiteral) {\n        validateExactNumberOfArgs('Firestore.settings', arguments, 1);\n        validateArgType('Firestore.settings', 'object', 1, settingsLiteral);\n        if (objUtils.contains(settingsLiteral, 'persistence')) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, '\"persistence\" is now specified with a separate call to ' +\n                'firestore.enablePersistence().');\n        }\n        var newSettings = new FirestoreSettings(settingsLiteral);\n        if (this._firestoreClient && !this._config.settings.equals(newSettings)) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and its settings can no longer ' +\n                'be changed. You can only call settings() before calling any other ' +\n                'methods on a Firestore object.');\n        }\n        this._config.settings = newSettings;\n        if (newSettings.credentials !== undefined) {\n            this._config.credentials = makeCredentialsProvider(newSettings.credentials);\n        }\n    };\n    Firestore.prototype.enablePersistence = function () {\n        if (this._firestoreClient) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and persistence can no longer ' +\n                'be enabled. You can only call enablePersistence() before calling ' +\n                'any other methods on a Firestore object.');\n        }\n        return this.configureClient(/* persistence= */ true);\n    };\n    Firestore.prototype.ensureClientConfigured = function () {\n        if (!this._firestoreClient) {\n            this.configureClient(/* persistence= */ false);\n        }\n        return this._firestoreClient;\n    };\n    Firestore.prototype.configureClient = function (persistence) {\n        var _this = this;\n        assert(!!this._config.settings.host, 'FirestoreSettings.host cannot be falsey');\n        assert(!this._firestoreClient, 'configureClient() called multiple times');\n        var databaseInfo = new DatabaseInfo(this._config.databaseId, this._config.persistenceKey, this._config.settings.host, this._config.settings.ssl);\n        var preConverter = function (value) {\n            if (value instanceof DocumentReference) {\n                var thisDb = _this._config.databaseId;\n                var otherDb = value.firestore._config.databaseId;\n                if (!otherDb.equals(thisDb)) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Document reference is for database ' +\n                        (otherDb.projectId + \"/\" + otherDb.database + \" but should be \") +\n                        (\"for database \" + thisDb.projectId + \"/\" + thisDb.database));\n                }\n                return new DocumentKeyReference(_this._config.databaseId, value._key);\n            }\n            else {\n                return value;\n            }\n        };\n        this._dataConverter = new UserDataConverter(preConverter);\n        this._firestoreClient = new FirestoreClient(PlatformSupport.getPlatform(), databaseInfo, this._config.credentials, new AsyncQueue());\n        return this._firestoreClient.start(persistence);\n    };\n    Firestore.databaseIdFromApp = function (app) {\n        var options = app.options;\n        if (!objUtils.contains(options, 'projectId')) {\n            // TODO(b/62673263): We can safely remove the special handling of\n            // 'firestoreId' once alpha testers have upgraded.\n            if (objUtils.contains(options, 'firestoreId')) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, '\"firestoreId\" is now specified as \"projectId\" in ' +\n                    'firebase.initializeApp.');\n            }\n            throw new FirestoreError(Code.INVALID_ARGUMENT, '\"projectId\" not provided in firebase.initializeApp.');\n        }\n        if (objUtils.contains(options, 'firestoreOptions')) {\n            // TODO(b/62673263): We can safely remove the special handling of\n            // 'firestoreOptions' once alpha testers have upgraded.\n            throw new FirestoreError(Code.INVALID_ARGUMENT, '\"firestoreOptions\" values are now specified with ' +\n                'Firestore.settings()');\n        }\n        var projectId = options['projectId'];\n        if (!projectId || typeof projectId !== 'string') {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'projectId must be a string in FirebaseApp.options');\n        }\n        return new DatabaseId(projectId);\n    };\n    Object.defineProperty(Firestore.prototype, \"app\", {\n        get: function () {\n            if (!this._config.firebaseApp) {\n                throw new FirestoreError(Code.FAILED_PRECONDITION, \"Firestore was not initialized using the Firebase SDK. 'app' is \" +\n                    'not available');\n            }\n            return this._config.firebaseApp;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Firestore.prototype.collection = function (pathString) {\n        validateExactNumberOfArgs('Firestore.collection', arguments, 1);\n        validateArgType('Firestore.collection', 'string', 1, pathString);\n        if (!pathString) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty collection path to collection()');\n        }\n        this.ensureClientConfigured();\n        return new CollectionReference(ResourcePath.fromString(pathString), this);\n    };\n    Firestore.prototype.doc = function (pathString) {\n        validateExactNumberOfArgs('Firestore.doc', arguments, 1);\n        validateArgType('Firestore.doc', 'string', 1, pathString);\n        if (!pathString) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty document path to doc()');\n        }\n        this.ensureClientConfigured();\n        return DocumentReference.forPath(ResourcePath.fromString(pathString), this);\n    };\n    Firestore.prototype.runTransaction = function (updateFunction) {\n        var _this = this;\n        validateExactNumberOfArgs('Firestore.runTransaction', arguments, 1);\n        validateArgType('Firestore.runTransaction', 'function', 1, updateFunction);\n        return this.ensureClientConfigured().transaction(function (transaction) {\n            return updateFunction(new Transaction(_this, transaction));\n        });\n    };\n    Firestore.prototype.batch = function () {\n        this.ensureClientConfigured();\n        return new WriteBatch(this);\n    };\n    Object.defineProperty(Firestore, \"logLevel\", {\n        get: function () {\n            switch (log.getLogLevel()) {\n                case LogLevel.DEBUG:\n                    return 'debug';\n                case LogLevel.ERROR:\n                    return 'error';\n                case LogLevel.SILENT:\n                    return 'silent';\n                default:\n                    return fail('Unknown log level: ' + log.getLogLevel());\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Firestore.setLogLevel = function (level) {\n        validateExactNumberOfArgs('Firestore.setLogLevel', arguments, 1);\n        validateArgType('Firestore.setLogLevel', 'string', 1, level);\n        switch (level) {\n            case 'debug':\n                log.setLogLevel(log.LogLevel.DEBUG);\n                break;\n            case 'error':\n                log.setLogLevel(log.LogLevel.ERROR);\n                break;\n            case 'silent':\n                log.setLogLevel(log.LogLevel.SILENT);\n                break;\n            default:\n                throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid log level: ' + level);\n        }\n    };\n    return Firestore;\n}());\nexport { Firestore };\n/**\n * A reference to a transaction.\n */\nvar Transaction = /** @class */ (function () {\n    function Transaction(_firestore, _transaction) {\n        this._firestore = _firestore;\n        this._transaction = _transaction;\n    }\n    Transaction.prototype.get = function (documentRef) {\n        var _this = this;\n        validateExactNumberOfArgs('Transaction.get', arguments, 1);\n        var ref = validateReference('Transaction.get', documentRef, this._firestore);\n        return this._transaction\n            .lookup([ref._key])\n            .then(function (docs) {\n            if (!docs || docs.length !== 1) {\n                return fail('Mismatch in docs returned from document lookup.');\n            }\n            var doc = docs[0];\n            if (doc instanceof NoDocument) {\n                return new DocumentSnapshot(_this._firestore, ref._key, null, false);\n            }\n            return new DocumentSnapshot(_this._firestore, ref._key, doc, false);\n        });\n    };\n    Transaction.prototype.set = function (documentRef, value, options) {\n        validateBetweenNumberOfArgs('Transaction.set', arguments, 2, 3);\n        var ref = validateReference('Transaction.set', documentRef, this._firestore);\n        options = validateSetOptions('Transaction.set', options);\n        var parsed = this._firestore._dataConverter.parseSetData('Transaction.set', value, options);\n        this._transaction.set(ref._key, parsed);\n        return this;\n    };\n    Transaction.prototype.update = function (documentRef, fieldOrUpdateData, value) {\n        var moreFieldsAndValues = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            moreFieldsAndValues[_i - 3] = arguments[_i];\n        }\n        var ref;\n        var parsed;\n        if (typeof fieldOrUpdateData === 'string' ||\n            fieldOrUpdateData instanceof ExternalFieldPath) {\n            validateAtLeastNumberOfArgs('Transaction.update', arguments, 3);\n            ref = validateReference('Transaction.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateVarargs('Transaction.update', fieldOrUpdateData, value, moreFieldsAndValues);\n        }\n        else {\n            validateExactNumberOfArgs('Transaction.update', arguments, 2);\n            ref = validateReference('Transaction.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateData('Transaction.update', fieldOrUpdateData);\n        }\n        this._transaction.update(ref._key, parsed);\n        return this;\n    };\n    Transaction.prototype.delete = function (documentRef) {\n        validateExactNumberOfArgs('Transaction.delete', arguments, 1);\n        var ref = validateReference('Transaction.delete', documentRef, this._firestore);\n        this._transaction.delete(ref._key);\n        return this;\n    };\n    return Transaction;\n}());\nexport { Transaction };\nvar WriteBatch = /** @class */ (function () {\n    function WriteBatch(_firestore) {\n        this._firestore = _firestore;\n        this._mutations = [];\n        this._committed = false;\n    }\n    WriteBatch.prototype.set = function (documentRef, value, options) {\n        validateBetweenNumberOfArgs('WriteBatch.set', arguments, 2, 3);\n        this.verifyNotCommitted();\n        var ref = validateReference('WriteBatch.set', documentRef, this._firestore);\n        options = validateSetOptions('WriteBatch.set', options);\n        var parsed = this._firestore._dataConverter.parseSetData('WriteBatch.set', value, options);\n        this._mutations = this._mutations.concat(parsed.toMutations(ref._key, Precondition.NONE));\n        return this;\n    };\n    WriteBatch.prototype.update = function (documentRef, fieldOrUpdateData, value) {\n        var moreFieldsAndValues = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            moreFieldsAndValues[_i - 3] = arguments[_i];\n        }\n        this.verifyNotCommitted();\n        var ref;\n        var parsed;\n        if (typeof fieldOrUpdateData === 'string' ||\n            fieldOrUpdateData instanceof ExternalFieldPath) {\n            validateAtLeastNumberOfArgs('WriteBatch.update', arguments, 3);\n            ref = validateReference('WriteBatch.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateVarargs('WriteBatch.update', fieldOrUpdateData, value, moreFieldsAndValues);\n        }\n        else {\n            validateExactNumberOfArgs('WriteBatch.update', arguments, 2);\n            ref = validateReference('WriteBatch.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateData('WriteBatch.update', fieldOrUpdateData);\n        }\n        this._mutations = this._mutations.concat(parsed.toMutations(ref._key, Precondition.exists(true)));\n        return this;\n    };\n    WriteBatch.prototype.delete = function (documentRef) {\n        validateExactNumberOfArgs('WriteBatch.delete', arguments, 1);\n        this.verifyNotCommitted();\n        var ref = validateReference('WriteBatch.delete', documentRef, this._firestore);\n        this._mutations = this._mutations.concat(new DeleteMutation(ref._key, Precondition.NONE));\n        return this;\n    };\n    WriteBatch.prototype.commit = function () {\n        this.verifyNotCommitted();\n        this._committed = true;\n        if (this._mutations.length > 0) {\n            return this._firestore.ensureClientConfigured().write(this._mutations);\n        }\n        else {\n            return Promise.resolve();\n        }\n    };\n    WriteBatch.prototype.verifyNotCommitted = function () {\n        if (this._committed) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'A write batch can no longer be used after commit() ' +\n                'has been called.');\n        }\n    };\n    return WriteBatch;\n}());\nexport { WriteBatch };\n/**\n * A reference to a particular document in a collection in the database.\n */\nvar DocumentReference = /** @class */ (function () {\n    function DocumentReference(_key, firestore) {\n        this._key = _key;\n        this.firestore = firestore;\n        this._firestoreClient = this.firestore.ensureClientConfigured();\n    }\n    DocumentReference.forPath = function (path, firestore) {\n        if (path.length % 2 !== 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid document reference. Document ' +\n                'references must have an even number of segments, but ' +\n                (path.canonicalString() + \" has \" + path.length));\n        }\n        return new DocumentReference(new DocumentKey(path), firestore);\n    };\n    Object.defineProperty(DocumentReference.prototype, \"id\", {\n        get: function () {\n            return this._key.path.lastSegment();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentReference.prototype, \"parent\", {\n        get: function () {\n            return new CollectionReference(this._key.path.popLast(), this.firestore);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentReference.prototype, \"path\", {\n        get: function () {\n            return this._key.path.canonicalString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DocumentReference.prototype.collection = function (pathString) {\n        validateExactNumberOfArgs('DocumentReference.collection', arguments, 1);\n        validateArgType('DocumentReference.collection', 'string', 1, pathString);\n        if (!pathString) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty collection name to collection()');\n        }\n        var path = ResourcePath.fromString(pathString);\n        return new CollectionReference(this._key.path.child(path), this.firestore);\n    };\n    DocumentReference.prototype.isEqual = function (other) {\n        if (!(other instanceof DocumentReference)) {\n            throw invalidClassError('isEqual', 'DocumentReference', 1, other);\n        }\n        return this.firestore === other.firestore && this._key.equals(other._key);\n    };\n    DocumentReference.prototype.set = function (value, options) {\n        validateBetweenNumberOfArgs('DocumentReference.set', arguments, 1, 2);\n        options = validateSetOptions('DocumentReference.set', options);\n        var parsed = this.firestore._dataConverter.parseSetData('DocumentReference.set', value, options);\n        return this._firestoreClient.write(parsed.toMutations(this._key, Precondition.NONE));\n    };\n    DocumentReference.prototype.update = function (fieldOrUpdateData, value) {\n        var moreFieldsAndValues = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            moreFieldsAndValues[_i - 2] = arguments[_i];\n        }\n        var parsed;\n        if (typeof fieldOrUpdateData === 'string' ||\n            fieldOrUpdateData instanceof ExternalFieldPath) {\n            validateAtLeastNumberOfArgs('DocumentReference.update', arguments, 2);\n            parsed = this.firestore._dataConverter.parseUpdateVarargs('DocumentReference.update', fieldOrUpdateData, value, moreFieldsAndValues);\n        }\n        else {\n            validateExactNumberOfArgs('DocumentReference.update', arguments, 1);\n            parsed = this.firestore._dataConverter.parseUpdateData('DocumentReference.update', fieldOrUpdateData);\n        }\n        return this._firestoreClient.write(parsed.toMutations(this._key, Precondition.exists(true)));\n    };\n    DocumentReference.prototype.delete = function () {\n        validateExactNumberOfArgs('DocumentReference.delete', arguments, 0);\n        return this._firestoreClient.write([\n            new DeleteMutation(this._key, Precondition.NONE)\n        ]);\n    };\n    DocumentReference.prototype.onSnapshot = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        validateBetweenNumberOfArgs('DocumentReference.onSnapshot', arguments, 1, 4);\n        var options = {\n            includeMetadataChanges: false\n        };\n        var observer;\n        var currArg = 0;\n        if (typeof args[currArg] === 'object' &&\n            !isPartialObserver(args[currArg])) {\n            options = args[currArg];\n            validateOptionNames('DocumentReference.onSnapshot', options, [\n                'includeMetadataChanges'\n            ]);\n            validateNamedOptionalType('DocumentReference.onSnapshot', 'boolean', 'includeMetadataChanges', options.includeMetadataChanges);\n            currArg++;\n        }\n        var internalOptions = {\n            includeDocumentMetadataChanges: options.includeMetadataChanges,\n            includeQueryMetadataChanges: options.includeMetadataChanges\n        };\n        if (isPartialObserver(args[currArg])) {\n            observer = args[currArg];\n        }\n        else {\n            validateArgType('DocumentReference.onSnapshot', 'function', currArg, args[currArg]);\n            validateOptionalArgType('DocumentReference.onSnapshot', 'function', currArg + 1, args[currArg + 1]);\n            validateOptionalArgType('DocumentReference.onSnapshot', 'function', currArg + 2, args[currArg + 2]);\n            observer = {\n                next: args[currArg],\n                error: args[currArg + 1],\n                complete: args[currArg + 2]\n            };\n        }\n        return this.onSnapshotInternal(internalOptions, observer);\n    };\n    DocumentReference.prototype.onSnapshotInternal = function (options, observer) {\n        var _this = this;\n        var errHandler = function (err) {\n            console.error('Uncaught Error in onSnapshot:', err);\n        };\n        if (observer.error) {\n            errHandler = observer.error.bind(observer);\n        }\n        var asyncObserver = new AsyncObserver({\n            next: function (snapshot) {\n                if (observer.next) {\n                    assert(snapshot.docs.size <= 1, 'Too many documents returned on a document query');\n                    var doc = snapshot.docs.get(_this._key);\n                    observer.next(new DocumentSnapshot(_this.firestore, _this._key, doc, snapshot.fromCache));\n                }\n            },\n            error: errHandler\n        });\n        var internalListener = this._firestoreClient.listen(InternalQuery.atPath(this._key.path), asyncObserver, options);\n        return function () {\n            asyncObserver.mute();\n            _this._firestoreClient.unlisten(internalListener);\n        };\n    };\n    DocumentReference.prototype.get = function () {\n        var _this = this;\n        validateExactNumberOfArgs('DocumentReference.get', arguments, 0);\n        return new Promise(function (resolve, reject) {\n            var unlisten = _this.onSnapshotInternal({\n                includeQueryMetadataChanges: true,\n                includeDocumentMetadataChanges: true,\n                waitForSyncWhenOnline: true\n            }, {\n                next: function (snap) {\n                    // Remove query first before passing event to user to avoid\n                    // user actions affecting the now stale query.\n                    unlisten();\n                    if (!snap.exists && snap.metadata.fromCache) {\n                        // TODO(dimond): If we're online and the document doesn't\n                        // exist then we resolve with a doc.exists set to false. If\n                        // we're offline however, we reject the Promise in this\n                        // case. Two options: 1) Cache the negative response from\n                        // the server so we can deliver that even when you're\n                        // offline 2) Actually reject the Promise in the online case\n                        // if the document doesn't exist.\n                        reject(new FirestoreError(Code.ABORTED, 'Failed to get document because the client is ' + 'offline.'));\n                    }\n                    else {\n                        resolve(snap);\n                    }\n                },\n                error: reject\n            });\n        });\n    };\n    return DocumentReference;\n}());\nexport { DocumentReference };\nvar DocumentSnapshot = /** @class */ (function () {\n    function DocumentSnapshot(_firestore, _key, _document, _fromCache) {\n        this._firestore = _firestore;\n        this._key = _key;\n        this._document = _document;\n        this._fromCache = _fromCache;\n    }\n    DocumentSnapshot.prototype.data = function () {\n        validateExactNumberOfArgs('DocumentSnapshot.data', arguments, 0);\n        if (!this._document) {\n            throw new FirestoreError(Code.NOT_FOUND, \"This document doesn't exist. Check doc.exists to make sure \" +\n                'the document exists before calling doc.data().');\n        }\n        return this.convertObject(this._document.data);\n    };\n    DocumentSnapshot.prototype.get = function (fieldPath) {\n        validateExactNumberOfArgs('DocumentSnapshot.get', arguments, 1);\n        if (!this._document) {\n            throw new FirestoreError(Code.NOT_FOUND, \"This document doesn't exist. Check doc.exists to make sure \" +\n                'the document exists before calling doc.get().');\n        }\n        var value = this._document.data.field(fieldPathFromArgument('DocumentSnapshot.get', fieldPath));\n        return value === undefined ? undefined : this.convertValue(value);\n    };\n    Object.defineProperty(DocumentSnapshot.prototype, \"id\", {\n        get: function () {\n            return this._key.path.lastSegment();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentSnapshot.prototype, \"ref\", {\n        get: function () {\n            return new DocumentReference(this._key, this._firestore);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentSnapshot.prototype, \"exists\", {\n        get: function () {\n            return this._document !== null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentSnapshot.prototype, \"metadata\", {\n        get: function () {\n            return {\n                hasPendingWrites: this._document !== null && this._document.hasLocalMutations,\n                fromCache: this._fromCache\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DocumentSnapshot.prototype.convertObject = function (data) {\n        var _this = this;\n        var result = {};\n        data.forEach(function (key, value) {\n            result[key] = _this.convertValue(value);\n        });\n        return result;\n    };\n    DocumentSnapshot.prototype.convertValue = function (value) {\n        if (value instanceof ObjectValue) {\n            return this.convertObject(value);\n        }\n        else if (value instanceof ArrayValue) {\n            return this.convertArray(value);\n        }\n        else if (value instanceof RefValue) {\n            var key = value.value();\n            var database = this._firestore.ensureClientConfigured().databaseId();\n            if (!value.databaseId.equals(database)) {\n                // TODO(b/64130202): Somehow support foreign references.\n                log.error(\"Document \" + this._key.path + \" contains a document \" +\n                    \"reference within a different database (\" +\n                    (value.databaseId.projectId + \"/\" + value.databaseId\n                        .database + \") which is not \") +\n                    \"supported. It will be treated as a reference in the current \" +\n                    (\"database (\" + database.projectId + \"/\" + database.database + \") \") +\n                    \"instead.\");\n            }\n            return new DocumentReference(key, this._firestore);\n        }\n        else {\n            return value.value();\n        }\n    };\n    DocumentSnapshot.prototype.convertArray = function (data) {\n        var _this = this;\n        return data.internalValue.map(function (value) {\n            return _this.convertValue(value);\n        });\n    };\n    return DocumentSnapshot;\n}());\nexport { DocumentSnapshot };\nvar Query = /** @class */ (function () {\n    function Query(_query, firestore) {\n        this._query = _query;\n        this.firestore = firestore;\n    }\n    Query.prototype.where = function (field, opStr, value) {\n        validateExactNumberOfArgs('Query.where', arguments, 3);\n        validateArgType('Query.where', 'string', 2, opStr);\n        validateDefined('Query.where', 3, value);\n        var fieldValue;\n        var fieldPath = fieldPathFromArgument('Query.where', field);\n        if (fieldPath.isKeyField()) {\n            if (typeof value === 'string') {\n                if (value.indexOf('/') !== -1) {\n                    // TODO(dimond): Allow slashes once ancestor queries are supported\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Function Query.where() requires its third parameter to be a ' +\n                        'valid document ID if the first parameter is ' +\n                        'FieldPath.documentId(), but it contains a slash.');\n                }\n                if (value === '') {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Function Query.where() requires its third parameter to be a ' +\n                        'valid document ID if the first parameter is ' +\n                        'FieldPath.documentId(), but it was an empty string.');\n                }\n                var path = this._query.path.child(new ResourcePath([value]));\n                assert(path.length % 2 === 0, 'Path should be a document key');\n                fieldValue = new RefValue(this.firestore._databaseId, new DocumentKey(path));\n            }\n            else if (value instanceof DocumentReference) {\n                var ref = value;\n                fieldValue = new RefValue(this.firestore._databaseId, ref._key);\n            }\n            else {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function Query.where() requires its third parameter to be a \" +\n                    \"string or a DocumentReference if the first parameter is \" +\n                    \"FieldPath.documentId(), but it was: \" +\n                    (valueDescription(value) + \".\"));\n            }\n        }\n        else {\n            fieldValue = this.firestore._dataConverter.parseQueryValue('Query.where', value);\n        }\n        var filter = fieldFilter(fieldPath, RelationOp.fromString(opStr), fieldValue);\n        this.validateNewFilter(filter);\n        return new Query(this._query.addFilter(filter), this.firestore);\n    };\n    Query.prototype.orderBy = function (field, directionStr) {\n        validateBetweenNumberOfArgs('Query.orderBy', arguments, 1, 2);\n        validateOptionalArgType('Query.orderBy', 'string', 2, directionStr);\n        var direction;\n        if (directionStr === undefined || directionStr === 'asc') {\n            direction = Direction.ASCENDING;\n        }\n        else if (directionStr === 'desc') {\n            direction = Direction.DESCENDING;\n        }\n        else {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function Query.orderBy() has unknown direction '\" + directionStr + \"', \" +\n                \"expected 'asc' or 'desc'.\");\n        }\n        if (this._query.startAt !== null) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call Query.startAt() or ' +\n                'Query.startAfter() before calling Query.orderBy().');\n        }\n        if (this._query.endAt !== null) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call Query.endAt() or ' +\n                'Query.endBefore() before calling Query.orderBy().');\n        }\n        var fieldPath = fieldPathFromArgument('Query.orderBy', field);\n        var orderBy = new OrderBy(fieldPath, direction);\n        this.validateNewOrderBy(orderBy);\n        return new Query(this._query.addOrderBy(orderBy), this.firestore);\n    };\n    Query.prototype.limit = function (n) {\n        validateExactNumberOfArgs('Query.limit', arguments, 1);\n        validateArgType('Query.limit', 'number', 1, n);\n        if (n <= 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid Query. Query limit (\" + n + \") is invalid. Limit must be \" +\n                'positive.');\n        }\n        return new Query(this._query.withLimit(n), this.firestore);\n    };\n    Query.prototype.startAt = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.startAt', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.startAt', docOrField, fields, \n        /*before=*/ true);\n        return new Query(this._query.withStartAt(bound), this.firestore);\n    };\n    Query.prototype.startAfter = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.startAfter', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.startAfter', docOrField, fields, \n        /*before=*/ false);\n        return new Query(this._query.withStartAt(bound), this.firestore);\n    };\n    Query.prototype.endBefore = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.endBefore', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.endBefore', docOrField, fields, \n        /*before=*/ true);\n        return new Query(this._query.withEndAt(bound), this.firestore);\n    };\n    Query.prototype.endAt = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.endAt', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.endAt', docOrField, fields, \n        /*before=*/ false);\n        return new Query(this._query.withEndAt(bound), this.firestore);\n    };\n    Query.prototype.isEqual = function (other) {\n        if (!(other instanceof Query)) {\n            throw invalidClassError('isEqual', 'Query', 1, other);\n        }\n        return (this.firestore === other.firestore && this._query.equals(other._query));\n    };\n    /** Helper function to create a bound from a document or fields */\n    Query.prototype.boundFromDocOrFields = function (methodName, docOrField, fields, before) {\n        validateDefined(methodName, 1, docOrField);\n        if (docOrField instanceof DocumentSnapshot) {\n            if (fields.length > 0) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Too many arguments provided to \" + methodName + \"().\");\n            }\n            var snap = docOrField;\n            if (!snap.exists) {\n                throw new FirestoreError(Code.NOT_FOUND, \"Can't use a DocumentSnapshot that doesn't exist for \" +\n                    (methodName + \"().\"));\n            }\n            return this.boundFromDocument(methodName, snap._document, before);\n        }\n        else {\n            var allFields = [docOrField].concat(fields);\n            return this.boundFromFields(methodName, allFields, before);\n        }\n    };\n    /**\n     * Create a Bound from a query and a document.\n     *\n     * Note that the Bound will always include the key of the document\n     * and so only the provided document will compare equal to the returned\n     * position.\n     *\n     * Will throw if the document does not contain all fields of the order by\n     * of the query.\n     */\n    Query.prototype.boundFromDocument = function (methodName, doc, before) {\n        var components = [];\n        // Because people expect to continue/end a query at the exact document\n        // provided, we need to use the implicit sort order rather than the explicit\n        // sort order, because it's guaranteed to contain the document key. That way\n        // the position becomes unambiguous and the query continues/ends exactly at\n        // the provided document. Without the key (by using the explicit sort\n        // orders), multiple documents could match the position, yielding duplicate\n        // results.\n        for (var _i = 0, _a = this._query.orderBy; _i < _a.length; _i++) {\n            var orderBy = _a[_i];\n            if (orderBy.field.isKeyField()) {\n                components.push(new RefValue(this.firestore._databaseId, doc.key));\n            }\n            else {\n                var value = doc.field(orderBy.field);\n                if (value !== undefined) {\n                    components.push(value);\n                }\n                else {\n                    var field = orderBy.field.canonicalString();\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. You are trying to start or end a query using a \" +\n                        (\"document for which the field '\" + field + \"' (used as the \") +\n                        \"orderBy) does not exist.\");\n                }\n            }\n        }\n        return new Bound(components, before);\n    };\n    /**\n     * Converts a list of field values to a Bound for the given query.\n     */\n    Query.prototype.boundFromFields = function (methodName, values, before) {\n        // Use explicit order by's because it has to match the query the user made\n        var orderBy = this._query.explicitOrderBy;\n        if (values.length > orderBy.length) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Too many arguments provided to \" + methodName + \"(). \" +\n                \"The number of arguments must be less than or equal to the \" +\n                \"number of Query.orderBy() clauses\");\n        }\n        var components = [];\n        for (var i = 0; i < values.length; i++) {\n            var rawValue = values[i];\n            var orderByComponent = orderBy[i];\n            if (orderByComponent.field.isKeyField()) {\n                if (typeof rawValue !== 'string') {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. Expected a string for document ID in \" +\n                        (methodName + \"(), but got a \" + typeof rawValue));\n                }\n                if (rawValue.indexOf('/') !== -1) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. Document ID '\" + rawValue + \"' contains a slash in \" +\n                        (methodName + \"()\"));\n                }\n                var key = new DocumentKey(this._query.path.child(rawValue));\n                components.push(new RefValue(this.firestore._databaseId, key));\n            }\n            else {\n                var wrapped = this.firestore._dataConverter.parseQueryValue(methodName, rawValue);\n                components.push(wrapped);\n            }\n        }\n        return new Bound(components, before);\n    };\n    Query.prototype.onSnapshot = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        validateBetweenNumberOfArgs('Query.onSnapshot', arguments, 1, 4);\n        var options = {};\n        var observer;\n        var currArg = 0;\n        if (typeof args[currArg] === 'object' &&\n            !isPartialObserver(args[currArg])) {\n            options = args[currArg];\n            validateOptionNames('Query.onSnapshot', options, [\n                'includeQueryMetadataChanges',\n                'includeDocumentMetadataChanges'\n            ]);\n            validateNamedOptionalType('Query.onSnapshot', 'boolean', 'includeDocumentMetadataChanges', options.includeDocumentMetadataChanges);\n            validateNamedOptionalType('Query.onSnapshot', 'boolean', 'includeQueryMetadataChanges', options.includeQueryMetadataChanges);\n            currArg++;\n        }\n        if (isPartialObserver(args[currArg])) {\n            observer = args[currArg];\n        }\n        else {\n            validateArgType('Query.onSnapshot', 'function', currArg, args[currArg]);\n            validateOptionalArgType('Query.onSnapshot', 'function', currArg + 1, args[currArg + 1]);\n            validateOptionalArgType('Query.onSnapshot', 'function', currArg + 2, args[currArg + 2]);\n            observer = {\n                next: args[currArg],\n                error: args[currArg + 1],\n                complete: args[currArg + 2]\n            };\n        }\n        return this.onSnapshotInternal(options, observer);\n    };\n    Query.prototype.onSnapshotInternal = function (options, observer) {\n        var _this = this;\n        var errHandler = function (err) {\n            console.error('Uncaught Error in onSnapshot:', err);\n        };\n        if (observer.error) {\n            errHandler = observer.error.bind(observer);\n        }\n        var asyncObserver = new AsyncObserver({\n            next: function (result) {\n                if (observer.next) {\n                    observer.next(new QuerySnapshot(_this.firestore, _this._query, result));\n                }\n            },\n            error: errHandler\n        });\n        var firestoreClient = this.firestore.ensureClientConfigured();\n        var internalListener = firestoreClient.listen(this._query, asyncObserver, options);\n        return function () {\n            asyncObserver.mute();\n            firestoreClient.unlisten(internalListener);\n        };\n    };\n    Query.prototype.get = function () {\n        var _this = this;\n        validateExactNumberOfArgs('Query.get', arguments, 0);\n        return new Promise(function (resolve, reject) {\n            var unlisten = _this.onSnapshotInternal({\n                includeDocumentMetadataChanges: false,\n                includeQueryMetadataChanges: true,\n                waitForSyncWhenOnline: true\n            }, {\n                next: function (result) {\n                    // Remove query first before passing event to user to avoid\n                    // user actions affecting the now stale query.\n                    unlisten();\n                    resolve(result);\n                },\n                error: reject\n            });\n        });\n    };\n    Query.prototype.validateNewFilter = function (filter) {\n        if (filter instanceof RelationFilter && filter.isInequality()) {\n            var existingField = this._query.getInequalityFilterField();\n            if (existingField !== null && !existingField.equals(filter.field)) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. All where filters with an inequality' +\n                    ' (<, <=, >, or >=) must be on the same field. But you have' +\n                    (\" inequality filters on '\" + existingField.toString() + \"'\") +\n                    (\" and '\" + filter.field.toString() + \"'\"));\n            }\n            var firstOrderByField = this._query.getFirstOrderByField();\n            if (firstOrderByField !== null) {\n                this.validateOrderByAndInequalityMatch(filter.field, firstOrderByField);\n            }\n        }\n    };\n    Query.prototype.validateNewOrderBy = function (orderBy) {\n        if (this._query.getFirstOrderByField() === null) {\n            // This is the first order by. It must match any inequality.\n            var inequalityField = this._query.getInequalityFilterField();\n            if (inequalityField !== null) {\n                this.validateOrderByAndInequalityMatch(inequalityField, orderBy.field);\n            }\n        }\n    };\n    Query.prototype.validateOrderByAndInequalityMatch = function (inequality, orderBy) {\n        if (!orderBy.equals(inequality)) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. You have a where filter with an inequality \" +\n                (\"(<, <=, >, or >=) on field '\" + inequality.toString() + \"' \") +\n                (\"and so you must also use '\" + inequality.toString() + \"' \") +\n                \"as your first Query.orderBy(), but your first Query.orderBy() \" +\n                (\"is on field '\" + orderBy.toString() + \"' instead.\"));\n        }\n    };\n    return Query;\n}());\nexport { Query };\nvar QuerySnapshot = /** @class */ (function () {\n    function QuerySnapshot(_firestore, _originalQuery, _snapshot) {\n        this._firestore = _firestore;\n        this._originalQuery = _originalQuery;\n        this._snapshot = _snapshot;\n        this._cachedChanges = null;\n        this.metadata = {\n            fromCache: _snapshot.fromCache,\n            hasPendingWrites: _snapshot.hasPendingWrites\n        };\n    }\n    Object.defineProperty(QuerySnapshot.prototype, \"docs\", {\n        get: function () {\n            var result = [];\n            this.forEach(function (doc) { return result.push(doc); });\n            return result;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuerySnapshot.prototype, \"empty\", {\n        get: function () {\n            return this._snapshot.docs.isEmpty();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuerySnapshot.prototype, \"size\", {\n        get: function () {\n            return this._snapshot.docs.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    QuerySnapshot.prototype.forEach = function (callback, thisArg) {\n        var _this = this;\n        validateBetweenNumberOfArgs('QuerySnapshot.forEach', arguments, 1, 2);\n        validateArgType('QuerySnapshot.forEach', 'function', 1, callback);\n        this._snapshot.docs.forEach(function (doc) {\n            callback.call(thisArg, _this.convertToDocumentImpl(doc));\n        });\n    };\n    Object.defineProperty(QuerySnapshot.prototype, \"query\", {\n        get: function () {\n            return new Query(this._originalQuery, this._firestore);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuerySnapshot.prototype, \"docChanges\", {\n        get: function () {\n            if (!this._cachedChanges) {\n                this._cachedChanges = changesFromSnapshot(this._firestore, this._snapshot);\n            }\n            return this._cachedChanges;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    QuerySnapshot.prototype.convertToDocumentImpl = function (doc) {\n        return new DocumentSnapshot(this._firestore, doc.key, doc, this.metadata.fromCache);\n    };\n    return QuerySnapshot;\n}());\nexport { QuerySnapshot };\nvar CollectionReference = /** @class */ (function (_super) {\n    __extends(CollectionReference, _super);\n    function CollectionReference(path, firestore) {\n        var _this = _super.call(this, InternalQuery.atPath(path), firestore) || this;\n        if (path.length % 2 !== 1) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid collection reference. Collection ' +\n                'references must have an odd number of segments, but ' +\n                (path.canonicalString() + \" has \" + path.length));\n        }\n        return _this;\n    }\n    Object.defineProperty(CollectionReference.prototype, \"id\", {\n        get: function () {\n            return this._query.path.lastSegment();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CollectionReference.prototype, \"parent\", {\n        get: function () {\n            var parentPath = this._query.path.popLast();\n            if (parentPath.isEmpty()) {\n                return null;\n            }\n            else {\n                return new DocumentReference(new DocumentKey(parentPath), this.firestore);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CollectionReference.prototype, \"path\", {\n        get: function () {\n            return this._query.path.canonicalString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CollectionReference.prototype.doc = function (pathString) {\n        validateBetweenNumberOfArgs('CollectionReference.doc', arguments, 0, 1);\n        // We allow omission of 'pathString' but explicitly prohibit passing in both\n        // 'undefined' and 'null'.\n        if (arguments.length === 0) {\n            pathString = AutoId.newId();\n        }\n        validateArgType('CollectionReference.doc', 'string', 1, pathString);\n        if (pathString === '') {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Document path must be a non-empty string');\n        }\n        var path = ResourcePath.fromString(pathString);\n        return DocumentReference.forPath(this._query.path.child(path), this.firestore);\n    };\n    CollectionReference.prototype.add = function (value) {\n        validateExactNumberOfArgs('CollectionReference.add', arguments, 1);\n        validateArgType('CollectionReference.add', 'object', 1, value);\n        var docRef = this.doc();\n        return docRef.set(value).then(function () { return docRef; });\n    };\n    return CollectionReference;\n}(Query));\nexport { CollectionReference };\nfunction validateSetOptions(methodName, options) {\n    if (options === undefined) {\n        return {\n            merge: false\n        };\n    }\n    validateOptionNames(methodName, options, ['merge']);\n    validateNamedOptionalType(methodName, 'boolean', 'merge', options.merge);\n    return options;\n}\nfunction validateReference(methodName, documentRef, firestore) {\n    if (!(documentRef instanceof DocumentReference)) {\n        throw invalidClassError(methodName, 'DocumentReference', 1, documentRef);\n    }\n    else if (documentRef.firestore !== firestore) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Provided document reference is from a different Firestore instance.');\n    }\n    else {\n        return documentRef;\n    }\n}\n/**\n * Calculates the array of firestore.DocumentChange's for a given ViewSnapshot.\n *\n * Exported for testing.\n */\nexport function changesFromSnapshot(firestore, snapshot) {\n    if (snapshot.oldDocs.isEmpty()) {\n        // Special case the first snapshot because index calculation is easy and\n        // fast\n        var lastDoc_1;\n        var index_1 = 0;\n        return snapshot.docChanges.map(function (change) {\n            var doc = new DocumentSnapshot(firestore, change.doc.key, change.doc, snapshot.fromCache);\n            assert(change.type === ChangeType.Added, 'Invalid event type for first snapshot');\n            assert(!lastDoc_1 || snapshot.query.docComparator(lastDoc_1, change.doc) < 0, 'Got added events in wrong order');\n            lastDoc_1 = change.doc;\n            return {\n                type: 'added',\n                doc: doc,\n                oldIndex: -1,\n                newIndex: index_1++\n            };\n        });\n    }\n    else {\n        // A DocumentSet that is updated incrementally as changes are applied to use\n        // to lookup the index of a document.\n        var indexTracker_1 = snapshot.oldDocs;\n        return snapshot.docChanges.map(function (change) {\n            var doc = new DocumentSnapshot(firestore, change.doc.key, change.doc, snapshot.fromCache);\n            var oldIndex = -1;\n            var newIndex = -1;\n            if (change.type !== ChangeType.Added) {\n                oldIndex = indexTracker_1.indexOf(change.doc.key);\n                assert(oldIndex >= 0, 'Index for document not found');\n                indexTracker_1 = indexTracker_1.delete(change.doc.key);\n            }\n            if (change.type !== ChangeType.Removed) {\n                indexTracker_1 = indexTracker_1.add(change.doc);\n                newIndex = indexTracker_1.indexOf(change.doc.key);\n            }\n            return { type: resultChangeType(change.type), doc: doc, oldIndex: oldIndex, newIndex: newIndex };\n        });\n    }\n}\nfunction resultChangeType(type) {\n    switch (type) {\n        case ChangeType.Added:\n            return 'added';\n        case ChangeType.Modified:\n        case ChangeType.Metadata:\n            return 'modified';\n        case ChangeType.Removed:\n            return 'removed';\n        default:\n            return fail('Unknown change type: ' + type);\n    }\n}\n// Export the classes with a private constructor (it will fail if invoked\n// at runtime). Note that this still allows instanceof checks.\n// We're treating the variables as class names, so disable checking for lower\n// case variable names.\n// tslint:disable:variable-name\nexport var PublicFirestore = makeConstructorPrivate(Firestore, 'Use firebase.firestore() instead.');\nexport var PublicTransaction = makeConstructorPrivate(Transaction, 'Use firebase.firestore().runTransaction() instead.');\nexport var PublicWriteBatch = makeConstructorPrivate(WriteBatch, 'Use firebase.firestore().batch() instead.');\nexport var PublicDocumentReference = makeConstructorPrivate(DocumentReference, 'Use firebase.firestore().doc() instead.');\nexport var PublicDocumentSnapshot = makeConstructorPrivate(DocumentSnapshot);\nexport var PublicQuery = makeConstructorPrivate(Query);\nexport var PublicQuerySnapshot = makeConstructorPrivate(QuerySnapshot);\nexport var PublicCollectionReference = makeConstructorPrivate(CollectionReference, 'Use firebase.firestore().collection() instead.');\n// tslint:enable:variable-name\n\n//# sourceMappingURL=database.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/database.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { PublicBlob } from '../api/blob';\nimport { Firestore, PublicCollectionReference, PublicDocumentReference, PublicDocumentSnapshot, PublicFirestore, PublicQuery, PublicQuerySnapshot, PublicTransaction, PublicWriteBatch } from '../api/database';\nimport { FieldPath } from '../api/field_path';\nimport { PublicFieldValue } from '../api/field_value';\nimport { GeoPoint } from '../api/geo_point';\nimport { shallowCopy } from '../util/obj';\nvar firestoreNamespace = {\n    Firestore: PublicFirestore,\n    GeoPoint: GeoPoint,\n    Blob: PublicBlob,\n    Transaction: PublicTransaction,\n    WriteBatch: PublicWriteBatch,\n    DocumentReference: PublicDocumentReference,\n    DocumentSnapshot: PublicDocumentSnapshot,\n    Query: PublicQuery,\n    QuerySnapshot: PublicQuerySnapshot,\n    CollectionReference: PublicCollectionReference,\n    FieldPath: FieldPath,\n    FieldValue: PublicFieldValue,\n    setLogLevel: Firestore.setLogLevel\n};\n/**\n * Configures Firestore as part of the Firebase SDK by calling registerService.\n */\nexport function configureForFirebase(firebase) {\n    firebase.INTERNAL.registerService('firestore', function (app) { return new Firestore(app); }, shallowCopy(firestoreNamespace));\n}\n/**\n * Exports the Firestore namespace into the provided `exportObject` object under\n * the key 'firestore'. This is used for wrapped binary that exposes Firestore\n * as a goog module.\n */\nexport function configureForStandalone(exportObject) {\n    var copiedNamespace = shallowCopy(firestoreNamespace);\n    // Unlike the use with Firebase, the standalone allows the use of the\n    // constructor, so export it's internal class\n    copiedNamespace['Firestore'] = Firestore;\n    exportObject['firestore'] = copiedNamespace;\n}\n\n//# sourceMappingURL=config.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/platform/config.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\nimport './src/platform_browser/browser_init';\nimport { configureForFirebase } from './src/platform/config';\nexport function registerFirestore(instance) {\n    configureForFirebase(instance);\n}\nregisterFirestore(firebase);\n\n//# sourceMappingURL=index.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/index.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\n/** The semver (www.semver.org) version of the SDK. */\nexport var SDK_VERSION = firebase.SDK_VERSION;\n\n//# sourceMappingURL=version.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/version.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n// TODO(mcg): Change to a string enum once we've upgraded to typescript 2.4.\n//  tslint:disable-next-line:variable-name Intended to look like a TS 2.4 enum\nexport var Code = {\n    // Causes are copied from:\n    // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n    /** Not an error; returned on success. */\n    OK: 'ok',\n    /** The operation was cancelled (typically by the caller). */\n    CANCELLED: 'cancelled',\n    /** Unknown error or an error from a different error domain. */\n    UNKNOWN: 'unknown',\n    /**\n     * Client specified an invalid argument. Note that this differs from\n     * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are\n     * problematic regardless of the state of the system (e.g., a malformed file\n     * name).\n     */\n    INVALID_ARGUMENT: 'invalid-argument',\n    /**\n     * Deadline expired before operation could complete. For operations that\n     * change the state of the system, this error may be returned even if the\n     * operation has completed successfully. For example, a successful response\n     * from a server could have been delayed long enough for the deadline to\n     * expire.\n     */\n    DEADLINE_EXCEEDED: 'deadline-exceeded',\n    /** Some requested entity (e.g., file or directory) was not found. */\n    NOT_FOUND: 'not-found',\n    /**\n     * Some entity that we attempted to create (e.g., file or directory) already\n     * exists.\n     */\n    ALREADY_EXISTS: 'already-exists',\n    /**\n     * The caller does not have permission to execute the specified operation.\n     * PERMISSION_DENIED must not be used for rejections caused by exhausting\n     * some resource (use RESOURCE_EXHAUSTED instead for those errors).\n     * PERMISSION_DENIED must not be used if the caller can not be identified\n     * (use UNAUTHENTICATED instead for those errors).\n     */\n    PERMISSION_DENIED: 'permission-denied',\n    /**\n     * The request does not have valid authentication credentials for the\n     * operation.\n     */\n    UNAUTHENTICATED: 'unauthenticated',\n    /**\n     * Some resource has been exhausted, perhaps a per-user quota, or perhaps the\n     * entire file system is out of space.\n     */\n    RESOURCE_EXHAUSTED: 'resource-exhausted',\n    /**\n     * Operation was rejected because the system is not in a state required for\n     * the operation's execution. For example, directory to be deleted may be\n     * non-empty, an rmdir operation is applied to a non-directory, etc.\n     *\n     * A litmus test that may help a service implementor in deciding\n     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\n     *  (a) Use UNAVAILABLE if the client can retry just the failing call.\n     *  (b) Use ABORTED if the client should retry at a higher-level\n     *      (e.g., restarting a read-modify-write sequence).\n     *  (c) Use FAILED_PRECONDITION if the client should not retry until\n     *      the system state has been explicitly fixed. E.g., if an \"rmdir\"\n     *      fails because the directory is non-empty, FAILED_PRECONDITION\n     *      should be returned since the client should not retry unless\n     *      they have first fixed up the directory by deleting files from it.\n     *  (d) Use FAILED_PRECONDITION if the client performs conditional\n     *      REST Get/Update/Delete on a resource and the resource on the\n     *      server does not match the condition. E.g., conflicting\n     *      read-modify-write on the same resource.\n     */\n    FAILED_PRECONDITION: 'failed-precondition',\n    /**\n     * The operation was aborted, typically due to a concurrency issue like\n     * sequencer check failures, transaction aborts, etc.\n     *\n     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n     * and UNAVAILABLE.\n     */\n    ABORTED: 'aborted',\n    /**\n     * Operation was attempted past the valid range. E.g., seeking or reading\n     * past end of file.\n     *\n     * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed\n     * if the system state changes. For example, a 32-bit file system will\n     * generate INVALID_ARGUMENT if asked to read at an offset that is not in the\n     * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from\n     * an offset past the current file size.\n     *\n     * There is a fair bit of overlap between FAILED_PRECONDITION and\n     * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)\n     * when it applies so that callers who are iterating through a space can\n     * easily look for an OUT_OF_RANGE error to detect when they are done.\n     */\n    OUT_OF_RANGE: 'out-of-range',\n    /** Operation is not implemented or not supported/enabled in this service. */\n    UNIMPLEMENTED: 'unimplemented',\n    /**\n     * Internal errors. Means some invariants expected by underlying System has\n     * been broken. If you see one of these errors, Something is very broken.\n     */\n    INTERNAL: 'internal',\n    /**\n     * The service is currently unavailable. This is a most likely a transient\n     * condition and may be corrected by retrying with a backoff.\n     *\n     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n     * and UNAVAILABLE.\n     */\n    UNAVAILABLE: 'unavailable',\n    /** Unrecoverable data loss or corruption. */\n    DATA_LOSS: 'data-loss'\n};\n/**\n * An error class used for Firestore-generated errors. Ideally we should be\n * using FirebaseError, but integrating with it is overly arduous at the moment,\n * so we define our own compatible error class (with a `name` of 'FirebaseError'\n * and compatible `code` and `message` fields.)\n */\nvar FirestoreError = /** @class */ (function (_super) {\n    __extends(FirestoreError, _super);\n    function FirestoreError(code, message) {\n        var _this = _super.call(this, message) || this;\n        _this.code = code;\n        _this.message = message;\n        _this.name = 'FirebaseError';\n        // HACK: We write a toString property directly because Error is not a real\n        // class and so inheritance does not work correctly. We could alternatively\n        // do the same \"back-door inheritance\" trick that FirebaseError does.\n        _this.toString = function () { return _this.name + \": [code=\" + _this.code + \"]: \" + _this.message; };\n        return _this;\n    }\n    return FirestoreError;\n}(Error));\nexport { FirestoreError };\n\n//# sourceMappingURL=error.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/error.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Code, FirestoreError } from '../util/error';\nimport { validateArgType, validateExactNumberOfArgs } from '../util/input_validation';\nimport { primitiveComparator } from '../util/misc';\n/**\n * Immutable class representing a geo point as latitude-longitude pair.\n * This class is directly exposed in the public API, including its constructor.\n */\nvar GeoPoint = /** @class */ (function () {\n    function GeoPoint(latitude, longitude) {\n        validateExactNumberOfArgs('GeoPoint', arguments, 2);\n        validateArgType('GeoPoint', 'number', 1, latitude);\n        validateArgType('GeoPoint', 'number', 2, longitude);\n        if (!isFinite(latitude) || latitude < -90 || latitude > 90) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Latitude must be a number between -90 and 90, but was: ' + latitude);\n        }\n        if (!isFinite(longitude) || longitude < -180 || longitude > 180) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Longitude must be a number between -180 and 180, but was: ' + longitude);\n        }\n        this._lat = latitude;\n        this._long = longitude;\n    }\n    Object.defineProperty(GeoPoint.prototype, \"latitude\", {\n        /**\n         * Returns the latitude of this geo point, a number between -90 and 90.\n         */\n        get: function () {\n            return this._lat;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GeoPoint.prototype, \"longitude\", {\n        /**\n         * Returns the longitude of this geo point, a number between -180 and 180.\n         */\n        get: function () {\n            return this._long;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    GeoPoint.prototype._equals = function (other) {\n        return this._lat === other._lat && this._long === other._long;\n    };\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    GeoPoint.prototype._compareTo = function (other) {\n        return (primitiveComparator(this._lat, other._lat) ||\n            primitiveComparator(this._long, other._long));\n    };\n    return GeoPoint;\n}());\nexport { GeoPoint };\n\n//# sourceMappingURL=geo_point.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/geo_point.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { primitiveComparator } from '../util/misc';\nvar DatabaseInfo = /** @class */ (function () {\n    /**\n     * Constructs a DatabaseInfo using the provided host, databaseId and\n     * persistenceKey.\n     *\n     * @param databaseId The database to use.\n     * @param persistenceKey A unique identifier for this Firestore's local\n     * storage (used in conjunction with the databaseId).\n     * @param host The Firestore backend host to connect to.\n     * @param ssl Whether to use SSL when connecting.\n     */\n    function DatabaseInfo(databaseId, persistenceKey, host, ssl) {\n        this.databaseId = databaseId;\n        this.persistenceKey = persistenceKey;\n        this.host = host;\n        this.ssl = ssl;\n    }\n    return DatabaseInfo;\n}());\nexport { DatabaseInfo };\n/** The default database name for a project. */\nvar DEFAULT_DATABASE_NAME = '(default)';\n/** Represents the database ID a Firestore client is associated with. */\nvar DatabaseId = /** @class */ (function () {\n    function DatabaseId(projectId, database) {\n        this.projectId = projectId;\n        this.database = database ? database : DEFAULT_DATABASE_NAME;\n    }\n    Object.defineProperty(DatabaseId.prototype, \"isDefaultDatabase\", {\n        get: function () {\n            return this.database === DEFAULT_DATABASE_NAME;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DatabaseId.prototype.equals = function (other) {\n        return (other instanceof DatabaseId &&\n            other.projectId === this.projectId &&\n            other.database === this.database);\n    };\n    DatabaseId.prototype.compareTo = function (other) {\n        return (primitiveComparator(this.projectId, other.projectId) ||\n            primitiveComparator(this.database, other.database));\n    };\n    return DatabaseId;\n}());\nexport { DatabaseId };\n\n//# sourceMappingURL=database_info.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/database_info.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nexport var DOCUMENT_KEY_NAME = '__name__';\n/**\n * Path represents an ordered sequence of string segments.\n */\nvar Path = /** @class */ (function () {\n    function Path(segments, offset, length) {\n        this.init(segments, offset, length);\n    }\n    /**\n     * An initialization method that can be called from outside the constructor.\n     * We need this so that we can have a non-static construct method that returns\n     * the polymorphic `this` type.\n     */\n    Path.prototype.init = function (segments, offset, length) {\n        if (offset === undefined) {\n            offset = 0;\n        }\n        else if (offset > segments.length) {\n            fail('offset ' + offset + ' out of range ' + segments.length);\n        }\n        if (length === undefined) {\n            length = segments.length - offset;\n        }\n        else if (length > segments.length - offset) {\n            fail('length ' + length + ' out of range ' + (segments.length - offset));\n        }\n        this.segments = segments;\n        this.offset = offset;\n        this.len = length;\n    };\n    /**\n     * Constructs a new instance of Path using the same concrete type as `this`.\n     * We need this instead of using the normal constructor, because polymorphic\n     * `this` doesn't work on static methods.\n     */\n    Path.prototype.construct = function (segments, offset, length) {\n        var path = Object.create(Object.getPrototypeOf(this));\n        path.init(segments, offset, length);\n        return path;\n    };\n    Object.defineProperty(Path.prototype, \"length\", {\n        get: function () {\n            return this.len;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Path.prototype.equals = function (other) {\n        return Path.comparator(this, other) === 0;\n    };\n    Path.prototype.child = function (nameOrPath) {\n        var segments = this.segments.slice(this.offset, this.limit());\n        if (nameOrPath instanceof Path) {\n            nameOrPath.forEach(function (segment) {\n                segments.push(segment);\n            });\n        }\n        else if (typeof nameOrPath === 'string') {\n            segments.push(nameOrPath);\n        }\n        else {\n            fail('Unknown parameter type for Path.child(): ' + nameOrPath);\n        }\n        return this.construct(segments);\n    };\n    /** The index of one past the last segment of the path. */\n    Path.prototype.limit = function () {\n        return this.offset + this.length;\n    };\n    Path.prototype.popFirst = function (size) {\n        size = size === undefined ? 1 : size;\n        assert(this.length >= size, \"Can't call popFirst() with less segments\");\n        return this.construct(this.segments, this.offset + size, this.length - size);\n    };\n    Path.prototype.popLast = function () {\n        assert(!this.isEmpty(), \"Can't call popLast() on empty path\");\n        return this.construct(this.segments, this.offset, this.length - 1);\n    };\n    Path.prototype.firstSegment = function () {\n        assert(!this.isEmpty(), \"Can't call firstSegment() on empty path\");\n        return this.segments[this.offset];\n    };\n    Path.prototype.lastSegment = function () {\n        assert(!this.isEmpty(), \"Can't call lastSegment() on empty path\");\n        return this.segments[this.limit() - 1];\n    };\n    Path.prototype.get = function (index) {\n        assert(index < this.length, 'Index out of range');\n        return this.segments[this.offset + index];\n    };\n    Path.prototype.isEmpty = function () {\n        return this.length === 0;\n    };\n    Path.prototype.isPrefixOf = function (other) {\n        if (other.length < this.length) {\n            return false;\n        }\n        for (var i = 0; i < this.length; i++) {\n            if (this.get(i) !== other.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    Path.prototype.forEach = function (fn) {\n        for (var i = this.offset, end = this.limit(); i < end; i++) {\n            fn(this.segments[i]);\n        }\n    };\n    Path.prototype.toArray = function () {\n        return this.segments.slice(this.offset, this.limit());\n    };\n    Path.comparator = function (p1, p2) {\n        var len = Math.min(p1.length, p2.length);\n        for (var i = 0; i < len; i++) {\n            var left = p1.get(i);\n            var right = p2.get(i);\n            if (left < right)\n                return -1;\n            if (left > right)\n                return 1;\n        }\n        if (p1.length < p2.length)\n            return -1;\n        if (p1.length > p2.length)\n            return 1;\n        return 0;\n    };\n    return Path;\n}());\nexport { Path };\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n */\nvar ResourcePath = /** @class */ (function (_super) {\n    __extends(ResourcePath, _super);\n    function ResourcePath() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ResourcePath.prototype.canonicalString = function () {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        return this.toArray().join('/');\n    };\n    ResourcePath.prototype.toString = function () {\n        return this.canonicalString();\n    };\n    /**\n     * Creates a resource path from the given slash-delimited string.\n     */\n    ResourcePath.fromString = function (path) {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        if (path.indexOf('//') >= 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid path (\" + path + \"). Paths must not contain // in them.\");\n        }\n        // We may still have an empty segment at the beginning or end if they had a\n        // leading or trailing slash (which we allow).\n        var segments = path.split('/').filter(function (segment) { return segment.length > 0; });\n        return new ResourcePath(segments);\n    };\n    ResourcePath.EMPTY_PATH = new ResourcePath([]);\n    return ResourcePath;\n}(Path));\nexport { ResourcePath };\nvar identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/** A dot-separated path for navigating sub-objects within a document. */\nvar FieldPath = /** @class */ (function (_super) {\n    __extends(FieldPath, _super);\n    function FieldPath() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Returns true if the string could be used as a segment in a field path\n     * without escaping.\n     */\n    FieldPath.isValidIdentifier = function (segment) {\n        return identifierRegExp.test(segment);\n    };\n    FieldPath.prototype.canonicalString = function () {\n        return this.toArray()\n            .map(function (str) {\n            str = str.replace('\\\\', '\\\\\\\\').replace('`', '\\\\`');\n            if (!FieldPath.isValidIdentifier(str)) {\n                str = '`' + str + '`';\n            }\n            return str;\n        })\n            .join('.');\n    };\n    FieldPath.prototype.toString = function () {\n        return this.canonicalString();\n    };\n    /**\n     * Returns true if this field references the key of a document.\n     */\n    FieldPath.prototype.isKeyField = function () {\n        return this.length === 1 && this.get(0) === DOCUMENT_KEY_NAME;\n    };\n    /**\n     * The field designating the key of a document.\n     */\n    FieldPath.keyField = function () {\n        return new FieldPath([DOCUMENT_KEY_NAME]);\n    };\n    /**\n     * Parses a field string from the given server-formatted string.\n     *\n     * - Splitting the empty string is not allowed (for now at least).\n     * - Empty segments within the string (e.g. if there are two consecutive\n     *   separators) are not allowed.\n     *\n     * TODO(b/37244157): we should make this more strict. Right now, it allows\n     * non-identifier path components, even if they aren't escaped.\n     */\n    FieldPath.fromServerFormat = function (path) {\n        var segments = [];\n        var current = '';\n        var i = 0;\n        var addCurrentSegment = function () {\n            if (current.length === 0) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not be empty, begin \" +\n                    \"with '.', end with '.', or contain '..'\");\n            }\n            segments.push(current);\n            current = '';\n        };\n        var inBackticks = false;\n        while (i < path.length) {\n            var c = path[i];\n            if (c === '\\\\') {\n                if (i + 1 === path.length) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has trailing escape character: ' + path);\n                }\n                var next = path[i + 1];\n                if (!(next === '\\\\' || next === '.' || next === '`')) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has invalid escape sequence: ' + path);\n                }\n                current += next;\n                i += 2;\n            }\n            else if (c === '`') {\n                inBackticks = !inBackticks;\n                i++;\n            }\n            else if (c === '.' && !inBackticks) {\n                addCurrentSegment();\n                i++;\n            }\n            else {\n                current += c;\n                i++;\n            }\n        }\n        addCurrentSegment();\n        if (inBackticks) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Unterminated ` in path: ' + path);\n        }\n        return new FieldPath(segments);\n    };\n    FieldPath.EMPTY_PATH = new FieldPath([]);\n    return FieldPath;\n}(Path));\nexport { FieldPath };\n\n//# sourceMappingURL=path.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/path.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { ResourcePath } from './path';\nvar DocumentKey = /** @class */ (function () {\n    function DocumentKey(path) {\n        this.path = path;\n        assert(DocumentKey.isDocumentKey(path), 'Invalid DocumentKey with an odd number of segments: ' +\n            path.toArray().join('/'));\n    }\n    DocumentKey.prototype.equals = function (other) {\n        return (other !== null && ResourcePath.comparator(this.path, other.path) === 0);\n    };\n    DocumentKey.prototype.toString = function () {\n        return this.path.toString();\n    };\n    DocumentKey.comparator = function (k1, k2) {\n        return ResourcePath.comparator(k1.path, k2.path);\n    };\n    DocumentKey.isDocumentKey = function (path) {\n        return path.length % 2 === 0;\n    };\n    /**\n     * Creates and returns a new document key with the given segments.\n     *\n     * @param path The segments of the path to the document\n     * @return A new instance of DocumentKey\n     */\n    DocumentKey.fromSegments = function (segments) {\n        return new DocumentKey(new ResourcePath(segments.slice()));\n    };\n    /**\n     * Creates and returns a new document key using '/' to split the string into\n     * segments.\n     *\n     * @param path The slash-separated path string to the document\n     * @return A new instance of DocumentKey\n     */\n    DocumentKey.fromPathString = function (path) {\n        return new DocumentKey(ResourcePath.fromString(path));\n    };\n    DocumentKey.EMPTY = new DocumentKey(new ResourcePath([]));\n    return DocumentKey;\n}());\nexport { DocumentKey };\n\n//# sourceMappingURL=document_key.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/document_key.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from '../util/assert';\nimport { DocumentKey } from './document_key';\nvar Document = /** @class */ (function () {\n    function Document(key, version, data, options) {\n        this.key = key;\n        this.version = version;\n        this.data = data;\n        this.hasLocalMutations = options.hasLocalMutations;\n    }\n    Document.prototype.field = function (path) {\n        return this.data.field(path);\n    };\n    Document.prototype.fieldValue = function (path) {\n        var field = this.field(path);\n        return field ? field.value() : undefined;\n    };\n    Document.prototype.value = function () {\n        return this.data.value();\n    };\n    Document.prototype.equals = function (other) {\n        return (other instanceof Document &&\n            this.key.equals(other.key) &&\n            this.version.equals(other.version) &&\n            this.data.equals(other.data) &&\n            this.hasLocalMutations === other.hasLocalMutations);\n    };\n    Document.prototype.toString = function () {\n        return (\"Document(\" + this.key + \", \" + this.version + \", \" + this.data.toString() + \", \" +\n            (\"{hasLocalMutations: \" + this.hasLocalMutations + \"})\"));\n    };\n    Document.compareByKey = function (d1, d2) {\n        return DocumentKey.comparator(d1.key, d2.key);\n    };\n    Document.compareByField = function (field, d1, d2) {\n        var v1 = d1.field(field);\n        var v2 = d2.field(field);\n        if (v1 !== undefined && v2 !== undefined) {\n            return v1.compareTo(v2);\n        }\n        else {\n            return fail(\"Trying to compare documents on fields that don't exist\");\n        }\n    };\n    return Document;\n}());\nexport { Document };\n/**\n * A class representing a deleted document.\n * Version is set to 0 if we don't point to any specific time, otherwise it\n * denotes time we know it didn't exist at.\n */\nvar NoDocument = /** @class */ (function () {\n    function NoDocument(key, version) {\n        this.key = key;\n        this.version = version;\n    }\n    NoDocument.prototype.toString = function () {\n        return \"NoDocument(\" + this.key + \", \" + this.version + \")\";\n    };\n    NoDocument.prototype.equals = function (other) {\n        return (other && other.version.equals(this.version) && other.key.equals(this.key));\n    };\n    NoDocument.compareByKey = function (d1, d2) {\n        return DocumentKey.comparator(d1.key, d2.key);\n    };\n    return NoDocument;\n}());\nexport { NoDocument };\n\n//# sourceMappingURL=document.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/document.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert, fail } from './assert';\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\nvar SortedMap = /** @class */ (function () {\n    function SortedMap(comparator, root) {\n        this.comparator = comparator;\n        this.root = root ? root : LLRBNode.EMPTY;\n    }\n    // Returns a copy of the map, with the specified key/value added or replaced.\n    SortedMap.prototype.insert = function (key, value) {\n        return new SortedMap(this.comparator, this.root\n            .insert(key, value, this.comparator)\n            .copy(null, null, LLRBNode.BLACK, null, null));\n    };\n    // Returns a copy of the map, with the specified key removed.\n    SortedMap.prototype.remove = function (key) {\n        return new SortedMap(this.comparator, this.root\n            .remove(key, this.comparator)\n            .copy(null, null, LLRBNode.BLACK, null, null));\n    };\n    // Returns the value of the node with the given key, or null.\n    SortedMap.prototype.get = function (key) {\n        var node = this.root;\n        while (!node.isEmpty()) {\n            var cmp = this.comparator(key, node.key);\n            if (cmp === 0) {\n                return node.value;\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                node = node.right;\n            }\n        }\n        return null;\n    };\n    // Returns the key of the item *before* the specified key, or null if key is\n    // the first item.\n    SortedMap.prototype.getPredecessorKey = function (key) {\n        var node = this.root;\n        var rightParent = null;\n        while (!node.isEmpty()) {\n            var cmp = this.comparator(key, node.key);\n            if (cmp === 0) {\n                if (!node.left.isEmpty()) {\n                    node = node.left;\n                    while (!node.right.isEmpty())\n                        node = node.right;\n                    return node.key;\n                }\n                else if (rightParent) {\n                    return rightParent.key;\n                }\n                else {\n                    return null; // first item.\n                }\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                rightParent = node;\n                node = node.right;\n            }\n        }\n        throw fail('Attempted to find predecessor key for a nonexistent key.' +\n            '  What gives?');\n    };\n    // Returns the index of the element in this sorted map, or -1 if it doesn't\n    // exist.\n    SortedMap.prototype.indexOf = function (key) {\n        // Number of nodes that were pruned when descending right\n        var prunedNodes = 0;\n        var node = this.root;\n        while (!node.isEmpty()) {\n            var cmp = this.comparator(key, node.key);\n            if (cmp === 0) {\n                return prunedNodes + node.left.size;\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else {\n                // Count all nodes left of the node plus the node itself\n                prunedNodes += node.left.size + 1;\n                node = node.right;\n            }\n        }\n        // Node not found\n        return -1;\n    };\n    SortedMap.prototype.isEmpty = function () {\n        return this.root.isEmpty();\n    };\n    Object.defineProperty(SortedMap.prototype, \"size\", {\n        // Returns the total number of nodes in the map.\n        get: function () {\n            return this.root.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Returns the minimum key in the map.\n    SortedMap.prototype.minKey = function () {\n        return this.root.minKey();\n    };\n    // Returns the maximum key in the map.\n    SortedMap.prototype.maxKey = function () {\n        return this.root.maxKey();\n    };\n    // Traverses the map in key order and calls the specified action function\n    // for each key/value pair. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    SortedMap.prototype.inorderTraversal = function (action) {\n        return this.root.inorderTraversal(action);\n    };\n    SortedMap.prototype.forEach = function (fn) {\n        this.inorderTraversal(function (k, v) {\n            fn(k, v);\n            return false;\n        });\n    };\n    // Traverses the map in reverse key order and calls the specified action\n    // function for each key/value pair. If action returns true, traversal is\n    // aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    SortedMap.prototype.reverseTraversal = function (action) {\n        return this.root.reverseTraversal(action);\n    };\n    SortedMap.prototype.getIterator = function (resultGenerator) {\n        return new SortedMapIterator(this.root, null, this.comparator, false, resultGenerator);\n    };\n    SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {\n        return new SortedMapIterator(this.root, key, this.comparator, false, resultGenerator);\n    };\n    SortedMap.prototype.getReverseIterator = function (resultGenerator) {\n        return new SortedMapIterator(this.root, null, this.comparator, true, resultGenerator);\n    };\n    SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {\n        return new SortedMapIterator(this.root, key, this.comparator, true, resultGenerator);\n    };\n    return SortedMap;\n}()); // end SortedMap\nexport { SortedMap };\n// An iterator over an LLRBNode.\nvar SortedMapIterator = /** @class */ (function () {\n    function SortedMapIterator(node, startKey, comparator, isReverse, resultGenerator) {\n        this.resultGenerator = resultGenerator || null;\n        this.isReverse = isReverse;\n        this.nodeStack = [];\n        var cmp = 1;\n        while (!node.isEmpty()) {\n            cmp = startKey ? comparator(node.key, startKey) : 1;\n            // flip the comparison if we're going in reverse\n            if (isReverse)\n                cmp *= -1;\n            if (cmp < 0) {\n                // This node is less than our start key. ignore it\n                if (this.isReverse) {\n                    node = node.left;\n                }\n                else {\n                    node = node.right;\n                }\n            }\n            else if (cmp === 0) {\n                // This node is exactly equal to our start key. Push it on the stack,\n                // but stop iterating;\n                this.nodeStack.push(node);\n                break;\n            }\n            else {\n                // This node is greater than our start key, add it to the stack and move\n                // to the next one\n                this.nodeStack.push(node);\n                if (this.isReverse) {\n                    node = node.right;\n                }\n                else {\n                    node = node.left;\n                }\n            }\n        }\n    }\n    SortedMapIterator.prototype.getNext = function () {\n        assert(this.nodeStack.length > 0, 'getNext() called on iterator when hasNext() is false.');\n        var node = this.nodeStack.pop();\n        var result;\n        if (this.resultGenerator)\n            result = this.resultGenerator(node.key, node.value);\n        else\n            result = { key: node.key, value: node.value };\n        if (this.isReverse) {\n            node = node.left;\n            while (!node.isEmpty()) {\n                this.nodeStack.push(node);\n                node = node.right;\n            }\n        }\n        else {\n            node = node.right;\n            while (!node.isEmpty()) {\n                this.nodeStack.push(node);\n                node = node.left;\n            }\n        }\n        return result;\n    };\n    SortedMapIterator.prototype.hasNext = function () {\n        return this.nodeStack.length > 0;\n    };\n    SortedMapIterator.prototype.peek = function () {\n        if (this.nodeStack.length === 0)\n            return null;\n        var node = this.nodeStack[this.nodeStack.length - 1];\n        if (this.resultGenerator) {\n            return this.resultGenerator(node.key, node.value);\n        }\n        else {\n            return { key: node.key, value: node.value };\n        }\n    };\n    return SortedMapIterator;\n}()); // end SortedMapIterator\nexport { SortedMapIterator };\n// Represents a node in a Left-leaning Red-Black tree.\nvar LLRBNode = /** @class */ (function () {\n    function LLRBNode(key, value, color, left, right) {\n        this.key = key;\n        this.value = value;\n        this.color = color != null ? color : LLRBNode.RED;\n        this.left = left != null ? left : LLRBNode.EMPTY;\n        this.right = right != null ? right : LLRBNode.EMPTY;\n        this.size = this.left.size + 1 + this.right.size;\n    }\n    // Returns a copy of the current node, optionally replacing pieces of it.\n    LLRBNode.prototype.copy = function (key, value, color, left, right) {\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n    };\n    LLRBNode.prototype.isEmpty = function () {\n        return false;\n    };\n    // Traverses the tree in key order and calls the specified action function\n    // for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    LLRBNode.prototype.inorderTraversal = function (action) {\n        return (this.left.inorderTraversal(action) ||\n            action(this.key, this.value) ||\n            this.right.inorderTraversal(action));\n    };\n    // Traverses the tree in reverse key order and calls the specified action\n    // function for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    LLRBNode.prototype.reverseTraversal = function (action) {\n        return (this.right.reverseTraversal(action) ||\n            action(this.key, this.value) ||\n            this.left.reverseTraversal(action));\n    };\n    // Returns the minimum node in the tree.\n    LLRBNode.prototype.min = function () {\n        if (this.left.isEmpty()) {\n            return this;\n        }\n        else {\n            return this.left.min();\n        }\n    };\n    // Returns the maximum key in the tree.\n    LLRBNode.prototype.minKey = function () {\n        return this.min().key;\n    };\n    // Returns the maximum key in the tree.\n    LLRBNode.prototype.maxKey = function () {\n        if (this.right.isEmpty()) {\n            return this.key;\n        }\n        else {\n            return this.right.maxKey();\n        }\n    };\n    // Returns new tree, with the key/value added.\n    LLRBNode.prototype.insert = function (key, value, comparator) {\n        var n = this;\n        var cmp = comparator(key, n.key);\n        if (cmp < 0) {\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n        }\n        else if (cmp === 0) {\n            n = n.copy(null, value, null, null, null);\n        }\n        else {\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n        }\n        return n.fixUp();\n    };\n    LLRBNode.prototype.removeMin = function () {\n        if (this.left.isEmpty()) {\n            return LLRBNode.EMPTY;\n        }\n        var n = this;\n        if (!n.left.isRed() && !n.left.left.isRed())\n            n = n.moveRedLeft();\n        n = n.copy(null, null, null, n.left.removeMin(), null);\n        return n.fixUp();\n    };\n    // Returns new tree, with the specified item removed.\n    LLRBNode.prototype.remove = function (key, comparator) {\n        var smallest;\n        var n = this;\n        if (comparator(key, n.key) < 0) {\n            if (!n.left.isEmpty() && !n.left.isRed() && !n.left.left.isRed()) {\n                n = n.moveRedLeft();\n            }\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n        }\n        else {\n            if (n.left.isRed())\n                n = n.rotateRight();\n            if (!n.right.isEmpty() && !n.right.isRed() && !n.right.left.isRed()) {\n                n = n.moveRedRight();\n            }\n            if (comparator(key, n.key) === 0) {\n                if (n.right.isEmpty()) {\n                    return LLRBNode.EMPTY;\n                }\n                else {\n                    smallest = n.right.min();\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin());\n                }\n            }\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n        }\n        return n.fixUp();\n    };\n    LLRBNode.prototype.isRed = function () {\n        return this.color;\n    };\n    // Returns new tree after performing any needed rotations.\n    LLRBNode.prototype.fixUp = function () {\n        var n = this;\n        if (n.right.isRed() && !n.left.isRed())\n            n = n.rotateLeft();\n        if (n.left.isRed() && n.left.left.isRed())\n            n = n.rotateRight();\n        if (n.left.isRed() && n.right.isRed())\n            n = n.colorFlip();\n        return n;\n    };\n    LLRBNode.prototype.moveRedLeft = function () {\n        var n = this.colorFlip();\n        if (n.right.left.isRed()) {\n            n = n.copy(null, null, null, null, n.right.rotateRight());\n            n = n.rotateLeft();\n            n = n.colorFlip();\n        }\n        return n;\n    };\n    LLRBNode.prototype.moveRedRight = function () {\n        var n = this.colorFlip();\n        if (n.left.left.isRed()) {\n            n = n.rotateRight();\n            n = n.colorFlip();\n        }\n        return n;\n    };\n    LLRBNode.prototype.rotateLeft = function () {\n        var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n        return this.right.copy(null, null, this.color, nl, null);\n    };\n    LLRBNode.prototype.rotateRight = function () {\n        var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n        return this.left.copy(null, null, this.color, null, nr);\n    };\n    LLRBNode.prototype.colorFlip = function () {\n        var left = this.left.copy(null, null, !this.left.color, null, null);\n        var right = this.right.copy(null, null, !this.right.color, null, null);\n        return this.copy(null, null, !this.color, left, right);\n    };\n    // For testing.\n    LLRBNode.prototype.checkMaxDepth = function () {\n        var blackDepth = this.check();\n        if (Math.pow(2.0, blackDepth) <= this.size + 1) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    // In a balanced RB tree, the black-depth (number of black nodes) from root to\n    // leaves is equal on both sides.  This function verifies that or asserts.\n    LLRBNode.prototype.check = function () {\n        if (this.isRed() && this.left.isRed()) {\n            throw fail('Red node has red child(' + this.key + ',' + this.value + ')');\n        }\n        if (this.right.isRed()) {\n            throw fail('Right child of (' + this.key + ',' + this.value + ') is red');\n        }\n        var blackDepth = this.left.check();\n        if (blackDepth !== this.right.check()) {\n            throw fail('Black depths differ');\n        }\n        else {\n            return blackDepth + (this.isRed() ? 0 : 1);\n        }\n    };\n    LLRBNode.EMPTY = null;\n    LLRBNode.RED = true;\n    LLRBNode.BLACK = false;\n    return LLRBNode;\n}()); // end LLRBNode\nexport { LLRBNode };\n// Represents an empty node (a leaf node in the Red-Black Tree).\nvar LLRBEmptyNode = /** @class */ (function () {\n    function LLRBEmptyNode() {\n        this.size = 0;\n    }\n    // Returns a copy of the current node.\n    LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\n        return this;\n    };\n    // Returns a copy of the tree, with the specified key/value added.\n    LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\n        return new LLRBNode(key, value);\n    };\n    // Returns a copy of the tree, with the specified key removed.\n    LLRBEmptyNode.prototype.remove = function (key, comparator) {\n        return this;\n    };\n    LLRBEmptyNode.prototype.isEmpty = function () {\n        return true;\n    };\n    LLRBEmptyNode.prototype.inorderTraversal = function (action) {\n        return false;\n    };\n    LLRBEmptyNode.prototype.reverseTraversal = function (action) {\n        return false;\n    };\n    LLRBEmptyNode.prototype.minKey = function () {\n        return null;\n    };\n    LLRBEmptyNode.prototype.maxKey = function () {\n        return null;\n    };\n    LLRBEmptyNode.prototype.isRed = function () {\n        return false;\n    };\n    // For testing.\n    LLRBEmptyNode.prototype.checkMaxDepth = function () {\n        return true;\n    };\n    LLRBEmptyNode.prototype.check = function () {\n        return 0;\n    };\n    return LLRBEmptyNode;\n}()); // end LLRBEmptyNode\nexport { LLRBEmptyNode };\nLLRBNode.EMPTY = new LLRBEmptyNode();\n\n//# sourceMappingURL=sorted_map.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/sorted_map.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { emptyByteString } from '../platform/platform';\n/** An enumeration of the different purposes we have for queries. */\nexport var QueryPurpose;\n(function (QueryPurpose) {\n    /** A regular, normal query. */\n    QueryPurpose[QueryPurpose[\"Listen\"] = 0] = \"Listen\";\n    /**\n     * The query was used to refill a query after an existence filter mismatch.\n     */\n    QueryPurpose[QueryPurpose[\"ExistenceFilterMismatch\"] = 1] = \"ExistenceFilterMismatch\";\n    /** The query was used to resolve a limbo document. */\n    QueryPurpose[QueryPurpose[\"LimboResolution\"] = 2] = \"LimboResolution\";\n})(QueryPurpose = QueryPurpose || (QueryPurpose = {}));\n/**\n * An immutable set of metadata that the local store tracks for each query.\n */\nvar QueryData = /** @class */ (function () {\n    function QueryData(\n        /** The query being listened to. */\n        query, \n        /**\n         * The target ID to which the query corresponds; Assigned by the\n         * LocalStore for user listens and by the SyncEngine for limbo watches.\n         */\n        targetId, \n        /** The purpose of the query. */\n        purpose, \n        /** The latest snapshot version seen for this target. */\n        snapshotVersion, \n        /**\n         * An opaque, server-assigned token that allows watching a query to be\n         * resumed after disconnecting without retransmitting all the data that\n         * matches the query. The resume token essentially identifies a point in\n         * time from which the server should resume sending results.\n         */\n        resumeToken) {\n        if (snapshotVersion === void 0) { snapshotVersion = SnapshotVersion.MIN; }\n        if (resumeToken === void 0) { resumeToken = emptyByteString(); }\n        this.query = query;\n        this.targetId = targetId;\n        this.purpose = purpose;\n        this.snapshotVersion = snapshotVersion;\n        this.resumeToken = resumeToken;\n    }\n    /**\n     * Creates a new query data instance with an updated snapshot version and\n     * resume token.\n     */\n    QueryData.prototype.update = function (updated) {\n        return new QueryData(this.query, this.targetId, this.purpose, updated.snapshotVersion, updated.resumeToken);\n    };\n    QueryData.prototype.equals = function (other) {\n        return (this.targetId === other.targetId &&\n            this.purpose === other.purpose &&\n            this.snapshotVersion.equals(other.snapshotVersion) &&\n            this.resumeToken === other.resumeToken &&\n            this.query.equals(other.query));\n    };\n    return QueryData;\n}());\nexport { QueryData };\n\n//# sourceMappingURL=query_data.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/query_data.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { primitiveComparator } from '../util/misc';\n// A RegExp matching ISO 8601 UTC timestamps with optional fraction.\nvar isoRegExp = new RegExp(/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/);\nvar Timestamp = /** @class */ (function () {\n    function Timestamp(seconds, nanos) {\n        this.seconds = seconds;\n        this.nanos = nanos;\n        assert(nanos >= 0, 'timestamp nanoseconds out of range: ' + nanos);\n        assert(nanos < 1e9, 'timestamp nanoseconds out of range' + nanos);\n        // Midnight at the beginning of 1/1/1 is the earliest Firestore supports.\n        assert(seconds >= -62135596800, 'timestamp seconds out of range: ' + seconds);\n        // This will break in the year 10,000.\n        assert(seconds < 253402300800, 'timestamp seconds out of range' + seconds);\n    }\n    Timestamp.now = function () {\n        return Timestamp.fromEpochMilliseconds(Date.now());\n    };\n    Timestamp.fromDate = function (date) {\n        return Timestamp.fromEpochMilliseconds(date.getTime());\n    };\n    Timestamp.fromEpochMilliseconds = function (milliseconds) {\n        var seconds = Math.floor(milliseconds / 1000);\n        var nanos = (milliseconds - seconds * 1000) * 1e6;\n        return new Timestamp(seconds, nanos);\n    };\n    Timestamp.fromISOString = function (utc) {\n        // The date string can have higher precision (nanos) than the Date class\n        // (millis), so we do some custom parsing here.\n        // Parse the nanos right out of the string.\n        var nanos = 0;\n        var fraction = isoRegExp.exec(utc);\n        assert(!!fraction, 'invalid timestamp: ' + utc);\n        if (fraction[1]) {\n            // Pad the fraction out to 9 digits (nanos).\n            var nanoStr = fraction[1];\n            nanoStr = (nanoStr + '000000000').substr(0, 9);\n            nanos = parseInt(nanoStr, 10);\n        }\n        // Parse the date to get the seconds.\n        var date = new Date(utc);\n        var seconds = Math.floor(date.getTime() / 1000);\n        return new Timestamp(seconds, nanos);\n    };\n    Timestamp.prototype.toDate = function () {\n        return new Date(this.toEpochMilliseconds());\n    };\n    Timestamp.prototype.toEpochMilliseconds = function () {\n        return this.seconds * 1000 + this.nanos / 1e6;\n    };\n    Timestamp.prototype.compareTo = function (other) {\n        if (this.seconds === other.seconds) {\n            return primitiveComparator(this.nanos, other.nanos);\n        }\n        return primitiveComparator(this.seconds, other.seconds);\n    };\n    Timestamp.prototype.equals = function (other) {\n        return other.seconds === this.seconds && other.nanos === this.nanos;\n    };\n    Timestamp.prototype.toString = function () {\n        return 'Timestamp(seconds=' + this.seconds + ', nanos=' + this.nanos + ')';\n    };\n    return Timestamp;\n}());\nexport { Timestamp };\n\n//# sourceMappingURL=timestamp.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/timestamp.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Timestamp } from './timestamp';\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */\nvar SnapshotVersion = /** @class */ (function () {\n    function SnapshotVersion(timestamp) {\n        this.timestamp = timestamp;\n    }\n    // TODO(b/34176344): Once we no longer need to use the old alpha protos,\n    // delete this constructor and use a timestamp-backed version everywhere.\n    SnapshotVersion.fromMicroseconds = function (value) {\n        var seconds = Math.floor(value / 1e6);\n        var nanos = (value % 1e6) * 1e3;\n        return new SnapshotVersion(new Timestamp(seconds, nanos));\n    };\n    SnapshotVersion.fromTimestamp = function (value) {\n        return new SnapshotVersion(value);\n    };\n    SnapshotVersion.forDeletedDoc = function () {\n        return SnapshotVersion.MIN;\n    };\n    SnapshotVersion.prototype.compareTo = function (other) {\n        return this.timestamp.compareTo(other.timestamp);\n    };\n    SnapshotVersion.prototype.equals = function (other) {\n        return this.timestamp.equals(other.timestamp);\n    };\n    /** Returns a number representation of the version for use in spec tests. */\n    SnapshotVersion.prototype.toMicroseconds = function () {\n        // Convert to microseconds.\n        return this.timestamp.seconds * 1e6 + this.timestamp.nanos / 1000;\n    };\n    SnapshotVersion.prototype.toString = function () {\n        return 'SnapshotVersion(' + this.timestamp.toString() + ')';\n    };\n    SnapshotVersion.prototype.toTimestamp = function () {\n        return this.timestamp;\n    };\n    SnapshotVersion.MIN = new SnapshotVersion(new Timestamp(0, 0));\n    return SnapshotVersion;\n}());\nexport { SnapshotVersion };\n\n//# sourceMappingURL=snapshot_version.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/snapshot_version.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { assert, fail } from '../util/assert';\nimport * as misc from '../util/misc';\nimport { Document, NoDocument } from './document';\nimport { ObjectValue, ServerTimestampValue } from './field_value';\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */\nvar FieldMask = /** @class */ (function () {\n    function FieldMask(fields) {\n        this.fields = fields;\n        // TODO(dimond): validation of FieldMask\n    }\n    FieldMask.prototype.equals = function (other) {\n        return misc.arrayEquals(this.fields, other.fields);\n    };\n    return FieldMask;\n}());\nexport { FieldMask };\n/** Transforms a value into a server-generated timestamp. */\nvar ServerTimestampTransform = /** @class */ (function () {\n    function ServerTimestampTransform() {\n    }\n    ServerTimestampTransform.prototype.equals = function (other) {\n        return other instanceof ServerTimestampTransform;\n    };\n    ServerTimestampTransform.instance = new ServerTimestampTransform();\n    return ServerTimestampTransform;\n}());\nexport { ServerTimestampTransform };\n/** A field path and the TransformOperation to perform upon it. */\nvar FieldTransform = /** @class */ (function () {\n    function FieldTransform(field, transform) {\n        this.field = field;\n        this.transform = transform;\n    }\n    FieldTransform.prototype.equals = function (other) {\n        return (this.field.equals(other.field) && this.transform.equals(other.transform));\n    };\n    return FieldTransform;\n}());\nexport { FieldTransform };\n/** The result of successfully applying a mutation to the backend. */\nvar MutationResult = /** @class */ (function () {\n    function MutationResult(\n        /**\n           * The version at which the mutation was committed or null for a delete.\n           */\n        version, \n        /**\n           * The resulting fields returned from the backend after a\n           * TransformMutation has been committed. Contains one FieldValue for each\n           * FieldTransform that was in the mutation.\n           *\n           * Will be null if the mutation was not a TransformMutation.\n           */\n        transformResults) {\n        this.version = version;\n        this.transformResults = transformResults;\n    }\n    return MutationResult;\n}());\nexport { MutationResult };\nexport var MutationType;\n(function (MutationType) {\n    MutationType[MutationType[\"Set\"] = 0] = \"Set\";\n    MutationType[MutationType[\"Patch\"] = 1] = \"Patch\";\n    MutationType[MutationType[\"Transform\"] = 2] = \"Transform\";\n    MutationType[MutationType[\"Delete\"] = 3] = \"Delete\";\n})(MutationType = MutationType || (MutationType = {}));\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */\nvar Precondition = /** @class */ (function () {\n    function Precondition(updateTime, exists) {\n        this.updateTime = updateTime;\n        this.exists = exists;\n        assert(updateTime === undefined || exists === undefined, 'Precondition can specify \"exists\" or \"updateTime\" but not both');\n    }\n    /** Creates a new Precondition with an exists flag. */\n    Precondition.exists = function (exists) {\n        return new Precondition(undefined, exists);\n    };\n    /** Creates a new Precondition based on a version a document exists at. */\n    Precondition.updateTime = function (version) {\n        return new Precondition(version);\n    };\n    Object.defineProperty(Precondition.prototype, \"isNone\", {\n        /** Returns whether this Precondition is empty. */\n        get: function () {\n            return this.updateTime === undefined && this.exists === undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns true if the preconditions is valid for the given document\n     * (or null if no document is available).\n     */\n    Precondition.prototype.isValidFor = function (maybeDoc) {\n        if (this.updateTime !== undefined) {\n            return (maybeDoc instanceof Document && maybeDoc.version.equals(this.updateTime));\n        }\n        else if (this.exists !== undefined) {\n            if (this.exists) {\n                return maybeDoc instanceof Document;\n            }\n            else {\n                return maybeDoc === null || maybeDoc instanceof NoDocument;\n            }\n        }\n        else {\n            assert(this.isNone, 'Precondition should be empty');\n            return true;\n        }\n    };\n    Precondition.prototype.equals = function (other) {\n        return (misc.equals(this.updateTime, other.updateTime) &&\n            this.exists === other.exists);\n    };\n    Precondition.NONE = new Precondition();\n    return Precondition;\n}());\nexport { Precondition };\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also it version.\n * In the case of Set, Patch, and Transform mutations we preserve the existing\n * version. In the case of Delete mutations, we reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        null                  Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      null                  null\n * TransformMutation  Document(v3)          Document(v3)\n * TransformMutation  NoDocument(v3)        NoDocument(v3)\n * TransformMutation  null                  null\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     null                  NoDocument(v0)\n *\n * Note that TransformMutations don't create Documents (in the case of being\n * applied to a NoDocument), even though they would on the backend. This is\n * because the client always combines the TransformMutation with a SetMutation\n * or PatchMutation and we only want to apply the transform if the prior\n * mutation resulted in a Document (always true for a SetMutation, but not\n * necessarily for a PatchMutation).\n *\n * ## Subclassing Notes\n *\n * Subclasses of Mutation need to implement applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document.\n */\nvar Mutation = /** @class */ (function () {\n    function Mutation() {\n    }\n    Mutation.prototype.verifyKeyMatches = function (maybeDoc) {\n        if (maybeDoc != null) {\n            assert(maybeDoc.key.equals(this.key), 'Can only apply a mutation to a document with the same key');\n        }\n    };\n    /**\n     * Returns the version from the given document for use as the result of a\n     * mutation. Mutations are defined to return the version of the base document\n     * only if it is an existing document. Deleted and unknown documents have a\n     * post-mutation version of SnapshotVersion.MIN.\n     */\n    Mutation.getPostMutationVersion = function (maybeDoc) {\n        if (maybeDoc instanceof Document) {\n            return maybeDoc.version;\n        }\n        else {\n            return SnapshotVersion.MIN;\n        }\n    };\n    return Mutation;\n}());\nexport { Mutation };\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */\nvar SetMutation = /** @class */ (function (_super) {\n    __extends(SetMutation, _super);\n    function SetMutation(key, value, precondition) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.value = value;\n        _this.precondition = precondition;\n        _this.type = MutationType.Set;\n        return _this;\n    }\n    SetMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults == null, 'Transform results received by SetMutation.');\n        // Unlike applyToLocalView, if we're applying a mutation to a remote\n        // document the server has accepted the mutation so the precondition must\n        // have held.\n        var version = Mutation.getPostMutationVersion(maybeDoc);\n        return new Document(this.key, version, this.value, {\n            hasLocalMutations: false\n        });\n    };\n    SetMutation.prototype.applyToLocalView = function (maybeDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var version = Mutation.getPostMutationVersion(maybeDoc);\n        return new Document(this.key, version, this.value, {\n            hasLocalMutations: true\n        });\n    };\n    SetMutation.prototype.equals = function (other) {\n        return (other instanceof SetMutation &&\n            this.key.equals(other.key) &&\n            this.value.equals(other.value) &&\n            this.precondition.equals(other.precondition));\n    };\n    return SetMutation;\n}(Mutation));\nexport { SetMutation };\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */\nvar PatchMutation = /** @class */ (function (_super) {\n    __extends(PatchMutation, _super);\n    function PatchMutation(key, data, fieldMask, precondition) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.data = data;\n        _this.fieldMask = fieldMask;\n        _this.precondition = precondition;\n        _this.type = MutationType.Patch;\n        return _this;\n    }\n    PatchMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults == null, 'Transform results received by PatchMutation.');\n        // TODO(mcg): Relax enforcement of this precondition\n        //\n        // We shouldn't actually enforce the precondition since it already passed on\n        // the backend, but we may not have a local version of the document to\n        // patch, so we use the precondition to prevent incorrectly putting a\n        // partial document into our cache.\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var version = Mutation.getPostMutationVersion(maybeDoc);\n        var newData = this.patchDocument(maybeDoc);\n        return new Document(this.key, version, newData, {\n            hasLocalMutations: false\n        });\n    };\n    PatchMutation.prototype.applyToLocalView = function (maybeDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var version = Mutation.getPostMutationVersion(maybeDoc);\n        var newData = this.patchDocument(maybeDoc);\n        return new Document(this.key, version, newData, {\n            hasLocalMutations: true\n        });\n    };\n    PatchMutation.prototype.equals = function (other) {\n        return (other instanceof PatchMutation &&\n            this.key.equals(other.key) &&\n            this.fieldMask.equals(other.fieldMask) &&\n            this.precondition.equals(other.precondition));\n    };\n    /**\n     * Patches the data of document if available or creates a new document. Note\n     * that this does not check whether or not the precondition of this patch\n     * holds.\n     */\n    PatchMutation.prototype.patchDocument = function (maybeDoc) {\n        var data;\n        if (maybeDoc instanceof Document) {\n            data = maybeDoc.data;\n        }\n        else {\n            data = ObjectValue.EMPTY;\n        }\n        return this.patchObject(data);\n    };\n    PatchMutation.prototype.patchObject = function (data) {\n        for (var _i = 0, _a = this.fieldMask.fields; _i < _a.length; _i++) {\n            var fieldPath = _a[_i];\n            var newValue = this.data.field(fieldPath);\n            if (newValue !== undefined) {\n                data = data.set(fieldPath, newValue);\n            }\n            else {\n                data = data.delete(fieldPath);\n            }\n        }\n        return data;\n    };\n    return PatchMutation;\n}(Mutation));\nexport { PatchMutation };\n/**\n * A mutation that modifies specific fields of the document with transform\n * operations. Currently the only supported transform is a server timestamp, but\n * IP Address, increment(n), etc. could be supported in the future.\n *\n * It is somewhat similar to a PatchMutation in that it patches specific fields\n * and has no effect when applied to a null or NoDocument (see comment on\n * Mutation for rationale).\n */\nvar TransformMutation = /** @class */ (function (_super) {\n    __extends(TransformMutation, _super);\n    function TransformMutation(key, fieldTransforms) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.fieldTransforms = fieldTransforms;\n        _this.type = MutationType.Transform;\n        // NOTE: We set a precondition of exists: true as a safety-check, since we\n        // always combine TransformMutations with a SetMutation or PatchMutation which\n        // (if successful) should end up with an existing document.\n        _this.precondition = Precondition.exists(true);\n        return _this;\n    }\n    TransformMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults != null, 'Transform results missing for TransformMutation.');\n        var transformResults = mutationResult.transformResults;\n        // TODO(mcg): Relax enforcement of this precondition\n        //\n        // We shouldn't actually enforce the precondition since it already passed on\n        // the backend, but we may not have a local version of the document to\n        // patch, so we use the precondition to prevent incorrectly putting a\n        // partial document into our cache.\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var doc = this.requireDocument(maybeDoc);\n        var newData = this.transformObject(doc.data, transformResults);\n        return new Document(this.key, doc.version, newData, {\n            hasLocalMutations: false\n        });\n    };\n    TransformMutation.prototype.applyToLocalView = function (maybeDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var doc = this.requireDocument(maybeDoc);\n        var transformResults = this.localTransformResults(localWriteTime);\n        var newData = this.transformObject(doc.data, transformResults);\n        return new Document(this.key, doc.version, newData, {\n            hasLocalMutations: true\n        });\n    };\n    TransformMutation.prototype.equals = function (other) {\n        return (other instanceof TransformMutation &&\n            this.key.equals(other.key) &&\n            misc.arrayEquals(this.fieldTransforms, other.fieldTransforms) &&\n            this.precondition.equals(other.precondition));\n    };\n    /**\n     * Asserts that the given MaybeDocument is actually a Document and verifies\n     * that it matches the key for this mutation. Since we only support\n     * transformations with precondition exists this method is guaranteed to be\n     * safe.\n     */\n    TransformMutation.prototype.requireDocument = function (maybeDoc) {\n        assert(maybeDoc instanceof Document, 'Unknown MaybeDocument type ' + maybeDoc);\n        var doc = maybeDoc;\n        assert(doc.key.equals(this.key), 'Can only transform a document with the same key');\n        return doc;\n    };\n    /**\n     * Creates a list of \"transform results\" (a transform result is a field value\n     * representing the result of applying a transform) for use when applying a\n     * TransformMutation locally.\n     *\n     * @param localWriteTime The local time of the transform mutation (used to\n     *     generate ServerTimestampValues).\n     * @return The transform results list.\n     */\n    TransformMutation.prototype.localTransformResults = function (localWriteTime) {\n        var transformResults = [];\n        for (var _i = 0, _a = this.fieldTransforms; _i < _a.length; _i++) {\n            var fieldTransform = _a[_i];\n            var transform = fieldTransform.transform;\n            if (transform instanceof ServerTimestampTransform) {\n                transformResults.push(new ServerTimestampValue(localWriteTime));\n            }\n            else {\n                return fail('Encountered unknown transform: ' + transform);\n            }\n        }\n        return transformResults;\n    };\n    TransformMutation.prototype.transformObject = function (data, transformResults) {\n        assert(transformResults.length === this.fieldTransforms.length, 'TransformResults length mismatch.');\n        for (var i = 0; i < this.fieldTransforms.length; i++) {\n            var fieldTransform = this.fieldTransforms[i];\n            var transform = fieldTransform.transform;\n            var fieldPath = fieldTransform.field;\n            if (transform instanceof ServerTimestampTransform) {\n                data = data.set(fieldPath, transformResults[i]);\n            }\n            else {\n                return fail('Encountered unknown transform: ' + transform);\n            }\n        }\n        return data;\n    };\n    return TransformMutation;\n}(Mutation));\nexport { TransformMutation };\n/** A mutation that deletes the document at the given key. */\nvar DeleteMutation = /** @class */ (function (_super) {\n    __extends(DeleteMutation, _super);\n    function DeleteMutation(key, precondition) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.precondition = precondition;\n        _this.type = MutationType.Delete;\n        return _this;\n    }\n    DeleteMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults == null, 'Transform results received by DeleteMutation.');\n        // Unlike applyToLocalView, if we're applying a mutation to a remote\n        // document the server has accepted the mutation so the precondition must\n        // have held.\n        return new NoDocument(this.key, SnapshotVersion.MIN);\n    };\n    DeleteMutation.prototype.applyToLocalView = function (maybeDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        if (maybeDoc) {\n            assert(maybeDoc.key.equals(this.key), 'Can only apply mutation to document with same key');\n        }\n        return new NoDocument(this.key, SnapshotVersion.forDeletedDoc());\n    };\n    DeleteMutation.prototype.equals = function (other) {\n        return (other instanceof DeleteMutation &&\n            this.key.equals(other.key) &&\n            this.precondition.equals(other.precondition));\n    };\n    return DeleteMutation;\n}(Mutation));\nexport { DeleteMutation };\n\n//# sourceMappingURL=mutation.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/mutation.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar ExistenceFilter = /** @class */ (function () {\n    // TODO(b/33078163): just use simplest form of existence filter for now\n    function ExistenceFilter(count) {\n        this.count = count;\n    }\n    ExistenceFilter.prototype.equals = function (other) {\n        return other && other.count === this.count;\n    };\n    return ExistenceFilter;\n}());\nexport { ExistenceFilter };\n\n//# sourceMappingURL=existence_filter.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/existence_filter.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SortedMap } from './sorted_map';\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nvar SortedSet = /** @class */ (function () {\n    function SortedSet(comparator) {\n        this.comparator = comparator;\n        this.data = new SortedMap(this.comparator);\n    }\n    /**\n     * Creates a SortedSet from the keys of the map.\n     * This is currently implemented as an O(n) copy.\n     */\n    SortedSet.fromMapKeys = function (map) {\n        var keys = new SortedSet(map.comparator);\n        map.forEach(function (key) {\n            keys = keys.add(key);\n        });\n        return keys;\n    };\n    SortedSet.prototype.has = function (elem) {\n        return this.data.get(elem) !== null;\n    };\n    SortedSet.prototype.first = function () {\n        return this.data.minKey();\n    };\n    SortedSet.prototype.last = function () {\n        return this.data.maxKey();\n    };\n    Object.defineProperty(SortedSet.prototype, \"size\", {\n        get: function () {\n            return this.data.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SortedSet.prototype.indexOf = function (elem) {\n        return this.data.indexOf(elem);\n    };\n    /** Iterates elements in order defined by \"comparator\" */\n    SortedSet.prototype.forEach = function (cb) {\n        this.data.inorderTraversal(function (k, v) {\n            cb(k);\n            return false;\n        });\n    };\n    /** Iterates over `elem`s such that: range[0] <= elem < range[1]. */\n    SortedSet.prototype.forEachInRange = function (range, cb) {\n        var iter = this.data.getIteratorFrom(range[0]);\n        while (iter.hasNext()) {\n            var elem = iter.getNext();\n            if (this.comparator(elem.key, range[1]) >= 0)\n                return;\n            cb(elem.key);\n        }\n    };\n    /**\n     * Iterates over `elem`s such that: start <= elem until false is returned.\n     */\n    SortedSet.prototype.forEachWhile = function (cb, start) {\n        var iter;\n        if (start !== undefined) {\n            iter = this.data.getIteratorFrom(start);\n        }\n        else {\n            iter = this.data.getIterator();\n        }\n        while (iter.hasNext()) {\n            var elem = iter.getNext();\n            var result = cb(elem.key);\n            if (!result)\n                return;\n        }\n    };\n    /** Finds the least element greater than or equal to `elem`. */\n    SortedSet.prototype.firstAfterOrEqual = function (elem) {\n        var iter = this.data.getIteratorFrom(elem);\n        return iter.hasNext() ? iter.getNext().key : null;\n    };\n    /** Inserts or updates an element */\n    SortedSet.prototype.add = function (elem) {\n        return this.copy(this.data.remove(elem).insert(elem, true));\n    };\n    /** Deletes an element */\n    SortedSet.prototype.delete = function (elem) {\n        if (!this.has(elem))\n            return this;\n        return this.copy(this.data.remove(elem));\n    };\n    SortedSet.prototype.isEmpty = function () {\n        return this.data.isEmpty();\n    };\n    SortedSet.prototype.unionWith = function (other) {\n        var result = this;\n        other.forEach(function (elem) {\n            result = result.add(elem);\n        });\n        return result;\n    };\n    SortedSet.prototype.equals = function (other) {\n        if (!(other instanceof SortedSet))\n            return false;\n        if (this.size !== other.size)\n            return false;\n        var thisIt = this.data.getIterator();\n        var otherIt = other.data.getIterator();\n        while (thisIt.hasNext()) {\n            var thisElem = thisIt.getNext().key;\n            var otherElem = otherIt.getNext().key;\n            if (this.comparator(thisElem, otherElem) !== 0)\n                return false;\n        }\n        return true;\n    };\n    SortedSet.prototype.toString = function () {\n        var result = [];\n        this.forEach(function (elem) { return result.push(elem); });\n        return 'SortedSet(' + result.toString() + ')';\n    };\n    SortedSet.prototype.copy = function (data) {\n        var result = new SortedSet(this.comparator);\n        result.data = data;\n        return result;\n    };\n    return SortedSet;\n}());\nexport { SortedSet };\n\n//# sourceMappingURL=sorted_set.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/sorted_set.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { documentKeySet } from '../model/collections';\nimport { emptyByteString } from '../platform/platform';\n/**\n * An event from the RemoteStore. It is split into targetChanges (changes to the\n * state or the set of documents in our watched targets) and documentUpdates\n * (changes to the actual documents).\n */\nvar RemoteEvent = /** @class */ (function () {\n    function RemoteEvent(\n        /**\n           * The snapshot version this event brings us up to, or MIN if not set.\n           */\n        snapshotVersion, \n        /**\n           * A map from target to changes to the target. See TargetChange.\n           */\n        targetChanges, \n        /**\n           * A set of which documents have changed or been deleted, along with the\n           * doc's new values (if not deleted).\n           */\n        documentUpdates) {\n        this.snapshotVersion = snapshotVersion;\n        this.targetChanges = targetChanges;\n        this.documentUpdates = documentUpdates;\n    }\n    RemoteEvent.prototype.addDocumentUpdate = function (doc) {\n        this.documentUpdates = this.documentUpdates.insert(doc.key, doc);\n    };\n    RemoteEvent.prototype.handleExistenceFilterMismatch = function (targetId) {\n        /*\n         * An existence filter mismatch will reset the query and we need to reset\n         * the mapping to contain no documents and an empty resume token.\n         *\n         * Note:\n         *   * The reset mapping is empty, specifically forcing the consumer of the\n         *     change to forget all keys for this targetID;\n         *   * The resume snapshot for this target must be reset\n         *   * The target must be unacked because unwatching and rewatching\n         *     introduces a race for changes.\n         */\n        this.targetChanges[targetId] = {\n            mapping: new ResetMapping(),\n            snapshotVersion: SnapshotVersion.MIN,\n            currentStatusUpdate: CurrentStatusUpdate.MarkNotCurrent,\n            resumeToken: emptyByteString()\n        };\n    };\n    return RemoteEvent;\n}());\nexport { RemoteEvent };\n/**\n * Represents an update to the current status of a target, either explicitly\n * having no new state, or the new value to set. Note \"current\" has special\n * meaning for in the RPC protocol that implies that a target is both up-to-date\n * and consistent with the rest of the watch stream.\n */\nexport var CurrentStatusUpdate;\n(function (CurrentStatusUpdate) {\n    /** The current status is not affected and should not be modified. */\n    CurrentStatusUpdate[CurrentStatusUpdate[\"None\"] = 0] = \"None\";\n    /** The target must be marked as no longer \"current\". */\n    CurrentStatusUpdate[CurrentStatusUpdate[\"MarkNotCurrent\"] = 1] = \"MarkNotCurrent\";\n    /** The target must be marked as \"current\". */\n    CurrentStatusUpdate[CurrentStatusUpdate[\"MarkCurrent\"] = 2] = \"MarkCurrent\";\n})(CurrentStatusUpdate = CurrentStatusUpdate || (CurrentStatusUpdate = {}));\nvar EMPTY_KEY_SET = documentKeySet();\nvar ResetMapping = /** @class */ (function () {\n    function ResetMapping() {\n        this.docs = EMPTY_KEY_SET;\n    }\n    Object.defineProperty(ResetMapping.prototype, \"documents\", {\n        get: function () {\n            return this.docs;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ResetMapping.prototype.add = function (key) {\n        this.docs = this.docs.add(key);\n    };\n    ResetMapping.prototype.delete = function (key) {\n        this.docs = this.docs.delete(key);\n    };\n    ResetMapping.prototype.equals = function (other) {\n        return other !== null && this.docs.equals(other.docs);\n    };\n    return ResetMapping;\n}());\nexport { ResetMapping };\nvar UpdateMapping = /** @class */ (function () {\n    function UpdateMapping() {\n        this.addedDocuments = EMPTY_KEY_SET;\n        this.removedDocuments = EMPTY_KEY_SET;\n    }\n    UpdateMapping.prototype.applyToKeySet = function (keys) {\n        var result = keys;\n        this.addedDocuments.forEach(function (key) { return (result = result.add(key)); });\n        this.removedDocuments.forEach(function (key) { return (result = result.delete(key)); });\n        return result;\n    };\n    UpdateMapping.prototype.add = function (key) {\n        this.addedDocuments = this.addedDocuments.add(key);\n        this.removedDocuments = this.removedDocuments.delete(key);\n    };\n    UpdateMapping.prototype.delete = function (key) {\n        this.addedDocuments = this.addedDocuments.delete(key);\n        this.removedDocuments = this.removedDocuments.add(key);\n    };\n    UpdateMapping.prototype.equals = function (other) {\n        return (other !== null &&\n            this.addedDocuments.equals(other.addedDocuments) &&\n            this.removedDocuments.equals(other.removedDocuments));\n    };\n    return UpdateMapping;\n}());\nexport { UpdateMapping };\n\n//# sourceMappingURL=remote_event.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/remote_event.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\n/**\n * Provides a simple helper class that implements the Stream interface to\n * bridge to other implementations that are streams but do not implement the\n * interface. The stream callbacks are invoked with the callOn... methods.\n */\nvar StreamBridge = /** @class */ (function () {\n    function StreamBridge(args) {\n        this.wrappedOnOpen = null;\n        this.wrappedOnClose = null;\n        this.wrappedOnMessage = null;\n        this.sendFn = args.sendFn;\n        this.closeFn = args.closeFn;\n    }\n    StreamBridge.prototype.onOpen = function (callback) {\n        assert(!this.wrappedOnOpen, 'Called onOpen on stream twice!');\n        this.wrappedOnOpen = callback;\n    };\n    StreamBridge.prototype.onClose = function (callback) {\n        assert(!this.wrappedOnClose, 'Called onClose on stream twice!');\n        this.wrappedOnClose = callback;\n    };\n    StreamBridge.prototype.onMessage = function (callback) {\n        assert(!this.wrappedOnMessage, 'Called onMessage on stream twice!');\n        this.wrappedOnMessage = callback;\n    };\n    StreamBridge.prototype.close = function () {\n        this.closeFn();\n    };\n    StreamBridge.prototype.send = function (msg) {\n        this.sendFn(msg);\n    };\n    StreamBridge.prototype.callOnOpen = function () {\n        assert(this.wrappedOnOpen !== null, 'Cannot call onOpen because no callback ' + 'was set');\n        this.wrappedOnOpen();\n    };\n    StreamBridge.prototype.callOnClose = function (err) {\n        assert(this.wrappedOnClose !== null, 'Cannot call onClose because no ' + 'callback was set');\n        this.wrappedOnClose(err);\n    };\n    StreamBridge.prototype.callOnMessage = function (msg) {\n        assert(this.wrappedOnMessage !== null, 'Cannot call onMessage because no ' + 'callback was set');\n        this.wrappedOnMessage(msg);\n    };\n    return StreamBridge;\n}());\nexport { StreamBridge };\n\n//# sourceMappingURL=stream_bridge.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/stream_bridge.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ErrorCode, EventType, WebChannel, XhrIoPool, createWebChannelTransport } from '@firebase/webchannel-wrapper';\nimport { SDK_VERSION } from '../core/version';\nimport { mapCodeFromHttpStatus, mapCodeFromRpcStatus } from '../remote/rpc_error';\nimport { StreamBridge } from '../remote/stream_bridge';\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport * as log from '../util/log';\nvar LOG_TAG = 'Connection';\nvar RPC_URL_VERSION = 'v1beta1';\n// TODO(b/38203344): The SDK_VERSION is set independently from Firebase because\n// we are doing out-of-band releases. Once we release as part of Firebase, we\n// should use the Firebase version instead.\nvar X_GOOG_API_CLIENT_VALUE = 'gl-js/ fire/' + SDK_VERSION;\nvar XHR_TIMEOUT_SECS = 15;\nvar WebChannelConnection = /** @class */ (function () {\n    function WebChannelConnection(info) {\n        this.databaseId = info.databaseId;\n        this.pool = new XhrIoPool();\n        var proto = info.ssl ? 'https' : 'http';\n        this.baseUrl = proto + '://' + info.host;\n    }\n    /**\n     * Modifies the headers for a request, adding any authorization token if\n     * present and any additional headers for the request.\n     */\n    WebChannelConnection.prototype.modifyHeadersForRequest = function (headers, token) {\n        if (token) {\n            for (var header in token.authHeaders) {\n                if (token.authHeaders.hasOwnProperty(header)) {\n                    headers[header] = token.authHeaders[header];\n                }\n            }\n        }\n        headers['X-Goog-Api-Client'] = X_GOOG_API_CLIENT_VALUE;\n        // This header is used to improve routing and project isolation by the\n        // backend.\n        headers['google-cloud-resource-prefix'] =\n            \"projects/\" + this.databaseId.projectId + \"/\" +\n                (\"databases/\" + this.databaseId.database);\n    };\n    WebChannelConnection.prototype.invoke = function (rpcName, request, token) {\n        var _this = this;\n        var url = this.makeUrl(rpcName);\n        return new Promise(function (resolve, reject) {\n            _this.pool.getObject(function (xhr) {\n                xhr.listenOnce(EventType.COMPLETE, function () {\n                    try {\n                        switch (xhr.getLastErrorCode()) {\n                            case ErrorCode.NO_ERROR:\n                                var json = xhr.getResponseJson();\n                                log.debug(LOG_TAG, 'XHR received:', JSON.stringify(json));\n                                resolve(json);\n                                break;\n                            case ErrorCode.TIMEOUT:\n                                log.error('RPC \"' + rpcName + '\" timed out, retrying.');\n                                reject(new FirestoreError(Code.DEADLINE_EXCEEDED, 'Request time out'));\n                                break;\n                            case ErrorCode.HTTP_ERROR:\n                                var status_1 = xhr.getStatus();\n                                log.error('RPC \"' + rpcName + '\" failed with status:', status_1, 'response text:', xhr.getResponseText());\n                                if (status_1 > 0) {\n                                    reject(new FirestoreError(mapCodeFromHttpStatus(status_1), 'Server responded with status ' + xhr.getStatusText()));\n                                }\n                                else {\n                                    // If we received an HTTP_ERROR but there's no status code,\n                                    // it's most probably a connection issue, let's retry.\n                                    log.error(LOG_TAG, 'RPC \"' + rpcName + '\" failed, retrying.');\n                                    reject(new FirestoreError(Code.UNAVAILABLE, 'Connection failed.'));\n                                }\n                                break;\n                            default:\n                                fail('RPC \"' +\n                                    rpcName +\n                                    '\" failed with unanticipated ' +\n                                    'webchannel error ' +\n                                    xhr.getLastErrorCode() +\n                                    ': ' +\n                                    xhr.getLastError() +\n                                    ', giving up.');\n                        }\n                    }\n                    finally {\n                        log.debug(LOG_TAG, 'RPC \"' + rpcName + '\" completed.');\n                        _this.pool.releaseObject(xhr);\n                    }\n                });\n                var requestString = JSON.stringify(request);\n                log.debug(LOG_TAG, 'XHR sending: ', url + ' ' + requestString);\n                // Content-Type: text/plain will avoid preflight requests which might\n                // mess with CORS and redirects by proxies. If we add custom headers\n                // we will need to change this code to potentially use the\n                // $httpOverwrite parameter supported by ESF to avoid\n                // triggering preflight requests.\n                var headers = { 'Content-Type': 'text/plain' };\n                _this.modifyHeadersForRequest(headers, token);\n                xhr.send(url, 'POST', requestString, headers, XHR_TIMEOUT_SECS);\n            });\n        });\n    };\n    WebChannelConnection.prototype.openStream = function (rpcName, token) {\n        var rpcService = WebChannelConnection.RPC_STREAM_SERVICE_MAPPING[rpcName];\n        var rpcUrlName = WebChannelConnection.RPC_STREAM_NAME_MAPPING[rpcName];\n        if (!rpcService || !rpcUrlName) {\n            fail('Unknown RPC name: ' + rpcName);\n        }\n        var urlParts = [\n            this.baseUrl,\n            '/',\n            rpcService,\n            '/',\n            rpcUrlName,\n            '/channel'\n        ];\n        var webchannelTransport = createWebChannelTransport();\n        var request = {\n            // Background channel test avoids the initial two test calls and decreases\n            // initial cold start time.\n            // TODO(dimond): wenboz@ mentioned this might affect use with proxies and\n            // we should monitor closely for any reports.\n            backgroundChannelTest: true,\n            // Required for backend stickiness, routing behavior is based on this\n            // parameter.\n            httpSessionIdParam: 'gsessionid',\n            initMessageHeaders: {},\n            sendRawJson: true,\n            supportsCrossDomainXhr: true\n        };\n        this.modifyHeadersForRequest(request.initMessageHeaders, token);\n        var url = urlParts.join('');\n        log.debug(LOG_TAG, 'Creating WebChannel: ' + url + ' ' + request);\n        // tslint:disable-next-line:no-any Because listen isn't defined on it.\n        var channel = webchannelTransport.createWebChannel(url, request);\n        // WebChannel supports sending the first message with the handshake - saving\n        // a network round trip. However, it will have to call send in the same\n        // JS event loop as open. In order to enforce this, we delay actually\n        // opening the WebChannel until send is called. Whether we have called\n        // open is tracked with this variable.\n        var opened = false;\n        // A flag to determine whether the stream was closed (by us or through an\n        // error/close event) to avoid delivering multiple close events or sending\n        // on a closed stream\n        var closed = false;\n        // tslint:disable-next-line:no-any\n        var streamBridge = new StreamBridge({\n            sendFn: function (msg) {\n                if (!closed) {\n                    if (!opened) {\n                        log.debug(LOG_TAG, 'Opening WebChannel transport.');\n                        channel.open();\n                        opened = true;\n                    }\n                    log.debug(LOG_TAG, 'WebChannel sending:', msg);\n                    channel.send(msg);\n                }\n                else {\n                    log.debug(LOG_TAG, 'Not sending because WebChannel is closed:', msg);\n                }\n            },\n            closeFn: function () { return channel.close(); }\n        });\n        // Closure events are guarded and exceptions are swallowed, so catch any\n        // exception and rethrow using a setTimeout so they become visible again.\n        // Note that eventually this function could go away if we are confident\n        // enough the code is exception free.\n        var unguardedEventListen = function (type, fn) {\n            // TODO(dimond): closure typing seems broken because WebChannel does\n            // not implement goog.events.Listenable\n            channel.listen(type, function (param) {\n                try {\n                    fn(param);\n                }\n                catch (e) {\n                    setTimeout(function () {\n                        throw e;\n                    }, 0);\n                }\n            });\n        };\n        unguardedEventListen(WebChannel.EventType.OPEN, function () {\n            if (!closed) {\n                log.debug(LOG_TAG, 'WebChannel transport opened.');\n            }\n        });\n        unguardedEventListen(WebChannel.EventType.CLOSE, function () {\n            if (!closed) {\n                closed = true;\n                log.debug(LOG_TAG, 'WebChannel transport closed');\n                streamBridge.callOnClose();\n            }\n        });\n        unguardedEventListen(WebChannel.EventType.ERROR, function (err) {\n            if (!closed) {\n                closed = true;\n                log.debug(LOG_TAG, 'WebChannel transport errored:', err);\n                streamBridge.callOnClose(new FirestoreError(Code.UNAVAILABLE, 'The operation could not be completed'));\n            }\n        });\n        unguardedEventListen(WebChannel.EventType.MESSAGE, function (msg) {\n            if (!closed) {\n                // WebChannel delivers message events as array. If batching\n                // is not enabled (it's off by default) each message will be\n                // delivered alone, resulting in a single element array.\n                var msgData = msg.data[0];\n                assert(!!msgData, 'Got a webchannel message without data.');\n                // TODO(b/35143891): There is a bug in One Platform that caused errors\n                // (and only errors) to be wrapped in an extra array. To be forward\n                // compatible with the bug we need to check either condition. The latter\n                // can be removed once the fix has been rolled out.\n                var error = msgData.error || (msgData[0] && msgData[0].error);\n                if (error) {\n                    log.debug(LOG_TAG, 'WebChannel received error:', error);\n                    // error.status will be a string like 'OK' or 'NOT_FOUND'.\n                    var status_2 = error.status;\n                    var code = mapCodeFromRpcStatus(status_2);\n                    var message = error.message;\n                    if (code === undefined) {\n                        code = Code.INTERNAL;\n                        message =\n                            'Unknown error status: ' +\n                                status_2 +\n                                ' with message ' +\n                                error.message;\n                    }\n                    // Mark closed so no further events are propagated\n                    closed = true;\n                    streamBridge.callOnClose(new FirestoreError(code, message));\n                    channel.close();\n                }\n                else {\n                    log.debug(LOG_TAG, 'WebChannel received:', msgData);\n                    streamBridge.callOnMessage(msgData);\n                }\n            }\n        });\n        setTimeout(function () {\n            // Technically we could/should wait for the WebChannel opened event,\n            // but because we want to send the first message with the WebChannel\n            // handshake we pretend the channel opened here (asynchronously), and\n            // then delay the actual open until the first message is sent.\n            streamBridge.callOnOpen();\n        }, 0);\n        return streamBridge;\n    };\n    // visible for testing\n    WebChannelConnection.prototype.makeUrl = function (rpcName) {\n        var url = [this.baseUrl, '/', RPC_URL_VERSION];\n        url.push('/projects/');\n        url.push(this.databaseId.projectId);\n        url.push('/databases/');\n        url.push(this.databaseId.database);\n        url.push('/documents');\n        url.push(':');\n        url.push(rpcName);\n        return url.join('');\n    };\n    /**\n     * Mapping from RPC name to service providing the RPC.\n     * For streaming RPCs only.\n     */\n    WebChannelConnection.RPC_STREAM_SERVICE_MAPPING = {\n        Write: 'google.firestore.v1beta1.Firestore',\n        Listen: 'google.firestore.v1beta1.Firestore'\n    };\n    /**\n     * Mapping from RPC name to actual RPC name in URLs.\n     * For streaming RPCs only.\n     */\n    WebChannelConnection.RPC_STREAM_NAME_MAPPING = {\n        Write: 'Write',\n        Listen: 'Listen'\n    };\n    return WebChannelConnection;\n}());\nexport { WebChannelConnection };\n\n//# sourceMappingURL=webchannel_connection.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/platform_browser/webchannel_connection.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport { WebChannelConnection } from './webchannel_connection';\nvar BrowserPlatform = /** @class */ (function () {\n    function BrowserPlatform() {\n        this.emptyByteString = '';\n        this.base64Available = typeof atob !== 'undefined';\n    }\n    BrowserPlatform.prototype.loadConnection = function (databaseInfo) {\n        return Promise.resolve(new WebChannelConnection(databaseInfo));\n    };\n    BrowserPlatform.prototype.newSerializer = function (databaseId) {\n        return new JsonProtoSerializer(databaseId, { useProto3Json: true });\n    };\n    BrowserPlatform.prototype.atob = function (encoded) {\n        return atob(encoded);\n    };\n    BrowserPlatform.prototype.btoa = function (raw) {\n        return btoa(raw);\n    };\n    return BrowserPlatform;\n}());\nexport { BrowserPlatform };\n\n//# sourceMappingURL=browser_platform.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/platform_browser/browser_platform.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { PlatformSupport } from '../platform/platform';\nimport { BrowserPlatform } from './browser_platform';\n/**\n * This code needs to run before Firestore is used. This can be achieved in\n * several ways:\n *   1) Through the JSCompiler compiling this code and then (automatically)\n *      executing it before exporting the Firestore symbols.\n *   2) Through importing this module first in a Firestore main module\n */\nPlatformSupport.setPlatform(new BrowserPlatform());\n\n//# sourceMappingURL=browser_init.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/platform_browser/browser_init.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Describes the online state of the Firestore client */\nexport var OnlineState;\n(function (OnlineState) {\n    /**\n     * The Firestore client is in an unknown online state. This means the client\n     * is either not actively trying to establish a connection or it was\n     * previously in an unknown state and is trying to establish a connection.\n     */\n    OnlineState[OnlineState[\"Unknown\"] = 0] = \"Unknown\";\n    /**\n     * The client is connected and the connections are healthy. This state is\n     * reached after a successful connection and there has been at least one\n     * succesful message received from the backends.\n     */\n    OnlineState[OnlineState[\"Healthy\"] = 1] = \"Healthy\";\n    /**\n     * The client has tried to establish a connection but has failed.\n     * This state is reached after either a connection attempt failed or a\n     * healthy stream was closed for unexpected reasons.\n     */\n    OnlineState[OnlineState[\"Failed\"] = 2] = \"Failed\";\n})(OnlineState = OnlineState || (OnlineState = {}));\n\n//# sourceMappingURL=types.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/types.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DocumentKey } from '../model/document_key';\nimport { fail } from '../util/assert';\nimport { SortedMap } from '../util/sorted_map';\nexport var ChangeType;\n(function (ChangeType) {\n    ChangeType[ChangeType[\"Added\"] = 0] = \"Added\";\n    ChangeType[ChangeType[\"Removed\"] = 1] = \"Removed\";\n    ChangeType[ChangeType[\"Modified\"] = 2] = \"Modified\";\n    ChangeType[ChangeType[\"Metadata\"] = 3] = \"Metadata\";\n})(ChangeType = ChangeType || (ChangeType = {}));\nexport var SyncState;\n(function (SyncState) {\n    SyncState[SyncState[\"Local\"] = 0] = \"Local\";\n    SyncState[SyncState[\"Synced\"] = 1] = \"Synced\";\n})(SyncState = SyncState || (SyncState = {}));\n/**\n * DocumentChangeSet keeps track of a set of changes to docs in a query, merging\n * duplicate events for the same doc.\n */\nvar DocumentChangeSet = /** @class */ (function () {\n    function DocumentChangeSet() {\n        this.changeMap = new SortedMap(DocumentKey.comparator);\n    }\n    DocumentChangeSet.prototype.track = function (change) {\n        var key = change.doc.key;\n        var oldChange = this.changeMap.get(key);\n        if (!oldChange) {\n            this.changeMap = this.changeMap.insert(key, change);\n            return;\n        }\n        // Merge the new change with the existing change.\n        if (change.type !== ChangeType.Added &&\n            oldChange.type === ChangeType.Metadata) {\n            this.changeMap = this.changeMap.insert(key, change);\n        }\n        else if (change.type === ChangeType.Metadata &&\n            oldChange.type !== ChangeType.Removed) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: oldChange.type,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Modified &&\n            oldChange.type === ChangeType.Modified) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Modified,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Modified &&\n            oldChange.type === ChangeType.Added) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Added,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Removed &&\n            oldChange.type === ChangeType.Added) {\n            this.changeMap = this.changeMap.remove(key);\n        }\n        else if (change.type === ChangeType.Removed &&\n            oldChange.type === ChangeType.Modified) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Removed,\n                doc: oldChange.doc\n            });\n        }\n        else if (change.type === ChangeType.Added &&\n            oldChange.type === ChangeType.Removed) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Modified,\n                doc: change.doc\n            });\n        }\n        else {\n            // This includes these cases, which don't make sense:\n            // Added->Added\n            // Removed->Removed\n            // Modified->Added\n            // Removed->Modified\n            // Metadata->Added\n            // Removed->Metadata\n            fail('unsupported combination of changes: ' +\n                JSON.stringify(change) +\n                ' after ' +\n                JSON.stringify(oldChange));\n        }\n    };\n    DocumentChangeSet.prototype.getChanges = function () {\n        var changes = [];\n        this.changeMap.inorderTraversal(function (key, change) {\n            changes.push(change);\n        });\n        return changes;\n    };\n    return DocumentChangeSet;\n}());\nexport { DocumentChangeSet };\n\n//# sourceMappingURL=view_snapshot.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/view_snapshot.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar RESERVED_BITS = 1;\nvar GeneratorIds;\n(function (GeneratorIds) {\n    GeneratorIds[GeneratorIds[\"LocalStore\"] = 0] = \"LocalStore\";\n    GeneratorIds[GeneratorIds[\"SyncEngine\"] = 1] = \"SyncEngine\";\n})(GeneratorIds || (GeneratorIds = {}));\n/**\n * TargetIdGenerator generates monotonically increasing integer IDs. There are\n * separate generators for different scopes. While these generators will operate\n * independently of each other, they are scoped, such that no two generators\n * will ever produce the same ID. This is useful, because sometimes the backend\n * may group IDs from separate parts of the client into the same ID space.\n */\nvar TargetIdGenerator = /** @class */ (function () {\n    function TargetIdGenerator(generatorId, initAfter) {\n        if (initAfter === void 0) { initAfter = 0; }\n        this.generatorId = generatorId;\n        // Replace the generator part of initAfter with this generator's ID.\n        var afterWithoutGenerator = (initAfter >> RESERVED_BITS) << RESERVED_BITS;\n        var afterGenerator = initAfter - afterWithoutGenerator;\n        if (afterGenerator >= generatorId) {\n            // For example, if:\n            //   this.generatorId = 0b0000\n            //   after = 0b1011\n            //   afterGenerator = 0b0001\n            // Then:\n            //   previous = 0b1010\n            //   next = 0b1100\n            this.previousId = afterWithoutGenerator | this.generatorId;\n        }\n        else {\n            // For example, if:\n            //   this.generatorId = 0b0001\n            //   after = 0b1010\n            //   afterGenerator = 0b0000\n            // Then:\n            //   previous = 0b1001\n            //   next = 0b1011\n            this.previousId =\n                (afterWithoutGenerator | this.generatorId) - (1 << RESERVED_BITS);\n        }\n    }\n    TargetIdGenerator.prototype.next = function () {\n        this.previousId += 1 << RESERVED_BITS;\n        return this.previousId;\n    };\n    TargetIdGenerator.forLocalStore = function (initAfter) {\n        if (initAfter === void 0) { initAfter = 0; }\n        return new TargetIdGenerator(GeneratorIds.LocalStore, initAfter);\n    };\n    TargetIdGenerator.forSyncEngine = function () {\n        return new TargetIdGenerator(GeneratorIds.SyncEngine);\n    };\n    return TargetIdGenerator;\n}());\nexport { TargetIdGenerator };\n\n//# sourceMappingURL=target_id_generator.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/target_id_generator.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { SortedMap } from '../util/sorted_map';\nimport { documentMap } from './collections';\nimport { DocumentKey } from './document_key';\n/**\n * DocumentSet is an immutable (copy-on-write) collection that holds documents\n * in order specified by the provided comparator. We always add a document key\n * comparator on top of what is provided to guarantee document equality based on\n * the key.\n */\nvar DocumentSet = /** @class */ (function () {\n    /** The default ordering is by key if the comparator is omitted */\n    function DocumentSet(comp) {\n        // We are adding document key comparator to the end as it's the only\n        // guaranteed unique property of a document.\n        if (comp) {\n            this.comparator = function (d1, d2) {\n                return comp(d1, d2) || DocumentKey.comparator(d1.key, d2.key);\n            };\n        }\n        else {\n            this.comparator = function (d1, d2) {\n                return DocumentKey.comparator(d1.key, d2.key);\n            };\n        }\n        this.keyedMap = documentMap();\n        this.sortedSet = new SortedMap(this.comparator);\n    }\n    /**\n     * Returns an empty copy of the existing DocumentSet, using the same\n     * comparator.\n     */\n    DocumentSet.emptySet = function (oldSet) {\n        return new DocumentSet(oldSet.comparator);\n    };\n    DocumentSet.prototype.has = function (key) {\n        return this.keyedMap.get(key) != null;\n    };\n    DocumentSet.prototype.get = function (key) {\n        return this.keyedMap.get(key);\n    };\n    DocumentSet.prototype.first = function () {\n        return this.sortedSet.minKey();\n    };\n    DocumentSet.prototype.last = function () {\n        return this.sortedSet.maxKey();\n    };\n    DocumentSet.prototype.isEmpty = function () {\n        return this.sortedSet.isEmpty();\n    };\n    /**\n     * Returns previous document or null if it's a first doc.\n     *\n     * @param key A key that MUST be present in the DocumentSet.\n     */\n    DocumentSet.prototype.prevDoc = function (key) {\n        assert(this.has(key), 'Trying to get a previous document to non-existing key: ' + key);\n        var doc = this.keyedMap.get(key);\n        return this.sortedSet.getPredecessorKey(doc);\n    };\n    /**\n     * Returns the index of the provided key in the document set, or -1 if the\n     * document key is not present in the set;\n     */\n    DocumentSet.prototype.indexOf = function (key) {\n        var doc = this.keyedMap.get(key);\n        return doc ? this.sortedSet.indexOf(doc) : -1;\n    };\n    Object.defineProperty(DocumentSet.prototype, \"size\", {\n        get: function () {\n            return this.sortedSet.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Iterates documents in order defined by \"comparator\" */\n    DocumentSet.prototype.forEach = function (cb) {\n        this.sortedSet.inorderTraversal(function (k, v) {\n            cb(k);\n            return false;\n        });\n    };\n    /** Inserts or updates a document with the same key */\n    DocumentSet.prototype.add = function (doc) {\n        // First remove the element if we have it.\n        var set = this.delete(doc.key);\n        return set.copy(set.keyedMap.insert(doc.key, doc), set.sortedSet.insert(doc, null));\n    };\n    /** Deletes a document with a given key */\n    DocumentSet.prototype.delete = function (key) {\n        var doc = this.get(key);\n        if (!doc) {\n            return this;\n        }\n        return this.copy(this.keyedMap.remove(key), this.sortedSet.remove(doc));\n    };\n    DocumentSet.prototype.equals = function (other) {\n        if (!(other instanceof DocumentSet))\n            return false;\n        if (this.size !== other.size)\n            return false;\n        var thisIt = this.sortedSet.getIterator();\n        var otherIt = other.sortedSet.getIterator();\n        while (thisIt.hasNext()) {\n            var thisDoc = thisIt.getNext().key;\n            var otherDoc = otherIt.getNext().key;\n            if (!thisDoc.equals(otherDoc))\n                return false;\n        }\n        return true;\n    };\n    DocumentSet.prototype.toString = function () {\n        var docStrings = [];\n        this.forEach(function (doc) {\n            docStrings.push(doc.toString());\n        });\n        if (docStrings.length === 0) {\n            return 'DocumentSet ()';\n        }\n        else {\n            return 'DocumentSet (\\n  ' + docStrings.join('  \\n') + '\\n)';\n        }\n    };\n    DocumentSet.prototype.copy = function (keyedMap, sortedSet) {\n        var newSet = new DocumentSet();\n        newSet.comparator = this.comparator;\n        newSet.keyedMap = keyedMap;\n        newSet.sortedSet = sortedSet;\n        return newSet;\n    };\n    return DocumentSet;\n}());\nexport { DocumentSet };\n\n//# sourceMappingURL=document_set.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/document_set.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as objUtil from './obj';\n/**\n * A map implementation that uses objects as keys. Objects must implement the\n * Equatable interface and must be immutable. Entries in the map are stored\n * together with the key being produced from the mapKeyFn. This map\n * automatically handles collisions of keys.\n */\nvar ObjectMap = /** @class */ (function () {\n    function ObjectMap(mapKeyFn) {\n        this.mapKeyFn = mapKeyFn;\n        /**\n         * The inner map for a key -> value pair. Due to the possibility of\n         * collisions we keep a list of entries that we do a linear search through\n         * to find an actual match. Note that collisions should be rare, so we still\n         * expect near constant time lookups in practice.\n         */\n        this.inner = {};\n    }\n    /** Get a value for this key, or undefined if it does not exist. */\n    ObjectMap.prototype.get = function (key) {\n        var id = this.mapKeyFn(key);\n        var matches = this.inner[id];\n        if (matches === undefined) {\n            return undefined;\n        }\n        for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {\n            var _a = matches_1[_i], otherKey = _a[0], value = _a[1];\n            if (otherKey.equals(key)) {\n                return value;\n            }\n        }\n        return undefined;\n    };\n    ObjectMap.prototype.has = function (key) {\n        return this.get(key) !== undefined;\n    };\n    /** Put this key and value in the map. */\n    ObjectMap.prototype.set = function (key, value) {\n        var id = this.mapKeyFn(key);\n        var matches = this.inner[id];\n        if (matches === undefined) {\n            this.inner[id] = [[key, value]];\n            return;\n        }\n        for (var i = 0; i < matches.length; i++) {\n            if (matches[i][0].equals(key)) {\n                matches[i] = [key, value];\n                return;\n            }\n        }\n        matches.push([key, value]);\n    };\n    /**\n     * Remove this key from the map. Returns a boolean if anything was deleted.\n     */\n    ObjectMap.prototype.delete = function (key) {\n        var id = this.mapKeyFn(key);\n        var matches = this.inner[id];\n        if (matches === undefined) {\n            return false;\n        }\n        for (var i = 0; i < matches.length; i++) {\n            if (matches[i][0].equals(key)) {\n                if (matches.length === 1) {\n                    delete this.inner[id];\n                }\n                else {\n                    matches.splice(i, 1);\n                }\n                return true;\n            }\n        }\n        return false;\n    };\n    ObjectMap.prototype.forEach = function (fn) {\n        objUtil.forEach(this.inner, function (_, entries) {\n            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n                var _a = entries_1[_i], k = _a[0], v = _a[1];\n                fn(k, v);\n            }\n        });\n    };\n    ObjectMap.prototype.isEmpty = function () {\n        return objUtil.isEmpty(this.inner);\n    };\n    return ObjectMap;\n}());\nexport { ObjectMap };\n\n//# sourceMappingURL=obj_map.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/obj_map.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { OnlineState } from './types';\nimport { ChangeType } from './view_snapshot';\nimport { DocumentSet } from '../model/document_set';\nimport { assert } from '../util/assert';\nimport { ObjectMap } from '../util/obj_map';\n/**\n * Holds the listeners and the last received ViewSnapshot for a query being\n * tracked by EventManager.\n */\nvar QueryListenersInfo = /** @class */ (function () {\n    function QueryListenersInfo() {\n        this.listeners = [];\n    }\n    return QueryListenersInfo;\n}());\n/**\n * EventManager is responsible for mapping queries to query event emitters.\n * It handles \"fan-out\". -- Identical queries will re-use the same watch on the\n * backend.\n */\nvar EventManager = /** @class */ (function () {\n    function EventManager(syncEngine) {\n        this.syncEngine = syncEngine;\n        this.queries = new ObjectMap(function (q) {\n            return q.canonicalId();\n        });\n        this.onlineState = OnlineState.Unknown;\n        this.syncEngine.subscribe(this.onChange.bind(this), this.onError.bind(this));\n    }\n    EventManager.prototype.listen = function (listener) {\n        var query = listener.query;\n        var firstListen = false;\n        var queryInfo = this.queries.get(query);\n        if (!queryInfo) {\n            firstListen = true;\n            queryInfo = new QueryListenersInfo();\n            this.queries.set(query, queryInfo);\n        }\n        queryInfo.listeners.push(listener);\n        listener.onOnlineStateChanged(this.onlineState);\n        if (queryInfo.viewSnap)\n            listener.onViewSnapshot(queryInfo.viewSnap);\n        if (firstListen) {\n            return this.syncEngine.listen(query).then(function (targetId) {\n                queryInfo.targetId = targetId;\n                return targetId;\n            });\n        }\n        else {\n            return Promise.resolve(queryInfo.targetId);\n        }\n    };\n    EventManager.prototype.unlisten = function (listener) {\n        var query = listener.query;\n        var lastListen = false;\n        var queryInfo = this.queries.get(query);\n        if (queryInfo) {\n            var i = queryInfo.listeners.indexOf(listener);\n            if (i >= 0) {\n                queryInfo.listeners.splice(i, 1);\n                lastListen = queryInfo.listeners.length === 0;\n            }\n        }\n        if (lastListen) {\n            this.queries.delete(query);\n            return this.syncEngine.unlisten(query);\n        }\n        else {\n            return Promise.resolve();\n        }\n    };\n    EventManager.prototype.onChange = function (viewSnaps) {\n        for (var _i = 0, viewSnaps_1 = viewSnaps; _i < viewSnaps_1.length; _i++) {\n            var viewSnap = viewSnaps_1[_i];\n            var query = viewSnap.query;\n            var queryInfo = this.queries.get(query);\n            if (queryInfo) {\n                for (var _a = 0, _b = queryInfo.listeners; _a < _b.length; _a++) {\n                    var listener = _b[_a];\n                    listener.onViewSnapshot(viewSnap);\n                }\n                queryInfo.viewSnap = viewSnap;\n            }\n        }\n    };\n    EventManager.prototype.onError = function (query, error) {\n        var queryInfo = this.queries.get(query);\n        if (queryInfo) {\n            for (var _i = 0, _a = queryInfo.listeners; _i < _a.length; _i++) {\n                var listener = _a[_i];\n                listener.onError(error);\n            }\n        }\n        // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()\n        // after an error.\n        this.queries.delete(query);\n    };\n    EventManager.prototype.onOnlineStateChanged = function (onlineState) {\n        this.onlineState = onlineState;\n        this.queries.forEach(function (_, queryInfo) {\n            for (var _i = 0, _a = queryInfo.listeners; _i < _a.length; _i++) {\n                var listener = _a[_i];\n                listener.onOnlineStateChanged(onlineState);\n            }\n        });\n    };\n    return EventManager;\n}());\nexport { EventManager };\n/**\n * QueryListener takes a series of internal view snapshots and determines\n * when to raise the event.\n *\n * It uses an Observer to dispatch events.\n */\nvar QueryListener = /** @class */ (function () {\n    function QueryListener(query, queryObserver, options) {\n        this.query = query;\n        this.queryObserver = queryObserver;\n        /**\n         * Initial snapshots (e.g. from cache) may not be propagated to the wrapped\n         * observer. This flag is set to true once we've actually raised an event.\n         */\n        this.raisedInitialEvent = false;\n        this.onlineState = OnlineState.Unknown;\n        this.options = options || {};\n    }\n    QueryListener.prototype.onViewSnapshot = function (snap) {\n        assert(snap.docChanges.length > 0 || snap.syncStateChanged, 'We got a new snapshot with no changes?');\n        if (!this.options.includeDocumentMetadataChanges) {\n            // Remove the metadata only changes.\n            var docChanges = [];\n            for (var _i = 0, _a = snap.docChanges; _i < _a.length; _i++) {\n                var docChange = _a[_i];\n                if (docChange.type !== ChangeType.Metadata) {\n                    docChanges.push(docChange);\n                }\n            }\n            snap = {\n                query: snap.query,\n                docs: snap.docs,\n                oldDocs: snap.oldDocs,\n                docChanges: docChanges,\n                fromCache: snap.fromCache,\n                hasPendingWrites: snap.hasPendingWrites,\n                syncStateChanged: snap.syncStateChanged\n            };\n        }\n        if (!this.raisedInitialEvent) {\n            if (this.shouldRaiseInitialEvent(snap, this.onlineState)) {\n                this.raiseInitialEvent(snap);\n            }\n        }\n        else if (this.shouldRaiseEvent(snap)) {\n            this.queryObserver.next(snap);\n        }\n        this.snap = snap;\n    };\n    QueryListener.prototype.onError = function (error) {\n        this.queryObserver.error(error);\n    };\n    QueryListener.prototype.onOnlineStateChanged = function (onlineState) {\n        this.onlineState = onlineState;\n        if (this.snap &&\n            !this.raisedInitialEvent &&\n            this.shouldRaiseInitialEvent(this.snap, onlineState)) {\n            this.raiseInitialEvent(this.snap);\n        }\n    };\n    QueryListener.prototype.shouldRaiseInitialEvent = function (snap, onlineState) {\n        assert(!this.raisedInitialEvent, 'Determining whether to raise first event but already had first event');\n        // Always raise the first event when we're synced\n        if (!snap.fromCache) {\n            return true;\n        }\n        // NOTE: We consider OnlineState.Unknown as online (it should become Failed\n        // or Online if we wait long enough).\n        var maybeOnline = onlineState !== OnlineState.Failed;\n        // Don't raise the event if we're online, aren't synced yet (checked\n        // above) and are waiting for a sync.\n        if (this.options.waitForSyncWhenOnline && maybeOnline) {\n            assert(snap.fromCache, 'Waiting for sync, but snapshot is not from cache');\n            return false;\n        }\n        // Raise data from cache if we have any documents or we are offline\n        return !snap.docs.isEmpty() || onlineState === OnlineState.Failed;\n    };\n    QueryListener.prototype.shouldRaiseEvent = function (snap) {\n        // We don't need to handle includeDocumentMetadataChanges here because\n        // the Metadata only changes have already been stripped out if needed.\n        // At this point the only changes we will see are the ones we should\n        // propagate.\n        if (snap.docChanges.length > 0) {\n            return true;\n        }\n        var hasPendingWritesChanged = this.snap && this.snap.hasPendingWrites !== snap.hasPendingWrites;\n        if (snap.syncStateChanged || hasPendingWritesChanged) {\n            return this.options.includeQueryMetadataChanges === true;\n        }\n        // Generally we should have hit one of the cases above, but it's possible\n        // to get here if there were only metadata docChanges and they got\n        // stripped out.\n        return false;\n    };\n    QueryListener.prototype.raiseInitialEvent = function (snap) {\n        assert(!this.raisedInitialEvent, 'Trying to raise initial events for second time');\n        snap = {\n            query: snap.query,\n            docs: snap.docs,\n            oldDocs: DocumentSet.emptySet(snap.docs),\n            docChanges: QueryListener.getInitialViewChanges(snap),\n            fromCache: snap.fromCache,\n            hasPendingWrites: snap.hasPendingWrites,\n            syncStateChanged: true\n        };\n        this.raisedInitialEvent = true;\n        this.queryObserver.next(snap);\n    };\n    /** Returns changes as if all documents in the snap were added. */\n    QueryListener.getInitialViewChanges = function (snap) {\n        var result = [];\n        snap.docs.forEach(function (doc) {\n            result.push({ type: ChangeType.Added, doc: doc });\n        });\n        return result;\n    };\n    return QueryListener;\n}());\nexport { QueryListener };\n\n//# sourceMappingURL=event_manager.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/event_manager.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from '../util/assert';\n/**\n * PersistencePromise<> is essentially a re-implementation of Promise<> except\n * it has a .next() method instead of .then() and .next() and .catch() callbacks\n * are executed synchronously when a PersistencePromise resolves rather than\n * asynchronously (Promise<> implementations use setImmediate() or similar).\n *\n * This is necessary to interoperate with IndexedDB which will automatically\n * commit transactions if control is returned to the event loop without\n * synchronously initiating another operation on the transaction.\n *\n * NOTE: .then() and .catch() only allow a single consumer, unlike normal\n * Promises.\n */\nvar PersistencePromise = /** @class */ (function () {\n    function PersistencePromise(callback) {\n        var _this = this;\n        // NOTE: next/catchCallback will always point to our own wrapper functions,\n        // not the user's raw next() or catch() callbacks.\n        this.nextCallback = null;\n        this.catchCallback = null;\n        // When the operation resolves, we'll set result or error and mark isDone.\n        this.result = undefined;\n        this.error = null;\n        this.isDone = false;\n        // Set to true when .then() or .catch() are called and prevents additional\n        // chaining.\n        this.callbackAttached = false;\n        callback(function (value) {\n            _this.isDone = true;\n            _this.result = value;\n            if (_this.nextCallback) {\n                // value should be defined unless T is Void, but we can't express\n                // that in the type system.\n                _this.nextCallback(value);\n            }\n        }, function (error) {\n            _this.isDone = true;\n            _this.error = error;\n            if (_this.catchCallback) {\n                _this.catchCallback(error);\n            }\n        });\n    }\n    PersistencePromise.prototype.catch = function (fn) {\n        return this.next(undefined, fn);\n    };\n    PersistencePromise.prototype.next = function (nextFn, catchFn) {\n        var _this = this;\n        if (this.callbackAttached) {\n            fail('Called next() or catch() twice for PersistencePromise');\n        }\n        this.callbackAttached = true;\n        if (this.isDone) {\n            if (!this.error) {\n                return this.wrapSuccess(nextFn, this.result);\n            }\n            else {\n                return this.wrapFailure(catchFn, this.error);\n            }\n        }\n        else {\n            return new PersistencePromise(function (resolve, reject) {\n                _this.nextCallback = function (value) {\n                    _this.wrapSuccess(nextFn, value).next(resolve, reject);\n                };\n                _this.catchCallback = function (error) {\n                    _this.wrapFailure(catchFn, error).next(resolve, reject);\n                };\n            });\n        }\n    };\n    PersistencePromise.prototype.toPromise = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.next(resolve, reject);\n        });\n    };\n    PersistencePromise.prototype.wrapUserFunction = function (fn) {\n        try {\n            var result = fn();\n            if (result instanceof PersistencePromise) {\n                return result;\n            }\n            else {\n                return PersistencePromise.resolve(result);\n            }\n        }\n        catch (e) {\n            return PersistencePromise.reject(e);\n        }\n    };\n    PersistencePromise.prototype.wrapSuccess = function (nextFn, value) {\n        if (nextFn) {\n            return this.wrapUserFunction(function () { return nextFn(value); });\n        }\n        else {\n            // If there's no nextFn, then R must be the same as T but we\n            // can't express that in the type system.\n            return PersistencePromise.resolve(value);\n        }\n    };\n    PersistencePromise.prototype.wrapFailure = function (catchFn, error) {\n        if (catchFn) {\n            return this.wrapUserFunction(function () { return catchFn(error); });\n        }\n        else {\n            return PersistencePromise.reject(error);\n        }\n    };\n    PersistencePromise.resolve = function (result) {\n        return new PersistencePromise(function (resolve, reject) {\n            resolve(result);\n        });\n    };\n    PersistencePromise.reject = function (error) {\n        return new PersistencePromise(function (resolve, reject) {\n            reject(error);\n        });\n    };\n    PersistencePromise.waitFor = function (all) {\n        return all.reduce(function (promise, nextPromise, idx) {\n            return promise.next(function () {\n                return nextPromise;\n            });\n        }, PersistencePromise.resolve());\n    };\n    PersistencePromise.map = function (all) {\n        var results = [];\n        var first = true;\n        // initial is ignored, so we can cheat on the type.\n        var initial = PersistencePromise.resolve(null);\n        return all\n            .reduce(function (promise, nextPromise) {\n            return promise.next(function (result) {\n                if (!first) {\n                    results.push(result);\n                }\n                first = false;\n                return nextPromise;\n            });\n        }, initial)\n            .next(function (result) {\n            results.push(result);\n            return results;\n        });\n    };\n    return PersistencePromise;\n}());\nexport { PersistencePromise };\n\n//# sourceMappingURL=persistence_promise.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/persistence_promise.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentKeySet } from '../model/collections';\nimport { PersistencePromise } from './persistence_promise';\n/**\n * A garbage collector implementation that eagerly collects documents as soon as\n * they're no longer referenced in any of its registered GarbageSources.\n *\n * This implementation keeps track of a set of keys that are potentially garbage\n * without keeping an exact reference count. During collectGarbage, the\n * collector verifies that all potential garbage keys actually have no\n * references by consulting its list of garbage sources.\n */\nvar EagerGarbageCollector = /** @class */ (function () {\n    function EagerGarbageCollector() {\n        this.isEager = true;\n        /**\n         * The garbage collectible sources to double-check during garbage collection.\n         */\n        this.sources = [];\n        /**\n         * A set of potentially garbage keys.\n         * PORTING NOTE: This would be a mutable set if Javascript had one.\n         */\n        this.potentialGarbage = documentKeySet();\n    }\n    EagerGarbageCollector.prototype.addGarbageSource = function (garbageSource) {\n        this.sources.push(garbageSource);\n        garbageSource.setGarbageCollector(this);\n    };\n    EagerGarbageCollector.prototype.removeGarbageSource = function (garbageSource) {\n        this.sources.splice(this.sources.indexOf(garbageSource), 1);\n        garbageSource.setGarbageCollector(null);\n    };\n    EagerGarbageCollector.prototype.addPotentialGarbageKey = function (key) {\n        this.potentialGarbage = this.potentialGarbage.add(key);\n    };\n    EagerGarbageCollector.prototype.collectGarbage = function (txn) {\n        var _this = this;\n        var promises = [];\n        var garbageKeys = documentKeySet();\n        this.potentialGarbage.forEach(function (key) {\n            var hasRefsPromise = _this.documentHasAnyReferences(txn, key);\n            promises.push(hasRefsPromise.next(function (hasRefs) {\n                // If there are no references, get the key.\n                if (!hasRefs) {\n                    garbageKeys = garbageKeys.add(key);\n                }\n                return PersistencePromise.resolve();\n            }));\n        });\n        // Clear locally retained potential keys and returned confirmed garbage.\n        this.potentialGarbage = documentKeySet();\n        return PersistencePromise.waitFor(promises).next(function () { return garbageKeys; });\n    };\n    EagerGarbageCollector.prototype.documentHasAnyReferences = function (txn, key) {\n        var initial = PersistencePromise.resolve(false);\n        return this.sources\n            .map(function (source) { return function () { return source.containsKey(txn, key); }; })\n            .reduce(function (promise, nextPromise) {\n            return promise.next(function (result) {\n                if (result) {\n                    return PersistencePromise.resolve(true);\n                }\n                else {\n                    return nextPromise();\n                }\n            });\n        }, initial);\n    };\n    return EagerGarbageCollector;\n}());\nexport { EagerGarbageCollector };\n\n//# sourceMappingURL=eager_garbage_collector.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/eager_garbage_collector.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ChangeType } from '../core/view_snapshot';\nimport { documentKeySet } from '../model/collections';\n/**\n * A set of changes to what documents are currently in view and out of view for\n * a given query. These changes are sent to the LocalStore by the View (via\n * the SyncEngine) and are used to pin / unpin documents as appropriate.\n */\nvar LocalViewChanges = /** @class */ (function () {\n    function LocalViewChanges(query, addedKeys, removedKeys) {\n        this.query = query;\n        this.addedKeys = addedKeys;\n        this.removedKeys = removedKeys;\n    }\n    LocalViewChanges.fromSnapshot = function (viewSnapshot) {\n        var addedKeys = documentKeySet();\n        var removedKeys = documentKeySet();\n        for (var _i = 0, _a = viewSnapshot.docChanges; _i < _a.length; _i++) {\n            var docChange = _a[_i];\n            switch (docChange.type) {\n                case ChangeType.Added:\n                    addedKeys = addedKeys.add(docChange.doc.key);\n                    break;\n                case ChangeType.Removed:\n                    removedKeys = removedKeys.add(docChange.doc.key);\n                    break;\n                default:\n            }\n        }\n        return new LocalViewChanges(viewSnapshot.query, addedKeys, removedKeys);\n    };\n    return LocalViewChanges;\n}());\nexport { LocalViewChanges };\n\n//# sourceMappingURL=local_view_changes.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/local_view_changes.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedSet } from '../util/sorted_set';\nimport { PersistencePromise } from './persistence_promise';\n/**\n * A collection of references to a document from some kind of numbered entity\n * (either a target ID or batch ID). As references are added to or removed from\n * the set corresponding events are emitted to a registered garbage collector.\n *\n * Each reference is represented by a DocumentReference object. Each of them\n * contains enough information to uniquely identify the reference. They are all\n * stored primarily in a set sorted by key. A document is considered garbage if\n * there's no references in that set (this can be efficiently checked thanks to\n * sorting by key).\n *\n * ReferenceSet also keeps a secondary set that contains references sorted by\n * IDs. This one is used to efficiently implement removal of all references by\n * some target ID.\n */\nvar ReferenceSet = /** @class */ (function () {\n    function ReferenceSet() {\n        // A set of outstanding references to a document sorted by key.\n        this.refsByKey = new SortedSet(DocReference.compareByKey);\n        // A set of outstanding references to a document sorted by target id.\n        this.refsByTarget = new SortedSet(DocReference.compareByTargetId);\n        /** Keeps track of keys that have references */\n        this.garbageCollector = null;\n    }\n    /** Returns true if the reference set contains no references. */\n    ReferenceSet.prototype.isEmpty = function () {\n        return this.refsByKey.isEmpty();\n    };\n    /** Adds a reference to the given document key for the given ID. */\n    ReferenceSet.prototype.addReference = function (key, id) {\n        var ref = new DocReference(key, id);\n        this.refsByKey = this.refsByKey.add(ref);\n        this.refsByTarget = this.refsByTarget.add(ref);\n    };\n    /** Add references to the given document keys for the given ID. */\n    ReferenceSet.prototype.addReferences = function (keys, id) {\n        var _this = this;\n        keys.forEach(function (key) { return _this.addReference(key, id); });\n    };\n    /**\n     * Removes a reference to the given document key for the given\n     * ID.\n     */\n    ReferenceSet.prototype.removeReference = function (key, id) {\n        this.removeRef(new DocReference(key, id));\n    };\n    ReferenceSet.prototype.removeReferences = function (keys, id) {\n        var _this = this;\n        keys.forEach(function (key) { return _this.removeReference(key, id); });\n    };\n    /**\n     * Clears all references with a given ID. Calls removeRef() for each key\n     * removed.\n     */\n    ReferenceSet.prototype.removeReferencesForId = function (id) {\n        var _this = this;\n        var emptyKey = DocumentKey.EMPTY;\n        var startRef = new DocReference(emptyKey, id);\n        var endRef = new DocReference(emptyKey, id + 1);\n        this.refsByTarget.forEachInRange([startRef, endRef], function (ref) {\n            _this.removeRef(ref);\n        });\n    };\n    ReferenceSet.prototype.removeAllReferences = function () {\n        var _this = this;\n        this.refsByKey.forEach(function (ref) { return _this.removeRef(ref); });\n    };\n    ReferenceSet.prototype.removeRef = function (ref) {\n        this.refsByKey = this.refsByKey.delete(ref);\n        this.refsByTarget = this.refsByTarget.delete(ref);\n        if (this.garbageCollector !== null) {\n            this.garbageCollector.addPotentialGarbageKey(ref.key);\n        }\n    };\n    ReferenceSet.prototype.referencesForId = function (id) {\n        var emptyKey = DocumentKey.EMPTY;\n        var startRef = new DocReference(emptyKey, id);\n        var endRef = new DocReference(emptyKey, id + 1);\n        var keys = documentKeySet();\n        this.refsByTarget.forEachInRange([startRef, endRef], function (ref) {\n            keys = keys.add(ref.key);\n        });\n        return keys;\n    };\n    ReferenceSet.prototype.setGarbageCollector = function (garbageCollector) {\n        this.garbageCollector = garbageCollector;\n    };\n    ReferenceSet.prototype.containsKey = function (txn, key) {\n        var ref = new DocReference(key, 0);\n        var firstRef = this.refsByKey.firstAfterOrEqual(ref);\n        return PersistencePromise.resolve(firstRef !== null && key.equals(firstRef.key));\n    };\n    return ReferenceSet;\n}());\nexport { ReferenceSet };\nvar DocReference = /** @class */ (function () {\n    function DocReference(key, targetOrBatchId) {\n        this.key = key;\n        this.targetOrBatchId = targetOrBatchId;\n    }\n    /** Compare by key then by ID */\n    DocReference.compareByKey = function (left, right) {\n        return (DocumentKey.comparator(left.key, right.key) ||\n            primitiveComparator(left.targetOrBatchId, right.targetOrBatchId));\n    };\n    /** Compare by ID then by key */\n    DocReference.compareByTargetId = function (left, right) {\n        return (primitiveComparator(left.targetOrBatchId, right.targetOrBatchId) ||\n            DocumentKey.comparator(left.key, right.key));\n    };\n    return DocReference;\n}());\nexport { DocReference };\n\n//# sourceMappingURL=reference_set.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/reference_set.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { assert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport * as log from '../util/log';\nimport { ExponentialBackoff } from './backoff';\nvar LOG_TAG = 'PersistentStream';\nvar PersistentStreamState;\n(function (PersistentStreamState) {\n    /**\n     * The streaming RPC is not running and there's no error condition.\n     * Calling `start` will start the stream immediately without backoff.\n     * While in this state isStarted will return false.\n     */\n    PersistentStreamState[PersistentStreamState[\"Initial\"] = 0] = \"Initial\";\n    /**\n     * The stream is starting, and is waiting for an auth token to attach to\n     * the initial request. While in this state, isStarted will return\n     * true but isOpen will return false.\n     */\n    PersistentStreamState[PersistentStreamState[\"Auth\"] = 1] = \"Auth\";\n    /**\n     * The streaming RPC is up and running. Requests and responses can flow\n     * freely. Both isStarted and isOpen will return true.\n     */\n    PersistentStreamState[PersistentStreamState[\"Open\"] = 2] = \"Open\";\n    /**\n     * The stream encountered an error. The next start attempt will back off.\n     * While in this state isStarted() will return false.\n     *\n     */\n    PersistentStreamState[PersistentStreamState[\"Error\"] = 3] = \"Error\";\n    /**\n     * An in-between state after an error where the stream is waiting before\n     * re-starting. After\n     * waiting is complete, the stream will try to open. While in this\n     * state isStarted() will return YES but isOpen will return false.\n     */\n    PersistentStreamState[PersistentStreamState[\"Backoff\"] = 4] = \"Backoff\";\n    /**\n     * The stream has been explicitly stopped; no further events will be emitted.\n     */\n    PersistentStreamState[PersistentStreamState[\"Stopped\"] = 5] = \"Stopped\";\n})(PersistentStreamState || (PersistentStreamState = {}));\n/**\n * Initial backoff time in milliseconds after an error.\n * Set to 1s according to https://cloud.google.com/apis/design/errors.\n */\nvar BACKOFF_INITIAL_DELAY_MS = 1000;\n/** Maximum backoff time in milliseconds */\nvar BACKOFF_MAX_DELAY_MS = 60 * 1000;\nvar BACKOFF_FACTOR = 1.5;\n/**\n * A PersistentStream is an abstract base class that represents a streaming RPC\n * to the Firestore backend. It's built on top of the connections own support\n * for streaming RPCs, and adds several critical features for our clients:\n *\n *   - Exponential backoff on failure\n *   - Authentication via CredentialsProvider\n *   - Dispatching all callbacks into the shared worker queue\n *\n * Subclasses of PersistentStream implement serialization of models to and\n * from the JSON representation of the protocol buffers for a specific\n * streaming RPC.\n *\n * ## Starting and Stopping\n *\n * Streaming RPCs are stateful and need to be `start`ed before messages can\n * be sent and received. The PersistentStream will call the onOpen function\n * of the listener once the stream is ready to accept requests.\n *\n * Should a `start` fail, PersistentStream will call the registered\n * onClose with a FirestoreError indicating what went wrong.\n *\n * A PersistentStream can be started and stopped repeatedly.\n *\n * Generic types:\n *  SendType: The type of the outgoing message of the underlying\n *    connection stream\n *  ReceiveType: The type of the incoming message of the underlying\n *    connection stream\n *  ListenerType: The type of the listener that will be used for callbacks\n */\nvar PersistentStream = /** @class */ (function () {\n    function PersistentStream(queue, connection, credentialsProvider, listener, \n        // Used for faster retries in testing\n        initialBackoffDelay) {\n        this.queue = queue;\n        this.connection = connection;\n        this.credentialsProvider = credentialsProvider;\n        this.stream = null;\n        this.listener = null;\n        this.backoff = new ExponentialBackoff(initialBackoffDelay ? initialBackoffDelay : BACKOFF_INITIAL_DELAY_MS, BACKOFF_FACTOR, BACKOFF_MAX_DELAY_MS);\n        this.state = PersistentStreamState.Initial;\n        this.listener = listener;\n    }\n    /**\n     * Returns true if `start` has been called and no error has occurred. True\n     * indicates the stream is open or in the process of opening (which\n     * encompasses respecting backoff, getting auth tokens, and starting the\n     * actual RPC). Use `isOpen` to determine if the stream is open and ready for\n     * outbound requests.\n     */\n    PersistentStream.prototype.isStarted = function () {\n        return (this.state === PersistentStreamState.Backoff ||\n            this.state === PersistentStreamState.Auth ||\n            this.state === PersistentStreamState.Open);\n    };\n    /**\n     * Returns true if the underlying RPC is open (the openHandler has been\n     * called) and the stream is ready for outbound requests.\n     */\n    PersistentStream.prototype.isOpen = function () {\n        return this.state === PersistentStreamState.Open;\n    };\n    /**\n     * Starts the RPC. Only allowed if isStarted returns false. The stream is\n     * not immediately ready for use: onOpen will be invoked when the RPC is ready\n     * for outbound requests, at which point isOpen will return true.\n     *\n     *  When start returns, isStarted will return true.\n     */\n    PersistentStream.prototype.start = function () {\n        if (this.state === PersistentStreamState.Error) {\n            this.performBackoff();\n            return;\n        }\n        assert(this.state === PersistentStreamState.Initial, 'Already started');\n        this.auth();\n    };\n    /**\n     * Stops the RPC. This call is idempotent and allowed regardless of the\n     * current isStarted state.\n     *\n     * When stop returns, isStarted and isOpen will both return false.\n     */\n    PersistentStream.prototype.stop = function () {\n        // Prevent any possible future restart of this stream\n        this.state = PersistentStreamState.Stopped;\n        // Clear the listener to avoid bleeding of events from the underlying\n        // streams\n        this.listener = null;\n        // Clean up the underlying stream because we are no longer interested in\n        // events\n        if (this.stream !== null) {\n            this.stream.close();\n            this.stream = null;\n        }\n    };\n    /**\n     * After an error the stream will usually back off on the next attempt to\n     * start it. If the error warrants an immediate restart of the stream, the\n     * sender can use this to indicate that the receiver should not back off.\n     *\n     * Each error will call the onClose function. That function can decide to\n     * inhibit backoff if required.\n     */\n    PersistentStream.prototype.inhibitBackoff = function () {\n        assert(!this.isStarted(), 'Can only inhibit backoff in a stopped state');\n        this.state = PersistentStreamState.Initial;\n        this.backoff.reset();\n    };\n    PersistentStream.prototype.auth = function () {\n        var _this = this;\n        assert(this.state === PersistentStreamState.Initial, 'Must be in initial state to auth');\n        this.state = PersistentStreamState.Auth;\n        this.credentialsProvider.getToken(/*forceRefresh=*/ false).then(function (token) {\n            // Normally we'd have to schedule the callback on the AsyncQueue.\n            // However, the following calls are safe to be called outside the\n            // AsyncQueue since they don't chain asynchronous calls\n            _this.startStream(token);\n        }, function (error) {\n            _this.queue.schedule(function () {\n                if (_this.state !== PersistentStreamState.Stopped) {\n                    // Stream can be stopped while waiting for authorization.\n                    var rpcError = new FirestoreError(Code.UNKNOWN, 'Fetching auth token failed: ' + error.message);\n                    return _this.handleStreamClose(rpcError);\n                }\n                else {\n                    return Promise.resolve();\n                }\n            });\n        });\n    };\n    PersistentStream.prototype.startStream = function (token) {\n        var _this = this;\n        if (this.state === PersistentStreamState.Stopped) {\n            // Stream can be stopped while waiting for authorization.\n            return;\n        }\n        assert(this.state === PersistentStreamState.Auth, 'Trying to start stream in a non-auth state');\n        // Helper function to dispatch to AsyncQueue and make sure that any\n        // close will seem instantaneous and events are prevented from being\n        // raised after the close call\n        var dispatchIfNotStopped = function (fn) {\n            _this.queue.schedule(function () {\n                // Only raise events if the listener has not changed\n                if (_this.state !== PersistentStreamState.Stopped) {\n                    return fn();\n                }\n                else {\n                    return Promise.resolve();\n                }\n            });\n        };\n        // Only start stream if listener has not changed\n        if (this.listener !== null) {\n            this.stream = this.startRpc(token);\n            this.stream.onOpen(function () {\n                dispatchIfNotStopped(function () {\n                    assert(_this.state === PersistentStreamState.Auth, 'Expected stream to be in state auth, but was ' + _this.state);\n                    _this.state = PersistentStreamState.Open;\n                    return _this.listener.onOpen();\n                });\n            });\n            this.stream.onClose(function (error) {\n                dispatchIfNotStopped(function () {\n                    return _this.handleStreamClose(error);\n                });\n            });\n            this.stream.onMessage(function (msg) {\n                dispatchIfNotStopped(function () {\n                    return _this.onMessage(msg);\n                });\n            });\n        }\n    };\n    PersistentStream.prototype.performBackoff = function () {\n        var _this = this;\n        assert(this.state === PersistentStreamState.Error, 'Should only perform backoff in an error case');\n        this.state = PersistentStreamState.Backoff;\n        this.backoff.backoffAndWait().then(function () {\n            // Backoff does not run on the AsyncQueue, so we need to reschedule to\n            // make sure the queue blocks\n            _this.queue.schedule(function () {\n                if (_this.state === PersistentStreamState.Stopped) {\n                    // Stream can be stopped while waiting for backoff to complete.\n                    return Promise.resolve();\n                }\n                _this.state = PersistentStreamState.Initial;\n                _this.start();\n                assert(_this.isStarted(), 'PersistentStream should have started');\n                return Promise.resolve();\n            });\n        });\n    };\n    PersistentStream.prototype.handleStreamClose = function (error) {\n        assert(this.isStarted(), \"Can't handle server close on non-started stream\");\n        log.debug(LOG_TAG, \"close with error: \" + error);\n        this.stream = null;\n        // In theory the stream could close cleanly, however, in our current model\n        // we never expect this to happen because if we stop a stream ourselves,\n        // this callback will never be called. To prevent cases where we retry\n        // without a backoff accidentally, we set the stream to error in all cases.\n        this.state = PersistentStreamState.Error;\n        if (error && error.code === Code.RESOURCE_EXHAUSTED) {\n            log.debug(LOG_TAG, 'Using maximum backoff delay to prevent overloading the backend.');\n            this.backoff.resetToMax();\n        }\n        return this.listener.onClose(error);\n    };\n    return PersistentStream;\n}());\nexport { PersistentStream };\n/**\n * A PersistentStream that implements the Listen RPC.\n *\n * Once the Listen stream has called the openHandler, any number of listen and\n * unlisten calls calls can be sent to control what changes will be sent from\n * the server for ListenResponses.\n */\nvar PersistentListenStream = /** @class */ (function (_super) {\n    __extends(PersistentListenStream, _super);\n    function PersistentListenStream(databaseInfo, queue, connection, credentials, serializer, listener, initialBackoffDelay) {\n        var _this = _super.call(this, queue, connection, credentials, listener, initialBackoffDelay) || this;\n        _this.databaseInfo = databaseInfo;\n        _this.serializer = serializer;\n        return _this;\n    }\n    PersistentListenStream.prototype.startRpc = function (token) {\n        return this.connection.openStream('Listen', token);\n    };\n    PersistentListenStream.prototype.onMessage = function (watchChangeProto) {\n        // A successful response means the stream is healthy\n        this.backoff.reset();\n        var watchChange = this.serializer.fromWatchChange(watchChangeProto);\n        var snapshot = this.serializer.versionFromListenResponse(watchChangeProto);\n        return this.listener.onWatchChange(watchChange, snapshot);\n    };\n    /**\n     * Registers interest in the results of the given query. If the query\n     * includes a resumeToken it will be included in the request. Results that\n     * affect the query will be streamed back as WatchChange messages that\n     * reference the targetId.\n     */\n    PersistentListenStream.prototype.watch = function (queryData) {\n        var request = {};\n        request.database = this.serializer.encodedDatabaseId;\n        request.addTarget = this.serializer.toTarget(queryData);\n        var labels = this.serializer.toListenRequestLabels(queryData);\n        if (labels) {\n            request.labels = labels;\n        }\n        this.stream.send(request);\n    };\n    /**\n     * Unregisters interest in the results of the query associated with the\n     * given targetId.\n     */\n    PersistentListenStream.prototype.unwatch = function (targetId) {\n        var request = {};\n        request.database = this.serializer.encodedDatabaseId;\n        request.removeTarget = targetId;\n        this.stream.send(request);\n    };\n    return PersistentListenStream;\n}(PersistentStream));\nexport { PersistentListenStream };\n/**\n * A Stream that implements the Write RPC.\n *\n * The Write RPC requires the caller to maintain special streamToken\n * state in between calls, to help the server understand which responses the\n * client has processed by the time the next request is made. Every response\n * will contain a streamToken; this value must be passed to the next\n * request.\n *\n * After calling start() on this stream, the next request must be a handshake,\n * containing whatever streamToken is on hand. Once a response to this\n * request is received, all pending mutations may be submitted. When\n * submitting multiple batches of mutations at the same time, it's\n * okay to use the same streamToken for the calls to writeMutations.\n *\n * TODO(b/33271235): Use proto types\n */\nvar PersistentWriteStream = /** @class */ (function (_super) {\n    __extends(PersistentWriteStream, _super);\n    function PersistentWriteStream(databaseInfo, queue, connection, credentials, serializer, listener, initialBackoffDelay) {\n        var _this = _super.call(this, queue, connection, credentials, listener, initialBackoffDelay) || this;\n        _this.databaseInfo = databaseInfo;\n        _this.serializer = serializer;\n        _this.handshakeComplete_ = false;\n        return _this;\n    }\n    Object.defineProperty(PersistentWriteStream.prototype, \"handshakeComplete\", {\n        /**\n         * Tracks whether or not a handshake has been successfully exchanged and\n         * the stream is ready to accept mutations.\n         */\n        get: function () {\n            return this.handshakeComplete_;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Override of PersistentStream.start\n    PersistentWriteStream.prototype.start = function () {\n        this.handshakeComplete_ = false;\n        _super.prototype.start.call(this);\n    };\n    PersistentWriteStream.prototype.startRpc = function (token) {\n        return this.connection.openStream('Write', token);\n    };\n    PersistentWriteStream.prototype.onMessage = function (responseProto) {\n        // Always capture the last stream token.\n        assert(!!responseProto.streamToken, 'Got a write response without a stream token');\n        this.lastStreamToken = responseProto.streamToken;\n        if (!this.handshakeComplete_) {\n            // The first response is always the handshake response\n            assert(!responseProto.writeResults || responseProto.writeResults.length === 0, 'Got mutation results for handshake');\n            this.handshakeComplete_ = true;\n            return this.listener.onHandshakeComplete();\n        }\n        else {\n            // A successful first write response means the stream is healthy,\n            // Note, that we could consider a successful handshake healthy, however,\n            // the write itself might be causing an error we want to back off from.\n            this.backoff.reset();\n            var results = this.serializer.fromWriteResults(responseProto.writeResults);\n            var commitVersion = this.serializer.fromVersion(responseProto.commitTime);\n            return this.listener.onMutationResult(commitVersion, results);\n        }\n    };\n    /**\n     * Sends an initial streamToken to the server, performing the handshake\n     * required to make the StreamingWrite RPC work. Subsequent\n     * calls should wait until onHandshakeComplete was called.\n     */\n    PersistentWriteStream.prototype.writeHandshake = function () {\n        assert(this.isOpen(), 'Writing handshake requires an opened stream');\n        assert(!this.handshakeComplete_, 'Handshake already completed');\n        // TODO(dimond): Support stream resumption. We intentionally do not set the\n        // stream token on the handshake, ignoring any stream token we might have.\n        var request = {};\n        request.database = this.serializer.encodedDatabaseId;\n        this.stream.send(request);\n    };\n    /** Sends a group of mutations to the Firestore backend to apply. */\n    PersistentWriteStream.prototype.writeMutations = function (mutations) {\n        var _this = this;\n        assert(this.isOpen(), 'Writing mutations requires an opened stream');\n        assert(this.handshakeComplete_, 'Handshake must be complete before writing mutations');\n        assert(this.lastStreamToken.length > 0, 'Trying to write mutation without a token');\n        var request = {\n            // Protos are typed with string, but we support UInt8Array on Node\n            // tslint:disable-next-line:no-any\n            streamToken: this.lastStreamToken,\n            writes: mutations.map(function (mutation) { return _this.serializer.toMutation(mutation); })\n        };\n        this.stream.send(request);\n    };\n    return PersistentWriteStream;\n}(PersistentStream));\nexport { PersistentWriteStream };\n\n//# sourceMappingURL=persistent_stream.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/persistent_stream.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EagerGarbageCollector } from '../local/eager_garbage_collector';\nimport { LocalViewChanges } from '../local/local_view_changes';\nimport { QueryData, QueryPurpose } from '../local/query_data';\nimport { ReferenceSet } from '../local/reference_set';\nimport { NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { CurrentStatusUpdate, RemoteEvent } from '../remote/remote_event';\nimport { assert, fail } from '../util/assert';\nimport * as log from '../util/log';\nimport { primitiveComparator } from '../util/misc';\nimport * as objUtils from '../util/obj';\nimport { ObjectMap } from '../util/obj_map';\nimport { SortedMap } from '../util/sorted_map';\nimport { isNullOrUndefined } from '../util/types';\nimport { Query } from './query';\nimport { SnapshotVersion } from './snapshot_version';\nimport { TargetIdGenerator } from './target_id_generator';\nimport { AddedLimboDocument, RemovedLimboDocument, View } from './view';\nvar LOG_TAG = 'SyncEngine';\n/**\n * QueryView contains all of the data that SyncEngine needs to keep track of for\n * a particular query.\n */\nvar QueryView = /** @class */ (function () {\n    function QueryView(\n        /**\n         * The query itself.\n         */\n        query, \n        /**\n         * The target number created by the client that is used in the watch\n         * stream to identify this query.\n         */\n        targetId, \n        /**\n         * An identifier from the datastore backend that indicates the last state\n         * of the results that was received. This can be used to indicate where\n         * to continue receiving new doc changes for the query.\n         */\n        resumeToken, \n        /**\n         * The view is responsible for computing the final merged truth of what\n         * docs are in the query. It gets notified of local and remote changes,\n         * and applies the query filters and limits to determine the most correct\n         * possible results.\n         */\n        view) {\n        this.query = query;\n        this.targetId = targetId;\n        this.resumeToken = resumeToken;\n        this.view = view;\n    }\n    return QueryView;\n}());\n/**\n * SyncEngine is the central controller in the client SDK architecture. It is\n * the glue code between the EventManager, LocalStore, and RemoteStore. Some of\n * SyncEngine's responsibilities include:\n * 1. Coordinating client requests and remote events between the EventManager\n *    and the local and remote data stores.\n * 2. Managing a View object for each query, providing the unified view between\n *    the local and remote data stores.\n * 3. Notifying the RemoteStore when the LocalStore has new mutations in its\n *    queue that need sending to the backend.\n *\n * The SyncEngine’s methods should only ever be called by methods running in the\n * global async queue.\n */\nvar SyncEngine = /** @class */ (function () {\n    function SyncEngine(localStore, remoteStore, currentUser) {\n        this.localStore = localStore;\n        this.remoteStore = remoteStore;\n        this.currentUser = currentUser;\n        this.viewHandler = null;\n        this.errorHandler = null;\n        this.queryViewsByQuery = new ObjectMap(function (q) {\n            return q.canonicalId();\n        });\n        this.queryViewsByTarget = {};\n        this.limboTargetsByKey = new SortedMap(DocumentKey.comparator);\n        this.limboKeysByTarget = {};\n        this.limboDocumentRefs = new ReferenceSet();\n        this.limboCollector = new EagerGarbageCollector();\n        /** Stores user completion handlers, indexed by User and BatchId. */\n        this.mutationUserCallbacks = {};\n        this.targetIdGenerator = TargetIdGenerator.forSyncEngine();\n    }\n    /** Subscribes view and error handler. Can be called only once. */\n    SyncEngine.prototype.subscribe = function (viewHandler, errorHandler) {\n        assert(viewHandler !== null && errorHandler !== null, 'View and error handlers cannot be null');\n        assert(this.viewHandler === null && this.errorHandler === null, 'SyncEngine already has a subscriber.');\n        this.viewHandler = viewHandler;\n        this.errorHandler = errorHandler;\n        this.limboCollector.addGarbageSource(this.limboDocumentRefs);\n    };\n    /**\n     * Initiates the new listen, resolves promise when listen enqueued to the\n     * server. All the subsequent view snapshots or errors are sent to the\n     * subscribed handlers. Returns the targetId of the query.\n     */\n    SyncEngine.prototype.listen = function (query) {\n        var _this = this;\n        this.assertSubscribed('listen()');\n        assert(!this.queryViewsByQuery.has(query), 'We already listen to the query: ' + query);\n        return this.localStore.allocateQuery(query).then(function (queryData) {\n            return _this.localStore\n                .executeQuery(query)\n                .then(function (docs) {\n                return _this.localStore\n                    .remoteDocumentKeys(queryData.targetId)\n                    .then(function (remoteKeys) {\n                    var view = new View(query, remoteKeys);\n                    var viewDocChanges = view.computeDocChanges(docs);\n                    var viewChange = view.applyChanges(viewDocChanges);\n                    assert(viewChange.limboChanges.length === 0, 'View returned limbo docs before target ack from the server.');\n                    assert(!!viewChange.snapshot, 'applyChanges for new view should always return a snapshot');\n                    var data = new QueryView(query, queryData.targetId, queryData.resumeToken, view);\n                    _this.queryViewsByQuery.set(query, data);\n                    _this.queryViewsByTarget[queryData.targetId] = data;\n                    _this.viewHandler([viewChange.snapshot]);\n                    _this.remoteStore.listen(queryData);\n                });\n            })\n                .then(function () {\n                return queryData.targetId;\n            });\n        });\n    };\n    /** Stops listening to the query. */\n    SyncEngine.prototype.unlisten = function (query) {\n        var _this = this;\n        this.assertSubscribed('unlisten()');\n        var queryView = this.queryViewsByQuery.get(query);\n        assert(!!queryView, 'Trying to unlisten on query not found:' + query);\n        return this.localStore.releaseQuery(query).then(function () {\n            _this.remoteStore.unlisten(queryView.targetId);\n            return _this.removeAndCleanupQuery(queryView).then(function () {\n                return _this.localStore.collectGarbage();\n            });\n        });\n    };\n    /**\n     * Initiates the write of local mutation batch which involves adding the\n     * writes to the mutation queue, notifying the remote store about new\n     * mutations and raising events for any changes this write caused.\n     *\n     * The promise returned by this call is resolved when the above steps\n     * have completed, *not* when the write was acked by the backend. The\n     * userCallback is resolved once the write was acked/rejected by the\n     * backend (or failed locally for any other reason).\n     */\n    SyncEngine.prototype.write = function (batch, userCallback) {\n        var _this = this;\n        this.assertSubscribed('write()');\n        return this.localStore\n            .localWrite(batch)\n            .then(function (result) {\n            _this.addMutationCallback(result.batchId, userCallback);\n            return _this.emitNewSnapsAndNotifyLocalStore(result.changes);\n        })\n            .then(function () {\n            return _this.remoteStore.fillWritePipeline();\n        });\n    };\n    // TODO(klimt): Wrap the given error in a standard Firestore error object.\n    SyncEngine.prototype.wrapUpdateFunctionError = function (error) {\n        return error;\n    };\n    /**\n     * Takes an updateFunction in which a set of reads and writes can be performed\n     * atomically. In the updateFunction, the client can read and write values\n     * using the supplied transaction object. After the updateFunction, all\n     * changes will be committed. If some other client has changed any of the data\n     * referenced, then the updateFunction will be called again. If the\n     * updateFunction still fails after the given number of retries, then the\n     * transaction will be rejection.\n     *\n     * The transaction object passed to the updateFunction contains methods for\n     * accessing documents and collections. Unlike other datastore access, data\n     * accessed with the transaction will not reflect local changes that have not\n     * been committed. For this reason, it is required that all reads are\n     * performed before any writes. Transactions must be performed while online.\n     *\n     * The promise returned is resolved when the transaction is fully committed.\n     */\n    SyncEngine.prototype.runTransaction = function (updateFunction, retries) {\n        var _this = this;\n        if (retries === void 0) { retries = 5; }\n        assert(retries >= 0, 'Got negative number of retries for transaction.');\n        var transaction = this.remoteStore.createTransaction();\n        var wrappedUpdateFunction = function () {\n            try {\n                var userPromise = updateFunction(transaction);\n                if (isNullOrUndefined(userPromise) ||\n                    !userPromise.catch ||\n                    !userPromise.then) {\n                    return Promise.reject(Error('Transaction callback must return a Promise'));\n                }\n                return userPromise.catch(function (e) {\n                    return Promise.reject(_this.wrapUpdateFunctionError(e));\n                });\n            }\n            catch (e) {\n                return Promise.reject(_this.wrapUpdateFunctionError(e));\n            }\n        };\n        return wrappedUpdateFunction().then(function (result) {\n            return transaction\n                .commit()\n                .then(function () {\n                return result;\n            })\n                .catch(function (error) {\n                if (retries === 0) {\n                    return Promise.reject(error);\n                }\n                // TODO(klimt): Put in a retry delay?\n                return _this.runTransaction(updateFunction, retries - 1);\n            });\n        });\n    };\n    SyncEngine.prototype.applyRemoteEvent = function (remoteEvent) {\n        var _this = this;\n        this.assertSubscribed('applyRemoteEvent()');\n        // Make sure limbo documents are deleted if there were no results\n        objUtils.forEachNumber(remoteEvent.targetChanges, function (targetId, targetChange) {\n            var limboKey = _this.limboKeysByTarget[targetId];\n            if (limboKey &&\n                targetChange.currentStatusUpdate ===\n                    CurrentStatusUpdate.MarkCurrent &&\n                !remoteEvent.documentUpdates.get(limboKey)) {\n                // When listening to a query the server responds with a snapshot\n                // containing documents matching the query and a current marker\n                // telling us we're now in sync. It's possible for these to arrive\n                // as separate remote events or as a single remote event.\n                // For a document query, there will be no documents sent in the\n                // response if the document doesn't exist.\n                //\n                // If the snapshot arrives separately from the current marker,\n                // we handle it normally and updateTrackedLimbos will resolve the\n                // limbo status of the document, removing it from limboDocumentRefs.\n                // This works because clients only initiate limbo resolution when\n                // a target is current and because all current targets are\n                // always at a consistent snapshot.\n                //\n                // However, if the document doesn't exist and the current marker\n                // arrives, the document is not present in the snapshot and our\n                // normal view handling would consider the document to remain in\n                // limbo indefinitely because there are no updates to the document.\n                // To avoid this, we specially handle this just this case here:\n                // synthesizing a delete.\n                //\n                // TODO(dimond): Ideally we would have an explicit lookup query\n                // instead resulting in an explicit delete message and we could\n                // remove this special logic.\n                remoteEvent.addDocumentUpdate(new NoDocument(limboKey, remoteEvent.snapshotVersion));\n            }\n        });\n        return this.localStore.applyRemoteEvent(remoteEvent).then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes, remoteEvent);\n        });\n    };\n    SyncEngine.prototype.rejectListen = function (targetId, err) {\n        var _this = this;\n        this.assertSubscribed('rejectListens()');\n        var limboKey = this.limboKeysByTarget[targetId];\n        if (limboKey) {\n            // Since this query failed, we won't want to manually unlisten to it.\n            // So go ahead and remove it from bookkeeping.\n            this.limboTargetsByKey = this.limboTargetsByKey.remove(limboKey);\n            delete this.limboKeysByTarget[targetId];\n            // TODO(klimt): We really only should do the following on permission\n            // denied errors, but we don't have the cause code here.\n            // It's a limbo doc. Create a synthetic event saying it was deleted.\n            // This is kind of a hack. Ideally, we would have a method in the local\n            // store to purge a document. However, it would be tricky to keep all of\n            // the local store's invariants with another method.\n            var docMap = new SortedMap(DocumentKey.comparator);\n            docMap = docMap.insert(limboKey, new NoDocument(limboKey, SnapshotVersion.forDeletedDoc()));\n            var event_1 = new RemoteEvent(SnapshotVersion.MIN, {}, docMap);\n            return this.applyRemoteEvent(event_1);\n        }\n        else {\n            var queryView_1 = this.queryViewsByTarget[targetId];\n            assert(!!queryView_1, 'Unknown targetId: ' + targetId);\n            return this.localStore.releaseQuery(queryView_1.query).then(function () {\n                return _this.removeAndCleanupQuery(queryView_1).then(function () {\n                    _this.errorHandler(queryView_1.query, err);\n                });\n            });\n        }\n    };\n    SyncEngine.prototype.applySuccessfulWrite = function (mutationBatchResult) {\n        var _this = this;\n        this.assertSubscribed('applySuccessfulWrite()');\n        // The local store may or may not be able to apply the write result and\n        // raise events immediately (depending on whether the watcher is caught\n        // up), so we raise user callbacks first so that they consistently happen\n        // before listen events.\n        this.processUserCallback(mutationBatchResult.batch.batchId, \n        /*error=*/ null);\n        return this.localStore\n            .acknowledgeBatch(mutationBatchResult)\n            .then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes);\n        });\n    };\n    SyncEngine.prototype.rejectFailedWrite = function (batchId, error) {\n        var _this = this;\n        this.assertSubscribed('rejectFailedWrite()');\n        // The local store may or may not be able to apply the write result and\n        // raise events immediately (depending on whether the watcher is caught up),\n        // so we raise user callbacks first so that they consistently happen before\n        // listen events.\n        this.processUserCallback(batchId, error);\n        return this.localStore.rejectBatch(batchId).then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes);\n        });\n    };\n    SyncEngine.prototype.addMutationCallback = function (batchId, callback) {\n        var newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];\n        if (!newCallbacks) {\n            newCallbacks = new SortedMap(primitiveComparator);\n        }\n        newCallbacks = newCallbacks.insert(batchId, callback);\n        this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;\n    };\n    /**\n     * Resolves or rejects the user callback for the given batch and then discards\n     * it.\n     */\n    SyncEngine.prototype.processUserCallback = function (batchId, error) {\n        var newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];\n        // NOTE: Mutations restored from persistence won't have callbacks, so it's\n        // okay for there to be no callback for this ID.\n        if (newCallbacks) {\n            var callback = newCallbacks.get(batchId);\n            if (callback) {\n                assert(batchId === newCallbacks.minKey(), 'Mutation callbacks processed out-of-order?');\n                if (error) {\n                    callback.reject(error);\n                }\n                else {\n                    callback.resolve();\n                }\n                newCallbacks = newCallbacks.remove(batchId);\n            }\n            this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;\n        }\n    };\n    SyncEngine.prototype.removeAndCleanupQuery = function (queryView) {\n        this.queryViewsByQuery.delete(queryView.query);\n        delete this.queryViewsByTarget[queryView.targetId];\n        this.limboDocumentRefs.removeReferencesForId(queryView.targetId);\n        return this.gcLimboDocuments();\n    };\n    SyncEngine.prototype.updateTrackedLimbos = function (targetId, limboChanges) {\n        for (var _i = 0, limboChanges_1 = limboChanges; _i < limboChanges_1.length; _i++) {\n            var limboChange = limboChanges_1[_i];\n            if (limboChange instanceof AddedLimboDocument) {\n                this.limboDocumentRefs.addReference(limboChange.key, targetId);\n                this.trackLimboChange(limboChange);\n            }\n            else if (limboChange instanceof RemovedLimboDocument) {\n                log.debug(LOG_TAG, 'Document no longer in limbo: ' + limboChange.key);\n                this.limboDocumentRefs.removeReference(limboChange.key, targetId);\n            }\n            else {\n                fail('Unknown limbo change: ' + JSON.stringify(limboChange));\n            }\n        }\n        return this.gcLimboDocuments();\n    };\n    SyncEngine.prototype.trackLimboChange = function (limboChange) {\n        var key = limboChange.key;\n        if (!this.limboTargetsByKey.get(key)) {\n            log.debug(LOG_TAG, 'New document in limbo: ' + key);\n            var limboTargetId = this.targetIdGenerator.next();\n            var query = Query.atPath(key.path);\n            this.limboKeysByTarget[limboTargetId] = key;\n            this.remoteStore.listen(new QueryData(query, limboTargetId, QueryPurpose.Listen));\n            this.limboTargetsByKey = this.limboTargetsByKey.insert(key, limboTargetId);\n        }\n    };\n    SyncEngine.prototype.gcLimboDocuments = function () {\n        var _this = this;\n        // HACK: We can use a null transaction here, because we know that the\n        // reference set is entirely within memory and doesn't need a store engine.\n        return this.limboCollector\n            .collectGarbage(null)\n            .next(function (keys) {\n            keys.forEach(function (key) {\n                var limboTargetId = _this.limboTargetsByKey.get(key);\n                if (limboTargetId === null) {\n                    // This target already got removed, because the query failed.\n                    return;\n                }\n                _this.remoteStore.unlisten(limboTargetId);\n                _this.limboTargetsByKey = _this.limboTargetsByKey.remove(key);\n                delete _this.limboKeysByTarget[limboTargetId];\n            });\n        })\n            .toPromise();\n    };\n    // Visible for testing\n    SyncEngine.prototype.currentLimboDocs = function () {\n        return this.limboTargetsByKey;\n    };\n    SyncEngine.prototype.emitNewSnapsAndNotifyLocalStore = function (changes, remoteEvent) {\n        var _this = this;\n        var newSnaps = [];\n        var docChangesInAllViews = [];\n        var queriesProcessed = [];\n        this.queryViewsByQuery.forEach(function (_, queryView) {\n            queriesProcessed.push(Promise.resolve()\n                .then(function () {\n                var viewDocChanges = queryView.view.computeDocChanges(changes);\n                if (!viewDocChanges.needsRefill) {\n                    return viewDocChanges;\n                }\n                // The query has a limit and some docs were removed, so we need\n                // to re-run the query against the local store to make sure we\n                // didn't lose any good docs that had been past the limit.\n                return _this.localStore.executeQuery(queryView.query).then(function (docs) {\n                    return queryView.view.computeDocChanges(docs, viewDocChanges);\n                });\n            })\n                .then(function (viewDocChanges) {\n                var targetChange = remoteEvent && remoteEvent.targetChanges[queryView.targetId];\n                var viewChange = queryView.view.applyChanges(viewDocChanges, targetChange);\n                return _this.updateTrackedLimbos(queryView.targetId, viewChange.limboChanges).then(function () {\n                    if (viewChange.snapshot) {\n                        newSnaps.push(viewChange.snapshot);\n                        var docChanges = LocalViewChanges.fromSnapshot(viewChange.snapshot);\n                        docChangesInAllViews.push(docChanges);\n                    }\n                });\n            }));\n        });\n        return Promise.all(queriesProcessed)\n            .then(function () {\n            _this.viewHandler(newSnaps);\n            return _this.localStore.notifyLocalViewChanges(docChangesInAllViews);\n        })\n            .then(function () {\n            return _this.localStore.collectGarbage();\n        });\n    };\n    SyncEngine.prototype.assertSubscribed = function (fnName) {\n        assert(this.viewHandler !== null && this.errorHandler !== null, 'Trying to call ' + fnName + ' before calling subscribe().');\n    };\n    SyncEngine.prototype.handleUserChange = function (user) {\n        var _this = this;\n        this.currentUser = user;\n        return this.localStore\n            .handleUserChange(user)\n            .then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes);\n        })\n            .then(function () {\n            return _this.remoteStore.handleUserChange(user);\n        });\n    };\n    return SyncEngine;\n}());\nexport { SyncEngine };\n\n//# sourceMappingURL=sync_engine.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/sync_engine.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentKeySet, documentVersionMap } from './collections';\nimport { assert } from '../util/assert';\nimport * as misc from '../util/misc';\nexport var BATCHID_UNKNOWN = -1;\n/**\n * A batch of mutations that will be sent as one unit to the backend.\n */\nvar MutationBatch = /** @class */ (function () {\n    function MutationBatch(batchId, localWriteTime, mutations) {\n        this.batchId = batchId;\n        this.localWriteTime = localWriteTime;\n        this.mutations = mutations;\n    }\n    /**\n     * Applies all the mutations in this MutationBatch to the specified document\n     * to create a new remote document\n     *\n     * @param docKey The key of the document to apply mutations to.\n     * @param maybeDoc The document to apply mutations to.\n     * @param batchResult The result of applying the MutationBatch to the\n     * backend.\n     */\n    MutationBatch.prototype.applyToRemoteDocument = function (docKey, maybeDoc, batchResult) {\n        if (maybeDoc) {\n            assert(maybeDoc.key.equals(docKey), \"applyToRemoteDocument: key \" + docKey + \" should match maybeDoc key\\n        \" + maybeDoc.key);\n        }\n        var mutationResults = batchResult.mutationResults;\n        assert(mutationResults.length === this.mutations.length, \"Mismatch between mutations length\\n      (\" + this.mutations.length + \") and mutation results length\\n      (\" + mutationResults.length + \").\");\n        for (var i = 0; i < this.mutations.length; i++) {\n            var mutation = this.mutations[i];\n            if (mutation.key.equals(docKey)) {\n                var mutationResult = mutationResults[i];\n                maybeDoc = mutation.applyToRemoteDocument(maybeDoc, mutationResult);\n            }\n        }\n        return maybeDoc;\n    };\n    /**\n     * Computes the local view of a document given all the mutations in this\n     * batch.\n     *\n     * @param docKey The key of the document to apply mutations to.\n     * @param maybeDoc The document to apply mutations to.\n     */\n    MutationBatch.prototype.applyToLocalView = function (docKey, maybeDoc) {\n        if (maybeDoc) {\n            assert(maybeDoc.key.equals(docKey), \"applyToLocalDocument: key \" + docKey + \" should match maybeDoc key\\n        \" + maybeDoc.key);\n        }\n        for (var i = 0; i < this.mutations.length; i++) {\n            var mutation = this.mutations[i];\n            if (mutation.key.equals(docKey)) {\n                maybeDoc = mutation.applyToLocalView(maybeDoc, this.localWriteTime);\n            }\n        }\n        return maybeDoc;\n    };\n    MutationBatch.prototype.keys = function () {\n        var keySet = documentKeySet();\n        for (var _i = 0, _a = this.mutations; _i < _a.length; _i++) {\n            var mutation = _a[_i];\n            keySet = keySet.add(mutation.key);\n        }\n        return keySet;\n    };\n    MutationBatch.prototype.equals = function (other) {\n        return (this.batchId === other.batchId &&\n            misc.arrayEquals(this.mutations, other.mutations));\n    };\n    /**\n     * Returns true if this mutation batch has already been removed from the\n     * mutation queue.\n     *\n     * Note that not all implementations of the MutationQueue necessarily use\n     * tombstones as part of their implementation and generally speaking no code\n     * outside the mutation queues should really care about this.\n     */\n    MutationBatch.prototype.isTombstone = function () {\n        return this.mutations.length === 0;\n    };\n    /** Converts this batch into a tombstone */\n    MutationBatch.prototype.toTombstone = function () {\n        return new MutationBatch(this.batchId, this.localWriteTime, []);\n    };\n    return MutationBatch;\n}());\nexport { MutationBatch };\n/** The result of applying a mutation batch to the backend. */\nvar MutationBatchResult = /** @class */ (function () {\n    function MutationBatchResult(batch, commitVersion, mutationResults, streamToken, \n        /**\n         * A pre-computed mapping from each mutated document to the resulting\n         * version.\n         */\n        docVersions) {\n        this.batch = batch;\n        this.commitVersion = commitVersion;\n        this.mutationResults = mutationResults;\n        this.streamToken = streamToken;\n        this.docVersions = docVersions;\n    }\n    /**\n     * Creates a new MutationBatchResult for the given batch and results. There\n     * must be one result for each mutation in the batch. This static factory\n     * caches a document=>version mapping (docVersions).\n     */\n    MutationBatchResult.from = function (batch, commitVersion, results, streamToken) {\n        assert(batch.mutations.length === results.length, 'Mutations sent ' +\n            batch.mutations.length +\n            ' must equal results received ' +\n            results.length);\n        var versionMap = documentVersionMap();\n        var mutations = batch.mutations;\n        for (var i = 0; i < mutations.length; i++) {\n            var version = results[i].version;\n            if (version === null) {\n                // deletes don't have a version, so we substitute the commitVersion\n                // of the entire batch.\n                version = commitVersion;\n            }\n            versionMap = versionMap.insert(mutations[i].key, version);\n        }\n        return new MutationBatchResult(batch, commitVersion, results, streamToken, versionMap);\n    };\n    return MutationBatchResult;\n}());\nexport { MutationBatchResult };\n\n//# sourceMappingURL=mutation_batch.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/mutation_batch.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport * as log from '../util/log';\nimport { AutoId } from '../util/misc';\nimport { IndexedDbMutationQueue } from './indexeddb_mutation_queue';\nimport { IndexedDbQueryCache } from './indexeddb_query_cache';\nimport { IndexedDbRemoteDocumentCache } from './indexeddb_remote_document_cache';\nimport { ALL_STORES, DbOwner } from './indexeddb_schema';\nimport { createOrUpgradeDb, SCHEMA_VERSION } from './indexeddb_schema';\nimport { LocalSerializer } from './local_serializer';\nimport { PersistencePromise } from './persistence_promise';\nimport { SimpleDb } from './simple_db';\nvar LOG_TAG = 'IndexedDbPersistence';\n/** If the owner lease is older than 5 seconds, try to take ownership. */\nvar OWNER_LEASE_MAX_AGE_MS = 5000;\n/** Refresh the owner lease every 4 seconds while owner. */\nvar OWNER_LEASE_REFRESH_INTERVAL_MS = 4000;\n/** LocalStorage location to indicate a zombied ownerId (see class comment). */\nvar ZOMBIE_OWNER_LOCALSTORAGE_SUFFIX = 'zombiedOwnerId';\n/** Error when the owner lease cannot be acquired or is lost. */\nvar EXISTING_OWNER_ERROR_MSG = 'There is another tab open with offline' +\n    ' persistence enabled. Only one such tab is allowed at a time. The' +\n    ' other tab must be closed or persistence must be disabled.';\nvar UNSUPPORTED_PLATFORM_ERROR_MSG = 'This platform is either missing' +\n    ' IndexedDB or is known to have an incomplete implementation. Offline' +\n    ' persistence has been disabled.';\n/**\n * An IndexedDB-backed instance of Persistence. Data is stored persistently\n * across sessions.\n *\n * Currently the Firestore SDK only supports a single consumer of the database,\n * but browsers obviously support multiple tabs. IndexedDbPersistence ensures a\n * single consumer of the database via an \"owner lease\" stored in the database.\n *\n * On startup, IndexedDbPersistence assigns itself a random \"ownerId\" and writes\n * it to a special \"owner\" object in the database (if no entry exists already or\n * the current entry is expired). This owner lease is then verified inside every\n * transaction to ensure the lease has not been lost.\n *\n * If a tab opts not to acquire the owner lease (because there's an existing\n * non-expired owner) or loses the owner lease, IndexedDbPersistence enters a\n * failed state and all subsequent operations will automatically fail.\n *\n * The current owner regularly refreshes the owner lease with new timestamps to\n * prevent newly-opened tabs from taking over ownership.\n *\n * Additionally there is an optimization so that when a tab is closed, the owner\n * lease is released immediately (this is especially important to make sure that\n * a refreshed tab is able to immediately re-acquire the owner lease).\n * Unfortunately, IndexedDB cannot be reliably used in window.unload since it is\n * an asynchronous API. So in addition to attempting to give up the lease,\n * the owner writes its ownerId to a \"zombiedOwnerId\" entry in LocalStorage\n * which acts as an indicator that another tab should go ahead and take the\n * owner lease immediately regardless of the current lease timestamp.\n */\nvar IndexedDbPersistence = /** @class */ (function () {\n    function IndexedDbPersistence(prefix, serializer) {\n        this.ownerId = this.generateOwnerId();\n        this.dbName = prefix + IndexedDbPersistence.MAIN_DATABASE;\n        this.serializer = new LocalSerializer(serializer);\n        this.localStoragePrefix = prefix;\n    }\n    IndexedDbPersistence.prototype.start = function () {\n        var _this = this;\n        if (!IndexedDbPersistence.isAvailable()) {\n            this.persistenceError = new FirestoreError(Code.UNIMPLEMENTED, UNSUPPORTED_PLATFORM_ERROR_MSG);\n            return Promise.reject(this.persistenceError);\n        }\n        assert(!this.started, 'IndexedDbPersistence double-started!');\n        this.started = true;\n        return SimpleDb.openOrCreate(this.dbName, SCHEMA_VERSION, createOrUpgradeDb)\n            .then(function (db) {\n            _this.simpleDb = db;\n        })\n            .then(function () { return _this.tryAcquireOwnerLease(); })\n            .then(function () {\n            _this.scheduleOwnerLeaseRefreshes();\n            _this.attachWindowUnloadHook();\n        });\n    };\n    IndexedDbPersistence.prototype.shutdown = function () {\n        var _this = this;\n        assert(this.started, 'IndexedDbPersistence shutdown without start!');\n        this.started = false;\n        this.detachWindowUnloadHook();\n        this.stopOwnerLeaseRefreshes();\n        return this.releaseOwnerLease().then(function () {\n            _this.simpleDb.close();\n        });\n    };\n    IndexedDbPersistence.prototype.getMutationQueue = function (user) {\n        return IndexedDbMutationQueue.forUser(user, this.serializer);\n    };\n    IndexedDbPersistence.prototype.getQueryCache = function () {\n        return new IndexedDbQueryCache(this.serializer);\n    };\n    IndexedDbPersistence.prototype.getRemoteDocumentCache = function () {\n        return new IndexedDbRemoteDocumentCache(this.serializer);\n    };\n    IndexedDbPersistence.prototype.runTransaction = function (action, operation) {\n        var _this = this;\n        if (this.persistenceError) {\n            return Promise.reject(this.persistenceError);\n        }\n        log.debug(LOG_TAG, 'Starting transaction:', action);\n        // Do all transactions as readwrite against all object stores, since we\n        // are the only reader/writer.\n        return this.simpleDb.runTransaction('readwrite', ALL_STORES, function (txn) {\n            // Verify that we still have the owner lease as part of every transaction.\n            return _this.ensureOwnerLease(txn).next(function () { return operation(txn); });\n        });\n    };\n    IndexedDbPersistence.isAvailable = function () {\n        return SimpleDb.isAvailable();\n    };\n    /**\n     * Generates a string used as a prefix when storing data in IndexedDB and\n     * LocalStorage.\n     */\n    IndexedDbPersistence.buildStoragePrefix = function (databaseInfo) {\n        // Use two different prefix formats:\n        //\n        //   * firestore / persistenceKey / projectID . databaseID / ...\n        //   * firestore / persistenceKey / projectID / ...\n        //\n        // projectIDs are DNS-compatible names and cannot contain dots\n        // so there's no danger of collisions.\n        var database = databaseInfo.databaseId.projectId;\n        if (!databaseInfo.databaseId.isDefaultDatabase) {\n            database += '.' + databaseInfo.databaseId.database;\n        }\n        return 'firestore/' + databaseInfo.persistenceKey + '/' + database + '/';\n    };\n    /**\n     * Acquires the owner lease if there's no valid owner. Else returns a rejected\n     * promise.\n     */\n    IndexedDbPersistence.prototype.tryAcquireOwnerLease = function () {\n        var _this = this;\n        // NOTE: Don't use this.runTransaction, since it requires us to already\n        // have the lease.\n        return this.simpleDb.runTransaction('readwrite', [DbOwner.store], function (txn) {\n            var store = txn.store(DbOwner.store);\n            return store.get('owner').next(function (dbOwner) {\n                if (!_this.validOwner(dbOwner)) {\n                    var newDbOwner = new DbOwner(_this.ownerId, Date.now());\n                    log.debug(LOG_TAG, 'No valid owner. Acquiring owner lease. Current owner:', dbOwner, 'New owner:', newDbOwner);\n                    return store.put('owner', newDbOwner);\n                }\n                else {\n                    log.debug(LOG_TAG, 'Valid owner already. Failing. Current owner:', dbOwner);\n                    _this.persistenceError = new FirestoreError(Code.FAILED_PRECONDITION, EXISTING_OWNER_ERROR_MSG);\n                    return PersistencePromise.reject(_this.persistenceError);\n                }\n            });\n        });\n    };\n    /** Checks the owner lease and deletes it if we are the current owner. */\n    IndexedDbPersistence.prototype.releaseOwnerLease = function () {\n        var _this = this;\n        // NOTE: Don't use this.runTransaction, since it requires us to already\n        // have the lease.\n        return this.simpleDb.runTransaction('readwrite', [DbOwner.store], function (txn) {\n            var store = txn.store(DbOwner.store);\n            return store.get('owner').next(function (dbOwner) {\n                if (dbOwner !== null && dbOwner.ownerId === _this.ownerId) {\n                    log.debug(LOG_TAG, 'Releasing owner lease.');\n                    return store.delete('owner');\n                }\n                else {\n                    return PersistencePromise.resolve();\n                }\n            });\n        });\n    };\n    /**\n     * Checks the owner lease and returns a rejected promise if we are not the\n     * current owner. This should be included in every transaction to guard\n     * against losing the owner lease.\n     */\n    IndexedDbPersistence.prototype.ensureOwnerLease = function (txn) {\n        var _this = this;\n        var store = txn.store(DbOwner.store);\n        return store.get('owner').next(function (dbOwner) {\n            if (dbOwner === null || dbOwner.ownerId !== _this.ownerId) {\n                _this.persistenceError = new FirestoreError(Code.FAILED_PRECONDITION, EXISTING_OWNER_ERROR_MSG);\n                return PersistencePromise.reject(_this.persistenceError);\n            }\n            else {\n                return PersistencePromise.resolve();\n            }\n        });\n    };\n    /**\n     * Returns true if the provided owner exists, has a recent timestamp, and\n     * isn't zombied.\n     *\n     * NOTE: To determine if the owner is zombied, this method reads from\n     * LocalStorage which could be mildly expensive.\n     */\n    IndexedDbPersistence.prototype.validOwner = function (dbOwner) {\n        var now = Date.now();\n        var minAcceptable = now - OWNER_LEASE_MAX_AGE_MS;\n        var maxAcceptable = now;\n        if (dbOwner === null) {\n            return false; // no owner.\n        }\n        else if (dbOwner.leaseTimestampMs < minAcceptable) {\n            return false; // owner lease has expired.\n        }\n        else if (dbOwner.leaseTimestampMs > maxAcceptable) {\n            log.error('Persistence owner-lease is in the future. Discarding.', dbOwner);\n            return false;\n        }\n        else if (dbOwner.ownerId === this.getZombiedOwnerId()) {\n            return false; // owner's tab closed.\n        }\n        else {\n            return true;\n        }\n    };\n    /**\n     * Schedules a recurring timer to update the owner lease timestamp to prevent\n     * other tabs from taking the lease.\n     */\n    IndexedDbPersistence.prototype.scheduleOwnerLeaseRefreshes = function () {\n        var _this = this;\n        // NOTE: This doesn't need to be scheduled on the async queue and doing so\n        // would increase the chances of us not refreshing on time if the queue is\n        // backed up for some reason.\n        this.ownerLeaseRefreshHandle = setInterval(function () {\n            var txResult = _this.runTransaction('Refresh owner timestamp', function (txn) {\n                // NOTE: We don't need to validate the current owner contents, since\n                // runTransaction does that automatically.\n                var store = txn.store(DbOwner.store);\n                return store.put('owner', new DbOwner(_this.ownerId, Date.now()));\n            });\n            txResult.catch(function (reason) {\n                // Probably means we lost the lease. Report the error and stop trying to\n                // refresh the lease.\n                log.error(reason);\n                _this.stopOwnerLeaseRefreshes();\n            });\n        }, OWNER_LEASE_REFRESH_INTERVAL_MS);\n    };\n    IndexedDbPersistence.prototype.stopOwnerLeaseRefreshes = function () {\n        if (this.ownerLeaseRefreshHandle) {\n            clearInterval(this.ownerLeaseRefreshHandle);\n            this.ownerLeaseRefreshHandle = null;\n        }\n    };\n    /**\n     * Attaches a window.unload handler that will synchronously write our\n     * ownerId to a \"zombie owner id\" location in localstorage. This can be used\n     * by tabs trying to acquire the lease to determine that the lease should be\n     * acquired immediately even if the timestamp is recent. This is particularly\n     * important for the refresh case (so the tab correctly re-acquires the owner\n     * lease). LocalStorage is used for this rather than IndexedDb because it is\n     * a synchronous API and so can be used reliably from an unload handler.\n     */\n    IndexedDbPersistence.prototype.attachWindowUnloadHook = function () {\n        var _this = this;\n        this.windowUnloadHandler = function () {\n            // Record that we're zombied.\n            _this.setZombiedOwnerId(_this.ownerId);\n            // Attempt graceful shutdown (including releasing our owner lease), but\n            // there's no guarantee it will complete.\n            _this.shutdown();\n        };\n        window.addEventListener('unload', this.windowUnloadHandler);\n    };\n    IndexedDbPersistence.prototype.detachWindowUnloadHook = function () {\n        if (this.windowUnloadHandler) {\n            window.removeEventListener('unload', this.windowUnloadHandler);\n            this.windowUnloadHandler = null;\n        }\n    };\n    /**\n     * Returns any recorded \"zombied owner\" (i.e. a previous owner that became\n     * zombied due to their tab closing) from LocalStorage, or null if no such\n     * record exists.\n     */\n    IndexedDbPersistence.prototype.getZombiedOwnerId = function () {\n        try {\n            var zombiedOwnerId = window.localStorage.getItem(this.zombiedOwnerLocalStorageKey());\n            log.debug(LOG_TAG, 'Zombied ownerID from LocalStorage:', zombiedOwnerId);\n            return zombiedOwnerId;\n        }\n        catch (e) {\n            // Gracefully handle if LocalStorage isn't available / working.\n            log.error(LOG_TAG, 'Failed to get zombie owner id.', e);\n            return null;\n        }\n    };\n    /**\n     * Records a zombied owner (an owner that had its tab closed) in LocalStorage\n     * or, if passed null, deletes any recorded zombied owner.\n     */\n    IndexedDbPersistence.prototype.setZombiedOwnerId = function (zombieOwnerId) {\n        try {\n            if (zombieOwnerId === null) {\n                window.localStorage.removeItem(this.zombiedOwnerLocalStorageKey());\n            }\n            else {\n                window.localStorage.setItem(this.zombiedOwnerLocalStorageKey(), zombieOwnerId);\n            }\n        }\n        catch (e) {\n            // Gracefully handle if LocalStorage isn't available / working.\n            log.error(LOG_TAG, 'Failed to set zombie owner id.', e);\n        }\n    };\n    IndexedDbPersistence.prototype.zombiedOwnerLocalStorageKey = function () {\n        return this.localStoragePrefix + ZOMBIE_OWNER_LOCALSTORAGE_SUFFIX;\n    };\n    IndexedDbPersistence.prototype.generateOwnerId = function () {\n        // For convenience, just use an AutoId.\n        return AutoId.newId();\n    };\n    /**\n     * The name of the main (and currently only) IndexedDB database. this name is\n     * appended to the prefix provided to the IndexedDbPersistence constructor.\n     */\n    IndexedDbPersistence.MAIN_DATABASE = 'main';\n    return IndexedDbPersistence;\n}());\nexport { IndexedDbPersistence };\n\n//# sourceMappingURL=indexeddb_persistence.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/indexeddb_persistence.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { documentKeySet, documentMap, maybeDocumentMap } from '../model/collections';\nimport { Document, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { fail } from '../util/assert';\nimport { PersistencePromise } from './persistence_promise';\n/**\n * A readonly view of the local state of all documents we're tracking (i.e. we\n * have a cached version in remoteDocumentCache or local mutations for the\n * document). The view is computed by applying the mutations in the\n * MutationQueue to the RemoteDocumentCache.\n */\nvar LocalDocumentsView = /** @class */ (function () {\n    function LocalDocumentsView(remoteDocumentCache, mutationQueue) {\n        this.remoteDocumentCache = remoteDocumentCache;\n        this.mutationQueue = mutationQueue;\n    }\n    /**\n     * Get the local view of the document identified by `key`.\n     *\n     * @return Local view of the document or null if we don't have any cached\n     * state for it.\n     */\n    LocalDocumentsView.prototype.getDocument = function (transaction, key) {\n        var _this = this;\n        return this.remoteDocumentCache\n            .getEntry(transaction, key)\n            .next(function (remoteDoc) {\n            return _this.computeLocalDocument(transaction, key, remoteDoc);\n        });\n    };\n    /**\n     * Gets the local view of the documents identified by `keys`.\n     *\n     * If we don't have cached state for a document in `keys`, a NoDocument will\n     * be stored for that key in the resulting set.\n     */\n    LocalDocumentsView.prototype.getDocuments = function (transaction, keys) {\n        var _this = this;\n        var promises = [];\n        var results = maybeDocumentMap();\n        keys.forEach(function (key) {\n            promises.push(_this.getDocument(transaction, key).next(function (maybeDoc) {\n                // TODO(http://b/32275378): Don't conflate missing / deleted.\n                if (!maybeDoc) {\n                    maybeDoc = new NoDocument(key, SnapshotVersion.forDeletedDoc());\n                }\n                results = results.insert(key, maybeDoc);\n            }));\n        });\n        return PersistencePromise.waitFor(promises).next(function () { return results; });\n    };\n    /** Performs a query against the local view of all documents. */\n    LocalDocumentsView.prototype.getDocumentsMatchingQuery = function (transaction, query) {\n        if (DocumentKey.isDocumentKey(query.path)) {\n            return this.getDocumentsMatchingDocumentQuery(transaction, query.path);\n        }\n        else {\n            return this.getDocumentsMatchingCollectionQuery(transaction, query);\n        }\n    };\n    LocalDocumentsView.prototype.getDocumentsMatchingDocumentQuery = function (transaction, docPath) {\n        // Just do a simple document lookup.\n        return this.getDocument(transaction, new DocumentKey(docPath)).next(function (maybeDoc) {\n            var result = documentMap();\n            if (maybeDoc instanceof Document) {\n                result = result.insert(maybeDoc.key, maybeDoc);\n            }\n            return result;\n        });\n    };\n    LocalDocumentsView.prototype.getDocumentsMatchingCollectionQuery = function (transaction, query) {\n        var _this = this;\n        // Query the remote documents and overlay mutations.\n        // TODO(mikelehen): There may be significant overlap between the mutations\n        // affecting these remote documents and the\n        // getAllMutationBatchesAffectingQuery() mutations. Consider optimizing.\n        var results;\n        return this.remoteDocumentCache\n            .getDocumentsMatchingQuery(transaction, query)\n            .next(function (queryResults) {\n            return _this.computeLocalDocuments(transaction, queryResults);\n        })\n            .next(function (promisedResults) {\n            results = promisedResults;\n            // Now use the mutation queue to discover any other documents that may\n            // match the query after applying mutations.\n            return _this.mutationQueue.getAllMutationBatchesAffectingQuery(transaction, query);\n        })\n            .next(function (matchingMutationBatches) {\n            var matchingKeys = documentKeySet();\n            for (var _i = 0, matchingMutationBatches_1 = matchingMutationBatches; _i < matchingMutationBatches_1.length; _i++) {\n                var batch = matchingMutationBatches_1[_i];\n                for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {\n                    var mutation = _b[_a];\n                    // TODO(mikelehen): PERF: Check if this mutation actually\n                    // affects the query to reduce work.\n                    if (!results.get(mutation.key)) {\n                        matchingKeys = matchingKeys.add(mutation.key);\n                    }\n                }\n            }\n            // Now add in the results for the matchingKeys.\n            var promises = [];\n            matchingKeys.forEach(function (key) {\n                promises.push(_this.getDocument(transaction, key).next(function (doc) {\n                    if (doc instanceof Document) {\n                        results = results.insert(doc.key, doc);\n                    }\n                }));\n            });\n            return PersistencePromise.waitFor(promises);\n        })\n            .next(function () {\n            // Finally, filter out any documents that don't actually match\n            // the query.\n            results.forEach(function (key, doc) {\n                if (!query.matches(doc)) {\n                    results = results.remove(key);\n                }\n            });\n            return results;\n        });\n    };\n    /**\n     * Takes a remote document and applies local mutations to generate the local\n     * view of the document.\n     * @param transaction The transaction in which to perform any persistence\n     *     operations.\n     * @param documentKey The key of the document (necessary when remoteDocument\n     *     is null).\n     * @param document The base remote document to apply mutations to or null.\n     */\n    LocalDocumentsView.prototype.computeLocalDocument = function (transaction, documentKey, document) {\n        return this.mutationQueue\n            .getAllMutationBatchesAffectingDocumentKey(transaction, documentKey)\n            .next(function (batches) {\n            for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\n                var batch = batches_1[_i];\n                document = batch.applyToLocalView(documentKey, document);\n            }\n            return document;\n        });\n    };\n    /**\n     * Takes a set of remote documents and applies local mutations to generate the\n     * local view of the documents.\n     * @param transaction The transaction in which to perform any persistence\n     *     operations.\n     * @param documents The base remote documents to apply mutations to.\n     * @return The local view of the documents.\n     */\n    LocalDocumentsView.prototype.computeLocalDocuments = function (transaction, documents) {\n        var _this = this;\n        var promises = [];\n        documents.forEach(function (key, doc) {\n            promises.push(_this.computeLocalDocument(transaction, key, doc).next(function (mutatedDoc) {\n                if (mutatedDoc instanceof Document) {\n                    documents = documents.insert(mutatedDoc.key, mutatedDoc);\n                }\n                else if (mutatedDoc instanceof NoDocument) {\n                    documents = documents.remove(mutatedDoc.key);\n                }\n                else {\n                    fail('Unknown MaybeDocument: ' + mutatedDoc);\n                }\n            }));\n        });\n        return PersistencePromise.waitFor(promises).next(function () { return documents; });\n    };\n    return LocalDocumentsView;\n}());\nexport { LocalDocumentsView };\n\n//# sourceMappingURL=local_documents_view.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/local_documents_view.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { maybeDocumentMap } from '../model/collections';\nimport { assert } from '../util/assert';\nimport { PersistencePromise } from './persistence_promise';\n/**\n * An in-memory buffer of entries to be written to a RemoteDocumentCache.\n * It can be used to batch up a set of changes to be written to the cache, but\n * additionally supports reading entries back with the `getEntry()` method,\n * falling back to the underlying RemoteDocumentCache if no entry is\n * buffered.\n *\n * NOTE: This class was introduced in iOS to work around a limitation in\n * LevelDB. Given IndexedDb has full transaction support with\n * read-your-own-writes capability, this class is not technically needed, but\n * has been preserved as a convenience and to aid portability.\n */\nvar RemoteDocumentChangeBuffer = /** @class */ (function () {\n    function RemoteDocumentChangeBuffer(remoteDocumentCache) {\n        this.remoteDocumentCache = remoteDocumentCache;\n        this.changes = maybeDocumentMap();\n    }\n    /** Buffers a `RemoteDocumentCache.addEntry()` call. */\n    RemoteDocumentChangeBuffer.prototype.addEntry = function (maybeDocument) {\n        var changes = this.assertChanges();\n        this.changes = changes.insert(maybeDocument.key, maybeDocument);\n    };\n    // NOTE: removeEntry() is not presently necessary and so is omitted.\n    /**\n     * Looks up an entry in the cache. The buffered changes will first be checked,\n     * and if no buffered change applies, this will forward to\n     * `RemoteDocumentCache.getEntry()`.\n     *\n     * @param transaction The transaction in which to perform any persistence\n     *     operations.\n     * @param documentKey The key of the entry to look up.\n     * @return The cached Document or NoDocument entry, or null if we have nothing\n     * cached.\n     */\n    RemoteDocumentChangeBuffer.prototype.getEntry = function (transaction, documentKey) {\n        var changes = this.assertChanges();\n        var bufferedEntry = changes.get(documentKey);\n        if (bufferedEntry) {\n            return PersistencePromise.resolve(bufferedEntry);\n        }\n        else {\n            return this.remoteDocumentCache.getEntry(transaction, documentKey);\n        }\n    };\n    /**\n     * Applies buffered changes to the underlying RemoteDocumentCache, using\n     * the provided transaction.\n     */\n    RemoteDocumentChangeBuffer.prototype.apply = function (transaction) {\n        var _this = this;\n        var changes = this.assertChanges();\n        var promises = [];\n        changes.forEach(function (key, maybeDoc) {\n            promises.push(_this.remoteDocumentCache.addEntry(transaction, maybeDoc));\n        });\n        // We should not be used to buffer any more changes.\n        this.changes = null;\n        return PersistencePromise.waitFor(promises);\n    };\n    /** Helper to assert this.changes is not null and return it. */\n    RemoteDocumentChangeBuffer.prototype.assertChanges = function () {\n        assert(this.changes !== null, 'Changes have already been applied.');\n        return this.changes;\n    };\n    return RemoteDocumentChangeBuffer;\n}());\nexport { RemoteDocumentChangeBuffer };\n\n//# sourceMappingURL=remote_document_change_buffer.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/remote_document_change_buffer.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { TargetIdGenerator } from '../core/target_id_generator';\nimport { Timestamp } from '../core/timestamp';\nimport { documentKeySet } from '../model/collections';\nimport { BATCHID_UNKNOWN } from '../model/mutation_batch';\nimport { ResetMapping, UpdateMapping } from '../remote/remote_event';\nimport { assert, fail } from '../util/assert';\nimport * as log from '../util/log';\nimport * as objUtils from '../util/obj';\nimport { LocalDocumentsView } from './local_documents_view';\nimport { PersistencePromise } from './persistence_promise';\nimport { QueryData, QueryPurpose } from './query_data';\nimport { ReferenceSet } from './reference_set';\nimport { RemoteDocumentChangeBuffer } from './remote_document_change_buffer';\nvar LOG_TAG = 'LocalStore';\n/**\n * Local storage in the Firestore client. Coordinates persistence components\n * like the mutation queue and remote document cache to present a\n * latency-compensated view of stored data.\n *\n * The LocalStore is responsible for accepting mutations from the Sync Engine.\n * Writes from the client are put into a queue as provisional Mutations until\n * they are processed by the RemoteStore and confirmed as having been written\n * to the server.\n *\n * The local store provides the local version of documents that have been\n * modified locally. It maintains the constraint:\n *\n *   LocalDocument = RemoteDocument + Active(LocalMutations)\n *\n * (Active mutations are those that are enqueued and have not been previously\n * acknowledged or rejected).\n *\n * The RemoteDocument (\"ground truth\") state is provided via the\n * applyChangeBatch method. It will be some version of a server-provided\n * document OR will be a server-provided document PLUS acknowledged mutations:\n *\n *   RemoteDocument' = RemoteDocument + Acknowledged(LocalMutations)\n *\n * Note that this \"dirty\" version of a RemoteDocument will not be identical to a\n * server base version, since it has LocalMutations added to it pending getting\n * an authoritative copy from the server.\n *\n * Since LocalMutations can be rejected by the server, we have to be able to\n * revert a LocalMutation that has already been applied to the LocalDocument\n * (typically done by replaying all remaining LocalMutations to the\n * RemoteDocument to re-apply).\n *\n * The LocalStore is responsible for the garbage collection of the documents it\n * contains. For now, it every doc referenced by a view, the mutation queue, or\n * the RemoteStore.\n *\n * It also maintains the persistence of mapping queries to resume tokens and\n * target ids. It needs to know this data about queries to properly know what\n * docs it would be allowed to garbage collect.\n *\n * The LocalStore must be able to efficiently execute queries against its local\n * cache of the documents, to provide the initial set of results before any\n * remote changes have been received.\n *\n * Note: In TypeScript, most methods return Promises since the implementation\n * may rely on fetching data from IndexedDB which is async.\n * These Promises will only be rejected on an I/O error or other internal\n * (unexpected) failure (e.g. failed assert) and always represent an\n * unrecoverable error (should be caught / reported by the async_queue).\n */\nvar LocalStore = /** @class */ (function () {\n    function LocalStore(\n        /** Manages our in-memory or durable persistence. */\n        persistence, initialUser, \n        /**\n           * The garbage collector collects documents that should no longer be\n           * cached (e.g. if they are no longer retained by the above reference sets\n           * and the garbage collector is performing eager collection).\n           */\n        garbageCollector) {\n        this.persistence = persistence;\n        this.garbageCollector = garbageCollector;\n        /**\n         * The set of document references maintained by any local views.\n         */\n        this.localViewReferences = new ReferenceSet();\n        /** Maps a targetID to data about its query. */\n        this.targetIds = {};\n        /** Used to generate targetIDs for queries tracked locally. */\n        this.targetIdGenerator = TargetIdGenerator.forLocalStore();\n        /**\n         * A heldBatchResult is a mutation batch result (from a write acknowledgement)\n         * that arrived before the watch stream got notified of a snapshot that\n         * includes the write. So we \"hold\" it until the watch stream catches up. It\n         * ensures that the local write remains visible (latency compensation) and\n         * doesn't temporarily appear reverted because the watch stream is slower than\n         * the write stream and so wasn't reflecting it.\n         *\n         * NOTE: Eventually we want to move this functionality into the remote store.\n         */\n        this.heldBatchResults = [];\n        this.mutationQueue = persistence.getMutationQueue(initialUser);\n        this.remoteDocuments = persistence.getRemoteDocumentCache();\n        this.queryCache = persistence.getQueryCache();\n        this.localDocuments = new LocalDocumentsView(this.remoteDocuments, this.mutationQueue);\n        this.garbageCollector.addGarbageSource(this.localViewReferences);\n        this.garbageCollector.addGarbageSource(this.queryCache);\n        this.garbageCollector.addGarbageSource(this.mutationQueue);\n    }\n    /** Performs any initial startup actions required by the local store. */\n    LocalStore.prototype.start = function () {\n        var _this = this;\n        return this.persistence.runTransaction('Start LocalStore', function (txn) {\n            return _this.startMutationQueue(txn).next(function () { return _this.startQueryCache(txn); });\n        });\n    };\n    /**\n     * Tells the LocalStore that the currently authenticated user has changed.\n     *\n     * In response the local store switches the mutation queue to the new user and\n     * returns any resulting document changes.\n     */\n    LocalStore.prototype.handleUserChange = function (user) {\n        var _this = this;\n        return this.persistence.runTransaction('Handle user change', function (txn) {\n            // Swap out the mutation queue, grabbing the pending mutation batches\n            // before and after.\n            var oldBatches;\n            return _this.mutationQueue\n                .getAllMutationBatches(txn)\n                .next(function (promisedOldBatches) {\n                oldBatches = promisedOldBatches;\n                _this.garbageCollector.removeGarbageSource(_this.mutationQueue);\n                _this.mutationQueue = _this.persistence.getMutationQueue(user);\n                _this.garbageCollector.addGarbageSource(_this.mutationQueue);\n                return _this.startMutationQueue(txn);\n            })\n                .next(function () {\n                // Recreate our LocalDocumentsView using the new\n                // MutationQueue.\n                _this.localDocuments = new LocalDocumentsView(_this.remoteDocuments, _this.mutationQueue);\n                return _this.mutationQueue.getAllMutationBatches(txn);\n            })\n                .next(function (newBatches) {\n                // Union the old/new changed keys.\n                var changedKeys = documentKeySet();\n                for (var _i = 0, _a = [oldBatches, newBatches]; _i < _a.length; _i++) {\n                    var batches = _a[_i];\n                    for (var _b = 0, batches_1 = batches; _b < batches_1.length; _b++) {\n                        var batch = batches_1[_b];\n                        for (var _c = 0, _d = batch.mutations; _c < _d.length; _c++) {\n                            var mutation = _d[_c];\n                            changedKeys = changedKeys.add(mutation.key);\n                        }\n                    }\n                }\n                // Return the set of all (potentially) changed documents as the\n                // result of the user change.\n                return _this.localDocuments.getDocuments(txn, changedKeys);\n            });\n        });\n    };\n    LocalStore.prototype.startQueryCache = function (txn) {\n        var _this = this;\n        return this.queryCache.start(txn).next(function () {\n            var targetId = _this.queryCache.getHighestTargetId();\n            _this.targetIdGenerator = TargetIdGenerator.forLocalStore(targetId);\n        });\n    };\n    LocalStore.prototype.startMutationQueue = function (txn) {\n        var _this = this;\n        return this.mutationQueue\n            .start(txn)\n            .next(function () {\n            // If we have any leftover mutation batch results from a prior run,\n            // just drop them.\n            // TODO(http://b/33446471): We probably need to repopulate\n            // heldBatchResults or similar instead, but that is not\n            // straightforward since we're not persisting the write ack versions.\n            _this.heldBatchResults = [];\n            return _this.mutationQueue.getHighestAcknowledgedBatchId(txn);\n        })\n            .next(function (highestAck) {\n            // TODO(mikelehen): This is the only usage of\n            // getAllMutationBatchesThroughBatchId(). Consider removing it in\n            // favor of a getAcknowledgedBatches() method.\n            if (highestAck !== BATCHID_UNKNOWN) {\n                return _this.mutationQueue.getAllMutationBatchesThroughBatchId(txn, highestAck);\n            }\n            else {\n                return PersistencePromise.resolve([]);\n            }\n        })\n            .next(function (ackedBatches) {\n            if (ackedBatches.length > 0) {\n                return _this.mutationQueue.removeMutationBatches(txn, ackedBatches);\n            }\n            else {\n                return PersistencePromise.resolve();\n            }\n        });\n    };\n    /* Accept locally generated Mutations and commit them to storage. */\n    LocalStore.prototype.localWrite = function (mutations) {\n        var _this = this;\n        return this.persistence.runTransaction('Locally write mutations', function (txn) {\n            var batch;\n            var localWriteTime = Timestamp.now();\n            return _this.mutationQueue\n                .addMutationBatch(txn, localWriteTime, mutations)\n                .next(function (promisedBatch) {\n                batch = promisedBatch;\n                // TODO(koss): This is doing an N^2 update by replaying ALL the\n                // mutations on each document (instead of just the ones added) in\n                // this batch.\n                var keys = batch.keys();\n                return _this.localDocuments.getDocuments(txn, keys);\n            })\n                .next(function (changedDocuments) {\n                return { batchId: batch.batchId, changes: changedDocuments };\n            });\n        });\n    };\n    /**\n     * Acknowledge the given batch.\n     *\n     * On the happy path when a batch is acknowledged, the local store will\n     *\n     *  + remove the batch from the mutation queue;\n     *  + apply the changes to the remote document cache;\n     *  + recalculate the latency compensated view implied by those changes (there\n     *    may be mutations in the queue that affect the documents but haven't been\n     *    acknowledged yet); and\n     *  + give the changed documents back the sync engine\n     *\n     * @returns The resulting (modified) documents.\n     */\n    LocalStore.prototype.acknowledgeBatch = function (batchResult) {\n        var _this = this;\n        return this.persistence.runTransaction('Acknowledge batch', function (txn) {\n            var affected;\n            return _this.mutationQueue\n                .acknowledgeBatch(txn, batchResult.batch, batchResult.streamToken)\n                .next(function () {\n                if (_this.shouldHoldBatchResult(batchResult.commitVersion)) {\n                    _this.heldBatchResults.push(batchResult);\n                    affected = documentKeySet();\n                    return PersistencePromise.resolve();\n                }\n                else {\n                    var documentBuffer_1 = new RemoteDocumentChangeBuffer(_this.remoteDocuments);\n                    return _this.releaseBatchResults(txn, [batchResult], documentBuffer_1).next(function (promisedAffectedKeys) {\n                        affected = promisedAffectedKeys;\n                        return documentBuffer_1.apply(txn);\n                    });\n                }\n            })\n                .next(function () {\n                return _this.mutationQueue.performConsistencyCheck(txn);\n            })\n                .next(function () {\n                return _this.localDocuments.getDocuments(txn, affected);\n            });\n        });\n    };\n    /**\n     * Remove mutations from the MutationQueue for the specified batch;\n     * LocalDocuments will be recalculated.\n     *\n     * @returns The resulting modified documents.\n     */\n    LocalStore.prototype.rejectBatch = function (batchId) {\n        var _this = this;\n        return this.persistence.runTransaction('Reject batch', function (txn) {\n            var toReject;\n            var affectedKeys;\n            return _this.mutationQueue\n                .lookupMutationBatch(txn, batchId)\n                .next(function (promisedToReject) {\n                assert(promisedToReject != null, 'Attempt to reject nonexistent batch!');\n                toReject = promisedToReject;\n                return _this.mutationQueue\n                    .getHighestAcknowledgedBatchId(txn)\n                    .next(function (lastAcked) {\n                    assert(batchId > lastAcked, \"Acknowledged batches can't be rejected.\");\n                    return toReject;\n                });\n            })\n                .next(function () {\n                return _this.removeMutationBatch(txn, toReject);\n            })\n                .next(function (promisedAffectedKeys) {\n                affectedKeys = promisedAffectedKeys;\n                return _this.mutationQueue.performConsistencyCheck(txn);\n            })\n                .next(function () {\n                return _this.localDocuments.getDocuments(txn, affectedKeys);\n            });\n        });\n    };\n    /** Returns the last recorded stream token for the current user. */\n    LocalStore.prototype.getLastStreamToken = function () {\n        var _this = this;\n        return this.persistence.runTransaction('Get last stream token', function (txn) {\n            return _this.mutationQueue.getLastStreamToken(txn);\n        });\n    };\n    /**\n     * Sets the stream token for the current user without acknowledging any\n     * mutation batch. This is usually only useful after a stream handshake or in\n     * response to an error that requires clearing the stream token.\n     */\n    LocalStore.prototype.setLastStreamToken = function (streamToken) {\n        var _this = this;\n        return this.persistence.runTransaction('Set last stream token', function (txn) {\n            return _this.mutationQueue.setLastStreamToken(txn, streamToken);\n        });\n    };\n    /**\n     * Returns the last consistent snapshot processed (used by the RemoteStore to\n     * determine whether to buffer incoming snapshots from the backend).\n     */\n    LocalStore.prototype.getLastRemoteSnapshotVersion = function () {\n        return this.queryCache.getLastRemoteSnapshotVersion();\n    };\n    /**\n     * Update the \"ground-state\" (remote) documents. We assume that the remote\n     * event reflects any write batches that have been acknowledged or rejected\n     * (i.e. we do not re-apply local mutations to updates from this event).\n     *\n     * LocalDocuments are re-calculated if there are remaining mutations in the\n     * queue.\n     */\n    LocalStore.prototype.applyRemoteEvent = function (remoteEvent) {\n        var _this = this;\n        var documentBuffer = new RemoteDocumentChangeBuffer(this.remoteDocuments);\n        return this.persistence.runTransaction('Apply remote event', function (txn) {\n            var promises = [];\n            objUtils.forEachNumber(remoteEvent.targetChanges, function (targetId, change) {\n                // Do not ref/unref unassigned targetIds - it may lead to leaks.\n                var queryData = _this.targetIds[targetId];\n                if (!queryData)\n                    return;\n                var mapping = change.mapping;\n                if (mapping) {\n                    // First make sure that all references are deleted\n                    if (mapping instanceof ResetMapping) {\n                        promises.push(_this.queryCache\n                            .removeMatchingKeysForTargetId(txn, targetId)\n                            .next(function () {\n                            return _this.queryCache.addMatchingKeys(txn, mapping.documents, targetId);\n                        }));\n                    }\n                    else if (mapping instanceof UpdateMapping) {\n                        promises.push(_this.queryCache\n                            .removeMatchingKeys(txn, mapping.removedDocuments, targetId)\n                            .next(function () {\n                            return _this.queryCache.addMatchingKeys(txn, mapping.addedDocuments, targetId);\n                        }));\n                    }\n                    else {\n                        return fail('Unknown mapping type: ' + JSON.stringify(mapping));\n                    }\n                }\n                // Update the resume token if the change includes one. Don't clear\n                // any preexisting value.\n                var resumeToken = change.resumeToken;\n                if (resumeToken.length > 0) {\n                    queryData = queryData.update({\n                        resumeToken: resumeToken,\n                        snapshotVersion: change.snapshotVersion\n                    });\n                    _this.targetIds[targetId] = queryData;\n                    promises.push(_this.queryCache.addQueryData(txn, queryData));\n                }\n            });\n            var changedDocKeys = documentKeySet();\n            remoteEvent.documentUpdates.forEach(function (key, doc) {\n                changedDocKeys = changedDocKeys.add(key);\n                promises.push(documentBuffer.getEntry(txn, key).next(function (existingDoc) {\n                    // Make sure we don't apply an old document version to the remote\n                    // cache, though we make an exception for SnapshotVersion.MIN which\n                    // can happen for manufactured events (e.g. in the case of a limbo\n                    // document resolution failing).\n                    if (existingDoc == null ||\n                        doc.version.equals(SnapshotVersion.MIN) ||\n                        doc.version.compareTo(existingDoc.version) >= 0) {\n                        documentBuffer.addEntry(doc);\n                    }\n                    else {\n                        log.debug(LOG_TAG, 'Ignoring outdated watch update for ', key, '. Current version:', existingDoc.version, ' Watch version:', doc.version);\n                    }\n                    // The document might be garbage because it was unreferenced by\n                    // everything. Make sure to mark it as garbage if it is...\n                    _this.garbageCollector.addPotentialGarbageKey(key);\n                }));\n            });\n            // HACK: The only reason we allow a null snapshot version is so that we\n            // can synthesize remote events when we get permission denied errors while\n            // trying to resolve the state of a locally cached document that is in\n            // limbo.\n            var lastRemoteVersion = _this.queryCache.getLastRemoteSnapshotVersion();\n            var remoteVersion = remoteEvent.snapshotVersion;\n            if (!remoteVersion.equals(SnapshotVersion.MIN)) {\n                assert(remoteVersion.compareTo(lastRemoteVersion) >= 0, 'Watch stream reverted to previous snapshot?? ' +\n                    remoteVersion +\n                    ' < ' +\n                    lastRemoteVersion);\n                promises.push(_this.queryCache.setLastRemoteSnapshotVersion(txn, remoteVersion));\n            }\n            var releasedWriteKeys;\n            return PersistencePromise.waitFor(promises)\n                .next(function () { return _this.releaseHeldBatchResults(txn, documentBuffer); })\n                .next(function (promisedReleasedWriteKeys) {\n                releasedWriteKeys = promisedReleasedWriteKeys;\n                return documentBuffer.apply(txn);\n            })\n                .next(function () {\n                return _this.localDocuments.getDocuments(txn, changedDocKeys.unionWith(releasedWriteKeys));\n            });\n        });\n    };\n    /**\n     * Notify local store of the changed views to locally pin documents.\n     */\n    LocalStore.prototype.notifyLocalViewChanges = function (viewChanges) {\n        var _this = this;\n        return this.persistence.runTransaction('Notify local view changes', function (txn) {\n            var promises = [];\n            var _loop_1 = function (view) {\n                promises.push(_this.queryCache\n                    .getQueryData(txn, view.query)\n                    .next(function (queryData) {\n                    assert(queryData !== null, 'Local view changes contain unallocated query.');\n                    var targetId = queryData.targetId;\n                    _this.localViewReferences.addReferences(view.addedKeys, targetId);\n                    _this.localViewReferences.removeReferences(view.removedKeys, targetId);\n                }));\n            };\n            for (var _i = 0, viewChanges_1 = viewChanges; _i < viewChanges_1.length; _i++) {\n                var view = viewChanges_1[_i];\n                _loop_1(view);\n            }\n            return PersistencePromise.waitFor(promises);\n        });\n    };\n    /**\n     * Gets the mutation batch after the passed in batchId in the mutation queue\n     *  or null if empty.\n     *  @param afterBatchId If provided, the batch to search after.\n     *  @returns The next mutation or null if there wasn't one.\n     */\n    LocalStore.prototype.nextMutationBatch = function (afterBatchId) {\n        var _this = this;\n        return this.persistence.runTransaction('Get next mutation batch', function (txn) {\n            if (afterBatchId === undefined) {\n                afterBatchId = BATCHID_UNKNOWN;\n            }\n            return _this.mutationQueue.getNextMutationBatchAfterBatchId(txn, afterBatchId);\n        });\n    };\n    /**\n     * Read the current value of a Document with a given key or null if not\n     * found - used for testing.\n     */\n    LocalStore.prototype.readDocument = function (key) {\n        var _this = this;\n        return this.persistence.runTransaction('read document', function (txn) {\n            return _this.localDocuments.getDocument(txn, key);\n        });\n    };\n    /**\n     * Assigns the given query an internal ID so that its results can be pinned so\n     * they don't get GC'd. A query must be allocated in the local store before\n     * the store can be used to manage its view.\n     */\n    LocalStore.prototype.allocateQuery = function (query) {\n        var _this = this;\n        return this.persistence.runTransaction('Allocate query', function (txn) {\n            var queryData;\n            return _this.queryCache\n                .getQueryData(txn, query)\n                .next(function (cached) {\n                if (cached) {\n                    // This query has been listened to previously, so reuse the\n                    // previous targetID.\n                    // TODO(mcg): freshen last accessed date?\n                    queryData = cached;\n                    return PersistencePromise.resolve();\n                }\n                else {\n                    var targetId = _this.targetIdGenerator.next();\n                    queryData = new QueryData(query, targetId, QueryPurpose.Listen);\n                    return _this.queryCache.addQueryData(txn, queryData);\n                }\n            })\n                .next(function () {\n                assert(!_this.targetIds[queryData.targetId], 'Tried to allocate an already allocated query: ' + query);\n                _this.targetIds[queryData.targetId] = queryData;\n                return queryData;\n            });\n        });\n    };\n    /** Unpin all the documents associated with the given query. */\n    LocalStore.prototype.releaseQuery = function (query) {\n        var _this = this;\n        return this.persistence.runTransaction('Release query', function (txn) {\n            return _this.queryCache\n                .getQueryData(txn, query)\n                .next(function (queryData) {\n                assert(queryData != null, 'Tried to release nonexistent query: ' + query);\n                _this.localViewReferences.removeReferencesForId(queryData.targetId);\n                delete _this.targetIds[queryData.targetId];\n                if (_this.garbageCollector.isEager) {\n                    return _this.queryCache.removeQueryData(txn, queryData);\n                }\n                else {\n                    return PersistencePromise.resolve();\n                }\n            })\n                .next(function () {\n                // If this was the last watch target, then we won't get any more\n                // watch snapshots, so we should release any held batch results.\n                if (objUtils.isEmpty(_this.targetIds)) {\n                    var documentBuffer_2 = new RemoteDocumentChangeBuffer(_this.remoteDocuments);\n                    return _this.releaseHeldBatchResults(txn, documentBuffer_2).next(function () {\n                        documentBuffer_2.apply(txn);\n                    });\n                }\n                else {\n                    return PersistencePromise.resolve();\n                }\n            });\n        });\n    };\n    /**\n     * Runs the specified query against all the documents in the local store and\n     * returns the results.\n     */\n    LocalStore.prototype.executeQuery = function (query) {\n        var _this = this;\n        return this.persistence.runTransaction('Execute query', function (txn) {\n            return _this.localDocuments.getDocumentsMatchingQuery(txn, query);\n        });\n    };\n    /**\n     * Returns the keys of the documents that are associated with the given\n     * target id in the remote table.\n     */\n    LocalStore.prototype.remoteDocumentKeys = function (targetId) {\n        var _this = this;\n        return this.persistence.runTransaction('Remote document keys', function (txn) {\n            return _this.queryCache.getMatchingKeysForTargetId(txn, targetId);\n        });\n    };\n    /**\n     * Collect garbage if necessary.\n     * Should be called periodically by Sync Engine to recover resources. The\n     * implementation must guarantee that GC won't happen in other places than\n     * this method call.\n     */\n    LocalStore.prototype.collectGarbage = function () {\n        var _this = this;\n        // Call collectGarbage regardless of whether isGCEnabled so the referenceSet\n        // doesn't continue to accumulate the garbage keys.\n        return this.persistence.runTransaction('Garbage collection', function (txn) {\n            return _this.garbageCollector.collectGarbage(txn).next(function (garbage) {\n                var promises = [];\n                garbage.forEach(function (key) {\n                    promises.push(_this.remoteDocuments.removeEntry(txn, key));\n                });\n                return PersistencePromise.waitFor(promises);\n            });\n        });\n    };\n    LocalStore.prototype.releaseHeldBatchResults = function (txn, documentBuffer) {\n        var toRelease = [];\n        for (var _i = 0, _a = this.heldBatchResults; _i < _a.length; _i++) {\n            var batchResult = _a[_i];\n            if (!this.isRemoteUpToVersion(batchResult.commitVersion)) {\n                break;\n            }\n            toRelease.push(batchResult);\n        }\n        if (toRelease.length === 0) {\n            return PersistencePromise.resolve(documentKeySet());\n        }\n        else {\n            this.heldBatchResults.splice(0, toRelease.length);\n            return this.releaseBatchResults(txn, toRelease, documentBuffer);\n        }\n    };\n    LocalStore.prototype.isRemoteUpToVersion = function (version) {\n        // If there are no watch targets, then we won't get remote snapshots, and\n        // we are always \"up-to-date.\"\n        var lastRemoteVersion = this.queryCache.getLastRemoteSnapshotVersion();\n        return (version.compareTo(lastRemoteVersion) <= 0 ||\n            objUtils.isEmpty(this.targetIds));\n    };\n    LocalStore.prototype.shouldHoldBatchResult = function (version) {\n        // Check if watcher isn't up to date or prior results are already held.\n        return (!this.isRemoteUpToVersion(version) || this.heldBatchResults.length > 0);\n    };\n    LocalStore.prototype.releaseBatchResults = function (txn, batchResults, documentBuffer) {\n        var _this = this;\n        var promiseChain = PersistencePromise.resolve();\n        var _loop_2 = function (batchResult) {\n            promiseChain = promiseChain.next(function () {\n                return _this.applyWriteToRemoteDocuments(txn, batchResult, documentBuffer);\n            });\n        };\n        for (var _i = 0, batchResults_1 = batchResults; _i < batchResults_1.length; _i++) {\n            var batchResult = batchResults_1[_i];\n            _loop_2(batchResult);\n        }\n        return promiseChain.next(function () {\n            return _this.removeMutationBatches(txn, batchResults.map(function (result) { return result.batch; }));\n        });\n    };\n    LocalStore.prototype.removeMutationBatch = function (txn, batch) {\n        return this.removeMutationBatches(txn, [batch]);\n    };\n    /** Removes all the mutation batches named in the given array. */\n    LocalStore.prototype.removeMutationBatches = function (txn, batches) {\n        var affectedDocs = documentKeySet();\n        for (var _i = 0, batches_2 = batches; _i < batches_2.length; _i++) {\n            var batch = batches_2[_i];\n            for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {\n                var mutation = _b[_a];\n                var key = mutation.key;\n                affectedDocs = affectedDocs.add(key);\n            }\n        }\n        return this.mutationQueue\n            .removeMutationBatches(txn, batches)\n            .next(function () { return affectedDocs; });\n    };\n    LocalStore.prototype.applyWriteToRemoteDocuments = function (txn, batchResult, documentBuffer) {\n        var batch = batchResult.batch;\n        var docKeys = batch.keys();\n        var promiseChain = PersistencePromise.resolve();\n        docKeys.forEach(function (docKey) {\n            promiseChain = promiseChain\n                .next(function () {\n                return documentBuffer.getEntry(txn, docKey);\n            })\n                .next(function (remoteDoc) {\n                var doc = remoteDoc;\n                var ackVersion = batchResult.docVersions.get(docKey);\n                assert(ackVersion !== null, 'ackVersions should contain every doc in the write.');\n                if (!doc || doc.version.compareTo(ackVersion) < 0) {\n                    doc = batch.applyToRemoteDocument(docKey, doc, batchResult);\n                    if (!doc) {\n                        assert(!remoteDoc, 'Mutation batch ' +\n                            batch +\n                            ' applied to document ' +\n                            remoteDoc +\n                            ' resulted in null');\n                    }\n                    else {\n                        documentBuffer.addEntry(doc);\n                    }\n                }\n            });\n        });\n        return promiseChain;\n    };\n    return LocalStore;\n}());\nexport { LocalStore };\n\n//# sourceMappingURL=local_store.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/local_store.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DocumentKey } from '../model/document_key';\nimport { BATCHID_UNKNOWN, MutationBatch } from '../model/mutation_batch';\nimport { emptyByteString } from '../platform/platform';\nimport { assert } from '../util/assert';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedSet } from '../util/sorted_set';\nimport { PersistencePromise } from './persistence_promise';\nimport { DocReference } from './reference_set';\nvar MemoryMutationQueue = /** @class */ (function () {\n    function MemoryMutationQueue() {\n        /**\n         * The set of all mutations that have been sent but not yet been applied to\n         * the backend.\n         */\n        this.mutationQueue = [];\n        /** Next value to use when assigning sequential IDs to each mutation batch. */\n        this.nextBatchId = 1;\n        /** The highest acknowledged mutation in the queue. */\n        this.highestAcknowledgedBatchId = BATCHID_UNKNOWN;\n        /** The last received stream token from the server, used to acknowledge which\n         * responses the client has processed. Stream tokens are opaque checkpoint\n         * markers whose only real value is their inclusion in the next request.\n         */\n        this.lastStreamToken = emptyByteString();\n        /** The garbage collector to notify about potential garbage keys. */\n        this.garbageCollector = null;\n        /** An ordered mapping between documents and the mutations batch IDs. */\n        this.batchesByDocumentKey = new SortedSet(DocReference.compareByKey);\n    }\n    MemoryMutationQueue.prototype.start = function (transaction) {\n        // NOTE: The queue may be shutdown / started multiple times, since we\n        // maintain the queue for the duration of the app session in case a user\n        // logs out / back in. To behave like the LevelDB-backed MutationQueue (and\n        // accommodate tests that expect as much), we reset nextBatchId and\n        // highestAcknowledgedBatchId if the queue is empty.\n        if (this.mutationQueue.length === 0) {\n            this.nextBatchId = 1;\n            this.highestAcknowledgedBatchId = BATCHID_UNKNOWN;\n        }\n        assert(this.highestAcknowledgedBatchId < this.nextBatchId, 'highestAcknowledgedBatchId must be less than the nextBatchId');\n        return PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.checkEmpty = function (transaction) {\n        return PersistencePromise.resolve(this.mutationQueue.length === 0);\n    };\n    MemoryMutationQueue.prototype.getNextBatchId = function (transaction) {\n        return PersistencePromise.resolve(this.nextBatchId);\n    };\n    MemoryMutationQueue.prototype.getHighestAcknowledgedBatchId = function (transaction) {\n        return PersistencePromise.resolve(this.highestAcknowledgedBatchId);\n    };\n    MemoryMutationQueue.prototype.acknowledgeBatch = function (transaction, batch, streamToken) {\n        var batchId = batch.batchId;\n        assert(batchId > this.highestAcknowledgedBatchId, 'Mutation batchIDs must be acknowledged in order');\n        var batchIndex = this.indexOfExistingBatchId(batchId, 'acknowledged');\n        // Verify that the batch in the queue is the one to be acknowledged.\n        var check = this.mutationQueue[batchIndex];\n        assert(batchId === check.batchId, 'Queue ordering failure: expected batch ' +\n            batchId +\n            ', got batch ' +\n            check.batchId);\n        assert(!check.isTombstone(), \"Can't acknowledge a previously removed batch\");\n        this.highestAcknowledgedBatchId = batchId;\n        this.lastStreamToken = streamToken;\n        return PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.getLastStreamToken = function (transaction) {\n        return PersistencePromise.resolve(this.lastStreamToken);\n    };\n    MemoryMutationQueue.prototype.setLastStreamToken = function (transaction, streamToken) {\n        this.lastStreamToken = streamToken;\n        return PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.addMutationBatch = function (transaction, localWriteTime, mutations) {\n        assert(mutations.length !== 0, 'Mutation batches should not be empty');\n        var batchId = this.nextBatchId;\n        this.nextBatchId++;\n        if (this.mutationQueue.length > 0) {\n            var prior = this.mutationQueue[this.mutationQueue.length - 1];\n            assert(prior.batchId < batchId, 'Mutation batchIDs must be monotonically increasing order');\n        }\n        var batch = new MutationBatch(batchId, localWriteTime, mutations);\n        this.mutationQueue.push(batch);\n        // Track references by document key.\n        for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {\n            var mutation = mutations_1[_i];\n            this.batchesByDocumentKey = this.batchesByDocumentKey.add(new DocReference(mutation.key, batchId));\n        }\n        return PersistencePromise.resolve(batch);\n    };\n    MemoryMutationQueue.prototype.lookupMutationBatch = function (transaction, batchId) {\n        return PersistencePromise.resolve(this.findMutationBatch(batchId));\n    };\n    MemoryMutationQueue.prototype.getNextMutationBatchAfterBatchId = function (transaction, batchId) {\n        var size = this.mutationQueue.length;\n        // All batches with batchId <= this.highestAcknowledgedBatchId have been\n        // acknowledged so the first unacknowledged batch after batchID will have a\n        // batchID larger than both of these values.\n        batchId = Math.max(batchId + 1, this.highestAcknowledgedBatchId);\n        // The requested batchId may still be out of range so normalize it to the\n        // start of the queue.\n        var rawIndex = this.indexOfBatchId(batchId);\n        var index = rawIndex < 0 ? 0 : rawIndex;\n        // Finally return the first non-tombstone batch.\n        for (; index < size; index++) {\n            var batch = this.mutationQueue[index];\n            if (!batch.isTombstone()) {\n                return PersistencePromise.resolve(batch);\n            }\n        }\n        return PersistencePromise.resolve(null);\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatches = function (transaction) {\n        return PersistencePromise.resolve(this.getAllLiveMutationBatchesBeforeIndex(this.mutationQueue.length));\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatchesThroughBatchId = function (transaction, batchId) {\n        var count = this.mutationQueue.length;\n        var endIndex = this.indexOfBatchId(batchId);\n        if (endIndex < 0) {\n            endIndex = 0;\n        }\n        else if (endIndex >= count) {\n            endIndex = count;\n        }\n        else {\n            // The endIndex is in the queue so increment to pull everything in the\n            // queue including it.\n            endIndex++;\n        }\n        return PersistencePromise.resolve(this.getAllLiveMutationBatchesBeforeIndex(endIndex));\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey = function (transaction, documentKey) {\n        var _this = this;\n        var start = new DocReference(documentKey, 0);\n        var end = new DocReference(documentKey, Number.POSITIVE_INFINITY);\n        var result = [];\n        this.batchesByDocumentKey.forEachInRange([start, end], function (ref) {\n            assert(documentKey.equals(ref.key), \"Should only iterate over a single key's batches\");\n            var batch = _this.findMutationBatch(ref.targetOrBatchId);\n            assert(batch !== null, 'Batches in the index must exist in the main table');\n            result.push(batch);\n        });\n        return PersistencePromise.resolve(result);\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatchesAffectingQuery = function (transaction, query) {\n        var _this = this;\n        // Use the query path as a prefix for testing if a document matches the\n        // query.\n        var prefix = query.path;\n        var immediateChildrenPathLength = prefix.length + 1;\n        // Construct a document reference for actually scanning the index. Unlike\n        // the prefix the document key in this reference must have an even number of\n        // segments. The empty segment can be used a suffix of the query path\n        // because it precedes all other segments in an ordered traversal.\n        var startPath = prefix;\n        if (!DocumentKey.isDocumentKey(startPath)) {\n            startPath = startPath.child('');\n        }\n        var start = new DocReference(new DocumentKey(startPath), 0);\n        // Find unique batchIDs referenced by all documents potentially matching the\n        // query.\n        var uniqueBatchIDs = new SortedSet(primitiveComparator);\n        this.batchesByDocumentKey.forEachWhile(function (ref) {\n            var rowKeyPath = ref.key.path;\n            if (!prefix.isPrefixOf(rowKeyPath)) {\n                return false;\n            }\n            else {\n                // Rows with document keys more than one segment longer than the query\n                // path can't be matches. For example, a query on 'rooms' can't match\n                // the document /rooms/abc/messages/xyx.\n                // TODO(mcg): we'll need a different scanner when we implement\n                // ancestor queries.\n                if (rowKeyPath.length === immediateChildrenPathLength) {\n                    uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\n                }\n                return true;\n            }\n        }, start);\n        // Construct an array of matching batches, sorted by batchID to ensure that\n        // multiple mutations affecting the same document key are applied in order.\n        var result = [];\n        uniqueBatchIDs.forEach(function (batchId) {\n            var batch = _this.findMutationBatch(batchId);\n            if (batch !== null) {\n                result.push(batch);\n            }\n        });\n        return PersistencePromise.resolve(result);\n    };\n    MemoryMutationQueue.prototype.removeMutationBatches = function (transaction, batches) {\n        var batchCount = batches.length;\n        assert(batchCount > 0, 'Should not remove mutations when none exist.');\n        var firstBatchId = batches[0].batchId;\n        var queueCount = this.mutationQueue.length;\n        // Find the position of the first batch for removal. This need not be the\n        // first entry in the queue.\n        var startIndex = this.indexOfExistingBatchId(firstBatchId, 'removed');\n        assert(this.mutationQueue[startIndex].batchId === firstBatchId, 'Removed batches must exist in the queue');\n        // Check that removed batches are contiguous (while excluding tombstones).\n        var batchIndex = 1;\n        var queueIndex = startIndex + 1;\n        while (batchIndex < batchCount && queueIndex < queueCount) {\n            var batch = this.mutationQueue[queueIndex];\n            if (batch.isTombstone()) {\n                queueIndex++;\n                continue;\n            }\n            assert(batch.batchId === batches[batchIndex].batchId, 'Removed batches must be contiguous in the queue');\n            batchIndex++;\n            queueIndex++;\n        }\n        // Only actually remove batches if removing at the front of the queue.\n        // Previously rejected batches may have left tombstones in the queue, so\n        // expand the removal range to include any tombstones.\n        if (startIndex === 0) {\n            for (; queueIndex < queueCount; queueIndex++) {\n                var batch = this.mutationQueue[queueIndex];\n                if (!batch.isTombstone()) {\n                    break;\n                }\n            }\n            var length_1 = queueIndex - startIndex;\n            this.mutationQueue.splice(startIndex, length_1);\n        }\n        else {\n            // Mark the tombstones\n            for (var i = startIndex; i < queueIndex; i++) {\n                this.mutationQueue[i] = this.mutationQueue[i].toTombstone();\n            }\n        }\n        var references = this.batchesByDocumentKey;\n        for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\n            var batch = batches_1[_i];\n            var batchId = batch.batchId;\n            for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {\n                var mutation = _b[_a];\n                var key = mutation.key;\n                if (this.garbageCollector !== null) {\n                    this.garbageCollector.addPotentialGarbageKey(key);\n                }\n                var ref = new DocReference(key, batchId);\n                references = references.delete(ref);\n            }\n        }\n        this.batchesByDocumentKey = references;\n        return PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.setGarbageCollector = function (garbageCollector) {\n        this.garbageCollector = garbageCollector;\n    };\n    MemoryMutationQueue.prototype.containsKey = function (txn, key) {\n        var ref = new DocReference(key, 0);\n        var firstRef = this.batchesByDocumentKey.firstAfterOrEqual(ref);\n        return PersistencePromise.resolve(key.equals(firstRef && firstRef.key));\n    };\n    MemoryMutationQueue.prototype.performConsistencyCheck = function (txn) {\n        if (this.mutationQueue.length === 0) {\n            assert(this.batchesByDocumentKey.isEmpty(), 'Document leak -- detected dangling mutation references when queue is empty.');\n        }\n        return PersistencePromise.resolve();\n    };\n    /**\n     * A private helper that collects all the mutations batches in the queue up to\n     * but not including the given endIndex. All tombstones in the queue are\n     * excluded.\n     */\n    MemoryMutationQueue.prototype.getAllLiveMutationBatchesBeforeIndex = function (endIndex) {\n        var result = [];\n        for (var i = 0; i < endIndex; i++) {\n            var batch = this.mutationQueue[i];\n            if (!batch.isTombstone()) {\n                result.push(batch);\n            }\n        }\n        return result;\n    };\n    /**\n     * Finds the index of the given batchId in the mutation queue and asserts that\n     * the resulting index is within the bounds of the queue.\n     *\n     * @param batchId The batchId to search for\n     * @param action A description of what the caller is doing, phrased in passive\n     * form (e.g. \"acknowledged\" in a routine that acknowledges batches).\n     */\n    MemoryMutationQueue.prototype.indexOfExistingBatchId = function (batchId, action) {\n        var index = this.indexOfBatchId(batchId);\n        assert(index >= 0 && index < this.mutationQueue.length, 'Batches must exist to be ' + action);\n        return index;\n    };\n    /**\n     * Finds the index of the given batchId in the mutation queue. This operation\n     * is O(1).\n     *\n     * @return The computed index of the batch with the given batchId, based on\n     * the state of the queue. Note this index can be negative if the requested\n     * batchId has already been remvoed from the queue or past the end of the\n     * queue if the batchId is larger than the last added batch.\n     */\n    MemoryMutationQueue.prototype.indexOfBatchId = function (batchId) {\n        if (this.mutationQueue.length === 0) {\n            // As an index this is past the end of the queue\n            return 0;\n        }\n        // Examine the front of the queue to figure out the difference between the\n        // batchId and indexes in the array. Note that since the queue is ordered\n        // by batchId, if the first batch has a larger batchId then the requested\n        // batchId doesn't exist in the queue.\n        var firstBatchId = this.mutationQueue[0].batchId;\n        return batchId - firstBatchId;\n    };\n    /**\n     * A version of lookupMutationBatch that doesn't return a promise, this makes\n     * other functions that uses this code easier to read and more efficent.\n     */\n    MemoryMutationQueue.prototype.findMutationBatch = function (batchId) {\n        var index = this.indexOfBatchId(batchId);\n        if (index < 0 || index >= this.mutationQueue.length) {\n            return null;\n        }\n        var batch = this.mutationQueue[index];\n        assert(batch.batchId === batchId, 'If found batch must match');\n        return batch.isTombstone() ? null : batch;\n    };\n    return MemoryMutationQueue;\n}());\nexport { MemoryMutationQueue };\n\n//# sourceMappingURL=memory_mutation_queue.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/memory_mutation_queue.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { ObjectMap } from '../util/obj_map';\nimport { PersistencePromise } from './persistence_promise';\nimport { ReferenceSet } from './reference_set';\nvar MemoryQueryCache = /** @class */ (function () {\n    function MemoryQueryCache() {\n        /**\n         * Maps a query to the data about that query\n         */\n        this.queries = new ObjectMap(function (q) { return q.canonicalId(); });\n        /** The last received snapshot version. */\n        this.lastRemoteSnapshotVersion = SnapshotVersion.MIN;\n        /** The highest numbered target ID encountered. */\n        this.highestTargetId = 0;\n        /**\n         * A ordered bidirectional mapping between documents and the remote target\n         * IDs.\n         */\n        this.references = new ReferenceSet();\n    }\n    MemoryQueryCache.prototype.start = function (transaction) {\n        // Nothing to do.\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.getLastRemoteSnapshotVersion = function () {\n        return this.lastRemoteSnapshotVersion;\n    };\n    MemoryQueryCache.prototype.getHighestTargetId = function () {\n        return this.highestTargetId;\n    };\n    MemoryQueryCache.prototype.setLastRemoteSnapshotVersion = function (transaction, snapshotVersion) {\n        this.lastRemoteSnapshotVersion = snapshotVersion;\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.addQueryData = function (transaction, queryData) {\n        this.queries.set(queryData.query, queryData);\n        var targetId = queryData.targetId;\n        if (targetId > this.highestTargetId) {\n            this.highestTargetId = targetId;\n        }\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.removeQueryData = function (transaction, queryData) {\n        this.queries.delete(queryData.query);\n        this.references.removeReferencesForId(queryData.targetId);\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.getQueryData = function (transaction, query) {\n        var queryData = this.queries.get(query) || null;\n        return PersistencePromise.resolve(queryData);\n    };\n    MemoryQueryCache.prototype.addMatchingKeys = function (txn, keys, targetId) {\n        this.references.addReferences(keys, targetId);\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.removeMatchingKeys = function (txn, keys, targetId) {\n        this.references.removeReferences(keys, targetId);\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.removeMatchingKeysForTargetId = function (txn, targetId) {\n        this.references.removeReferencesForId(targetId);\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.getMatchingKeysForTargetId = function (txn, targetId) {\n        var matchingKeys = this.references.referencesForId(targetId);\n        return PersistencePromise.resolve(matchingKeys);\n    };\n    MemoryQueryCache.prototype.setGarbageCollector = function (gc) {\n        this.references.setGarbageCollector(gc);\n    };\n    MemoryQueryCache.prototype.containsKey = function (txn, key) {\n        return this.references.containsKey(txn, key);\n    };\n    return MemoryQueryCache;\n}());\nexport { MemoryQueryCache };\n\n//# sourceMappingURL=memory_query_cache.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/memory_query_cache.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentMap, maybeDocumentMap } from '../model/collections';\nimport { Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { PersistencePromise } from './persistence_promise';\nvar MemoryRemoteDocumentCache = /** @class */ (function () {\n    function MemoryRemoteDocumentCache() {\n        this.docs = maybeDocumentMap();\n    }\n    MemoryRemoteDocumentCache.prototype.addEntry = function (transaction, maybeDocument) {\n        this.docs = this.docs.insert(maybeDocument.key, maybeDocument);\n        return PersistencePromise.resolve();\n    };\n    MemoryRemoteDocumentCache.prototype.removeEntry = function (transaction, documentKey) {\n        this.docs = this.docs.remove(documentKey);\n        return PersistencePromise.resolve();\n    };\n    MemoryRemoteDocumentCache.prototype.getEntry = function (transaction, documentKey) {\n        return PersistencePromise.resolve(this.docs.get(documentKey));\n    };\n    MemoryRemoteDocumentCache.prototype.getDocumentsMatchingQuery = function (transaction, query) {\n        var results = documentMap();\n        // Documents are ordered by key, so we can use a prefix scan to narrow down\n        // the documents we need to match the query against.\n        var prefix = new DocumentKey(query.path.child(''));\n        var iterator = this.docs.getIteratorFrom(prefix);\n        while (iterator.hasNext()) {\n            var _a = iterator.getNext(), key = _a.key, maybeDoc = _a.value;\n            if (!query.path.isPrefixOf(key.path)) {\n                break;\n            }\n            if (maybeDoc instanceof Document && query.matches(maybeDoc)) {\n                results = results.insert(maybeDoc.key, maybeDoc);\n            }\n        }\n        return PersistencePromise.resolve(results);\n    };\n    return MemoryRemoteDocumentCache;\n}());\nexport { MemoryRemoteDocumentCache };\n\n//# sourceMappingURL=memory_remote_document_cache.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/memory_remote_document_cache.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { debug } from '../util/log';\nimport { MemoryMutationQueue } from './memory_mutation_queue';\nimport { MemoryQueryCache } from './memory_query_cache';\nimport { MemoryRemoteDocumentCache } from './memory_remote_document_cache';\nvar LOG_TAG = 'MemoryPersistence';\n/**\n * A memory-backed instance of Persistence. Data is stored only in RAM and\n * not persisted across sessions.\n */\nvar MemoryPersistence = /** @class */ (function () {\n    function MemoryPersistence() {\n        /**\n         * Note that these are retained here to make it easier to write tests\n         * affecting both the in-memory and IndexedDB-backed persistence layers. Tests\n         * can create a new LocalStore wrapping this Persistence instance and this\n         * will make the in-memory persistence layer behave as if it were actually\n         * persisting values.\n         */\n        this.mutationQueues = {};\n        this.remoteDocumentCache = new MemoryRemoteDocumentCache();\n        this.queryCache = new MemoryQueryCache();\n        this.started = false;\n    }\n    MemoryPersistence.prototype.start = function () {\n        assert(!this.started, 'MemoryPersistence double-started!');\n        this.started = true;\n        // No durable state to read on startup.\n        return Promise.resolve();\n    };\n    MemoryPersistence.prototype.shutdown = function () {\n        // No durable state to ensure is closed on shutdown.\n        assert(this.started, 'MemoryPersistence shutdown without start!');\n        this.started = false;\n        return Promise.resolve();\n    };\n    MemoryPersistence.prototype.getMutationQueue = function (user) {\n        var queue = this.mutationQueues[user.toKey()];\n        if (!queue) {\n            queue = new MemoryMutationQueue();\n            this.mutationQueues[user.toKey()] = queue;\n        }\n        return queue;\n    };\n    MemoryPersistence.prototype.getQueryCache = function () {\n        return this.queryCache;\n    };\n    MemoryPersistence.prototype.getRemoteDocumentCache = function () {\n        return this.remoteDocumentCache;\n    };\n    MemoryPersistence.prototype.runTransaction = function (action, operation) {\n        debug(LOG_TAG, 'Starting transaction:', action);\n        return operation(new MemoryPersistenceTransaction()).toPromise();\n    };\n    return MemoryPersistence;\n}());\nexport { MemoryPersistence };\n/** Dummy class since memory persistence doesn't actually use transactions. */\nvar MemoryPersistenceTransaction = /** @class */ (function () {\n    function MemoryPersistenceTransaction() {\n    }\n    return MemoryPersistenceTransaction;\n}());\n\n//# sourceMappingURL=memory_persistence.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/memory_persistence.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentKeySet } from '../model/collections';\nimport { PersistencePromise } from './persistence_promise';\n/**\n * A garbage collector implementation that does absolutely nothing. It ignores\n * all addGarbageSource and addPotentialGarbageKey messages and and never\n * produces any garbage.\n */\nvar NoOpGarbageCollector = /** @class */ (function () {\n    function NoOpGarbageCollector() {\n        this.isEager = false;\n    }\n    NoOpGarbageCollector.prototype.addGarbageSource = function (garbageSource) {\n        // Not tracking garbage so don't track sources.\n    };\n    NoOpGarbageCollector.prototype.removeGarbageSource = function (garbageSource) {\n        // Not tracking garbage so don't track sources.\n    };\n    NoOpGarbageCollector.prototype.addPotentialGarbageKey = function (key) {\n        // Not tracking garbage so ignore.\n    };\n    NoOpGarbageCollector.prototype.collectGarbage = function (txn) {\n        return PersistencePromise.resolve(documentKeySet());\n    };\n    return NoOpGarbageCollector;\n}());\nexport { NoOpGarbageCollector };\n\n//# sourceMappingURL=no_op_garbage_collector.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/no_op_garbage_collector.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Deferred = /** @class */ (function () {\n    function Deferred() {\n        var _this = this;\n        this.promise = new Promise(function (resolve, reject) {\n            _this.resolve = resolve;\n            _this.reject = reject;\n        });\n    }\n    return Deferred;\n}());\nexport { Deferred };\n/**\n * Takes an array of values and sequences them using the promise (or value)\n * returned by the supplied callback. The callback for each item is called\n * after the promise is resolved for the previous item.\n * The function returns a promise which is resolved after the promise for\n * the last item is resolved.\n */\nexport function sequence(values, fn, initialValue) {\n    var result = Promise.resolve(initialValue);\n    values.forEach(function (value) {\n        result = result.then(function (lastResult) { return fn(value, lastResult); });\n    });\n    return result;\n}\n\n//# sourceMappingURL=promise.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/promise.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as log from '../util/log';\nimport { Deferred } from '../util/promise';\nvar LOG_TAG = 'ExponentialBackoff';\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\nvar ExponentialBackoff = /** @class */ (function () {\n    function ExponentialBackoff(\n        /**\n           * The initial delay (used as the base delay on the first retry attempt).\n           * Note that jitter will still be applied, so the actual delay could be as\n           * little as 0.5*initialDelayMs.\n           */\n        initialDelayMs, \n        /**\n           * The multiplier to use to determine the extended base delay after each\n           * attempt.\n           */\n        backoffFactor, \n        /**\n           * The maximum base delay after which no further backoff is performed.\n           * Note that jitter will still be applied, so the actual delay could be as\n           * much as 1.5*maxDelayMs.\n           */\n        maxDelayMs) {\n        this.initialDelayMs = initialDelayMs;\n        this.backoffFactor = backoffFactor;\n        this.maxDelayMs = maxDelayMs;\n        this.reset();\n    }\n    /**\n     * Resets the backoff delay.\n     *\n     * The very next backoffAndWait() will have no delay. If it is called again\n     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n     * subsequent ones will increase according to the backoffFactor.\n     */\n    ExponentialBackoff.prototype.reset = function () {\n        this.currentBaseMs = 0;\n    };\n    /**\n     * Resets the backoff delay to the maximum delay (e.g. for use after a\n     * RESOURCE_EXHAUSTED error).\n     */\n    ExponentialBackoff.prototype.resetToMax = function () {\n        this.currentBaseMs = this.maxDelayMs;\n    };\n    /**\n     * Returns a promise that resolves after currentDelayMs, and increases the\n     * delay for any subsequent attempts.\n     */\n    ExponentialBackoff.prototype.backoffAndWait = function () {\n        var def = new Deferred();\n        // First schedule using the current base (which may be 0 and should be\n        // honored as such).\n        var delayWithJitterMs = this.currentBaseMs + this.jitterDelayMs();\n        if (this.currentBaseMs > 0) {\n            log.debug(LOG_TAG, \"Backing off for \" + delayWithJitterMs + \" ms \" +\n                (\"(base delay: \" + this.currentBaseMs + \" ms)\"));\n        }\n        setTimeout(function () {\n            def.resolve();\n        }, delayWithJitterMs);\n        // Apply backoff factor to determine next delay and ensure it is within\n        // bounds.\n        this.currentBaseMs *= this.backoffFactor;\n        if (this.currentBaseMs < this.initialDelayMs) {\n            this.currentBaseMs = this.initialDelayMs;\n        }\n        if (this.currentBaseMs > this.maxDelayMs) {\n            this.currentBaseMs = this.maxDelayMs;\n        }\n        return def.promise;\n    };\n    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */\n    ExponentialBackoff.prototype.jitterDelayMs = function () {\n        return (Math.random() - 0.5) * this.currentBaseMs;\n    };\n    return ExponentialBackoff;\n}());\nexport { ExponentialBackoff };\n\n//# sourceMappingURL=backoff.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/backoff.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { maybeDocumentMap } from '../model/collections';\nimport { assert } from '../util/assert';\nimport { PersistentListenStream, PersistentWriteStream } from './persistent_stream';\n/**\n * Datastore is a wrapper around the external Google Cloud Datastore grpc API,\n * which provides an interface that is more convenient for the rest of the\n * client SDK architecture to consume.\n */\nvar Datastore = /** @class */ (function () {\n    function Datastore(databaseInfo, queue, connection, credentials, serializer, initialBackoffDelay) {\n        this.databaseInfo = databaseInfo;\n        this.queue = queue;\n        this.connection = connection;\n        this.credentials = credentials;\n        this.serializer = serializer;\n        this.initialBackoffDelay = initialBackoffDelay;\n    }\n    Datastore.prototype.newPersistentWriteStream = function (listener) {\n        return new PersistentWriteStream(this.databaseInfo, this.queue, this.connection, this.credentials, this.serializer, listener, this.initialBackoffDelay);\n    };\n    Datastore.prototype.newPersistentWatchStream = function (listener) {\n        return new PersistentListenStream(this.databaseInfo, this.queue, this.connection, this.credentials, this.serializer, listener, this.initialBackoffDelay);\n    };\n    Datastore.prototype.commit = function (mutations) {\n        var _this = this;\n        var params = {\n            writes: mutations.map(function (m) { return _this.serializer.toMutation(m); })\n        };\n        return this.invokeRPC('commit', params).then(function (response) {\n            return _this.serializer.fromWriteResults(response.writeResults);\n        });\n    };\n    Datastore.prototype.lookup = function (keys) {\n        var _this = this;\n        var params = {\n            documents: keys.map(function (k) { return _this.serializer.toName(k); })\n        };\n        return this.invokeRPC('batchGet', params).then(function (response) {\n            var docs = maybeDocumentMap();\n            response.forEach(function (proto) {\n                var doc = _this.serializer.fromMaybeDocument(proto);\n                docs = docs.insert(doc.key, doc);\n            });\n            var result = [];\n            keys.forEach(function (key) {\n                var doc = docs.get(key);\n                assert(!!doc, 'Missing entity in write response for ' + key);\n                result.push(doc);\n            });\n            return result;\n        });\n    };\n    /** Gets an auth token and invokes the provided RPC. */\n    Datastore.prototype.invokeRPC = function (rpcName, request) {\n        var _this = this;\n        // TODO(mikelehen): Retry (with backoff) on token failures?\n        return this.credentials.getToken(/*forceRefresh=*/ false).then(function (token) {\n            return _this.connection.invoke(rpcName, request, token);\n        });\n    };\n    return Datastore;\n}());\nexport { Datastore };\n\n//# sourceMappingURL=datastore.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/datastore.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from './snapshot_version';\nimport { documentVersionMap } from '../model/collections';\nimport { NoDocument } from '../model/document';\nimport { DeleteMutation, Precondition } from '../model/mutation';\nimport { Code, FirestoreError } from '../util/error';\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */\nvar Transaction = /** @class */ (function () {\n    function Transaction(datastore) {\n        this.datastore = datastore;\n        // The version of each document that was read during this transaction.\n        this.readVersions = documentVersionMap();\n        this.mutations = [];\n        this.committed = false;\n    }\n    Transaction.prototype.recordVersion = function (doc) {\n        var docVersion = doc.version;\n        if (doc instanceof NoDocument) {\n            // For deleted docs, we must use baseVersion 0 when we overwrite them.\n            docVersion = SnapshotVersion.forDeletedDoc();\n        }\n        var existingVersion = this.readVersions.get(doc.key);\n        if (existingVersion !== null) {\n            if (!docVersion.equals(existingVersion)) {\n                // This transaction will fail no matter what.\n                throw new FirestoreError(Code.ABORTED, 'Document version changed between two reads.');\n            }\n        }\n        else {\n            this.readVersions = this.readVersions.insert(doc.key, docVersion);\n        }\n    };\n    Transaction.prototype.lookup = function (keys) {\n        var _this = this;\n        if (this.committed) {\n            return Promise.reject('Transaction has already completed.');\n        }\n        if (this.mutations.length > 0) {\n            return Promise.reject('Transactions lookups are invalid after writes.');\n        }\n        return this.datastore.lookup(keys).then(function (docs) {\n            docs.forEach(function (doc) { return _this.recordVersion(doc); });\n            return docs;\n        });\n    };\n    Transaction.prototype.write = function (mutations) {\n        if (this.committed) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'Transaction has already completed.');\n        }\n        this.mutations = this.mutations.concat(mutations);\n    };\n    /**\n     * Returns the version of this document when it was read in this transaction,\n     * as a precondition, or no precondition if it was not read.\n     */\n    Transaction.prototype.precondition = function (key) {\n        var version = this.readVersions.get(key);\n        if (version) {\n            return Precondition.updateTime(version);\n        }\n        else {\n            return Precondition.NONE;\n        }\n    };\n    /**\n     * Returns the precondition for a document if the operation is an update.\n     */\n    Transaction.prototype.preconditionForUpdate = function (key) {\n        var version = this.readVersions.get(key);\n        if (version && version.equals(SnapshotVersion.forDeletedDoc())) {\n            // The document doesn't exist, so fail the transaction.\n            throw new FirestoreError(Code.FAILED_PRECONDITION, \"Can't update a document that doesn't exist.\");\n        }\n        else if (version) {\n            // Document exists, base precondition on document update time.\n            return Precondition.updateTime(version);\n        }\n        else {\n            // Document was not read, so we just use the preconditions for a blind\n            // update.\n            return Precondition.exists(true);\n        }\n    };\n    Transaction.prototype.set = function (key, data) {\n        this.write(data.toMutations(key, this.precondition(key)));\n    };\n    Transaction.prototype.update = function (key, data) {\n        this.write(data.toMutations(key, this.preconditionForUpdate(key)));\n    };\n    Transaction.prototype.delete = function (key) {\n        this.write([new DeleteMutation(key, this.precondition(key))]);\n        // Since the delete will be applied before all following writes, we need to\n        // ensure that the precondition for the next write will be exists: false.\n        this.readVersions = this.readVersions.insert(key, SnapshotVersion.forDeletedDoc());\n    };\n    Transaction.prototype.commit = function () {\n        var _this = this;\n        var unwritten = this.readVersions;\n        // For each mutation, note that the doc was written.\n        this.mutations.forEach(function (mutation) {\n            unwritten = unwritten.remove(mutation.key);\n        });\n        if (!unwritten.isEmpty()) {\n            return Promise.reject(Error('Every document read in a transaction must also be written.'));\n        }\n        return this.datastore.commit(this.mutations).then(function () {\n            _this.committed = true;\n        });\n    };\n    return Transaction;\n}());\nexport { Transaction };\n\n//# sourceMappingURL=transaction.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/transaction.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Transaction } from '../core/transaction';\nimport { OnlineState } from '../core/types';\nimport { QueryData, QueryPurpose } from '../local/query_data';\nimport { NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { BATCHID_UNKNOWN, MutationBatchResult } from '../model/mutation_batch';\nimport { emptyByteString } from '../platform/platform';\nimport { assert } from '../util/assert';\nimport { Code } from '../util/error';\nimport * as log from '../util/log';\nimport * as objUtils from '../util/obj';\nimport { ResetMapping, UpdateMapping } from './remote_event';\nimport { isPermanentError } from './rpc_error';\nimport { WatchChangeAggregator, WatchTargetChange, WatchTargetChangeState } from './watch_change';\nvar LOG_TAG = 'RemoteStore';\n// TODO(b/35853402): Negotiate this with the stream.\nvar MAX_PENDING_WRITES = 10;\n// The RemoteStore notifies an onlineStateHandler with OnlineState.Failed if we\n// fail to connect to the backend. This subsequently triggers get() requests to\n// fail or use cached data, etc. Unfortunately, our connections have\n// historically been subject to various transient failures. So we wait for\n// multiple failures before notifying the onlineStateHandler.\nvar ONLINE_ATTEMPTS_BEFORE_FAILURE = 2;\n/**\n * RemoteStore - An interface to remotely stored data, basically providing a\n * wrapper around the Datastore that is more reliable for the rest of the\n * system.\n *\n * RemoteStore is responsible for maintaining the connection to the server.\n * - maintaining a list of active listens.\n * - reconnecting when the connection is dropped.\n * - resuming all the active listens on reconnect.\n *\n * RemoteStore handles all incoming events from the Datastore.\n * - listening to the watch stream and repackaging the events as RemoteEvents\n * - notifying SyncEngine of any changes to the active listens.\n *\n * RemoteStore takes writes from other components and handles them reliably.\n * - pulling pending mutations from LocalStore and sending them to Datastore.\n * - retrying mutations that failed because of network problems.\n * - acking mutations to the SyncEngine once they are accepted or rejected.\n */\nvar RemoteStore = /** @class */ (function () {\n    function RemoteStore(databaseInfo, asyncQueue, \n        /**\n         * The local store, used to fill the write pipeline with outbound\n         * mutations and resolve existence filter mismatches.\n         */\n        localStore, \n        /** The client-side proxy for interacting with the backend. */\n        datastore, onlineStateHandler) {\n        this.databaseInfo = databaseInfo;\n        this.asyncQueue = asyncQueue;\n        this.localStore = localStore;\n        this.datastore = datastore;\n        this.onlineStateHandler = onlineStateHandler;\n        this.pendingWrites = [];\n        this.lastBatchSeen = BATCHID_UNKNOWN;\n        /**\n         * A mapping of watched targets that the client cares about tracking and the\n         * user has explicitly called a 'listen' for this target.\n         *\n         * These targets may or may not have been sent to or acknowledged by the\n         * server. On re-establishing the listen stream, these targets should be sent\n         * to the server. The targets removed with unlistens are removed eagerly\n         * without waiting for confirmation from the listen stream.\n         */\n        this.listenTargets = {};\n        /**\n         * A mapping of targetId to pending acks needed.\n         *\n         * If a targetId is present in this map, then we're waiting for watch to\n         * acknowledge a removal or addition of the target. If a target is not in this\n         * mapping, and it's in the listenTargets map, then we consider the target to\n         * be active.\n         *\n         * We increment the count here every time we issue a request over the stream\n         * to watch or unwatch. We then decrement the count every time we get a target\n         * added or target removed message from the server. Once the count is equal to\n         * 0 we know that the client and server are in the same state (once this state\n         * is reached the targetId is removed from the map to free the memory).\n         */\n        this.pendingTargetResponses = {};\n        this.accumulatedWatchChanges = [];\n        this.watchStream = null;\n        this.writeStream = null;\n        /**\n         * The online state of the watch stream. The state is set to healthy if and\n         * only if there are messages received by the backend.\n         */\n        this.watchStreamOnlineState = OnlineState.Unknown;\n        /** A count of consecutive failures to open the stream. */\n        this.watchStreamFailures = 0;\n    }\n    /**\n     * Starts up the remote store, creating streams, restoring state from\n     * LocalStore, etc.\n     */\n    RemoteStore.prototype.start = function () {\n        return this.enableNetwork();\n    };\n    RemoteStore.prototype.setOnlineStateToHealthy = function () {\n        this.updateAndBroadcastOnlineState(OnlineState.Healthy);\n    };\n    RemoteStore.prototype.setOnlineStateToUnknown = function () {\n        // The state is set to unknown when a healthy stream is closed (e.g. due to\n        // a token timeout) or when we have no active listens and therefore there's\n        // no need to start the stream. Assuming there is (possibly in the future)\n        // an active listen, then we will eventually move to state Online or Failed,\n        // but we always want to make at least ONLINE_ATTEMPTS_BEFORE_FAILURE\n        // attempts before failing, so we reset the count here.\n        this.watchStreamFailures = 0;\n        this.updateAndBroadcastOnlineState(OnlineState.Unknown);\n    };\n    RemoteStore.prototype.updateOnlineStateAfterFailure = function () {\n        // The first failure after we are successfully connected moves us to the\n        // 'Unknown' state. We then may make multiple attempts (based on\n        // ONLINE_ATTEMPTS_BEFORE_FAILURE) before we actually report failure.\n        if (this.watchStreamOnlineState === OnlineState.Healthy) {\n            this.setOnlineStateToUnknown();\n        }\n        else {\n            this.watchStreamFailures++;\n            if (this.watchStreamFailures >= ONLINE_ATTEMPTS_BEFORE_FAILURE) {\n                this.updateAndBroadcastOnlineState(OnlineState.Failed);\n            }\n        }\n    };\n    RemoteStore.prototype.updateAndBroadcastOnlineState = function (onlineState) {\n        var didChange = this.watchStreamOnlineState !== onlineState;\n        this.watchStreamOnlineState = onlineState;\n        if (didChange) {\n            this.onlineStateHandler(onlineState);\n        }\n    };\n    RemoteStore.prototype.isNetworkEnabled = function () {\n        assert((this.watchStream == null) == (this.writeStream == null), 'WatchStream and WriteStream should both be null or non-null');\n        return this.watchStream != null;\n    };\n    /** Re-enables the network. Only to be called as the counterpart to disableNetwork(). */\n    RemoteStore.prototype.enableNetwork = function () {\n        var _this = this;\n        assert(this.watchStream == null, 'enableNetwork() called with non-null watchStream.');\n        assert(this.writeStream == null, 'enableNetwork() called with non-null writeStream.');\n        // Create new streams (but note they're not started yet).\n        this.watchStream = this.datastore.newPersistentWatchStream({\n            onOpen: this.onWatchStreamOpen.bind(this),\n            onClose: this.onWatchStreamClose.bind(this),\n            onWatchChange: this.onWatchStreamChange.bind(this)\n        });\n        this.writeStream = this.datastore.newPersistentWriteStream({\n            onOpen: this.onWriteStreamOpen.bind(this),\n            onClose: this.onWriteStreamClose.bind(this),\n            onHandshakeComplete: this.onWriteHandshakeComplete.bind(this),\n            onMutationResult: this.onMutationResult.bind(this)\n        });\n        // Load any saved stream token from persistent storage\n        return this.localStore.getLastStreamToken().then(function (token) {\n            _this.writeStream.lastStreamToken = token;\n            if (_this.shouldStartWatchStream()) {\n                _this.startWatchStream();\n            }\n            _this.updateAndBroadcastOnlineState(OnlineState.Unknown);\n            return _this.fillWritePipeline(); // This may start the writeStream.\n        });\n    };\n    /** Temporarily disables the network. The network can be re-enabled using enableNetwork(). */\n    RemoteStore.prototype.disableNetwork = function () {\n        this.updateAndBroadcastOnlineState(OnlineState.Failed);\n        // NOTE: We're guaranteed not to get any further events from these streams (not even a close\n        // event).\n        this.watchStream.stop();\n        this.writeStream.stop();\n        this.cleanUpWatchStreamState();\n        this.cleanUpWriteStreamState();\n        this.writeStream = null;\n        this.watchStream = null;\n        return Promise.resolve();\n    };\n    RemoteStore.prototype.shutdown = function () {\n        log.debug(LOG_TAG, 'RemoteStore shutting down.');\n        this.disableNetwork();\n        return Promise.resolve(undefined);\n    };\n    /** Starts new listen for the given query. Uses resume token if provided */\n    RemoteStore.prototype.listen = function (queryData) {\n        assert(!objUtils.contains(this.listenTargets, queryData.targetId), 'listen called with duplicate targetId!');\n        // Mark this as something the client is currently listening for.\n        this.listenTargets[queryData.targetId] = queryData;\n        if (this.shouldStartWatchStream()) {\n            // The listen will be sent in onWatchStreamOpen\n            this.startWatchStream();\n        }\n        else if (this.isNetworkEnabled() && this.watchStream.isOpen()) {\n            this.sendWatchRequest(queryData);\n        }\n    };\n    /** Removes the listen from server */\n    RemoteStore.prototype.unlisten = function (targetId) {\n        assert(objUtils.contains(this.listenTargets, targetId), 'unlisten called without assigned target ID!');\n        var queryData = this.listenTargets[targetId];\n        delete this.listenTargets[targetId];\n        if (this.isNetworkEnabled() && this.watchStream.isOpen()) {\n            this.sendUnwatchRequest(targetId);\n        }\n    };\n    /**\n     * We need to increment the the expected number of pending responses we're due\n     * from watch so we wait for the ack to process any messages from this target.\n     */\n    RemoteStore.prototype.sendWatchRequest = function (queryData) {\n        this.recordPendingTargetRequest(queryData.targetId);\n        this.watchStream.watch(queryData);\n    };\n    /**\n     * We need to increment the expected number of pending responses we're due\n     * from watch so we wait for the removal on the server before we process any\n     * messages from this target.\n     */\n    RemoteStore.prototype.sendUnwatchRequest = function (targetId) {\n        this.recordPendingTargetRequest(targetId);\n        this.watchStream.unwatch(targetId);\n    };\n    /**\n     * Increment the mapping of how many acks are needed from watch before we can\n     * consider the server to be 'in-sync' with the client's active targets.\n     */\n    RemoteStore.prototype.recordPendingTargetRequest = function (targetId) {\n        // For each request we get we need to record we need a response for it.\n        this.pendingTargetResponses[targetId] =\n            (this.pendingTargetResponses[targetId] || 0) + 1;\n    };\n    RemoteStore.prototype.startWatchStream = function () {\n        assert(this.shouldStartWatchStream(), 'startWriteStream() called when shouldStartWatchStream() is false.');\n        this.watchStream.start();\n    };\n    /**\n     * Returns whether the watch stream should be started because there are\n     * active targets trying to be listened too\n     */\n    RemoteStore.prototype.shouldStartWatchStream = function () {\n        return (this.isNetworkEnabled() &&\n            !this.watchStream.isStarted() &&\n            !objUtils.isEmpty(this.listenTargets));\n    };\n    RemoteStore.prototype.cleanUpWatchStreamState = function () {\n        // If the connection is closed then we'll never get a snapshot version for\n        // the accumulated changes and so we'll never be able to complete the batch.\n        // When we start up again the server is going to resend these changes\n        // anyway, so just toss the accumulated state.\n        this.accumulatedWatchChanges = [];\n        this.pendingTargetResponses = {};\n    };\n    RemoteStore.prototype.onWatchStreamOpen = function () {\n        var _this = this;\n        // TODO(b/35852690): close the stream again (with some timeout?) if no watch\n        // targets are active\n        objUtils.forEachNumber(this.listenTargets, function (targetId, queryData) {\n            _this.sendWatchRequest(queryData);\n        });\n        return Promise.resolve();\n    };\n    RemoteStore.prototype.onWatchStreamClose = function (error) {\n        assert(this.isNetworkEnabled(), 'onWatchStreamClose() should only be called when the network is enabled');\n        this.cleanUpWatchStreamState();\n        // If there was an error, retry the connection.\n        if (this.shouldStartWatchStream()) {\n            this.updateOnlineStateAfterFailure();\n            this.startWatchStream();\n        }\n        else {\n            // No need to restart watch stream because there are no active targets.\n            // The online state is set to unknown because there is no active attempt\n            // at establishing a connection\n            this.setOnlineStateToUnknown();\n        }\n        return Promise.resolve();\n    };\n    RemoteStore.prototype.onWatchStreamChange = function (watchChange, snapshotVersion) {\n        // Mark the connection as healthy because we got a message from the server\n        this.setOnlineStateToHealthy();\n        if (watchChange instanceof WatchTargetChange &&\n            watchChange.state === WatchTargetChangeState.Removed &&\n            watchChange.cause) {\n            // There was an error on a target, don't wait for a consistent snapshot\n            // to raise events\n            return this.handleTargetError(watchChange);\n        }\n        // Accumulate watch changes but don't process them if there's no\n        // snapshotVersion or it's older than a previous snapshot we've processed\n        // (can happen after we resume a target using a resume token).\n        this.accumulatedWatchChanges.push(watchChange);\n        if (!snapshotVersion.equals(SnapshotVersion.MIN) &&\n            snapshotVersion.compareTo(this.localStore.getLastRemoteSnapshotVersion()) >= 0) {\n            var changes = this.accumulatedWatchChanges;\n            this.accumulatedWatchChanges = [];\n            return this.handleWatchChangeBatch(snapshotVersion, changes);\n        }\n        else {\n            return Promise.resolve();\n        }\n    };\n    /**\n     * Takes a batch of changes from the Datastore, repackages them as a\n     * RemoteEvent, and passes that on to the listener, which is typically the\n     * SyncEngine.\n     */\n    RemoteStore.prototype.handleWatchChangeBatch = function (snapshotVersion, changes) {\n        var _this = this;\n        var aggregator = new WatchChangeAggregator(snapshotVersion, this.listenTargets, this.pendingTargetResponses);\n        aggregator.addChanges(changes);\n        var remoteEvent = aggregator.createRemoteEvent();\n        // Get the new response counts from the aggregator\n        this.pendingTargetResponses = aggregator.pendingTargetResponses;\n        var promises = [];\n        // Handle existence filters and existence filter mismatches.\n        objUtils.forEachNumber(aggregator.existenceFilters, function (targetId, filter) {\n            var queryData = _this.listenTargets[targetId];\n            if (!queryData) {\n                // A watched target might have been removed already.\n                return;\n            }\n            var query = queryData.query;\n            if (query.isDocumentQuery()) {\n                if (filter.count === 0) {\n                    // The existence filter told us the document does not exist.\n                    // We need to deduce that this document does not exist and apply\n                    // a deleted document to our updates. Without applying a deleted\n                    // document there might be another query that will raise this\n                    // document as part of a snapshot until it is resolved,\n                    // essentially exposing inconsistency between queries.\n                    var key = new DocumentKey(query.path);\n                    var deletedDoc = new NoDocument(key, snapshotVersion);\n                    remoteEvent.addDocumentUpdate(deletedDoc);\n                }\n                else {\n                    assert(filter.count === 1, 'Single document existence filter with count: ' + filter.count);\n                }\n            }\n            else {\n                // Not a document query.\n                var promise = _this.localStore\n                    .remoteDocumentKeys(targetId)\n                    .then(function (trackedRemote) {\n                    if (remoteEvent.targetChanges[targetId]) {\n                        var mapping = remoteEvent.targetChanges[targetId].mapping;\n                        if (mapping !== null) {\n                            if (mapping instanceof UpdateMapping) {\n                                trackedRemote = mapping.applyToKeySet(trackedRemote);\n                            }\n                            else {\n                                assert(mapping instanceof ResetMapping, 'Expected either reset or update mapping but got something else: ' +\n                                    mapping);\n                                trackedRemote = mapping.documents;\n                            }\n                        }\n                    }\n                    if (trackedRemote.size !== filter.count) {\n                        // Existence filter mismatch, resetting mapping.\n                        // Make sure the mismatch is exposed in the remote event.\n                        remoteEvent.handleExistenceFilterMismatch(targetId);\n                        // Clear the resume token for the query, since we're in a\n                        // known mismatch state.\n                        var newQueryData = new QueryData(query, targetId, queryData.purpose);\n                        _this.listenTargets[targetId] = newQueryData;\n                        // Cause a hard reset by unwatching and rewatching\n                        // immediately, but deliberately don't send a resume token\n                        // so that we get a full update.\n                        // Make sure we expect that this acks are going to happen.\n                        _this.sendUnwatchRequest(targetId);\n                        // Mark the query we send as being on behalf of an existence\n                        // filter mismatch, but don't actually retain that in\n                        // listenTargets. This ensures that we flag the first\n                        // re-listen this way without impacting future listens of\n                        // this target (that might happen e.g. on reconnect).\n                        var requestQueryData = new QueryData(query, targetId, QueryPurpose.ExistenceFilterMismatch);\n                        _this.sendWatchRequest(requestQueryData);\n                    }\n                });\n                promises.push(promise);\n            }\n        });\n        return Promise.all(promises).then(function () {\n            // Update in-memory resume tokens. LocalStore will update the\n            // persistent view of these when applying the completed RemoteEvent.\n            objUtils.forEachNumber(remoteEvent.targetChanges, function (targetId, change) {\n                if (change.resumeToken.length > 0) {\n                    var queryData = _this.listenTargets[targetId];\n                    // A watched target might have been removed already.\n                    if (queryData) {\n                        _this.listenTargets[targetId] = queryData.update({\n                            resumeToken: change.resumeToken,\n                            snapshotVersion: change.snapshotVersion\n                        });\n                    }\n                }\n            });\n            // Finally handle remote event\n            return _this.syncEngine.applyRemoteEvent(remoteEvent);\n        });\n    };\n    /** Handles an error on a target */\n    RemoteStore.prototype.handleTargetError = function (watchChange) {\n        var _this = this;\n        assert(!!watchChange.cause, 'Handling target error without a cause');\n        var error = watchChange.cause;\n        var promiseChain = Promise.resolve();\n        watchChange.targetIds.forEach(function (targetId) {\n            promiseChain = promiseChain.then(function () {\n                if (objUtils.contains(_this.listenTargets, targetId)) {\n                    delete _this.listenTargets[targetId];\n                    return _this.syncEngine.rejectListen(targetId, error);\n                }\n                else {\n                    // A watched target might have been removed already.\n                    return Promise.resolve();\n                }\n            });\n        });\n        return promiseChain;\n    };\n    RemoteStore.prototype.cleanUpWriteStreamState = function () {\n        this.lastBatchSeen = BATCHID_UNKNOWN;\n        this.pendingWrites = [];\n    };\n    /**\n     * Notifies that there are new mutations to process in the queue. This is\n     * typically called by SyncEngine after it has sent mutations to LocalStore.\n     *\n     */\n    RemoteStore.prototype.fillWritePipeline = function () {\n        var _this = this;\n        if (!this.canWriteMutations()) {\n            return Promise.resolve();\n        }\n        else {\n            return this.localStore\n                .nextMutationBatch(this.lastBatchSeen)\n                .then(function (batch) {\n                if (batch === null) {\n                    return Promise.resolve();\n                }\n                else {\n                    _this.commit(batch);\n                    return _this.fillWritePipeline();\n                }\n            });\n        }\n    };\n    /**\n     * Returns true if the backend can accept additional write requests.\n     *\n     * When sending mutations to the write stream (e.g. in fillWritePipeline),\n     * call this method first to check if more mutations can be sent.\n     *\n     * Currently the only thing that can prevent the backend from accepting\n     * write requests is if there are too many requests already outstanding. As\n     * writes complete the backend will be able to accept more.\n     */\n    RemoteStore.prototype.canWriteMutations = function () {\n        return (this.isNetworkEnabled() && this.pendingWrites.length < MAX_PENDING_WRITES);\n    };\n    // For testing\n    RemoteStore.prototype.outstandingWrites = function () {\n        return this.pendingWrites.length;\n    };\n    /**\n     * Given mutations to commit, actually commits them to the Datastore. Note\n     * that this does *not* return a Promise specifically because the AsyncQueue\n     * should not block operations for this.\n     */\n    RemoteStore.prototype.commit = function (batch) {\n        assert(this.canWriteMutations(), \"commit called when batches can't be written\");\n        this.lastBatchSeen = batch.batchId;\n        this.pendingWrites.push(batch);\n        if (this.shouldStartWriteStream()) {\n            this.startWriteStream();\n        }\n        else if (this.isNetworkEnabled() && this.writeStream.handshakeComplete) {\n            this.writeStream.writeMutations(batch.mutations);\n        }\n    };\n    RemoteStore.prototype.shouldStartWriteStream = function () {\n        return (this.isNetworkEnabled() &&\n            !this.writeStream.isStarted() &&\n            this.pendingWrites.length > 0);\n    };\n    RemoteStore.prototype.startWriteStream = function () {\n        assert(this.shouldStartWriteStream(), 'startWriteStream() called when shouldStartWriteStream() is false.');\n        this.writeStream.start();\n    };\n    RemoteStore.prototype.onWriteStreamOpen = function () {\n        this.writeStream.writeHandshake();\n        return Promise.resolve();\n    };\n    RemoteStore.prototype.onWriteHandshakeComplete = function () {\n        var _this = this;\n        // Record the stream token.\n        return this.localStore\n            .setLastStreamToken(this.writeStream.lastStreamToken)\n            .then(function () {\n            // Drain any pending writes.\n            //\n            // Note that at this point pendingWrites contains mutations that\n            // have already been accepted by fillWritePipeline/commitBatch. If\n            // the pipeline is full, canWriteMutations will be false, despite\n            // the fact that we actually need to send mutations over.\n            //\n            // This also means that this method indirectly respects the limits\n            // imposed by canWriteMutations since writes can't be added to the\n            // pendingWrites array when canWriteMutations is false. If the\n            // limits imposed by canWriteMutations actually protect us from\n            // DOSing ourselves then those limits won't be exceeded here and\n            // we'll continue to make progress.\n            for (var _i = 0, _a = _this.pendingWrites; _i < _a.length; _i++) {\n                var batch = _a[_i];\n                _this.writeStream.writeMutations(batch.mutations);\n            }\n        });\n    };\n    RemoteStore.prototype.onMutationResult = function (commitVersion, results) {\n        var _this = this;\n        // This is a response to a write containing mutations and should be\n        // correlated to the first pending write.\n        assert(this.pendingWrites.length > 0, 'Got result for empty pending writes');\n        var batch = this.pendingWrites.shift();\n        var success = MutationBatchResult.from(batch, commitVersion, results, this.writeStream.lastStreamToken);\n        return this.syncEngine.applySuccessfulWrite(success).then(function () {\n            // It's possible that with the completion of this mutation another\n            // slot has freed up.\n            return _this.fillWritePipeline();\n        });\n    };\n    RemoteStore.prototype.onWriteStreamClose = function (error) {\n        var _this = this;\n        assert(this.isNetworkEnabled(), 'onWriteStreamClose() should only be called when the network is enabled');\n        // Ignore close if there are no pending writes.\n        if (this.pendingWrites.length > 0) {\n            assert(!!error, 'We have pending writes, but the write stream closed without an error');\n            // A promise that is resolved after we processed the error\n            var errorHandling = void 0;\n            if (this.writeStream.handshakeComplete) {\n                // This error affects the actual write.\n                errorHandling = this.handleWriteError(error);\n            }\n            else {\n                // If there was an error before the handshake has finished, it's\n                // possible that the server is unable to process the stream token\n                // we're sending. (Perhaps it's too old?)\n                errorHandling = this.handleHandshakeError(error);\n            }\n            return errorHandling.then(function () {\n                // The write stream might have been started by refilling the write\n                // pipeline for failed writes\n                if (_this.shouldStartWriteStream()) {\n                    _this.startWriteStream();\n                }\n            });\n        }\n        else {\n            // No pending writes, nothing to do\n            return Promise.resolve();\n        }\n    };\n    RemoteStore.prototype.handleHandshakeError = function (error) {\n        // Reset the token if it's a permanent error or the error code is\n        // ABORTED, signaling the write stream is no longer valid.\n        if (isPermanentError(error.code) || error.code === Code.ABORTED) {\n            log.debug(LOG_TAG, 'RemoteStore error before completed handshake; resetting stream token: ', this.writeStream.lastStreamToken);\n            this.writeStream.lastStreamToken = emptyByteString();\n            return this.localStore.setLastStreamToken(emptyByteString());\n        }\n        else {\n            // Some other error, don't reset stream token. Our stream logic will\n            // just retry with exponential backoff.\n            return Promise.resolve();\n        }\n    };\n    RemoteStore.prototype.handleWriteError = function (error) {\n        var _this = this;\n        if (isPermanentError(error.code)) {\n            // This was a permanent error, the request itself was the problem\n            // so it's not going to succeed if we resend it.\n            var batch = this.pendingWrites.shift();\n            // In this case it's also unlikely that the server itself is melting\n            // down -- this was just a bad request so inhibit backoff on the next\n            // restart.\n            this.writeStream.inhibitBackoff();\n            return this.syncEngine\n                .rejectFailedWrite(batch.batchId, error)\n                .then(function () {\n                // It's possible that with the completion of this mutation\n                // another slot has freed up.\n                return _this.fillWritePipeline();\n            });\n        }\n        else {\n            // Transient error, just let the retry logic kick in.\n            return Promise.resolve();\n        }\n    };\n    RemoteStore.prototype.createTransaction = function () {\n        return new Transaction(this.datastore);\n    };\n    RemoteStore.prototype.handleUserChange = function (user) {\n        log.debug(LOG_TAG, 'RemoteStore changing users: uid=', user.uid);\n        // Tear down and re-create our network streams. This will ensure we get a fresh auth token\n        // for the new user and re-fill the write pipeline with new mutations from the LocalStore\n        // (since mutations are per-user).\n        this.disableNetwork();\n        return this.enableNetwork();\n    };\n    return RemoteStore;\n}());\nexport { RemoteStore };\n\n//# sourceMappingURL=remote_store.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/remote_store.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EventManager, QueryListener } from './event_manager';\nimport { SyncEngine } from './sync_engine';\nimport { EagerGarbageCollector } from '../local/eager_garbage_collector';\nimport { IndexedDbPersistence } from '../local/indexeddb_persistence';\nimport { LocalStore } from '../local/local_store';\nimport { MemoryPersistence } from '../local/memory_persistence';\nimport { NoOpGarbageCollector } from '../local/no_op_garbage_collector';\nimport { Datastore } from '../remote/datastore';\nimport { RemoteStore } from '../remote/remote_store';\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport { Code } from '../util/error';\nimport { debug } from '../util/log';\nimport { Deferred } from '../util/promise';\nvar LOG_TAG = 'FirestoreClient';\n/**\n * FirestoreClient is a top-level class that constructs and owns all of the\n * pieces of the client SDK architecture. It is responsible for creating the\n * async queue that is shared by all of the other components in the system.\n */\nvar FirestoreClient = /** @class */ (function () {\n    function FirestoreClient(platform, databaseInfo, credentials, \n        /**\n           * Asynchronous queue responsible for all of our internal processing. When\n           * we get incoming work from the user (via public API) or the network\n           * (incoming GRPC messages), we should always schedule onto this queue.\n           * This ensures all of our work is properly serialized (e.g. we don't\n           * start processing a new operation while the previous one is waiting for\n           * an async I/O to complete).\n           */\n        asyncQueue) {\n        this.platform = platform;\n        this.databaseInfo = databaseInfo;\n        this.credentials = credentials;\n        this.asyncQueue = asyncQueue;\n    }\n    /**\n     * Starts up the FirestoreClient, returning only whether or not enabling\n     * persistence succeeded.\n     *\n     * The intent here is to \"do the right thing\" as far as users are concerned.\n     * Namely, in cases where offline persistence is requested and possible,\n     * enable it, but otherwise fall back to persistence disabled. For the most\n     * part we expect this to succeed one way or the other so we don't expect our\n     * users to actually wait on the firestore.enablePersistence Promise since\n     * they generally won't care.\n     *\n     * Of course some users actually do care about whether or not persistence\n     * was successfully enabled, so the Promise returned from this method\n     * indicates this outcome.\n     *\n     * This presents a problem though: even before enablePersistence resolves or\n     * rejects, users may have made calls to e.g. firestore.collection() which\n     * means that the FirestoreClient in there will be available and will be\n     * enqueuing actions on the async queue.\n     *\n     * Meanwhile any failure of an operation on the async queue causes it to\n     * panic and reject any further work, on the premise that unhandled errors\n     * are fatal.\n     *\n     * Consequently the fallback is handled internally here in start, and if the\n     * fallback succeeds we signal success to the async queue even though the\n     * start() itself signals failure.\n     *\n     * @param usePersistence Whether or not to attempt to enable persistence.\n     * @returns A deferred result indicating the user-visible result of enabling\n     *     offline persistence. This method will reject this if IndexedDB fails to\n     *     start for any reason. If usePersistence is false this is\n     *     unconditionally resolved.\n     */\n    FirestoreClient.prototype.start = function (usePersistence) {\n        var _this = this;\n        // We defer our initialization until we get the current user from\n        // setUserChangeListener(). We block the async queue until we got the\n        // initial user and the initialization is completed. This will prevent\n        // any scheduled work from happening before initialization is completed.\n        //\n        // If initializationDone resolved then the FirestoreClient is in a usable\n        // state.\n        var initializationDone = new Deferred();\n        // If usePersistence is true, certain classes of errors while starting are\n        // recoverable but only by falling back to persistence disabled.\n        //\n        // If there's an error in the first case but not in recovery we cannot\n        // reject the promise blocking the async queue because this will cause the\n        // async queue to panic.\n        var persistenceResult = new Deferred();\n        var initialized = false;\n        this.credentials.setUserChangeListener(function (user) {\n            if (!initialized) {\n                initialized = true;\n                _this.initializePersistence(usePersistence, persistenceResult)\n                    .then(function () { return _this.initializeRest(user); })\n                    .then(initializationDone.resolve, initializationDone.reject);\n            }\n            else {\n                _this.asyncQueue.schedule(function () {\n                    return _this.handleUserChange(user);\n                });\n            }\n        });\n        // Block the async queue until initialization is done\n        this.asyncQueue.schedule(function () {\n            return initializationDone.promise;\n        });\n        // Return only the result of enabling persistence. Note that this does not\n        // need to await the completion of initializationDone because the result of\n        // this method should not reflect any other kind of failure to start.\n        return persistenceResult.promise;\n    };\n    /** Enables the network connection and requeues all pending operations. */\n    FirestoreClient.prototype.enableNetwork = function () {\n        var _this = this;\n        return this.asyncQueue.schedule(function () {\n            return _this.remoteStore.enableNetwork();\n        });\n    };\n    /**\n     * Initializes persistent storage, attempting to use IndexedDB if\n     * usePersistence is true or memory-only if false.\n     *\n     * If IndexedDB fails because it's already open in another tab or because the\n     * platform can't possibly support our implementation then this method rejects\n     * the persistenceResult and falls back on memory-only persistence.\n     *\n     * @param usePersistence indicates whether or not to use offline persistence\n     * @param persistenceResult A deferred result indicating the user-visible\n     *     result of enabling offline persistence. This method will reject this if\n     *     IndexedDB fails to start for any reason. If usePersistence is false\n     *     this is unconditionally resolved.\n     * @returns a Promise indicating whether or not initialization should\n     *     continue, i.e. that one of the persistence implementations actually\n     *     succeeded.\n     */\n    FirestoreClient.prototype.initializePersistence = function (usePersistence, persistenceResult) {\n        var _this = this;\n        if (usePersistence) {\n            return this.startIndexedDbPersistence()\n                .then(persistenceResult.resolve)\n                .catch(function (error) {\n                // Regardless of whether or not the retry succeeds, from an user\n                // perspective, offline persistence has failed.\n                persistenceResult.reject(error);\n                // An unknown failure on the first stage shuts everything down.\n                if (!_this.canFallback(error)) {\n                    return Promise.reject(error);\n                }\n                console.warn('Error enabling offline storage. Falling back to' +\n                    ' storage disabled: ' +\n                    error);\n                return _this.startMemoryPersistence();\n            });\n        }\n        else {\n            // When usePersistence == false, enabling offline persistence is defined\n            // to unconditionally succeed. This allows start() to have the same\n            // signature for both cases, despite the fact that the returned promise\n            // is only used in the enablePersistence call.\n            persistenceResult.resolve();\n            return this.startMemoryPersistence();\n        }\n    };\n    FirestoreClient.prototype.canFallback = function (error) {\n        return (error.code === Code.FAILED_PRECONDITION ||\n            error.code === Code.UNIMPLEMENTED);\n    };\n    /**\n     * Starts IndexedDB-based persistence.\n     *\n     * @returns A promise indicating success or failure.\n     */\n    FirestoreClient.prototype.startIndexedDbPersistence = function () {\n        // TODO(http://b/33384523): For now we just disable garbage collection\n        // when persistence is enabled.\n        this.garbageCollector = new NoOpGarbageCollector();\n        var storagePrefix = IndexedDbPersistence.buildStoragePrefix(this.databaseInfo);\n        // Opt to use proto3 JSON in case the platform doesn't support Uint8Array.\n        var serializer = new JsonProtoSerializer(this.databaseInfo.databaseId, {\n            useProto3Json: true\n        });\n        this.persistence = new IndexedDbPersistence(storagePrefix, serializer);\n        return this.persistence.start();\n    };\n    /**\n     * Starts Memory-backed persistence. In practice this cannot fail.\n     *\n     * @returns A promise that will successfully resolve.\n     */\n    FirestoreClient.prototype.startMemoryPersistence = function () {\n        this.garbageCollector = new EagerGarbageCollector();\n        this.persistence = new MemoryPersistence();\n        return this.persistence.start();\n    };\n    /**\n     * Initializes the rest of the FirestoreClient, assuming the initial user\n     * has been obtained from the credential provider and some persistence\n     * implementation is available in this.persistence.\n     */\n    FirestoreClient.prototype.initializeRest = function (user) {\n        var _this = this;\n        return this.platform\n            .loadConnection(this.databaseInfo)\n            .then(function (connection) {\n            _this.localStore = new LocalStore(_this.persistence, user, _this.garbageCollector);\n            var serializer = _this.platform.newSerializer(_this.databaseInfo.databaseId);\n            var datastore = new Datastore(_this.databaseInfo, _this.asyncQueue, connection, _this.credentials, serializer);\n            var onlineStateChangedHandler = function (onlineState) {\n                _this.eventMgr.onOnlineStateChanged(onlineState);\n            };\n            _this.remoteStore = new RemoteStore(_this.databaseInfo, _this.asyncQueue, _this.localStore, datastore, onlineStateChangedHandler);\n            _this.syncEngine = new SyncEngine(_this.localStore, _this.remoteStore, user);\n            // Setup wiring between sync engine and remote store\n            _this.remoteStore.syncEngine = _this.syncEngine;\n            _this.eventMgr = new EventManager(_this.syncEngine);\n            // NOTE: RemoteStore depends on LocalStore (for persisting stream\n            // tokens, refilling mutation queue, etc.) so must be started after\n            // LocalStore.\n            return _this.localStore.start();\n        })\n            .then(function () {\n            return _this.remoteStore.start();\n        });\n    };\n    FirestoreClient.prototype.handleUserChange = function (user) {\n        this.asyncQueue.verifyOperationInProgress();\n        debug(LOG_TAG, 'User Changed: ' + user.uid);\n        return this.syncEngine.handleUserChange(user);\n    };\n    /** Disables the network connection. Pending operations will not complete. */\n    FirestoreClient.prototype.disableNetwork = function () {\n        var _this = this;\n        return this.asyncQueue.schedule(function () {\n            return _this.remoteStore.disableNetwork();\n        });\n    };\n    FirestoreClient.prototype.shutdown = function () {\n        var _this = this;\n        return this.asyncQueue\n            .schedule(function () {\n            _this.credentials.removeUserChangeListener();\n            return _this.remoteStore.shutdown();\n        })\n            .then(function () {\n            // PORTING NOTE: LocalStore does not need an explicit shutdown on web.\n            return _this.persistence.shutdown();\n        });\n    };\n    FirestoreClient.prototype.listen = function (query, observer, options) {\n        var _this = this;\n        var listener = new QueryListener(query, observer, options);\n        this.asyncQueue.schedule(function () {\n            return _this.eventMgr.listen(listener);\n        });\n        return listener;\n    };\n    FirestoreClient.prototype.unlisten = function (listener) {\n        var _this = this;\n        this.asyncQueue.schedule(function () {\n            return _this.eventMgr.unlisten(listener);\n        });\n    };\n    FirestoreClient.prototype.write = function (mutations) {\n        var _this = this;\n        var deferred = new Deferred();\n        this.asyncQueue.schedule(function () { return _this.syncEngine.write(mutations, deferred); });\n        return deferred.promise;\n    };\n    FirestoreClient.prototype.databaseId = function () {\n        return this.databaseInfo.databaseId;\n    };\n    FirestoreClient.prototype.transaction = function (updateFunction) {\n        var _this = this;\n        // We have to wait for the async queue to be sure syncEngine is initialized.\n        return this.asyncQueue\n            .schedule(function () {\n            return Promise.resolve();\n        })\n            .then(function () {\n            return _this.syncEngine.runTransaction(updateFunction);\n        });\n    };\n    return FirestoreClient;\n}());\nexport { FirestoreClient };\n\n//# sourceMappingURL=firestore_client.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/firestore_client.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n * A wrapper implementation of Observer<T> that will dispatch events\n * asynchronously. To allow immediate silencing, a mute call is added which\n * causes events scheduled to no longer be raised.\n */\nvar AsyncObserver = /** @class */ (function () {\n    function AsyncObserver(observer) {\n        this.observer = observer;\n        /**\n         * When set to true, will not raise future events. Necessary to deal with\n         * async detachment of listener.\n         */\n        this.muted = false;\n    }\n    AsyncObserver.prototype.next = function (value) {\n        this.scheduleEvent(this.observer.next, value);\n    };\n    AsyncObserver.prototype.error = function (error) {\n        this.scheduleEvent(this.observer.error, error);\n    };\n    AsyncObserver.prototype.mute = function () {\n        this.muted = true;\n    };\n    AsyncObserver.prototype.scheduleEvent = function (eventHandler, event) {\n        var _this = this;\n        if (!this.muted) {\n            setTimeout(function () {\n                if (!_this.muted) {\n                    eventHandler(event);\n                }\n            }, 0);\n        }\n    };\n    return AsyncObserver;\n}());\nexport { AsyncObserver };\n\n//# sourceMappingURL=async_observer.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/async_observer.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert, fail } from './assert';\nimport * as log from './log';\nimport { Deferred } from './promise';\nvar AsyncQueue = /** @class */ (function () {\n    function AsyncQueue() {\n        // The last promise in the queue.\n        this.tail = Promise.resolve();\n        // The number of ops that are queued to be run in the future (i.e. they had a\n        // delay that has not yet elapsed).\n        this.delayedOpCount = 0;\n        // Flag set while there's an outstanding AsyncQueue operation, used for\n        // assertion sanity-checks.\n        this.operationInProgress = false;\n    }\n    /**\n     * Adds a new operation to the queue. Returns a promise that will be resolved\n     * when the promise returned by the new operation is (with its value).\n     *\n     * Can optionally specify a delay to wait before queuing the operation.\n     */\n    AsyncQueue.prototype.schedule = function (op, delay) {\n        var _this = this;\n        if (this.failure) {\n            fail('AsyncQueue is already failed: ' + this.failure.message);\n        }\n        if ((delay || 0) > 0) {\n            this.delayedOpCount++;\n            var deferred_1 = new Deferred();\n            setTimeout(function () {\n                _this.scheduleInternal(function () {\n                    return op().then(function (result) {\n                        deferred_1.resolve(result);\n                    });\n                });\n                _this.delayedOpCount--; // decrement once it's actually queued.\n            }, delay);\n            return deferred_1.promise;\n        }\n        else {\n            return this.scheduleInternal(op);\n        }\n    };\n    AsyncQueue.prototype.scheduleInternal = function (op) {\n        var _this = this;\n        this.tail = this.tail.then(function () {\n            _this.operationInProgress = true;\n            return op()\n                .catch(function (error) {\n                _this.failure = error;\n                _this.operationInProgress = false;\n                log.error('INTERNAL UNHANDLED ERROR: ', error.stack || error.message);\n                throw error;\n            })\n                .then(function () {\n                _this.operationInProgress = false;\n            });\n        });\n        return this.tail;\n    };\n    /**\n     * Verifies there's an operation currently in-progress on the AsyncQueue.\n     * Unfortunately we can't verify that the running code is in the promise chain\n     * of that operation, so this isn't a foolproof check, but it should be enough\n     * to catch some bugs.\n     */\n    AsyncQueue.prototype.verifyOperationInProgress = function () {\n        assert(this.operationInProgress, 'verifyOpInProgress() called when no op in progress on this queue.');\n    };\n    AsyncQueue.prototype.drain = function () {\n        // TODO(mikelehen): This should perhaps also drain items that are queued to\n        // run in the future (perhaps by artificially running them early), but since\n        // no tests need that yet, I didn't bother for now.\n        assert(this.delayedOpCount === 0, \"draining doesn't handle delayed ops.\");\n        return this.schedule(function () { return Promise.resolve(undefined); });\n    };\n    return AsyncQueue;\n}());\nexport { AsyncQueue };\n\n//# sourceMappingURL=async_queue.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/async_queue.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nvar User = /** @class */ (function () {\n    function User(uid) {\n        this.uid = uid;\n    }\n    User.prototype.isUnauthenticated = function () {\n        return this.uid == null;\n    };\n    /**\n     * Returns a key representing this user, suitable for inclusion in a\n     * dictionary.\n     */\n    User.prototype.toKey = function () {\n        if (this.isUnauthenticated()) {\n            return 'anonymous-user';\n        }\n        else {\n            return 'uid:' + this.uid;\n        }\n    };\n    User.prototype.equals = function (otherUser) {\n        return otherUser.uid === this.uid;\n    };\n    /** A user with a null UID. */\n    User.UNAUTHENTICATED = new User(null);\n    // TODO(mikelehen): Look into getting a proper uid-equivalent for\n    // non-FirebaseAuth providers.\n    User.GOOGLE_CREDENTIALS = new User('google-credentials-uid');\n    User.FIRST_PARTY = new User('first-party-uid');\n    return User;\n}());\nexport { User };\n\n//# sourceMappingURL=user.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/auth/user.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { makeConstructorPrivate } from '../util/api';\n/**\n * An opaque base class for FieldValue sentinel objects in our public API,\n * with public static methods for creating said sentinel objects.\n */\n// tslint:disable-next-line:class-as-namespace  We use this as a base class.\nvar FieldValueImpl = /** @class */ (function () {\n    function FieldValueImpl() {\n    }\n    FieldValueImpl.delete = function () {\n        return DeleteFieldValueImpl.instance;\n    };\n    FieldValueImpl.serverTimestamp = function () {\n        return ServerTimestampFieldValueImpl.instance;\n    };\n    return FieldValueImpl;\n}());\nexport { FieldValueImpl };\nvar DeleteFieldValueImpl = /** @class */ (function (_super) {\n    __extends(DeleteFieldValueImpl, _super);\n    function DeleteFieldValueImpl() {\n        return _super.call(this) || this;\n    }\n    /** Singleton instance. */\n    DeleteFieldValueImpl.instance = new DeleteFieldValueImpl();\n    return DeleteFieldValueImpl;\n}(FieldValueImpl));\nexport { DeleteFieldValueImpl };\nvar ServerTimestampFieldValueImpl = /** @class */ (function (_super) {\n    __extends(ServerTimestampFieldValueImpl, _super);\n    function ServerTimestampFieldValueImpl() {\n        return _super.call(this) || this;\n    }\n    /** Singleton instance. */\n    ServerTimestampFieldValueImpl.instance = new ServerTimestampFieldValueImpl();\n    return ServerTimestampFieldValueImpl;\n}(FieldValueImpl));\nexport { ServerTimestampFieldValueImpl };\n// Public instance that disallows construction at runtime. This constructor is\n// used when exporting FieldValueImpl on firebase.firestore.FieldValue and will\n// be called FieldValue publicly. Internally we still use FieldValueImpl which\n// has a type-checked private constructor. Note that FieldValueImpl and\n// PublicFieldValue can be used interchangeably in instanceof checks.\n// For our internal TypeScript code PublicFieldValue doesn't exist as a type,\n// and so we need to use FieldValueImpl as type and export it too.\n// tslint:disable-next-line:variable-name  We treat this as a class name.\nexport var PublicFieldValue = makeConstructorPrivate(FieldValueImpl, 'Use FieldValue.<field>() instead.');\n\n//# sourceMappingURL=field_value.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/field_value.js\n// module id = null\n// module chunks = ","(function() {var g,goog=goog||{},k=this;function l(a){return\"string\"==typeof a}function aa(){}\nfunction ba(a){var b=typeof a;if(\"object\"==b)if(a){if(a instanceof Array)return\"array\";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if(\"[object Window]\"==c)return\"object\";if(\"[object Array]\"==c||\"number\"==typeof a.length&&\"undefined\"!=typeof a.splice&&\"undefined\"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable(\"splice\"))return\"array\";if(\"[object Function]\"==c||\"undefined\"!=typeof a.call&&\"undefined\"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable(\"call\"))return\"function\"}else return\"null\";\nelse if(\"function\"==b&&\"undefined\"==typeof a.call)return\"object\";return b}function n(a){return\"array\"==ba(a)}function ca(a){var b=ba(a);return\"array\"==b||\"object\"==b&&\"number\"==typeof a.length}function da(a){return\"function\"==ba(a)}function p(a){var b=typeof a;return\"object\"==b&&null!=a||\"function\"==b}var q=\"closure_uid_\"+(1E9*Math.random()>>>0),ea=0;function fa(a,b,c){return a.call.apply(a.bind,arguments)}\nfunction ha(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function r(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf(\"native code\")?r=fa:r=ha;return r.apply(null,arguments)}\nfunction ia(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b)}}var t=Date.now||function(){return+new Date};function u(a,b){function c(){}c.prototype=b.prototype;a.L=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.Bb=function(a,c,f){for(var d=Array(arguments.length-2),e=2;e<arguments.length;e++)d[e-2]=arguments[e];return b.prototype[c].apply(a,d)}};function ja(a){if(Error.captureStackTrace)Error.captureStackTrace(this,ja);else{var b=Error().stack;b&&(this.stack=b)}a&&(this.message=String(a))}u(ja,Error);ja.prototype.name=\"CustomError\";function ka(a,b){for(var c=a.split(\"%s\"),d=\"\",e=Array.prototype.slice.call(arguments,1);e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join(\"%s\")}var la=String.prototype.trim?function(a){return a.trim()}:function(a){return a.replace(/^[\\s\\xa0]+|[\\s\\xa0]+$/g,\"\")};function ma(a,b){return a<b?-1:a>b?1:0};function na(a,b){b.unshift(a);ja.call(this,ka.apply(null,b));b.shift()}u(na,ja);na.prototype.name=\"AssertionError\";function oa(a,b){throw new na(\"Failure\"+(a?\": \"+a:\"\"),Array.prototype.slice.call(arguments,1));};function w(){0!=qa&&(ra[this[q]||(this[q]=++ea)]=this);this.i=this.i;this.v=this.v}var qa=0,ra={};w.prototype.i=!1;w.prototype.Y=function(){if(!this.i&&(this.i=!0,this.w(),0!=qa)){var a=this[q]||(this[q]=++ea);delete ra[a]}};w.prototype.w=function(){if(this.v)for(;this.v.length;)this.v.shift()()};var sa=Array.prototype.indexOf?function(a,b,c){return Array.prototype.indexOf.call(a,b,c)}:function(a,b,c){c=null==c?0:0>c?Math.max(0,a.length+c):c;if(l(a))return l(b)&&1==b.length?a.indexOf(b,c):-1;for(;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1},ta=Array.prototype.forEach?function(a,b,c){Array.prototype.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=l(a)?a.split(\"\"):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)};\nfunction ua(a){a:{var b=va;for(var c=a.length,d=l(a)?a.split(\"\"):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a)){b=e;break a}b=-1}return 0>b?null:l(a)?a.charAt(b):a[b]}function wa(a){if(!n(a))for(var b=a.length-1;0<=b;b--)delete a[b];a.length=0}function xa(a){return Array.prototype.concat.apply([],arguments)}function ya(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return[]};var x;a:{var za=k.navigator;if(za){var Aa=za.userAgent;if(Aa){x=Aa;break a}}x=\"\"}function y(a){return-1!=x.indexOf(a)};function Ba(a,b,c){for(var d in a)b.call(c,a[d],d,a)}function Ca(a){var b=[],c=0,d;for(d in a)b[c++]=a[d];return b}function Da(a){var b=[],c=0,d;for(d in a)b[c++]=d;return b}function Ea(a){var b={},c;for(c in a)b[c]=a[c];return b}var Fa=\"constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf\".split(\" \");\nfunction Ga(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<Fa.length;f++)c=Fa[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}};function Ha(a){Ha[\" \"](a);return a}Ha[\" \"]=aa;function Ia(a,b){var c=Ja;return Object.prototype.hasOwnProperty.call(c,a)?c[a]:c[a]=b(a)};var Ka=y(\"Opera\"),z=y(\"Trident\")||y(\"MSIE\"),La=y(\"Edge\"),Ma=y(\"Gecko\")&&!(-1!=x.toLowerCase().indexOf(\"webkit\")&&!y(\"Edge\"))&&!(y(\"Trident\")||y(\"MSIE\"))&&!y(\"Edge\"),Na=-1!=x.toLowerCase().indexOf(\"webkit\")&&!y(\"Edge\");function Oa(){var a=k.document;return a?a.documentMode:void 0}var Pa;\na:{var Qa=\"\",Sa=function(){var a=x;if(Ma)return/rv\\:([^\\);]+)(\\)|;)/.exec(a);if(La)return/Edge\\/([\\d\\.]+)/.exec(a);if(z)return/\\b(?:MSIE|rv)[: ]([^\\);]+)(\\)|;)/.exec(a);if(Na)return/WebKit\\/(\\S+)/.exec(a);if(Ka)return/(?:Version)[ \\/]?(\\S+)/.exec(a)}();Sa&&(Qa=Sa?Sa[1]:\"\");if(z){var Ta=Oa();if(null!=Ta&&Ta>parseFloat(Qa)){Pa=String(Ta);break a}}Pa=Qa}var Ja={};\nfunction Ua(a){return Ia(a,function(){for(var b=0,c=la(String(Pa)).split(\".\"),d=la(String(a)).split(\".\"),e=Math.max(c.length,d.length),f=0;0==b&&f<e;f++){var h=c[f]||\"\",m=d[f]||\"\";do{h=/(\\d*)(\\D*)(.*)/.exec(h)||[\"\",\"\",\"\",\"\"];m=/(\\d*)(\\D*)(.*)/.exec(m)||[\"\",\"\",\"\",\"\"];if(0==h[0].length&&0==m[0].length)break;b=ma(0==h[1].length?0:parseInt(h[1],10),0==m[1].length?0:parseInt(m[1],10))||ma(0==h[2].length,0==m[2].length)||ma(h[2],m[2]);h=h[3];m=m[3]}while(0==b)}return 0<=b})}var Va;var Wa=k.document;\nVa=Wa&&z?Oa()||(\"CSS1Compat\"==Wa.compatMode?parseInt(Pa,10):5):void 0;var Xa=Object.freeze||function(a){return a};var Ya=!z||9<=Number(Va),Za=z&&!Ua(\"9\"),$a=function(){if(!k.addEventListener||!Object.defineProperty)return!1;var a=!1,b=Object.defineProperty({},\"passive\",{get:function(){a=!0}});k.addEventListener(\"test\",aa,b);k.removeEventListener(\"test\",aa,b);return a}();function A(a,b){this.type=a;this.a=this.target=b;this.Qa=!0}A.prototype.b=function(){this.Qa=!1};function ab(a,b){A.call(this,a?a.type:\"\");this.relatedTarget=this.a=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key=\"\";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.pointerId=0;this.pointerType=\"\";this.c=null;if(a){var c=this.type=a.type,d=a.changedTouches?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.a=b;if(b=a.relatedTarget){if(Ma){a:{try{Ha(b.nodeName);var e=!0;break a}catch(f){}e=!1}e||(b=null)}}else\"mouseover\"==c?b=\na.fromElement:\"mouseout\"==c&&(b=a.toElement);this.relatedTarget=b;null===d?(this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0):(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0);this.button=a.button;this.key=a.key||\"\";this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=a.shiftKey;this.metaKey=\na.metaKey;this.pointerId=a.pointerId||0;this.pointerType=l(a.pointerType)?a.pointerType:bb[a.pointerType]||\"\";this.c=a;a.defaultPrevented&&this.b()}}u(ab,A);var bb=Xa({2:\"touch\",3:\"pen\",4:\"mouse\"});ab.prototype.b=function(){ab.L.b.call(this);var a=this.c;if(a.preventDefault)a.preventDefault();else if(a.returnValue=!1,Za)try{if(a.ctrlKey||112<=a.keyCode&&123>=a.keyCode)a.keyCode=-1}catch(b){}};var cb=\"closure_listenable_\"+(1E6*Math.random()|0);function db(a){return!(!a||!a[cb])}var eb=0;function fb(a,b,c,d,e){this.listener=a;this.a=null;this.src=b;this.type=c;this.capture=!!d;this.da=e;this.key=++eb;this.X=this.ba=!1}function gb(a){a.X=!0;a.listener=null;a.a=null;a.src=null;a.da=null};function hb(a){this.src=a;this.a={};this.b=0}function ib(a,b,c,d,e,f){var h=b.toString();b=a.a[h];b||(b=a.a[h]=[],a.b++);var m=jb(b,c,e,f);-1<m?(a=b[m],d||(a.ba=!1)):(a=new fb(c,a.src,h,!!e,f),a.ba=d,b.push(a));return a}function kb(a,b){var c=b.type;if(c in a.a){var d=a.a[c],e=sa(d,b),f;(f=0<=e)&&Array.prototype.splice.call(d,e,1);f&&(gb(b),0==a.a[c].length&&(delete a.a[c],a.b--))}}function lb(a,b,c,d,e){a=a.a[b.toString()];b=-1;a&&(b=jb(a,c,d,e));return-1<b?a[b]:null}\nfunction jb(a,b,c,d){for(var e=0;e<a.length;++e){var f=a[e];if(!f.X&&f.listener==b&&f.capture==!!c&&f.da==d)return e}return-1};var mb=\"closure_lm_\"+(1E6*Math.random()|0),nb={},ob=0;function pb(a,b,c,d,e){if(d&&d.once)return qb(a,b,c,d,e);if(n(b)){for(var f=0;f<b.length;f++)pb(a,b[f],c,d,e);return null}c=rb(c);return db(a)?a.$(b,c,p(d)?!!d.capture:!!d,e):sb(a,b,c,!1,d,e)}\nfunction sb(a,b,c,d,e,f){if(!b)throw Error(\"Invalid event type\");var h=p(e)?!!e.capture:!!e,m=tb(a);m||(a[mb]=m=new hb(a));c=ib(m,b,c,d,h,f);if(c.a)return c;d=ub();c.a=d;d.src=a;d.listener=c;if(a.addEventListener)$a||(e=h),void 0===e&&(e=!1),a.addEventListener(b.toString(),d,e);else if(a.attachEvent)a.attachEvent(vb(b.toString()),d);else throw Error(\"addEventListener and attachEvent are unavailable.\");ob++;return c}\nfunction ub(){var a=wb,b=Ya?function(c){return a.call(b.src,b.listener,c)}:function(c){c=a.call(b.src,b.listener,c);if(!c)return c};return b}function qb(a,b,c,d,e){if(n(b)){for(var f=0;f<b.length;f++)qb(a,b[f],c,d,e);return null}c=rb(c);return db(a)?a.Ia(b,c,p(d)?!!d.capture:!!d,e):sb(a,b,c,!0,d,e)}function xb(a,b,c,d,e){if(n(b))for(var f=0;f<b.length;f++)xb(a,b[f],c,d,e);else d=p(d)?!!d.capture:!!d,c=rb(c),db(a)?a.xa(b,c,d,e):a&&(a=tb(a))&&(b=lb(a,b,c,d,e))&&yb(b)}\nfunction yb(a){if(\"number\"!=typeof a&&a&&!a.X){var b=a.src;if(db(b))kb(b.c,a);else{var c=a.type,d=a.a;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent&&b.detachEvent(vb(c),d);ob--;(c=tb(b))?(kb(c,a),0==c.b&&(c.src=null,b[mb]=null)):gb(a)}}}function vb(a){return a in nb?nb[a]:nb[a]=\"on\"+a}function zb(a,b,c,d){var e=!0;if(a=tb(a))if(b=a.a[b.toString()])for(b=b.concat(),a=0;a<b.length;a++){var f=b[a];f&&f.capture==c&&!f.X&&(f=Ab(f,d),e=e&&!1!==f)}return e}\nfunction Ab(a,b){var c=a.listener,d=a.da||a.src;a.ba&&yb(a);return c.call(d,b)}\nfunction wb(a,b){if(a.X)return!0;if(!Ya){if(!b)a:{b=[\"window\",\"event\"];for(var c=k,d=0;d<b.length;d++)if(c=c[b[d]],null==c){b=null;break a}b=c}d=b;b=new ab(d,this);c=!0;if(!(0>d.keyCode||void 0!=d.returnValue)){a:{var e=!1;if(0==d.keyCode)try{d.keyCode=-1;break a}catch(h){e=!0}if(e||void 0==d.returnValue)d.returnValue=!0}d=[];for(e=b.a;e;e=e.parentNode)d.push(e);a=a.type;for(e=d.length-1;0<=e;e--){b.a=d[e];var f=zb(d[e],a,!0,b);c=c&&f}for(e=0;e<d.length;e++)b.a=d[e],f=zb(d[e],a,!1,b),c=c&&f}return c}return Ab(a,\nnew ab(b,this))}function tb(a){a=a[mb];return a instanceof hb?a:null}var Bb=\"__closure_events_fn_\"+(1E9*Math.random()>>>0);function rb(a){if(da(a))return a;a[Bb]||(a[Bb]=function(b){return a.handleEvent(b)});return a[Bb]};function B(){w.call(this);this.c=new hb(this);this.P=this;this.J=null}u(B,w);B.prototype[cb]=!0;g=B.prototype;g.addEventListener=function(a,b,c,d){pb(this,a,b,c,d)};g.removeEventListener=function(a,b,c,d){xb(this,a,b,c,d)};\ng.dispatchEvent=function(a){var b,c=this.J;if(c)for(b=[];c;c=c.J)b.push(c);c=this.P;var d=a.type||a;if(l(a))a=new A(a,c);else if(a instanceof A)a.target=a.target||c;else{var e=a;a=new A(d,c);Ga(a,e)}e=!0;if(b)for(var f=b.length-1;0<=f;f--){var h=a.a=b[f];e=Cb(h,d,!0,a)&&e}h=a.a=c;e=Cb(h,d,!0,a)&&e;e=Cb(h,d,!1,a)&&e;if(b)for(f=0;f<b.length;f++)h=a.a=b[f],e=Cb(h,d,!1,a)&&e;return e};\ng.w=function(){B.L.w.call(this);if(this.c){var a=this.c,b=0,c;for(c in a.a){for(var d=a.a[c],e=0;e<d.length;e++)++b,gb(d[e]);delete a.a[c];a.b--}}this.J=null};g.$=function(a,b,c,d){return ib(this.c,String(a),b,!1,c,d)};g.Ia=function(a,b,c,d){return ib(this.c,String(a),b,!0,c,d)};g.xa=function(a,b,c,d){var e=this.c;a=String(a).toString();if(a in e.a){var f=e.a[a];b=jb(f,b,c,d);-1<b?(gb(f[b]),Array.prototype.splice.call(f,b,1),0==f.length&&(delete e.a[a],e.b--),e=!0):e=!1}else e=!1;return e};\nfunction Cb(a,b,c,d){b=a.c.a[String(b)];if(!b)return!0;b=b.concat();for(var e=!0,f=0;f<b.length;++f){var h=b[f];if(h&&!h.X&&h.capture==c){var m=h.listener,v=h.da||h.src;h.ba&&kb(a.c,h);e=!1!==m.call(v,d)&&e}}return e&&0!=d.Qa};function Db(a){return/^\\s*$/.test(a)?!1:/^[\\],:{}\\s\\u2028\\u2029]*$/.test(a.replace(/\\\\[\"\\\\\\/bfnrtu]/g,\"@\").replace(/(?:\"[^\"\\\\\\n\\r\\u2028\\u2029\\x00-\\x08\\x0a-\\x1f]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)[\\s\\u2028\\u2029]*(?=:|,|]|}|$)/g,\"]\").replace(/(?:^|:|,)(?:[\\s\\u2028\\u2029]*\\[)+/g,\"\"))}function Eb(a){a=String(a);if(Db(a))try{return eval(\"(\"+a+\")\")}catch(b){}throw Error(\"Invalid JSON string: \"+a);}function Fb(a){var b=[];Gb(new Hb,a,b);return b.join(\"\")}function Hb(){}\nfunction Gb(a,b,c){if(null==b)c.push(\"null\");else{if(\"object\"==typeof b){if(n(b)){var d=b;b=d.length;c.push(\"[\");for(var e=\"\",f=0;f<b;f++)c.push(e),Gb(a,d[f],c),e=\",\";c.push(\"]\");return}if(b instanceof String||b instanceof Number||b instanceof Boolean)b=b.valueOf();else{c.push(\"{\");e=\"\";for(d in b)Object.prototype.hasOwnProperty.call(b,d)&&(f=b[d],\"function\"!=typeof f&&(c.push(e),Ib(d,c),c.push(\":\"),Gb(a,f,c),e=\",\"));c.push(\"}\");return}}switch(typeof b){case \"string\":Ib(b,c);break;case \"number\":c.push(isFinite(b)&&\n!isNaN(b)?String(b):\"null\");break;case \"boolean\":c.push(String(b));break;case \"function\":c.push(\"null\");break;default:throw Error(\"Unknown type: \"+typeof b);}}}var Jb={'\"':'\\\\\"',\"\\\\\":\"\\\\\\\\\",\"/\":\"\\\\/\",\"\\b\":\"\\\\b\",\"\\f\":\"\\\\f\",\"\\n\":\"\\\\n\",\"\\r\":\"\\\\r\",\"\\t\":\"\\\\t\",\"\\x0B\":\"\\\\u000b\"},Lb=/\\uffff/.test(\"\\uffff\")?/[\\\\\\\"\\x00-\\x1f\\x7f-\\uffff]/g:/[\\\\\\\"\\x00-\\x1f\\x7f-\\xff]/g;\nfunction Ib(a,b){b.push('\"',a.replace(Lb,function(a){var b=Jb[a];b||(b=\"\\\\u\"+(a.charCodeAt(0)|65536).toString(16).substr(1),Jb[a]=b);return b}),'\"')};function Mb(a,b,c){this.f=c;this.c=a;this.g=b;this.b=0;this.a=null}Mb.prototype.get=function(){if(0<this.b){this.b--;var a=this.a;this.a=a.next;a.next=null}else a=this.c();return a};var C=new Mb(function(){return new Nb},function(a){a.reset()},100);function Ob(){var a=Pb,b=null;a.a&&(b=a.a,a.a=a.a.next,a.a||(a.b=null),b.next=null);return b}function Nb(){this.next=this.b=this.a=null}Nb.prototype.set=function(a,b){this.a=a;this.b=b;this.next=null};Nb.prototype.reset=function(){this.next=this.b=this.a=null};function Qb(a){k.setTimeout(function(){throw a;},0)}var Rb;\nfunction Sb(){var a=k.MessageChannel;\"undefined\"===typeof a&&\"undefined\"!==typeof window&&window.postMessage&&window.addEventListener&&!y(\"Presto\")&&(a=function(){var a=document.createElement(\"IFRAME\");a.style.display=\"none\";a.src=\"\";document.documentElement.appendChild(a);var b=a.contentWindow;a=b.document;a.open();a.write(\"\");a.close();var c=\"callImmediate\"+Math.random(),d=\"file:\"==b.location.protocol?\"*\":b.location.protocol+\"//\"+b.location.host;a=r(function(a){if((\"*\"==d||a.origin==d)&&a.data==\nc)this.port1.onmessage()},this);b.addEventListener(\"message\",a,!1);this.port1={};this.port2={postMessage:function(){b.postMessage(c,d)}}});if(\"undefined\"!==typeof a&&!y(\"Trident\")&&!y(\"MSIE\")){var b=new a,c={},d=c;b.port1.onmessage=function(){if(void 0!==c.next){c=c.next;var a=c.Ca;c.Ca=null;a()}};return function(a){d.next={Ca:a};d=d.next;b.port2.postMessage(0)}}return\"undefined\"!==typeof document&&\"onreadystatechange\"in document.createElement(\"SCRIPT\")?function(a){var b=document.createElement(\"SCRIPT\");\nb.onreadystatechange=function(){b.onreadystatechange=null;b.parentNode.removeChild(b);b=null;a();a=null};document.documentElement.appendChild(b)}:function(a){k.setTimeout(a,0)}};var Tb;function Ub(){if(-1!=String(k.Promise).indexOf(\"[native code]\")){var a=k.Promise.resolve(void 0);Tb=function(){a.then(Vb)}}else Tb=function(){var a=Vb;!da(k.setImmediate)||k.Window&&k.Window.prototype&&!y(\"Edge\")&&k.Window.prototype.setImmediate==k.setImmediate?(Rb||(Rb=Sb()),Rb(a)):k.setImmediate(a)}}var Wb=!1,Pb=new function(){this.b=this.a=null};function Vb(){for(var a;a=Ob();){try{a.a.call(a.b)}catch(b){Qb(b)}C.g(a);C.b<C.f&&(C.b++,a.next=C.a,C.a=a)}Wb=!1};function Xb(a,b){B.call(this);this.b=a||1;this.a=b||k;this.f=r(this.jb,this);this.g=t()}u(Xb,B);g=Xb.prototype;g.Z=!1;g.K=null;g.jb=function(){if(this.Z){var a=t()-this.g;0<a&&a<.8*this.b?this.K=this.a.setTimeout(this.f,this.b-a):(this.K&&(this.a.clearTimeout(this.K),this.K=null),this.dispatchEvent(\"tick\"),this.Z&&(this.K=this.a.setTimeout(this.f,this.b),this.g=t()))}};g.start=function(){this.Z=!0;this.K||(this.K=this.a.setTimeout(this.f,this.b),this.g=t())};\nfunction Yb(a){a.Z=!1;a.K&&(a.a.clearTimeout(a.K),a.K=null)}g.w=function(){Xb.L.w.call(this);Yb(this);delete this.a};function Zb(a,b,c){if(da(a))c&&(a=r(a,c));else if(a&&\"function\"==typeof a.handleEvent)a=r(a.handleEvent,a);else throw Error(\"Invalid listener argument\");return 2147483647<Number(b)?-1:k.setTimeout(a,b||0)};function $b(a,b,c){w.call(this);this.f=null!=c?r(a,c):a;this.c=b;this.b=r(this.cb,this);this.a=[]}u($b,w);g=$b.prototype;g.ea=!1;g.W=null;g.Ya=function(a){this.a=arguments;this.W?this.ea=!0:ac(this)};g.w=function(){$b.L.w.call(this);this.W&&(k.clearTimeout(this.W),this.W=null,this.ea=!1,this.a=[])};g.cb=function(){this.W=null;this.ea&&(this.ea=!1,ac(this))};function ac(a){a.W=Zb(a.b,a.c);a.f.apply(null,a.a)};function D(a){w.call(this);this.b=a;this.a={}}u(D,w);var bc=[];D.prototype.$=function(a,b,c,d){n(b)||(b&&(bc[0]=b.toString()),b=bc);for(var e=0;e<b.length;e++){var f=pb(a,b[e],c||this.handleEvent,d||!1,this.b||this);if(!f)break;this.a[f.key]=f}return this};\nD.prototype.xa=function(a,b,c,d,e){if(n(b))for(var f=0;f<b.length;f++)this.xa(a,b[f],c,d,e);else c=c||this.handleEvent,d=p(d)?!!d.capture:!!d,e=e||this.b||this,c=rb(c),d=!!d,b=db(a)?lb(a.c,String(b),c,d,e):a?(a=tb(a))?lb(a,b,c,d,e):null:null,b&&(yb(b),delete this.a[b.key]);return this};function cc(a){Ba(a.a,function(a,c){this.a.hasOwnProperty(c)&&yb(a)},a);a.a={}}D.prototype.w=function(){D.L.w.call(this);cc(this)};\nD.prototype.handleEvent=function(){throw Error(\"EventHandler.handleEvent not implemented\");};function dc(a,b,c,d,e){this.reset(a,b,c,d,e)}dc.prototype.a=null;var ec=0;dc.prototype.reset=function(a,b,c,d,e){\"number\"==typeof e||ec++;d||t();this.b=b;delete this.a};function fc(a){this.f=a;this.b=this.c=this.a=null}function E(a,b){this.name=a;this.value=b}E.prototype.toString=function(){return this.name};var gc=new E(\"SEVERE\",1E3),hc=new E(\"WARNING\",900),ic=new E(\"INFO\",800),jc=new E(\"CONFIG\",700),kc=new E(\"FINE\",500);function lc(a){if(a.c)return a.c;if(a.a)return lc(a.a);oa(\"Root logger has no level set.\");return null}\nfc.prototype.log=function(a,b,c){if(a.value>=lc(this).value)for(da(b)&&(b=b()),a=new dc(a,String(b),this.f),c&&(a.a=c),c=\"log:\"+a.b,(a=k.console)&&a.timeStamp&&a.timeStamp(c),(a=k.msWriteProfilerMark)&&a(c),c=this;c;)c=c.a};function F(a,b){a.log(gc,b,void 0)}function G(a,b){a.log(hc,b,void 0)}var mc={},nc=null;\nfunction oc(a){nc||(nc=new fc(\"\"),mc[\"\"]=nc,nc.c=jc);var b;if(!(b=mc[a])){b=new fc(a);var c=a.lastIndexOf(\".\"),d=a.substr(c+1);c=oc(a.substr(0,c));c.b||(c.b={});c.b[d]=b;b.a=c;mc[a]=b}return b};function pc(a,b){a&&a.log(ic,b,void 0)}function H(a,b){a&&a.log(kc,b,void 0)};function qc(){this.a=oc(\"goog.labs.net.webChannel.WebChannelDebug\")}function rc(a,b,c,d){if(c)try{var e=JSON.parse(c);if(e)for(var f=0;f<e.length;f++)if(n(e[f])){var h=e[f];if(!(2>h.length)){var m=h[1];if(n(m)&&!(1>m.length)){var v=m[0];if(\"noop\"!=v&&\"stop\"!=v&&\"close\"!=v)for(var Ra=1;Ra<m.length;Ra++)m[Ra]=\"\"}}}var Kb=Fb(e)}catch(Pe){I(a,\"Exception parsing expected JS array - probably was not JS\"),Kb=c}else Kb=null;I(a,\"XMLHTTP TEXT (\"+b+\"): \"+Kb+(d?\" \"+d:\"\"))}\nfunction sc(a,b,c){(a=a.a)&&F(a,(c||\"Exception\")+b)}function I(a,b){pc(a.a,b)};var J=new B;function tc(a){A.call(this,\"serverreachability\",a)}u(tc,A);function uc(){J.dispatchEvent(new tc(J))}function vc(a){A.call(this,\"statevent\",a)}u(vc,A);function K(){J.dispatchEvent(new vc(J))}function wc(a){A.call(this,\"timingevent\",a)}u(wc,A);function xc(a,b){if(!da(a))throw Error(\"Fn must not be null and must be a function\");return k.setTimeout(function(){a()},b)};var yc={NO_ERROR:0,kb:1,rb:2,qb:3,nb:4,pb:5,sb:6,Sa:7,TIMEOUT:8,vb:9};var zc={mb:\"complete\",zb:\"success\",Ta:\"error\",Sa:\"abort\",xb:\"ready\",yb:\"readystatechange\",TIMEOUT:\"timeout\",tb:\"incrementaldata\",wb:\"progress\",ob:\"downloadprogress\",Ab:\"uploadprogress\"};function Ac(){}Ac.prototype.a=null;function Bc(a){var b;(b=a.a)||(b={},Cc(a)&&(b[0]=!0,b[1]=!0),b=a.a=b);return b};var Dc;function Ec(){}u(Ec,Ac);function Fc(a){return(a=Cc(a))?new ActiveXObject(a):new XMLHttpRequest}function Cc(a){if(!a.b&&\"undefined\"==typeof XMLHttpRequest&&\"undefined\"!=typeof ActiveXObject){for(var b=[\"MSXML2.XMLHTTP.6.0\",\"MSXML2.XMLHTTP.3.0\",\"MSXML2.XMLHTTP\",\"Microsoft.XMLHTTP\"],c=0;c<b.length;c++){var d=b[c];try{return new ActiveXObject(d),a.b=d}catch(e){}}throw Error(\"Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed\");}return a.b}Dc=new Ec;function L(a,b,c,d,e){this.m=a;this.b=b;this.f=d;this.S=e||1;this.M=new D(this);this.P=Gc;a=this.F=new Xb;a.b=Hc;a.K&&a.Z?(Yb(a),a.start()):a.K&&Yb(a);this.h=null;this.c=!1;this.a=this.B=this.g=this.l=this.I=this.H=this.T=this.o=null;this.C=0;this.i=this.j=null;this.v=-1;this.s=!1;this.N=0;this.G=null;this.J=!1}var Gc=45E3,Hc=250;\nfunction Ic(a,b){switch(a){case 0:return\"Non-200 return code (\"+b+\")\";case 1:return\"XMLHTTP failure (no data)\";case 2:return\"HttpConnection timeout\";default:return\"Unknown error\"}}var Jc={},Kc={};g=L.prototype;g.setTimeout=function(a){this.P=a};function Lc(a,b,c){a.I=1;a.l=Mc(M(b));a.B=c;a.J=!0;Nc(a,null)}function Oc(a,b,c,d){a.I=1;a.l=Mc(M(b));a.B=null;a.J=c;Nc(a,d)}\nfunction Nc(a,b){a.H=t();Pc(a);a.g=M(a.l);Qc(a.g,\"t\",a.S);a.C=0;a.a=a.m.ra(a.m.fa()?b:null);0<a.N&&(a.G=new $b(r(a.Ra,a,a.a),a.N));a.M.$(a.a,\"readystatechange\",a.gb);b=a.h?Ea(a.h):{};a.B?(a.j||(a.j=\"POST\"),b[\"Content-Type\"]=\"application/x-www-form-urlencoded\",a.a.ta(a.g,a.j,a.B,b)):(a.j=\"GET\",a.a.ta(a.g,a.j,null,b));uc();var c=a.B;if(c){b=\"\";c=c.split(\"&\");for(var d=0;d<c.length;d++){var e=c[d].split(\"=\");if(1<e.length){var f=e[0];e=e[1];var h=f.split(\"_\");b=2<=h.length&&\"type\"==h[1]?b+(f+\"=\"+e+\"&\"):\nb+(f+\"=redacted&\")}}}else b=null;I(a.b,\"XMLHTTP REQ (\"+a.f+\") [attempt \"+a.S+\"]: \"+a.j+\"\\n\"+a.g+\"\\n\"+b)}g.gb=function(a){a=a.target;var b=this.G;b&&3==N(a)?(I(this.b,\"Throttling readystatechange.\"),b.Ya()):this.Ra(a)};\ng.Ra=function(a){try{if(a==this.a){var b=N(this.a),c=this.a.Ga();if(!(3>b||3==b&&!Ka&&!this.a.U())){this.s||4!=b||7==c||uc();Rc(this);var d=this.a.V();this.v=d;var e=this.a.U();e||I(this.b,\"No response text for uri \"+this.g+\" status \"+d);this.c=200==d;I(this.b,\"XMLHTTP RESP (\"+this.f+\") [ attempt \"+this.S+\"]: \"+this.j+\"\\n\"+this.g+\"\\n\"+b+\" \"+d);if(this.c)this.J?(Sc(this,b,e),Ka&&this.c&&3==b&&(this.M.$(this.F,\"tick\",this.fb),this.F.start())):(rc(this.b,this.f,e,null),Tc(this,e)),4==b&&Uc(this),this.c&&\n!this.s&&(4==b?this.m.wa(this):(this.c=!1,Pc(this)));else{if(400==d&&0<e.indexOf(\"Unknown SID\")){this.i=3;K();var f=this.b.a;f&&G(f,\"XMLHTTP Unknown SID (\"+this.f+\")\")}else{this.i=0;K();var h=this.b.a;h&&G(h,\"XMLHTTP Bad status \"+d+\" (\"+this.f+\")\")}Uc(this);Vc(this)}}}else{var m=this.b.a;m&&G(m,\"Called back with an unexpected xmlhttp\")}}catch(v){I(this.b,\"Failed call to OnXmlHttpReadyStateChanged_\"),this.a&&this.a.U()?sc(this.b,v,\"ResponseText: \"+this.a.U()):sc(this.b,v,\"No response text\")}finally{}};\nfunction Sc(a,b,c){for(var d=!0;!a.s&&a.C<c.length;){var e=Wc(a,c);if(e==Kc){4==b&&(a.i=4,K(),d=!1);rc(a.b,a.f,null,\"[Incomplete Response]\");break}else if(e==Jc){a.i=4;K();rc(a.b,a.f,c,\"[Invalid Chunk]\");d=!1;break}else rc(a.b,a.f,e,null),Tc(a,e)}4==b&&0==c.length&&(a.i=1,K(),d=!1);a.c=a.c&&d;d||(rc(a.b,a.f,c,\"[Invalid Chunked Response]\"),Uc(a),Vc(a))}g.fb=function(){var a=N(this.a),b=this.a.U();this.C<b.length&&(Rc(this),Sc(this,a,b),this.c&&4!=a&&Pc(this))};\nfunction Wc(a,b){var c=a.C,d=b.indexOf(\"\\n\",c);if(-1==d)return Kc;c=Number(b.substring(c,d));if(isNaN(c))return Jc;d+=1;if(d+c>b.length)return Kc;b=b.substr(d,c);a.C=d+c;return b}g.cancel=function(){this.s=!0;Uc(this)};function Pc(a){a.T=t()+a.P;Xc(a,a.P)}function Xc(a,b){if(null!=a.o)throw Error(\"WatchDog timer not null\");a.o=xc(r(a.eb,a),b)}function Rc(a){a.o&&(k.clearTimeout(a.o),a.o=null)}\ng.eb=function(){this.o=null;var a=t();if(0<=a-this.T)this.c&&(a=this.b.a)&&F(a,\"Received watchdog timeout even though request loaded successfully\"),I(this.b,\"TIMEOUT: \"+this.g),2!=this.I&&(uc(),K()),Uc(this),this.i=2,Vc(this);else{var b=this.b.a;b&&G(b,\"WatchDog timer called too early\");Xc(this,this.T-a)}};function Vc(a){a.m.Ka()||a.s||a.m.wa(a)}function Uc(a){Rc(a);var b=a.G;b&&\"function\"==typeof b.Y&&b.Y();a.G=null;Yb(a.F);cc(a.M);a.a&&(b=a.a,a.a=null,b.abort(),b.Y())}\nfunction Tc(a,b){try{a.m.Na(a,b),uc()}catch(c){sc(a.b,c,\"Error in httprequest callback\")}};function Yc(a){if(a.A&&\"function\"==typeof a.A)return a.A();if(l(a))return a.split(\"\");if(ca(a)){for(var b=[],c=a.length,d=0;d<c;d++)b.push(a[d]);return b}return Ca(a)}\nfunction Zc(a,b){if(a.forEach&&\"function\"==typeof a.forEach)a.forEach(b,void 0);else if(ca(a)||l(a))ta(a,b,void 0);else{if(a.O&&\"function\"==typeof a.O)var c=a.O();else if(a.A&&\"function\"==typeof a.A)c=void 0;else if(ca(a)||l(a)){c=[];for(var d=a.length,e=0;e<d;e++)c.push(e)}else c=Da(a);d=Yc(a);e=d.length;for(var f=0;f<e;f++)b.call(void 0,d[f],c&&c[f],a)}};function O(a,b){this.b={};this.a=[];this.c=0;var c=arguments.length;if(1<c){if(c%2)throw Error(\"Uneven number of arguments\");for(var d=0;d<c;d+=2)this.set(arguments[d],arguments[d+1])}else if(a){a instanceof O?(c=a.O(),d=a.A()):(c=Da(a),d=Ca(a));for(var e=0;e<c.length;e++)this.set(c[e],d[e])}}g=O.prototype;g.u=function(){return this.c};g.A=function(){$c(this);for(var a=[],b=0;b<this.a.length;b++)a.push(this.b[this.a[b]]);return a};g.O=function(){$c(this);return this.a.concat()};\nfunction ad(a){a.b={};a.a.length=0;a.c=0}function bd(a,b){return P(a.b,b)?(delete a.b[b],a.c--,a.a.length>2*a.c&&$c(a),!0):!1}function $c(a){if(a.c!=a.a.length){for(var b=0,c=0;b<a.a.length;){var d=a.a[b];P(a.b,d)&&(a.a[c++]=d);b++}a.a.length=c}if(a.c!=a.a.length){var e={};for(c=b=0;b<a.a.length;)d=a.a[b],P(e,d)||(a.a[c++]=d,e[d]=1),b++;a.a.length=c}}g.get=function(a,b){return P(this.b,a)?this.b[a]:b};g.set=function(a,b){P(this.b,a)||(this.c++,this.a.push(a));this.b[a]=b};\ng.forEach=function(a,b){for(var c=this.O(),d=0;d<c.length;d++){var e=c[d],f=this.get(e);a.call(b,f,e,this)}};function P(a,b){return Object.prototype.hasOwnProperty.call(a,b)};var cd=/^(?:([^:/?#.]+):)?(?:\\/\\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\\?([^#]*))?(?:#([\\s\\S]*))?$/;function dd(a,b){if(a){a=a.split(\"&\");for(var c=0;c<a.length;c++){var d=a[c].indexOf(\"=\"),e=null;if(0<=d){var f=a[c].substring(0,d);e=a[c].substring(d+1)}else f=a[c];b(f,e?decodeURIComponent(e.replace(/\\+/g,\" \")):\"\")}}};function Q(a,b){this.b=this.j=this.f=\"\";this.i=null;this.g=this.a=\"\";this.h=!1;var c;a instanceof Q?(this.h=void 0!==b?b:a.h,ed(this,a.f),this.j=a.j,fd(this,a.b),gd(this,a.i),this.a=a.a,hd(this,id(a.c)),this.g=a.g):a&&(c=String(a).match(cd))?(this.h=!!b,ed(this,c[1]||\"\",!0),this.j=jd(c[2]||\"\"),fd(this,c[3]||\"\",!0),gd(this,c[4]),this.a=jd(c[5]||\"\",!0),hd(this,c[6]||\"\",!0),this.g=jd(c[7]||\"\")):(this.h=!!b,this.c=new kd(null,0,this.h))}\nQ.prototype.toString=function(){var a=[],b=this.f;b&&a.push(ld(b,md,!0),\":\");var c=this.b;if(c||\"file\"==b)a.push(\"//\"),(b=this.j)&&a.push(ld(b,md,!0),\"@\"),a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g,\"%$1\")),c=this.i,null!=c&&a.push(\":\",String(c));if(c=this.a)this.b&&\"/\"!=c.charAt(0)&&a.push(\"/\"),a.push(ld(c,\"/\"==c.charAt(0)?nd:od,!0));(c=this.c.toString())&&a.push(\"?\",c);(c=this.g)&&a.push(\"#\",ld(c,pd));return a.join(\"\")};\nQ.prototype.resolve=function(a){var b=M(this),c=!!a.f;c?ed(b,a.f):c=!!a.j;c?b.j=a.j:c=!!a.b;c?fd(b,a.b):c=null!=a.i;var d=a.a;if(c)gd(b,a.i);else if(c=!!a.a){if(\"/\"!=d.charAt(0))if(this.b&&!this.a)d=\"/\"+d;else{var e=b.a.lastIndexOf(\"/\");-1!=e&&(d=b.a.substr(0,e+1)+d)}e=d;if(\"..\"==e||\".\"==e)d=\"\";else if(-1!=e.indexOf(\"./\")||-1!=e.indexOf(\"/.\")){d=0==e.lastIndexOf(\"/\",0);e=e.split(\"/\");for(var f=[],h=0;h<e.length;){var m=e[h++];\".\"==m?d&&h==e.length&&f.push(\"\"):\"..\"==m?((1<f.length||1==f.length&&\"\"!=\nf[0])&&f.pop(),d&&h==e.length&&f.push(\"\")):(f.push(m),d=!0)}d=f.join(\"/\")}else d=e}c?b.a=d:c=\"\"!==a.c.toString();c?hd(b,id(a.c)):c=!!a.g;c&&(b.g=a.g);return b};function M(a){return new Q(a)}function ed(a,b,c){a.f=c?jd(b,!0):b;a.f&&(a.f=a.f.replace(/:$/,\"\"))}function fd(a,b,c){a.b=c?jd(b,!0):b}function gd(a,b){if(b){b=Number(b);if(isNaN(b)||0>b)throw Error(\"Bad port number \"+b);a.i=b}else a.i=null}function hd(a,b,c){b instanceof kd?(a.c=b,qd(a.c,a.h)):(c||(b=ld(b,rd)),a.c=new kd(b,0,a.h))}\nfunction R(a,b,c){a.c.set(b,c)}function Qc(a,b,c){n(c)||(c=[String(c)]);sd(a.c,b,c)}function Mc(a){R(a,\"zx\",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^t()).toString(36));return a}function td(a){return a instanceof Q?M(a):new Q(a,void 0)}function ud(a,b,c,d){var e=new Q(null,void 0);a&&ed(e,a);b&&fd(e,b);c&&gd(e,c);d&&(e.a=d);return e}function jd(a,b){return a?b?decodeURI(a.replace(/%25/g,\"%2525\")):decodeURIComponent(a):\"\"}\nfunction ld(a,b,c){return l(a)?(a=encodeURI(a).replace(b,vd),c&&(a=a.replace(/%25([0-9a-fA-F]{2})/g,\"%$1\")),a):null}function vd(a){a=a.charCodeAt(0);return\"%\"+(a>>4&15).toString(16)+(a&15).toString(16)}var md=/[#\\/\\?@]/g,od=/[\\#\\?:]/g,nd=/[\\#\\?]/g,rd=/[\\#\\?@]/g,pd=/#/g;function kd(a,b,c){this.b=this.a=null;this.c=a||null;this.f=!!c}\nfunction S(a){a.a||(a.a=new O,a.b=0,a.c&&dd(a.c,function(b,c){b=decodeURIComponent(b.replace(/\\+/g,\" \"));S(a);a.c=null;b=wd(a,b);var d=a.a.get(b);d||a.a.set(b,d=[]);d.push(c);a.b+=1}))}g=kd.prototype;g.u=function(){S(this);return this.b};function xd(a,b){S(a);b=wd(a,b);P(a.a.b,b)&&(a.c=null,a.b-=a.a.get(b).length,bd(a.a,b))}function yd(a,b){S(a);b=wd(a,b);return P(a.a.b,b)}g.forEach=function(a,b){S(this);this.a.forEach(function(c,d){ta(c,function(c){a.call(b,c,d,this)},this)},this)};\ng.O=function(){S(this);for(var a=this.a.A(),b=this.a.O(),c=[],d=0;d<b.length;d++)for(var e=a[d],f=0;f<e.length;f++)c.push(b[d]);return c};g.A=function(a){S(this);var b=[];if(l(a))yd(this,a)&&(b=xa(b,this.a.get(wd(this,a))));else{a=this.a.A();for(var c=0;c<a.length;c++)b=xa(b,a[c])}return b};g.set=function(a,b){S(this);this.c=null;a=wd(this,a);yd(this,a)&&(this.b-=this.a.get(a).length);this.a.set(a,[b]);this.b+=1;return this};g.get=function(a,b){a=a?this.A(a):[];return 0<a.length?String(a[0]):b};\nfunction sd(a,b,c){xd(a,b);0<c.length&&(a.c=null,a.a.set(wd(a,b),ya(c)),a.b+=c.length)}g.toString=function(){if(this.c)return this.c;if(!this.a)return\"\";for(var a=[],b=this.a.O(),c=0;c<b.length;c++){var d=b[c],e=encodeURIComponent(String(d));d=this.A(d);for(var f=0;f<d.length;f++){var h=e;\"\"!==d[f]&&(h+=\"=\"+encodeURIComponent(String(d[f])));a.push(h)}}return this.c=a.join(\"&\")};function id(a){var b=new kd;b.c=a.c;a.a&&(b.a=new O(a.a),b.b=a.b);return b}\nfunction wd(a,b){b=String(b);a.f&&(b=b.toLowerCase());return b}function qd(a,b){b&&!a.f&&(S(a),a.c=null,a.a.forEach(function(a,b){var c=b.toLowerCase();b!=c&&(xd(this,b),sd(this,c,a))},a));a.f=b};function zd(){this.a=t()}var Ad=null;zd.prototype.set=function(a){this.a=a};zd.prototype.reset=function(){this.set(t())};zd.prototype.get=function(){return this.a};function Bd(){Ad||(Ad=new zd)}function Cd(){Ad||(Ad=new zd)}u(Cd,Bd);function Dd(){}var Ed={OPEN:\"a\",lb:\"b\",Ta:\"c\",ub:\"d\"};function Fd(){A.call(this,\"d\")}u(Fd,A);function Gd(){A.call(this,\"c\")}u(Gd,A);function Hd(a,b){this.a=a;this.b=b;this.c=this.i=null;this.h=!1;this.l=null;this.f=-1;this.m=this.g=null}g=Hd.prototype;g.R=null;function Id(a){I(a.b,\"TestConnection: starting stage 2\");var b=a.a.J.a;if(null!=b)I(a.b,\"TestConnection: skipping stage 2, precomputed result is \"+b?\"Buffered\":\"Unbuffered\"),K(),b?(K(),Jd(a.a,a,!1)):(K(),Jd(a.a,a,!0));else{a.c=new L(a,a.b,0,void 0,void 0);a.c.h=a.i;b=Kd(a.a,a.g,a.l);K();Qc(b,\"TYPE\",\"xmlhttp\");var c=a.a.j,d=a.a.N;c&&d&&R(b,c,d);Oc(a.c,b,!1,a.g)}}g.ra=function(a){return this.a.ra(a)};\ng.abort=function(){this.c&&(this.c.cancel(),this.c=null);this.f=-1};g.Ka=function(){return!1};\ng.Na=function(a,b){this.f=a.v;if(0==this.R){I(this.b,\"TestConnection: Got data for stage 1\");if(!this.a.F&&(a=a.a)){var c=a.a?a.a.getResponseHeader(\"X-Client-Wire-Protocol\"):null;this.m=c?c:null;this.a.j&&((a=a.a?a.a.getResponseHeader(\"X-HTTP-Session-Id\"):null)?this.a.N=a:(a=this.b.a)&&G(a,\"Missing X_HTTP_SESSION_ID in the handshake response\"))}if(b){try{var d=this.a.la.a.parse(b)}catch(e){sc(this.b,e);Ld(this.a,this);return}this.g=d[0]}else I(this.b,\"TestConnection: Null responseText\"),Ld(this.a,\nthis)}else if(1==this.R)if(this.h)K();else if(\"11111\"==b){if(K(),this.h=!0,!z||10<=Number(Va))this.f=200,this.c.cancel(),I(this.b,\"Test connection succeeded; using streaming connection\"),K(),Jd(this.a,this,!0)}else K(),this.h=!1};\ng.wa=function(){this.f=this.c.v;this.c.c?0==this.R?(this.R=1,I(this.b,\"TestConnection: request complete for initial check\"),Id(this)):1==this.R&&(I(this.b,\"TestConnection: request complete for stage 2\"),this.h?(I(this.b,\"Test connection succeeded; using streaming connection\"),K(),Jd(this.a,this,!0)):(I(this.b,\"Test connection failed; not using streaming\"),K(),Jd(this.a,this,!1))):(I(this.b,\"TestConnection: request failed, in state \"+this.R),0==this.R?K():1==this.R&&K(),Ld(this.a,this))};g.fa=function(){return this.a.fa()};\ng.sa=function(){return this.a.sa()};function Md(){this.a=this.b=null};function Nd(a){this.a=new O;if(a){a=Yc(a);for(var b=a.length,c=0;c<b;c++){var d=a[c];this.a.set(T(d),d)}}}function T(a){var b=typeof a;return\"object\"==b&&a||\"function\"==b?\"o\"+(a[q]||(a[q]=++ea)):b.charAt(0)+a}Nd.prototype.u=function(){return this.a.u()};Nd.prototype.contains=function(a){a=T(a);return P(this.a.b,a)};Nd.prototype.A=function(){return this.a.A()};function Od(a){this.f=a||Pd;this.c=k.pa&&k.pa.La&&k.pa.La()&&k.pa.La().Cb?this.f:1;this.a=null;1<this.c&&(this.a=new Nd);this.b=null}var Pd=10;function Qd(a,b){a.a||-1==b.indexOf(\"spdy\")&&-1==b.indexOf(\"quic\")&&-1==b.indexOf(\"h2\")||(a.c=a.f,a.a=new Nd,a.b&&(Rd(a,a.b),a.b=null))}function Sd(a){return a.b?!0:a.a?a.a.u()>=a.c:!1}function Td(a,b){return a.b?a.b==b:a.a?a.a.contains(b):!1}function Rd(a,b){a.a?a.a.a.set(T(b),b):a.b=b}\nOd.prototype.cancel=function(){this.b?(this.b.cancel(),this.b=null):this.a&&0!=this.a.a.c&&(ta(this.a.A(),function(a){a.cancel()}),ad(this.a.a))};function Ud(a,b){this.a=a;this.b=b};function Vd(a,b){this.a=a;this.b=b}Vd.prototype.stringify=function(a){return k.JSON.stringify(a,this.a)};Vd.prototype.parse=function(a){return k.JSON.parse(a,this.b)};function Wd(){this.a=new Vd}function Xd(a,b,c){var d=c||\"\";try{Zc(a,function(a,c){var e=a;p(a)&&(e=Fb(a));b.push(d+c+\"=\"+encodeURIComponent(e))})}catch(e){throw b.push(d+\"type=\"+encodeURIComponent(\"_badmap\")),e;}};function Yd(a,b){var c=new qc;I(c,\"TestLoadImage: loading \"+a);var d=new Image;d.onload=ia(Zd,c,d,\"TestLoadImage: loaded\",!0,b);d.onerror=ia(Zd,c,d,\"TestLoadImage: error\",!1,b);d.onabort=ia(Zd,c,d,\"TestLoadImage: abort\",!1,b);d.ontimeout=ia(Zd,c,d,\"TestLoadImage: timeout\",!1,b);k.setTimeout(function(){if(d.ontimeout)d.ontimeout()},1E4);d.src=a}function Zd(a,b,c,d,e){try{I(a,c),b.onload=null,b.onerror=null,b.onabort=null,b.ontimeout=null,e(d)}catch(f){sc(a,f)}};function U(a){B.call(this);this.headers=new O;this.G=a||null;this.f=!1;this.F=this.a=null;this.M=this.s=\"\";this.j=0;this.g=\"\";this.h=this.I=this.o=this.H=!1;this.l=0;this.B=null;this.N=$d;this.C=this.m=!1}u(U,B);var $d=\"\";U.prototype.b=oc(\"goog.net.XhrIo\");var ae=/^https?$/i,be=[\"POST\",\"PUT\"];g=U.prototype;\ng.ta=function(a,b,c,d){if(this.a)throw Error(\"[goog.net.XhrIo] Object is active with another request=\"+this.s+\"; newUri=\"+a);b=b?b.toUpperCase():\"GET\";this.s=a;this.g=\"\";this.j=0;this.M=b;this.H=!1;this.f=!0;this.a=this.G?Fc(this.G):Fc(Dc);this.F=this.G?Bc(this.G):Bc(Dc);this.a.onreadystatechange=r(this.Ma,this);try{H(this.b,V(this,\"Opening Xhr\")),this.I=!0,this.a.open(b,String(a),!0),this.I=!1}catch(f){H(this.b,V(this,\"Error opening Xhr: \"+f.message));ce(this,f);return}a=c||\"\";var e=new O(this.headers);\nd&&Zc(d,function(a,b){e.set(b,a)});d=ua(e.O());c=k.FormData&&a instanceof k.FormData;!(0<=sa(be,b))||d||c||e.set(\"Content-Type\",\"application/x-www-form-urlencoded;charset=utf-8\");e.forEach(function(a,b){this.a.setRequestHeader(b,a)},this);this.N&&(this.a.responseType=this.N);\"withCredentials\"in this.a&&this.a.withCredentials!==this.m&&(this.a.withCredentials=this.m);try{de(this),0<this.l&&(this.C=ee(this.a),H(this.b,V(this,\"Will abort after \"+this.l+\"ms if incomplete, xhr2 \"+this.C)),this.C?(this.a.timeout=\nthis.l,this.a.ontimeout=r(this.Ja,this)):this.B=Zb(this.Ja,this.l,this)),H(this.b,V(this,\"Sending request\")),this.o=!0,this.a.send(a),this.o=!1}catch(f){H(this.b,V(this,\"Send error: \"+f.message)),ce(this,f)}};function ee(a){return z&&Ua(9)&&\"number\"==typeof a.timeout&&void 0!==a.ontimeout}function va(a){return\"content-type\"==a.toLowerCase()}\ng.Ja=function(){\"undefined\"!=typeof goog&&this.a&&(this.g=\"Timed out after \"+this.l+\"ms, aborting\",this.j=8,H(this.b,V(this,this.g)),this.dispatchEvent(\"timeout\"),this.abort(8))};function ce(a,b){a.f=!1;a.a&&(a.h=!0,a.a.abort(),a.h=!1);a.g=b;a.j=5;fe(a);ge(a)}function fe(a){a.H||(a.H=!0,a.dispatchEvent(\"complete\"),a.dispatchEvent(\"error\"))}\ng.abort=function(a){this.a&&this.f&&(H(this.b,V(this,\"Aborting\")),this.f=!1,this.h=!0,this.a.abort(),this.h=!1,this.j=a||7,this.dispatchEvent(\"complete\"),this.dispatchEvent(\"abort\"),ge(this))};g.w=function(){this.a&&(this.f&&(this.f=!1,this.h=!0,this.a.abort(),this.h=!1),ge(this,!0));U.L.w.call(this)};g.Ma=function(){this.i||(this.I||this.o||this.h?he(this):this.bb())};g.bb=function(){he(this)};\nfunction he(a){if(a.f&&\"undefined\"!=typeof goog)if(a.F[1]&&4==N(a)&&2==a.V())H(a.b,V(a,\"Local request error detected and ignored\"));else if(a.o&&4==N(a))Zb(a.Ma,0,a);else if(a.dispatchEvent(\"readystatechange\"),4==N(a)){H(a.b,V(a,\"Request complete\"));a.f=!1;try{var b=a.V();a:switch(b){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var c=!0;break a;default:c=!1}var d;if(!(d=c)){var e;if(e=0===b){var f=String(a.s).match(cd)[1]||null;if(!f&&k.self&&k.self.location){var h=k.self.location.protocol;\nf=h.substr(0,h.length-1)}e=!ae.test(f?f.toLowerCase():\"\")}d=e}d?(a.dispatchEvent(\"complete\"),a.dispatchEvent(\"success\")):(a.j=6,a.g=a.Ha()+\" [\"+a.V()+\"]\",fe(a))}finally{ge(a)}}}function ge(a,b){if(a.a){de(a);var c=a.a,d=a.F[0]?aa:null;a.a=null;a.F=null;b||a.dispatchEvent(\"ready\");try{c.onreadystatechange=d}catch(e){(a=a.b)&&F(a,\"Problem encountered resetting onreadystatechange: \"+e.message)}}}function de(a){a.a&&a.C&&(a.a.ontimeout=null);\"number\"==typeof a.B&&(k.clearTimeout(a.B),a.B=null)}\nfunction N(a){return a.a?a.a.readyState:0}g.V=function(){try{return 2<N(this)?this.a.status:-1}catch(a){return-1}};g.Ha=function(){try{return 2<N(this)?this.a.statusText:\"\"}catch(a){return H(this.b,\"Can not get status: \"+a.message),\"\"}};g.U=function(){try{return this.a?this.a.responseText:\"\"}catch(a){return H(this.b,\"Can not get responseText: \"+a.message),\"\"}};\ng.Za=function(a){if(this.a){var b=this.a.responseText;a&&0==b.indexOf(a)&&(b=b.substring(a.length));a:{a=b;if(k.JSON)try{var c=k.JSON.parse(a);break a}catch(d){}c=Eb(a)}return c}};g.Ga=function(){return this.j};g.$a=function(){return l(this.g)?this.g:String(this.g)};function V(a,b){return b+\" [\"+a.M+\" \"+a.s+\" \"+a.V()+\"]\"};function ie(a){var b=\"\";Ba(a,function(a,d){b+=d;b+=\":\";b+=a;b+=\"\\r\\n\"});return b}function je(a,b,c){a:{for(d in c){var d=!1;break a}d=!0}if(d)return a;c=ie(c);if(l(a)){b=encodeURIComponent(String(b));c=null!=c?\"=\"+encodeURIComponent(String(c)):\"\";if(b+=c){c=a.indexOf(\"#\");0>c&&(c=a.length);d=a.indexOf(\"?\");if(0>d||d>c){d=c;var e=\"\"}else e=a.substring(d+1,c);a=[a.substr(0,d),e,a.substr(c)];c=a[1];a[1]=b?c?c+\"&\"+b:b:c;a=a[0]+(a[1]?\"?\"+a[1]:\"\")+a[2]}return a}R(a,b,c);return a};function ke(a,b,c){this.za=b||0;this.Ba=0;this.h=[];this.l=[];this.a=new qc;this.J=c||new Md;this.ia=this.ya=this.H=this.ja=this.b=this.N=this.j=this.ha=this.f=this.P=this.i=null;this.Va=this.I=0;this.ka=this.C=this.s=this.m=this.o=this.c=null;this.v=this.Aa=this.S=-1;this.ga=this.B=this.G=0;this.T=a&&a.supportsCrossDomainXhr||!1;this.M=\"\";this.g=new Od(a&&a.concurrentRequestLimit);this.la=new Wd;this.F=a&&void 0!==a.backgroundChannelTest?a.backgroundChannelTest:!0;this.Ua=a&&a.fastHandshake||!1}\ng=ke.prototype;g.oa=8;g.D=1;function le(a){I(a.a,\"disconnect()\");me(a);if(3==a.D){var b=a.I++,c=M(a.H);R(c,\"SID\",a.M);R(c,\"RID\",b);R(c,\"TYPE\",\"terminate\");ne(a,c);b=new L(a,a.a,0,b,void 0);b.I=2;b.l=Mc(M(c));c=!1;k.navigator&&k.navigator.sendBeacon&&(c=k.navigator.sendBeacon(b.l.toString(),\"\"));c||((new Image).src=b.l);b.H=t();Pc(b)}oe(a)}\nfunction me(a){a.C&&(a.C.abort(),a.C=null);a.b&&(a.b.cancel(),a.b=null);a.m&&(k.clearTimeout(a.m),a.m=null);pe(a);a.g.cancel();a.o&&(k.clearTimeout(a.o),a.o=null)}function qe(a,b){if(1E3==a.h.length){var c=\"Already have 1000 queued maps upon queueing \"+Fb(b),d=a.a.a;d&&F(d,c)}a.h.push(new Ud(a.Va++,b));3==a.D&&re(a)}g.Ka=function(){return 0==this.D};function re(a){Sd(a.g)||a.o||(a.o=xc(r(a.Pa,a),0),a.G=0)}\ng.Pa=function(a){this.o=null;I(this.a,\"startForwardChannel_\");if(1==this.D)if(a)(a=this.a.a)&&F(a,\"Not supposed to retry the open\");else{I(this.a,\"open_()\");this.I=Math.floor(1E5*Math.random());a=this.I++;var b=new L(this,this.a,0,a,void 0),c=this.i;this.P&&(c?(c=Ea(c),Ga(c,this.P)):c=this.P);null===this.f&&(b.h=c);var d=se(this),e=M(this.H);R(e,\"RID\",a);0<this.za&&R(e,\"CVER\",this.za);this.F&&this.j&&R(e,\"X-HTTP-Session-Id\",this.j);ne(this,e);this.f&&c&&je(e,this.f,c);Rd(this.g,b);this.Ua?(R(e,\"$req\",\nd),Lc(b,e,null)):Lc(b,e,d);this.D=2}else 3==this.D&&(a?te(this,a):0==this.h.length?I(this.a,\"startForwardChannel_ returned: nothing to send\"):Sd(this.g)?(a=this.a.a)&&F(a,\"startForwardChannel_ returned: connection already in progress\"):(te(this),I(this.a,\"startForwardChannel_ finished, sent request\")))};\nfunction te(a,b){if(b){a.h=a.l.concat(a.h);a.l.length=0;var c=a.I-1}else c=a.I++;b=se(a);var d=M(a.H);R(d,\"SID\",a.M);R(d,\"RID\",c);R(d,\"AID\",a.S);ne(a,d);a.f&&a.i&&je(d,a.f,a.i);c=new L(a,a.a,0,c,a.G+1);null===a.f&&(c.h=a.i);c.setTimeout(Math.round(1E4)+Math.round(1E4*Math.random()));Rd(a.g,c);Lc(c,d,b)}function ne(a,b){a.c&&Zc({},function(a,d){R(b,d,a)})}\nfunction se(a){var b=Math.min(a.h.length,1E3),c=a.c?r(a.c.Wa,a.c,a):null,d=a.h,e=[\"count=\"+b];if(0<b){var f=d[0].a;e.push(\"ofs=\"+f)}else f=0;for(var h=0;h<b;h++){var m=d[h].a,v=d[h].b;m-=f;try{Xd(v,e,\"req\"+m+\"_\")}catch(Ra){c&&c(v)}}c=e.join(\"&\");a.l=a.l.concat(a.h.splice(0,b));return c}function ue(a){if(!a.b&&!a.m){a.ga=1;var b=a.Oa;Tb||Ub();Wb||(Tb(),Wb=!0);var c=Pb,d=C.get();d.set(b,a);c.b?c.b.next=d:c.a=d;c.b=d;a.B=0}}\nfunction ve(a){if(a.b||a.m)return(a=a.a.a)&&F(a,\"Request already in progress\"),!1;if(3<=a.B)return!1;I(a.a,\"Going to retry GET\");a.ga++;a.m=xc(r(a.Oa,a),we(a,a.B));a.B++;return!0}\ng.Oa=function(){this.m=null;I(this.a,\"Creating new HttpRequest\");this.b=new L(this,this.a,0,\"rpc\",this.ga);null===this.f&&(this.b.h=this.i);this.b.N=0;var a=M(this.ya);R(a,\"RID\",\"rpc\");R(a,\"SID\",this.M);R(a,\"CI\",this.ka?\"0\":\"1\");R(a,\"AID\",this.S);ne(this,a);R(a,\"TYPE\",\"xmlhttp\");this.f&&this.i&&je(a,this.f,this.i);Oc(this.b,a,!0,this.ia);I(this.a,\"New Request created\")};\nfunction Jd(a,b,c){I(a.a,\"Test Connection Finished\");var d=b.m;d&&Qd(a.g,d);a.ka=c;a.v=b.f;I(a.a,\"connectChannel_()\");a.H=xe(a,a.ja);re(a)}function Ld(a,b){I(a.a,\"Test Connection Failed\");a.v=b.f;W(a,2)}\ng.Na=function(a,b){if(0!=this.D&&(this.b==a||Td(this.g,a)))if(this.v=a.v,Td(this.g,a)&&3==this.D){try{var c=this.la.a.parse(b)}catch(f){c=null}if(n(c)&&3==c.length)if(b=c,0==b[0])a:if(I(this.a,\"Server claims our backchannel is missing.\"),this.m)I(this.a,\"But we are currently starting the request.\");else{if(this.b)if(this.b.H+3E3<a.H)pe(this),this.b.cancel(),this.b=null;else break a;else(a=this.a.a)&&G(a,\"We do not have a BackChannel established\");ve(this);K()}else this.Aa=b[1],a=this.Aa-this.S,0<\na&&(b=b[2],I(this.a,b+\" bytes (in \"+a+\" arrays) are outstanding on the BackChannel\"),37500>b&&this.ka&&0==this.B&&!this.s&&(this.s=xc(r(this.ab,this),6E3)));else I(this.a,\"Bad POST response data returned\"),W(this,11)}else if(this.b==a&&pe(this),!/^[\\s\\xa0]*$/.test(b))for(b=c=this.la.a.parse(b),c=0;c<b.length;c++){var d=b[c];this.S=d[0];d=d[1];if(2==this.D)if(\"c\"==d[0]){this.M=d[1];this.ia=d[2];var e=d[3];null!=e&&(this.oa=e,I(this.a,\"VER=\"+this.oa));d=d[4];null!=d&&(this.Ba=d,I(this.a,\"SVER=\"+this.Ba));\nthis.F&&(d=a.a)&&((e=d.a?d.a.getResponseHeader(\"X-Client-Wire-Protocol\"):null)&&Qd(this.g,e),this.j&&((d=d.a?d.a.getResponseHeader(\"X-HTTP-Session-Id\"):null)?(this.N=d,R(this.H,this.j,d)):(d=this.a.a)&&G(d,\"Missing X_HTTP_SESSION_ID in the handshake response\")));this.D=3;this.c&&this.c.Fa(this);this.ya=Kd(this,this.ia,this.ja);ue(this)}else\"stop\"!=d[0]&&\"close\"!=d[0]||W(this,7);else 3==this.D&&(\"stop\"==d[0]||\"close\"==d[0]?\"stop\"==d[0]?W(this,7):le(this):\"noop\"!=d[0]&&this.c&&this.c.Ea(this,d),this.B=\n0)}};g.ab=function(){null!=this.s&&(this.s=null,this.b.cancel(),this.b=null,ve(this),K())};function pe(a){null!=a.s&&(k.clearTimeout(a.s),a.s=null)}\ng.wa=function(a){I(this.a,\"Request complete\");if(this.b==a){pe(this);this.b=null;var b=2}else if(Td(this.g,a))b=this.g,b.b&&b.b==a?b.b=null:b.a&&b.a.contains(a)&&bd(b.a.a,T(a)),b=1;else return;this.v=a.v;if(0!=this.D)if(a.c)1==b?(t(),J.dispatchEvent(new wc(J)),re(this),this.l.length=0):ue(this);else{var c=a.i;if(3==c||0==c&&0<this.v)I(this.a,\"Not retrying due to error type\");else{I(this.a,\"Maybe retrying, last error: \"+Ic(c,this.v));var d;if(d=1==b)Sd(this.g)||this.o?((a=this.a.a)&&F(a,\"Request already in progress\"),\nd=!1):1==this.D||2==this.D||2<=this.G?d=!1:(I(this.a,\"Going to retry POST\"),this.o=xc(r(this.Pa,this,a),we(this,this.G)),this.G++,d=!0);if(d||2==b&&ve(this))return;I(this.a,\"Exceeded max number of retries\")}I(this.a,\"Error: HTTP request failed\");switch(c){case 1:W(this,5);break;case 4:W(this,10);break;case 3:W(this,6);break;default:W(this,2)}}};function we(a,b){var c=5E3+Math.floor(1E4*Math.random());a.sa()||(I(a.a,\"Inactive channel\"),c*=2);return c*b}\nfunction W(a,b){I(a.a,\"Error code \"+b);if(2==b){var c=null;a.c&&(c=null);var d=r(a.ib,a);c||(c=new Q(\"//www.google.com/images/cleardot.gif\"),k.location&&\"http\"==k.location.protocol||ed(c,\"https\"),Mc(c));Yd(c.toString(),d)}else K();I(a.a,\"HttpChannel: error - \"+b);a.D=0;a.c&&a.c.Da(a,b);oe(a);me(a)}g.ib=function(a){a?I(this.a,\"Successfully pinged google.com\"):I(this.a,\"Failed to ping google.com\");K()};\nfunction oe(a){a.D=0;a.v=-1;if(a.c)if(0==a.l.length&&0==a.h.length)a.c.na(a);else{I(a.a,\"Number of undelivered maps, pending: \"+a.l.length+\", outgoing: \"+a.h.length);var b=ya(a.l),c=ya(a.h);a.l.length=0;a.h.length=0;a.c.na(a,b,c)}}function xe(a,b){b=ye(a,null,b);I(a.a,\"GetForwardChannelUri: \"+b);return b}function Kd(a,b,c){b=ye(a,a.fa()?b:null,c);I(a.a,\"GetBackChannelUri: \"+b);return b}\nfunction ye(a,b,c){var d=td(c);if(\"\"!=d.b)b&&fd(d,b+\".\"+d.b),gd(d,d.i);else{var e=k.location,f;b?f=b+\".\"+e.hostname:f=e.hostname;d=ud(e.protocol,f,e.port,c)}a.ha&&Ba(a.ha,function(a,b){R(d,b,a)});b=a.j;c=a.N;b&&c&&R(d,b,c);R(d,\"VER\",a.oa);ne(a,d);return d}g.ra=function(a){if(a&&!this.T)throw Error(\"Can't create secondary domain capable XhrIo object.\");a=new U;a.m=this.T;return a};g.sa=function(){return!!this.c&&!0};g.fa=function(){return this.T};new Cd;function ze(){}g=ze.prototype;g.Fa=function(){};\ng.Ea=function(){};g.Da=function(){};g.na=function(){};g.Wa=function(){};function Ae(a){for(var b=arguments[0],c=1;c<arguments.length;c++){var d=arguments[c];if(0==d.lastIndexOf(\"/\",0))b=d;else{var e;(e=\"\"==b)||(e=b.length-1,e=0<=e&&b.indexOf(\"/\",e)==e);e?b+=d:b+=\"/\"+d}}return b};function Be(){if(z&&!(10<=Number(Va)))throw Error(\"Environmental error: no available transport.\");}Be.prototype.a=function(a,b){return new X(a,b)};\nfunction X(a,b){B.call(this);this.a=new ke(b,20);this.b=a;this.s=b&&b.testUrl?b.testUrl:Ae(this.b,\"test\");this.f=oc(\"goog.labs.net.webChannel.WebChannelBaseTransport\");this.g=b&&b.messageUrlParams||null;a=b&&b.messageHeaders||null;b&&b.clientProtocolHeaderRequired&&(a?a[\"X-Client-Protocol\"]=\"webchannel\":a={\"X-Client-Protocol\":\"webchannel\"});this.a.i=a;this.a.P=b&&b.initMessageHeaders||null;(a=b&&b.httpHeadersOverwriteParam)&&!/^[\\s\\xa0]*$/.test(a)&&(this.a.f=a);this.o=b&&b.supportsCrossDomainXhr||\n!1;this.m=b&&b.sendRawJson||!1;(b=b&&b.httpSessionIdParam)&&!/^[\\s\\xa0]*$/.test(b)&&(this.a.j=b,a=this.g,null!==a&&b in a&&(a=this.g,b in a&&delete a[b],(a=this.f)&&G(a,\"Ignore httpSessionIdParam also specified with messageUrlParams: \"+b)));this.h=new Ce(this)}u(X,B);\nX.prototype.j=function(){this.a.c=this.h;this.o&&(this.a.T=!0);var a=this.a,b=this.s,c=this.b,d=this.g||void 0;I(a.a,\"connect()\");K();a.ja=c;a.ha=d||{};a.F&&(I(a.a,\"connect() bypassed channel-test.\"),a.J.b=[],a.J.a=!1);I(a.a,\"connectTest_()\");a.C=new Hd(a,a.a);null===a.f&&(a.C.i=a.i);c=b;a.f&&a.i&&(c=je(b,a.f,a.i));a=a.C;a.l=c;b=xe(a.a,a.l);K();(c=a.a.J.b)?(a.g=c[0],a.R=1,Id(a)):(Qc(b,\"MODE\",\"init\"),!a.a.F&&a.a.j&&Qc(b,\"X-HTTP-Session-Id\",a.a.j),a.c=new L(a,a.b,0,void 0,void 0),a.c.h=a.i,Oc(a.c,b,\n!1,null),a.R=0)};X.prototype.close=function(){le(this.a)};X.prototype.l=function(a){if(this.m){var b={};b.__data__=Fb(a);qe(this.a,b)}else qe(this.a,a)};X.prototype.w=function(){this.a.c=null;delete this.h;le(this.a);delete this.a;X.L.w.call(this)};function De(a){Fd.call(this);this.data=a}u(De,Fd);function Ee(){Gd.call(this);this.status=1}u(Ee,Gd);function Ce(a){this.a=a}u(Ce,ze);Ce.prototype.Fa=function(){pc(this.a.f,\"WebChannel opened on \"+this.a.b);this.a.dispatchEvent(\"a\")};\nCe.prototype.Ea=function(a,b){this.a.dispatchEvent(new De(b))};Ce.prototype.Da=function(a,b){pc(this.a.f,\"WebChannel aborted on \"+this.a.b+\" due to channel error: \"+b);this.a.dispatchEvent(new Ee)};Ce.prototype.na=function(){pc(this.a.f,\"WebChannel closed on \"+this.a.b);this.a.dispatchEvent(\"b\")};var Fe=ia(function(a,b){function c(){}c.prototype=a.prototype;var d=new c;a.apply(d,Array.prototype.slice.call(arguments,1));return d},Be);function Ge(){this.b=[];this.a=[]}function He(a){0==a.b.length&&(a.b=a.a,a.b.reverse(),a.a=[]);return a.b.pop()}Ge.prototype.u=function(){return this.b.length+this.a.length};Ge.prototype.contains=function(a){return 0<=sa(this.b,a)||0<=sa(this.a,a)};Ge.prototype.A=function(){for(var a=[],b=this.b.length-1;0<=b;--b)a.push(this.b[b]);var c=this.a.length;for(b=0;b<c;++b)a.push(this.a[b]);return a};function Ie(a,b){w.call(this);this.h=a||0;this.c=b||10;if(this.h>this.c)throw Error(Je);this.a=new Ge;this.b=new Nd;this.g=null;this.aa()}u(Ie,w);var Je=\"[goog.structs.Pool] Min can not be greater than max\";g=Ie.prototype;g.ca=function(){var a=t();if(!(null!=this.g&&0>a-this.g)){for(var b;0<this.a.u()&&(b=He(this.a),!this.va(b));)this.aa();!b&&this.u()<this.c&&(b=this.qa());b&&(this.g=a,this.b.a.set(T(b),b));return b}};g.hb=function(a){return bd(this.b.a,T(a))?(this.ma(a),!0):!1};\ng.ma=function(a){bd(this.b.a,T(a));this.va(a)&&this.u()<this.c?this.a.a.push(a):Ke(a)};g.aa=function(){for(var a=this.a;this.u()<this.h;){var b=this.qa();a.a.push(b)}for(;this.u()>this.c&&0<this.a.u();)Ke(He(a))};g.qa=function(){return{}};function Ke(a){if(\"function\"==typeof a.Y)a.Y();else for(var b in a)a[b]=null}g.va=function(a){return\"function\"==typeof a.Xa?a.Xa():!0};g.contains=function(a){return this.a.contains(a)||this.b.contains(a)};g.u=function(){return this.a.u()+this.b.u()};\ng.w=function(){Ie.L.w.call(this);if(0<this.b.u())throw Error(\"[goog.structs.Pool] Objects not released\");delete this.b;for(var a=this.a;0!=a.b.length||0!=a.a.length;)Ke(He(a));delete this.a};function Le(a,b){this.a=a;this.b=b};function Me(a){this.a=[];if(a)a:{if(a instanceof Me){var b=a.O();a=a.A();if(0>=this.u()){for(var c=this.a,d=0;d<b.length;d++)c.push(new Le(b[d],a[d]));break a}}else b=Da(a),a=Ca(a);for(d=0;d<b.length;d++)Ne(this,b[d],a[d])}}function Ne(a,b,c){var d=a.a;d.push(new Le(b,c));b=d.length-1;a=a.a;for(c=a[b];0<b;)if(d=b-1>>1,a[d].a>c.a)a[b]=a[d],b=d;else break;a[b]=c}Me.prototype.A=function(){for(var a=this.a,b=[],c=a.length,d=0;d<c;d++)b.push(a[d].b);return b};\nMe.prototype.O=function(){for(var a=this.a,b=[],c=a.length,d=0;d<c;d++)b.push(a[d].a);return b};Me.prototype.u=function(){return this.a.length};function Oe(){Me.call(this)}u(Oe,Me);function Y(a,b){this.f=new Oe;Ie.call(this,a,b)}u(Y,Ie);g=Y.prototype;g.ca=function(a,b){if(!a)return Y.L.ca.call(this);Ne(this.f,void 0!==b?b:100,a);this.ua()};g.ua=function(){for(var a=this.f;0<a.u();){var b=this.ca();if(b){var c=a,d=c.a,e=d.length;var f=d[0];if(0>=e)f=void 0;else{if(1==e)wa(d);else{d[0]=d.pop();d=0;c=c.a;e=c.length;for(var h=c[d];d<e>>1;){var m=2*d+1,v=2*d+2;m=v<e&&c[v].a<c[m].a?v:m;if(c[m].a>h.a)break;c[d]=c[m];d=m}c[d]=h}f=f.b}f.apply(this,[b])}else break}};\ng.ma=function(a){Y.L.ma.call(this,a);this.ua()};g.aa=function(){Y.L.aa.call(this);this.ua()};g.w=function(){Y.L.w.call(this);k.clearTimeout(void 0);wa(this.f.a);this.f=null};function Z(a,b,c,d){this.l=a;this.j=!!d;Y.call(this,b,c)}u(Z,Y);Z.prototype.qa=function(){var a=new U,b=this.l;b&&b.forEach(function(b,d){a.headers.set(d,b)});this.j&&(a.m=!0);return a};Z.prototype.va=function(a){return!a.i&&!a.a};Be.prototype.createWebChannel=Be.prototype.a;X.prototype.send=X.prototype.l;X.prototype.open=X.prototype.j;X.prototype.close=X.prototype.close;yc.NO_ERROR=0;yc.TIMEOUT=8;yc.HTTP_ERROR=6;zc.COMPLETE=\"complete\";Dd.EventType=Ed;Ed.OPEN=\"a\";Ed.CLOSE=\"b\";Ed.ERROR=\"c\";Ed.MESSAGE=\"d\";B.prototype.listen=B.prototype.$;Z.prototype.getObject=Z.prototype.ca;Z.prototype.releaseObject=Z.prototype.hb;U.prototype.listenOnce=U.prototype.Ia;U.prototype.getLastError=U.prototype.$a;U.prototype.getLastErrorCode=U.prototype.Ga;\nU.prototype.getStatus=U.prototype.V;U.prototype.getStatusText=U.prototype.Ha;U.prototype.getResponseJson=U.prototype.Za;U.prototype.getResponseText=U.prototype.U;U.prototype.getResponseText=U.prototype.U;U.prototype.send=U.prototype.ta;module.exports={createWebChannelTransport:Fe,ErrorCode:yc,EventType:zc,WebChannel:Dd,XhrIoPool:Z};}).call(typeof window !== 'undefined' ? window : this)\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../webchannel-wrapper/dist/index.js\n// module id = 115\n// module chunks = 1"],"sourceRoot":""}