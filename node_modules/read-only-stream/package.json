{
  "_args": [
    [
      {
        "raw": "read-only-stream@^2.0.0",
        "scope": null,
        "escapedName": "read-only-stream",
        "name": "read-only-stream",
        "rawSpec": "^2.0.0",
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "/home/mario/projects/omnia/meteor_abbashare/node_modules/browserify"
    ]
  ],
  "_from": "read-only-stream@>=2.0.0 <3.0.0",
  "_id": "read-only-stream@2.0.0",
  "_inCache": true,
  "_location": "/read-only-stream",
  "_nodeVersion": "2.4.0",
  "_npmUser": {
    "name": "substack",
    "email": "substack@gmail.com"
  },
  "_npmVersion": "3.2.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "read-only-stream@^2.0.0",
    "scope": null,
    "escapedName": "read-only-stream",
    "name": "read-only-stream",
    "rawSpec": "^2.0.0",
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/browserify"
  ],
  "_resolved": "https://registry.npmjs.org/read-only-stream/-/read-only-stream-2.0.0.tgz",
  "_shasum": "2724fd6a8113d73764ac288d4386270c1dbf17f0",
  "_shrinkwrap": null,
  "_spec": "read-only-stream@^2.0.0",
  "_where": "/home/mario/projects/omnia/meteor_abbashare/node_modules/browserify",
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "bugs": {
    "url": "https://github.com/substack/read-only-stream/issues"
  },
  "dependencies": {
    "readable-stream": "^2.0.2"
  },
  "description": "wrap a readable/writable stream to be read-only",
  "devDependencies": {
    "concat-stream": "^1.4.6",
    "covert": "^1.0.0",
    "tape": "^4.2.0",
    "through": "^2.3.4",
    "through2": "^2.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "2724fd6a8113d73764ac288d4386270c1dbf17f0",
    "tarball": "https://registry.npmjs.org/read-only-stream/-/read-only-stream-2.0.0.tgz"
  },
  "gitHead": "406ff9a52ad9f80d85b6037e09472ba4a6527576",
  "homepage": "https://github.com/substack/read-only-stream",
  "keywords": [
    "stream",
    "readonly"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "substack",
      "email": "mail@substack.net"
    }
  ],
  "name": "read-only-stream",
  "optionalDependencies": {},
  "readme": "# read-only-stream\n\nwrap a readable/writable stream to be read-only\nto prevent mucking up the input side\n\n[![build status](https://secure.travis-ci.org/substack/read-only-stream.png)](http://travis-ci.org/substack/read-only-stream)\n\n# example\n\nSuppose you have a module that uses a readable/writable stream internally but\nwant to expose just the readable part of that internal stream. This is common if\nyou use the writable side internally and expose the readable side as the\ninterface.\n\nNow we can write some code like this with a `through` stream internally for\nconvenience:\n\n``` js\nvar through = require('through2');\nvar readonly = require('read-only-stream');\n\nmodule.exports = function () {\n    var stream = through();\n    stream.end('wooooo\\n');\n    return readonly(stream);\n};\n```\n\nbut consumers won't be able to write to the input side and break the api:\n\n``` js\nvar wrap = require('./wrap.js');\nvar ro = wrap(); // can't write to `ro` and muck up internal state\nro.pipe(process.stdout);\n```\n\n# methods\n\n``` js\nvar readonly = require('read-only-stream')\n```\n\n## var ro = readonly(stream)\n\nReturn a readable stream `ro` that wraps the readable/writable `stream` argument\ngiven to only expose the readable side.\n\n`stream` can be a streams1 or streams2 stream.\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install read-only-stream\n```\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/read-only-stream.git"
  },
  "scripts": {
    "coverage": "covert test/*.js",
    "test": "tape test/*.js"
  },
  "version": "2.0.0"
}
